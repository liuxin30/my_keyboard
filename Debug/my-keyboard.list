
my-keyboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006980  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  08006b18  08006b18  00016b18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c3c  08006c3c  000201c8  2**0
                  CONTENTS
  4 .ARM          00000008  08006c3c  08006c3c  00016c3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006c44  08006c44  000201c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c44  08006c44  00016c44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c48  08006c48  00016c48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001c8  20000000  08006c4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000960  200001c8  08006e14  000201c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000800  20000b28  08006e14  00020b28  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013874  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000030f0  00000000  00000000  00033a6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000bf8  00000000  00000000  00036b60  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a88  00000000  00000000  00037758  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019540  00000000  00000000  000381e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e8fe  00000000  00000000  00051720  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000876aa  00000000  00000000  0006001e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e76c8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f5c  00000000  00000000  000e7744  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200001c8 	.word	0x200001c8
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08006b00 	.word	0x08006b00

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200001cc 	.word	0x200001cc
 80001d4:	08006b00 	.word	0x08006b00

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <IS_NOEVENT>:

/* Rules for No Event:
 * 1) (time == 0) to handle (keyevent_t){} as empty event
 * 2) Matrix(255, 255) to make TICK event available
 */
static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 && event.key.col == 255); }
 80004d8:	b480      	push	{r7}
 80004da:	b083      	sub	sp, #12
 80004dc:	af00      	add	r7, sp, #0
 80004de:	463b      	mov	r3, r7
 80004e0:	e883 0003 	stmia.w	r3, {r0, r1}
 80004e4:	88bb      	ldrh	r3, [r7, #4]
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d005      	beq.n	80004f6 <IS_NOEVENT+0x1e>
 80004ea:	787b      	ldrb	r3, [r7, #1]
 80004ec:	2bff      	cmp	r3, #255	; 0xff
 80004ee:	d104      	bne.n	80004fa <IS_NOEVENT+0x22>
 80004f0:	783b      	ldrb	r3, [r7, #0]
 80004f2:	2bff      	cmp	r3, #255	; 0xff
 80004f4:	d101      	bne.n	80004fa <IS_NOEVENT+0x22>
 80004f6:	2301      	movs	r3, #1
 80004f8:	e000      	b.n	80004fc <IS_NOEVENT+0x24>
 80004fa:	2300      	movs	r3, #0
 80004fc:	f003 0301 	and.w	r3, r3, #1
 8000500:	b2db      	uxtb	r3, r3
 8000502:	4618      	mov	r0, r3
 8000504:	370c      	adds	r7, #12
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr
	...

08000510 <send_keyboard_report>:
static report_keyboard_t *keyboard_report = &(report_keyboard_t){};
static uint8_t lock_status_prev;

extern USBD_HandleTypeDef hUsbDeviceFS;

void send_keyboard_report(void) {
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
	Send_Report(keyboard_report);
 8000514:	4b03      	ldr	r3, [pc, #12]	; (8000524 <send_keyboard_report+0x14>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	4618      	mov	r0, r3
 800051a:	f005 fdd1 	bl	80060c0 <Send_Report>
}
 800051e:	bf00      	nop
 8000520:	bd80      	pop	{r7, pc}
 8000522:	bf00      	nop
 8000524:	20000000 	.word	0x20000000

08000528 <switch_layer>:
		led_set(led);
		lock_status_prev = led;
	};
}

void switch_layer(void){
 8000528:	b480      	push	{r7}
 800052a:	af00      	add	r7, sp, #0
    if (layer == 0 ){
 800052c:	4b07      	ldr	r3, [pc, #28]	; (800054c <switch_layer+0x24>)
 800052e:	781b      	ldrb	r3, [r3, #0]
 8000530:	2b00      	cmp	r3, #0
 8000532:	d103      	bne.n	800053c <switch_layer+0x14>
        layer = 1;
 8000534:	4b05      	ldr	r3, [pc, #20]	; (800054c <switch_layer+0x24>)
 8000536:	2201      	movs	r2, #1
 8000538:	701a      	strb	r2, [r3, #0]
    }
    else{
        layer = 0;
    }
}
 800053a:	e002      	b.n	8000542 <switch_layer+0x1a>
        layer = 0;
 800053c:	4b03      	ldr	r3, [pc, #12]	; (800054c <switch_layer+0x24>)
 800053e:	2200      	movs	r2, #0
 8000540:	701a      	strb	r2, [r3, #0]
}
 8000542:	bf00      	nop
 8000544:	46bd      	mov	sp, r7
 8000546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054a:	4770      	bx	lr
 800054c:	200001e7 	.word	0x200001e7

08000550 <action_exec>:

uint8_t action_exec(keyevent_t event)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b084      	sub	sp, #16
 8000554:	af00      	add	r7, sp, #0
 8000556:	463b      	mov	r3, r7
 8000558:	e883 0003 	stmia.w	r3, {r0, r1}

    if (IS_NOEVENT(event)) { return 0; }
 800055c:	463b      	mov	r3, r7
 800055e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000562:	f7ff ffb9 	bl	80004d8 <IS_NOEVENT>
 8000566:	4603      	mov	r3, r0
 8000568:	2b00      	cmp	r3, #0
 800056a:	d001      	beq.n	8000570 <action_exec+0x20>
 800056c:	2300      	movs	r3, #0
 800056e:	e01b      	b.n	80005a8 <action_exec+0x58>

    uint8_t code = keymap_key_to_keycode(layer, event.key);
 8000570:	4b0f      	ldr	r3, [pc, #60]	; (80005b0 <action_exec+0x60>)
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	6839      	ldr	r1, [r7, #0]
 8000576:	4618      	mov	r0, r3
 8000578:	f000 fe1e 	bl	80011b8 <keymap_key_to_keycode>
 800057c:	4603      	mov	r3, r0
 800057e:	73fb      	strb	r3, [r7, #15]
    //dprint("ACTION: "); debug_action(action);

    if (code == KC_APP){
 8000580:	7bfb      	ldrb	r3, [r7, #15]
 8000582:	2b65      	cmp	r3, #101	; 0x65
 8000584:	d103      	bne.n	800058e <action_exec+0x3e>
        switch_layer();
 8000586:	f7ff ffcf 	bl	8000528 <switch_layer>
        return 0;
 800058a:	2300      	movs	r3, #0
 800058c:	e00c      	b.n	80005a8 <action_exec+0x58>
    }

    if (event.pressed) {
 800058e:	78bb      	ldrb	r3, [r7, #2]
 8000590:	2b00      	cmp	r3, #0
 8000592:	d004      	beq.n	800059e <action_exec+0x4e>
        register_code(code);
 8000594:	7bfb      	ldrb	r3, [r7, #15]
 8000596:	4618      	mov	r0, r3
 8000598:	f000 f80c 	bl	80005b4 <register_code>
 800059c:	e003      	b.n	80005a6 <action_exec+0x56>
    }
    else {
        unregister_code(code);
 800059e:	7bfb      	ldrb	r3, [r7, #15]
 80005a0:	4618      	mov	r0, r3
 80005a2:	f000 f82f 	bl	8000604 <unregister_code>
    }
    return 1;
 80005a6:	2301      	movs	r3, #1
}
 80005a8:	4618      	mov	r0, r3
 80005aa:	3710      	adds	r7, #16
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	200001e7 	.word	0x200001e7

080005b4 <register_code>:

/*
 * Utilities for actions.
 */
void register_code(uint8_t code)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	4603      	mov	r3, r0
 80005bc:	71fb      	strb	r3, [r7, #7]
    if (code == KC_NO) {
 80005be:	79fb      	ldrb	r3, [r7, #7]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d01b      	beq.n	80005fc <register_code+0x48>
        return;
    }
    else if IS_KEY(code) {
 80005c4:	79fb      	ldrb	r3, [r7, #7]
 80005c6:	2b03      	cmp	r3, #3
 80005c8:	d907      	bls.n	80005da <register_code+0x26>
 80005ca:	79fb      	ldrb	r3, [r7, #7]
 80005cc:	2ba4      	cmp	r3, #164	; 0xa4
 80005ce:	d804      	bhi.n	80005da <register_code+0x26>
        add_key(code);
 80005d0:	79fb      	ldrb	r3, [r7, #7]
 80005d2:	4618      	mov	r0, r3
 80005d4:	f000 f83e 	bl	8000654 <add_key>
 80005d8:	e011      	b.n	80005fe <register_code+0x4a>
    }
    else if IS_MOD(code) {
 80005da:	79fb      	ldrb	r3, [r7, #7]
 80005dc:	2bdf      	cmp	r3, #223	; 0xdf
 80005de:	d90e      	bls.n	80005fe <register_code+0x4a>
 80005e0:	79fb      	ldrb	r3, [r7, #7]
 80005e2:	2be7      	cmp	r3, #231	; 0xe7
 80005e4:	d80b      	bhi.n	80005fe <register_code+0x4a>
        add_mods(MOD_BIT(code));
 80005e6:	79fb      	ldrb	r3, [r7, #7]
 80005e8:	f003 0307 	and.w	r3, r3, #7
 80005ec:	2201      	movs	r2, #1
 80005ee:	fa02 f303 	lsl.w	r3, r2, r3
 80005f2:	b2db      	uxtb	r3, r3
 80005f4:	4618      	mov	r0, r3
 80005f6:	f000 fa0d 	bl	8000a14 <add_mods>
 80005fa:	e000      	b.n	80005fe <register_code+0x4a>
        return;
 80005fc:	bf00      	nop
    }
}
 80005fe:	3708      	adds	r7, #8
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}

08000604 <unregister_code>:

void unregister_code(uint8_t code)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
 800060a:	4603      	mov	r3, r0
 800060c:	71fb      	strb	r3, [r7, #7]
    if (code == KC_NO) {
 800060e:	79fb      	ldrb	r3, [r7, #7]
 8000610:	2b00      	cmp	r3, #0
 8000612:	d01b      	beq.n	800064c <unregister_code+0x48>
        return;
    }
    else if IS_KEY(code) {
 8000614:	79fb      	ldrb	r3, [r7, #7]
 8000616:	2b03      	cmp	r3, #3
 8000618:	d907      	bls.n	800062a <unregister_code+0x26>
 800061a:	79fb      	ldrb	r3, [r7, #7]
 800061c:	2ba4      	cmp	r3, #164	; 0xa4
 800061e:	d804      	bhi.n	800062a <unregister_code+0x26>
        del_key(code);
 8000620:	79fb      	ldrb	r3, [r7, #7]
 8000622:	4618      	mov	r0, r3
 8000624:	f000 f924 	bl	8000870 <del_key>
 8000628:	e011      	b.n	800064e <unregister_code+0x4a>
    }
    else if IS_MOD(code) {
 800062a:	79fb      	ldrb	r3, [r7, #7]
 800062c:	2bdf      	cmp	r3, #223	; 0xdf
 800062e:	d90e      	bls.n	800064e <unregister_code+0x4a>
 8000630:	79fb      	ldrb	r3, [r7, #7]
 8000632:	2be7      	cmp	r3, #231	; 0xe7
 8000634:	d80b      	bhi.n	800064e <unregister_code+0x4a>
        del_mods(MOD_BIT(code));
 8000636:	79fb      	ldrb	r3, [r7, #7]
 8000638:	f003 0307 	and.w	r3, r3, #7
 800063c:	2201      	movs	r2, #1
 800063e:	fa02 f303 	lsl.w	r3, r2, r3
 8000642:	b2db      	uxtb	r3, r3
 8000644:	4618      	mov	r0, r3
 8000646:	f000 f9fb 	bl	8000a40 <del_mods>
 800064a:	e000      	b.n	800064e <unregister_code+0x4a>
        return;
 800064c:	bf00      	nop
    }
}
 800064e:	3708      	adds	r7, #8
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}

08000654 <add_key>:

/* local functions */
void add_key(uint8_t code)
{
 8000654:	b480      	push	{r7}
 8000656:	b085      	sub	sp, #20
 8000658:	af00      	add	r7, sp, #0
 800065a:	4603      	mov	r3, r0
 800065c:	71fb      	strb	r3, [r7, #7]
    int8_t i = cb_head;
 800065e:	4b7f      	ldr	r3, [pc, #508]	; (800085c <add_key+0x208>)
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	73fb      	strb	r3, [r7, #15]
    int8_t empty = -1;
 8000664:	23ff      	movs	r3, #255	; 0xff
 8000666:	73bb      	strb	r3, [r7, #14]
    if (cb_count) {
 8000668:	4b7d      	ldr	r3, [pc, #500]	; (8000860 <add_key+0x20c>)
 800066a:	f993 3000 	ldrsb.w	r3, [r3]
 800066e:	2b00      	cmp	r3, #0
 8000670:	f000 80ca 	beq.w	8000808 <add_key+0x1b4>
        do {
            if (keyboard_report->keys[i] == code) {
 8000674:	4b7b      	ldr	r3, [pc, #492]	; (8000864 <add_key+0x210>)
 8000676:	681a      	ldr	r2, [r3, #0]
 8000678:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800067c:	4413      	add	r3, r2
 800067e:	789b      	ldrb	r3, [r3, #2]
 8000680:	79fa      	ldrb	r2, [r7, #7]
 8000682:	429a      	cmp	r2, r3
 8000684:	f000 80e3 	beq.w	800084e <add_key+0x1fa>
                return;
            }
            if (empty == -1 && keyboard_report->keys[i] == 0) {
 8000688:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800068c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000690:	d109      	bne.n	80006a6 <add_key+0x52>
 8000692:	4b74      	ldr	r3, [pc, #464]	; (8000864 <add_key+0x210>)
 8000694:	681a      	ldr	r2, [r3, #0]
 8000696:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800069a:	4413      	add	r3, r2
 800069c:	789b      	ldrb	r3, [r3, #2]
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d101      	bne.n	80006a6 <add_key+0x52>
                empty = i;
 80006a2:	7bfb      	ldrb	r3, [r7, #15]
 80006a4:	73bb      	strb	r3, [r7, #14]
            }
            i = RO_INC(i);
 80006a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006aa:	1c5a      	adds	r2, r3, #1
 80006ac:	4b6e      	ldr	r3, [pc, #440]	; (8000868 <add_key+0x214>)
 80006ae:	fb83 3102 	smull	r3, r1, r3, r2
 80006b2:	17d3      	asrs	r3, r2, #31
 80006b4:	1ac9      	subs	r1, r1, r3
 80006b6:	460b      	mov	r3, r1
 80006b8:	005b      	lsls	r3, r3, #1
 80006ba:	440b      	add	r3, r1
 80006bc:	005b      	lsls	r3, r3, #1
 80006be:	1ad1      	subs	r1, r2, r3
 80006c0:	460b      	mov	r3, r1
 80006c2:	73fb      	strb	r3, [r7, #15]
        } while (i != cb_tail);
 80006c4:	4b69      	ldr	r3, [pc, #420]	; (800086c <add_key+0x218>)
 80006c6:	f993 3000 	ldrsb.w	r3, [r3]
 80006ca:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80006ce:	429a      	cmp	r2, r3
 80006d0:	d1d0      	bne.n	8000674 <add_key+0x20>
        if (i == cb_tail) {
 80006d2:	4b66      	ldr	r3, [pc, #408]	; (800086c <add_key+0x218>)
 80006d4:	f993 3000 	ldrsb.w	r3, [r3]
 80006d8:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80006dc:	429a      	cmp	r2, r3
 80006de:	f040 8093 	bne.w	8000808 <add_key+0x1b4>
            if (cb_tail == cb_head) {
 80006e2:	4b62      	ldr	r3, [pc, #392]	; (800086c <add_key+0x218>)
 80006e4:	f993 2000 	ldrsb.w	r2, [r3]
 80006e8:	4b5c      	ldr	r3, [pc, #368]	; (800085c <add_key+0x208>)
 80006ea:	f993 3000 	ldrsb.w	r3, [r3]
 80006ee:	429a      	cmp	r2, r3
 80006f0:	f040 808a 	bne.w	8000808 <add_key+0x1b4>
                // buffer is full
                if (empty == -1) {
 80006f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80006f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006fc:	d11a      	bne.n	8000734 <add_key+0xe0>
                    // pop head when has no empty space
                    cb_head = RO_INC(cb_head);
 80006fe:	4b57      	ldr	r3, [pc, #348]	; (800085c <add_key+0x208>)
 8000700:	f993 3000 	ldrsb.w	r3, [r3]
 8000704:	1c5a      	adds	r2, r3, #1
 8000706:	4b58      	ldr	r3, [pc, #352]	; (8000868 <add_key+0x214>)
 8000708:	fb83 3102 	smull	r3, r1, r3, r2
 800070c:	17d3      	asrs	r3, r2, #31
 800070e:	1ac9      	subs	r1, r1, r3
 8000710:	460b      	mov	r3, r1
 8000712:	005b      	lsls	r3, r3, #1
 8000714:	440b      	add	r3, r1
 8000716:	005b      	lsls	r3, r3, #1
 8000718:	1ad1      	subs	r1, r2, r3
 800071a:	b24a      	sxtb	r2, r1
 800071c:	4b4f      	ldr	r3, [pc, #316]	; (800085c <add_key+0x208>)
 800071e:	701a      	strb	r2, [r3, #0]
                    cb_count--;
 8000720:	4b4f      	ldr	r3, [pc, #316]	; (8000860 <add_key+0x20c>)
 8000722:	f993 3000 	ldrsb.w	r3, [r3]
 8000726:	b2db      	uxtb	r3, r3
 8000728:	3b01      	subs	r3, #1
 800072a:	b2db      	uxtb	r3, r3
 800072c:	b25a      	sxtb	r2, r3
 800072e:	4b4c      	ldr	r3, [pc, #304]	; (8000860 <add_key+0x20c>)
 8000730:	701a      	strb	r2, [r3, #0]
 8000732:	e069      	b.n	8000808 <add_key+0x1b4>
                }
                else {
                    // left shift when has empty space
                    uint8_t offset = 1;
 8000734:	2301      	movs	r3, #1
 8000736:	737b      	strb	r3, [r7, #13]
                    i = RO_INC(empty);
 8000738:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800073c:	1c5a      	adds	r2, r3, #1
 800073e:	4b4a      	ldr	r3, [pc, #296]	; (8000868 <add_key+0x214>)
 8000740:	fb83 3102 	smull	r3, r1, r3, r2
 8000744:	17d3      	asrs	r3, r2, #31
 8000746:	1ac9      	subs	r1, r1, r3
 8000748:	460b      	mov	r3, r1
 800074a:	005b      	lsls	r3, r3, #1
 800074c:	440b      	add	r3, r1
 800074e:	005b      	lsls	r3, r3, #1
 8000750:	1ad1      	subs	r1, r2, r3
 8000752:	460b      	mov	r3, r1
 8000754:	73fb      	strb	r3, [r7, #15]
                    do {
                        if (keyboard_report->keys[i] != 0) {
 8000756:	4b43      	ldr	r3, [pc, #268]	; (8000864 <add_key+0x210>)
 8000758:	681a      	ldr	r2, [r3, #0]
 800075a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800075e:	4413      	add	r3, r2
 8000760:	789b      	ldrb	r3, [r3, #2]
 8000762:	2b00      	cmp	r3, #0
 8000764:	d023      	beq.n	80007ae <add_key+0x15a>
                            keyboard_report->keys[empty] = keyboard_report->keys[i];
 8000766:	4b3f      	ldr	r3, [pc, #252]	; (8000864 <add_key+0x210>)
 8000768:	6818      	ldr	r0, [r3, #0]
 800076a:	f997 100f 	ldrsb.w	r1, [r7, #15]
 800076e:	4b3d      	ldr	r3, [pc, #244]	; (8000864 <add_key+0x210>)
 8000770:	681a      	ldr	r2, [r3, #0]
 8000772:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000776:	4401      	add	r1, r0
 8000778:	7889      	ldrb	r1, [r1, #2]
 800077a:	4413      	add	r3, r2
 800077c:	460a      	mov	r2, r1
 800077e:	709a      	strb	r2, [r3, #2]
                            keyboard_report->keys[i] = 0;
 8000780:	4b38      	ldr	r3, [pc, #224]	; (8000864 <add_key+0x210>)
 8000782:	681a      	ldr	r2, [r3, #0]
 8000784:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000788:	4413      	add	r3, r2
 800078a:	2200      	movs	r2, #0
 800078c:	709a      	strb	r2, [r3, #2]
                            empty = RO_INC(empty);
 800078e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000792:	1c5a      	adds	r2, r3, #1
 8000794:	4b34      	ldr	r3, [pc, #208]	; (8000868 <add_key+0x214>)
 8000796:	fb83 3102 	smull	r3, r1, r3, r2
 800079a:	17d3      	asrs	r3, r2, #31
 800079c:	1ac9      	subs	r1, r1, r3
 800079e:	460b      	mov	r3, r1
 80007a0:	005b      	lsls	r3, r3, #1
 80007a2:	440b      	add	r3, r1
 80007a4:	005b      	lsls	r3, r3, #1
 80007a6:	1ad1      	subs	r1, r2, r3
 80007a8:	460b      	mov	r3, r1
 80007aa:	73bb      	strb	r3, [r7, #14]
 80007ac:	e002      	b.n	80007b4 <add_key+0x160>
                        }
                        else {
                            offset++;
 80007ae:	7b7b      	ldrb	r3, [r7, #13]
 80007b0:	3301      	adds	r3, #1
 80007b2:	737b      	strb	r3, [r7, #13]
                        }
                        i = RO_INC(i);
 80007b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007b8:	1c5a      	adds	r2, r3, #1
 80007ba:	4b2b      	ldr	r3, [pc, #172]	; (8000868 <add_key+0x214>)
 80007bc:	fb83 3102 	smull	r3, r1, r3, r2
 80007c0:	17d3      	asrs	r3, r2, #31
 80007c2:	1ac9      	subs	r1, r1, r3
 80007c4:	460b      	mov	r3, r1
 80007c6:	005b      	lsls	r3, r3, #1
 80007c8:	440b      	add	r3, r1
 80007ca:	005b      	lsls	r3, r3, #1
 80007cc:	1ad1      	subs	r1, r2, r3
 80007ce:	460b      	mov	r3, r1
 80007d0:	73fb      	strb	r3, [r7, #15]
                    } while (i != cb_tail);
 80007d2:	4b26      	ldr	r3, [pc, #152]	; (800086c <add_key+0x218>)
 80007d4:	f993 3000 	ldrsb.w	r3, [r3]
 80007d8:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80007dc:	429a      	cmp	r2, r3
 80007de:	d1ba      	bne.n	8000756 <add_key+0x102>
                    cb_tail = RO_SUB(cb_tail, offset);
 80007e0:	4b22      	ldr	r3, [pc, #136]	; (800086c <add_key+0x218>)
 80007e2:	f993 3000 	ldrsb.w	r3, [r3]
 80007e6:	461a      	mov	r2, r3
 80007e8:	7b7b      	ldrb	r3, [r7, #13]
 80007ea:	1ad3      	subs	r3, r2, r3
 80007ec:	1d9a      	adds	r2, r3, #6
 80007ee:	4b1e      	ldr	r3, [pc, #120]	; (8000868 <add_key+0x214>)
 80007f0:	fb83 3102 	smull	r3, r1, r3, r2
 80007f4:	17d3      	asrs	r3, r2, #31
 80007f6:	1ac9      	subs	r1, r1, r3
 80007f8:	460b      	mov	r3, r1
 80007fa:	005b      	lsls	r3, r3, #1
 80007fc:	440b      	add	r3, r1
 80007fe:	005b      	lsls	r3, r3, #1
 8000800:	1ad1      	subs	r1, r2, r3
 8000802:	b24a      	sxtb	r2, r1
 8000804:	4b19      	ldr	r3, [pc, #100]	; (800086c <add_key+0x218>)
 8000806:	701a      	strb	r2, [r3, #0]
                }
            }
        }
    }
    // add to tail
    keyboard_report->keys[cb_tail] = code;
 8000808:	4b16      	ldr	r3, [pc, #88]	; (8000864 <add_key+0x210>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4a17      	ldr	r2, [pc, #92]	; (800086c <add_key+0x218>)
 800080e:	f992 2000 	ldrsb.w	r2, [r2]
 8000812:	4413      	add	r3, r2
 8000814:	79fa      	ldrb	r2, [r7, #7]
 8000816:	709a      	strb	r2, [r3, #2]
    cb_tail = RO_INC(cb_tail);
 8000818:	4b14      	ldr	r3, [pc, #80]	; (800086c <add_key+0x218>)
 800081a:	f993 3000 	ldrsb.w	r3, [r3]
 800081e:	1c5a      	adds	r2, r3, #1
 8000820:	4b11      	ldr	r3, [pc, #68]	; (8000868 <add_key+0x214>)
 8000822:	fb83 3102 	smull	r3, r1, r3, r2
 8000826:	17d3      	asrs	r3, r2, #31
 8000828:	1ac9      	subs	r1, r1, r3
 800082a:	460b      	mov	r3, r1
 800082c:	005b      	lsls	r3, r3, #1
 800082e:	440b      	add	r3, r1
 8000830:	005b      	lsls	r3, r3, #1
 8000832:	1ad1      	subs	r1, r2, r3
 8000834:	b24a      	sxtb	r2, r1
 8000836:	4b0d      	ldr	r3, [pc, #52]	; (800086c <add_key+0x218>)
 8000838:	701a      	strb	r2, [r3, #0]
    cb_count++;
 800083a:	4b09      	ldr	r3, [pc, #36]	; (8000860 <add_key+0x20c>)
 800083c:	f993 3000 	ldrsb.w	r3, [r3]
 8000840:	b2db      	uxtb	r3, r3
 8000842:	3301      	adds	r3, #1
 8000844:	b2db      	uxtb	r3, r3
 8000846:	b25a      	sxtb	r2, r3
 8000848:	4b05      	ldr	r3, [pc, #20]	; (8000860 <add_key+0x20c>)
 800084a:	701a      	strb	r2, [r3, #0]
 800084c:	e000      	b.n	8000850 <add_key+0x1fc>
                return;
 800084e:	bf00      	nop
}
 8000850:	3714      	adds	r7, #20
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop
 800085c:	200001e4 	.word	0x200001e4
 8000860:	200001e6 	.word	0x200001e6
 8000864:	20000000 	.word	0x20000000
 8000868:	2aaaaaab 	.word	0x2aaaaaab
 800086c:	200001e5 	.word	0x200001e5

08000870 <del_key>:

void del_key(uint8_t code)
{
 8000870:	b480      	push	{r7}
 8000872:	b085      	sub	sp, #20
 8000874:	af00      	add	r7, sp, #0
 8000876:	4603      	mov	r3, r0
 8000878:	71fb      	strb	r3, [r7, #7]
    uint8_t i = cb_head;
 800087a:	4b61      	ldr	r3, [pc, #388]	; (8000a00 <del_key+0x190>)
 800087c:	f993 3000 	ldrsb.w	r3, [r3]
 8000880:	73fb      	strb	r3, [r7, #15]
    if (cb_count) {
 8000882:	4b60      	ldr	r3, [pc, #384]	; (8000a04 <del_key+0x194>)
 8000884:	f993 3000 	ldrsb.w	r3, [r3]
 8000888:	2b00      	cmp	r3, #0
 800088a:	f000 80b3 	beq.w	80009f4 <del_key+0x184>
        do {
            if (keyboard_report->keys[i] == code) {
 800088e:	4b5e      	ldr	r3, [pc, #376]	; (8000a08 <del_key+0x198>)
 8000890:	681a      	ldr	r2, [r3, #0]
 8000892:	7bfb      	ldrb	r3, [r7, #15]
 8000894:	4413      	add	r3, r2
 8000896:	789b      	ldrb	r3, [r3, #2]
 8000898:	79fa      	ldrb	r2, [r7, #7]
 800089a:	429a      	cmp	r2, r3
 800089c:	f040 8094 	bne.w	80009c8 <del_key+0x158>
                keyboard_report->keys[i] = 0;
 80008a0:	4b59      	ldr	r3, [pc, #356]	; (8000a08 <del_key+0x198>)
 80008a2:	681a      	ldr	r2, [r3, #0]
 80008a4:	7bfb      	ldrb	r3, [r7, #15]
 80008a6:	4413      	add	r3, r2
 80008a8:	2200      	movs	r2, #0
 80008aa:	709a      	strb	r2, [r3, #2]
                cb_count--;
 80008ac:	4b55      	ldr	r3, [pc, #340]	; (8000a04 <del_key+0x194>)
 80008ae:	f993 3000 	ldrsb.w	r3, [r3]
 80008b2:	b2db      	uxtb	r3, r3
 80008b4:	3b01      	subs	r3, #1
 80008b6:	b2db      	uxtb	r3, r3
 80008b8:	b25a      	sxtb	r2, r3
 80008ba:	4b52      	ldr	r3, [pc, #328]	; (8000a04 <del_key+0x194>)
 80008bc:	701a      	strb	r2, [r3, #0]
                if (cb_count == 0) {
 80008be:	4b51      	ldr	r3, [pc, #324]	; (8000a04 <del_key+0x194>)
 80008c0:	f993 3000 	ldrsb.w	r3, [r3]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d108      	bne.n	80008da <del_key+0x6a>
                    // reset head and tail
                    cb_tail = cb_head = 0;
 80008c8:	4b4d      	ldr	r3, [pc, #308]	; (8000a00 <del_key+0x190>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	701a      	strb	r2, [r3, #0]
 80008ce:	4b4c      	ldr	r3, [pc, #304]	; (8000a00 <del_key+0x190>)
 80008d0:	f993 2000 	ldrsb.w	r2, [r3]
 80008d4:	4b4d      	ldr	r3, [pc, #308]	; (8000a0c <del_key+0x19c>)
 80008d6:	701a      	strb	r2, [r3, #0]
                    break;
 80008d8:	e08c      	b.n	80009f4 <del_key+0x184>
                }
                if (i == cb_head) {
 80008da:	7bfb      	ldrb	r3, [r7, #15]
 80008dc:	4a48      	ldr	r2, [pc, #288]	; (8000a00 <del_key+0x190>)
 80008de:	f992 2000 	ldrsb.w	r2, [r2]
 80008e2:	4293      	cmp	r3, r2
 80008e4:	d12f      	bne.n	8000946 <del_key+0xd6>
                    // left shift when next to tail
                    do {
                        if (keyboard_report->keys[RO_INC(cb_head)] != 0) {
 80008e6:	4b48      	ldr	r3, [pc, #288]	; (8000a08 <del_key+0x198>)
 80008e8:	6818      	ldr	r0, [r3, #0]
 80008ea:	4b45      	ldr	r3, [pc, #276]	; (8000a00 <del_key+0x190>)
 80008ec:	f993 3000 	ldrsb.w	r3, [r3]
 80008f0:	1c59      	adds	r1, r3, #1
 80008f2:	4b47      	ldr	r3, [pc, #284]	; (8000a10 <del_key+0x1a0>)
 80008f4:	fb83 3201 	smull	r3, r2, r3, r1
 80008f8:	17cb      	asrs	r3, r1, #31
 80008fa:	1ad2      	subs	r2, r2, r3
 80008fc:	4613      	mov	r3, r2
 80008fe:	005b      	lsls	r3, r3, #1
 8000900:	4413      	add	r3, r2
 8000902:	005b      	lsls	r3, r3, #1
 8000904:	1aca      	subs	r2, r1, r3
 8000906:	1883      	adds	r3, r0, r2
 8000908:	789b      	ldrb	r3, [r3, #2]
 800090a:	2b00      	cmp	r3, #0
 800090c:	d119      	bne.n	8000942 <del_key+0xd2>
                            break;
                        }
                        cb_head = RO_INC(cb_head);
 800090e:	4b3c      	ldr	r3, [pc, #240]	; (8000a00 <del_key+0x190>)
 8000910:	f993 3000 	ldrsb.w	r3, [r3]
 8000914:	1c5a      	adds	r2, r3, #1
 8000916:	4b3e      	ldr	r3, [pc, #248]	; (8000a10 <del_key+0x1a0>)
 8000918:	fb83 3102 	smull	r3, r1, r3, r2
 800091c:	17d3      	asrs	r3, r2, #31
 800091e:	1ac9      	subs	r1, r1, r3
 8000920:	460b      	mov	r3, r1
 8000922:	005b      	lsls	r3, r3, #1
 8000924:	440b      	add	r3, r1
 8000926:	005b      	lsls	r3, r3, #1
 8000928:	1ad1      	subs	r1, r2, r3
 800092a:	b24a      	sxtb	r2, r1
 800092c:	4b34      	ldr	r3, [pc, #208]	; (8000a00 <del_key+0x190>)
 800092e:	701a      	strb	r2, [r3, #0]
                    } while (cb_tail != cb_head);
 8000930:	4b36      	ldr	r3, [pc, #216]	; (8000a0c <del_key+0x19c>)
 8000932:	f993 2000 	ldrsb.w	r2, [r3]
 8000936:	4b32      	ldr	r3, [pc, #200]	; (8000a00 <del_key+0x190>)
 8000938:	f993 3000 	ldrsb.w	r3, [r3]
 800093c:	429a      	cmp	r2, r3
 800093e:	d1d2      	bne.n	80008e6 <del_key+0x76>
                    break;
 8000940:	e058      	b.n	80009f4 <del_key+0x184>
                            break;
 8000942:	bf00      	nop
                    break;
 8000944:	e056      	b.n	80009f4 <del_key+0x184>
                }
                if (i == RO_DEC(cb_tail)) {
 8000946:	7bf8      	ldrb	r0, [r7, #15]
 8000948:	4b30      	ldr	r3, [pc, #192]	; (8000a0c <del_key+0x19c>)
 800094a:	f993 3000 	ldrsb.w	r3, [r3]
 800094e:	1d59      	adds	r1, r3, #5
 8000950:	4b2f      	ldr	r3, [pc, #188]	; (8000a10 <del_key+0x1a0>)
 8000952:	fb83 3201 	smull	r3, r2, r3, r1
 8000956:	17cb      	asrs	r3, r1, #31
 8000958:	1ad2      	subs	r2, r2, r3
 800095a:	4613      	mov	r3, r2
 800095c:	005b      	lsls	r3, r3, #1
 800095e:	4413      	add	r3, r2
 8000960:	005b      	lsls	r3, r3, #1
 8000962:	1aca      	subs	r2, r1, r3
 8000964:	4290      	cmp	r0, r2
 8000966:	d12f      	bne.n	80009c8 <del_key+0x158>
                    // left shift when next to tail
                    do {
                        cb_tail = RO_DEC(cb_tail);
 8000968:	4b28      	ldr	r3, [pc, #160]	; (8000a0c <del_key+0x19c>)
 800096a:	f993 3000 	ldrsb.w	r3, [r3]
 800096e:	1d5a      	adds	r2, r3, #5
 8000970:	4b27      	ldr	r3, [pc, #156]	; (8000a10 <del_key+0x1a0>)
 8000972:	fb83 3102 	smull	r3, r1, r3, r2
 8000976:	17d3      	asrs	r3, r2, #31
 8000978:	1ac9      	subs	r1, r1, r3
 800097a:	460b      	mov	r3, r1
 800097c:	005b      	lsls	r3, r3, #1
 800097e:	440b      	add	r3, r1
 8000980:	005b      	lsls	r3, r3, #1
 8000982:	1ad1      	subs	r1, r2, r3
 8000984:	b24a      	sxtb	r2, r1
 8000986:	4b21      	ldr	r3, [pc, #132]	; (8000a0c <del_key+0x19c>)
 8000988:	701a      	strb	r2, [r3, #0]
                        if (keyboard_report->keys[RO_DEC(cb_tail)] != 0) {
 800098a:	4b1f      	ldr	r3, [pc, #124]	; (8000a08 <del_key+0x198>)
 800098c:	6818      	ldr	r0, [r3, #0]
 800098e:	4b1f      	ldr	r3, [pc, #124]	; (8000a0c <del_key+0x19c>)
 8000990:	f993 3000 	ldrsb.w	r3, [r3]
 8000994:	1d59      	adds	r1, r3, #5
 8000996:	4b1e      	ldr	r3, [pc, #120]	; (8000a10 <del_key+0x1a0>)
 8000998:	fb83 3201 	smull	r3, r2, r3, r1
 800099c:	17cb      	asrs	r3, r1, #31
 800099e:	1ad2      	subs	r2, r2, r3
 80009a0:	4613      	mov	r3, r2
 80009a2:	005b      	lsls	r3, r3, #1
 80009a4:	4413      	add	r3, r2
 80009a6:	005b      	lsls	r3, r3, #1
 80009a8:	1aca      	subs	r2, r1, r3
 80009aa:	1883      	adds	r3, r0, r2
 80009ac:	789b      	ldrb	r3, [r3, #2]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d108      	bne.n	80009c4 <del_key+0x154>
                            break;
                        }
                    } while (cb_tail != cb_head);
 80009b2:	4b16      	ldr	r3, [pc, #88]	; (8000a0c <del_key+0x19c>)
 80009b4:	f993 2000 	ldrsb.w	r2, [r3]
 80009b8:	4b11      	ldr	r3, [pc, #68]	; (8000a00 <del_key+0x190>)
 80009ba:	f993 3000 	ldrsb.w	r3, [r3]
 80009be:	429a      	cmp	r2, r3
 80009c0:	d1d2      	bne.n	8000968 <del_key+0xf8>
                    break;
 80009c2:	e017      	b.n	80009f4 <del_key+0x184>
                            break;
 80009c4:	bf00      	nop
                    break;
 80009c6:	e015      	b.n	80009f4 <del_key+0x184>
                }
            }
            i = RO_INC(i);
 80009c8:	7bfb      	ldrb	r3, [r7, #15]
 80009ca:	1c5a      	adds	r2, r3, #1
 80009cc:	4b10      	ldr	r3, [pc, #64]	; (8000a10 <del_key+0x1a0>)
 80009ce:	fb83 3102 	smull	r3, r1, r3, r2
 80009d2:	17d3      	asrs	r3, r2, #31
 80009d4:	1ac9      	subs	r1, r1, r3
 80009d6:	460b      	mov	r3, r1
 80009d8:	005b      	lsls	r3, r3, #1
 80009da:	440b      	add	r3, r1
 80009dc:	005b      	lsls	r3, r3, #1
 80009de:	1ad1      	subs	r1, r2, r3
 80009e0:	460b      	mov	r3, r1
 80009e2:	73fb      	strb	r3, [r7, #15]
        } while (i != cb_tail);
 80009e4:	7bfb      	ldrb	r3, [r7, #15]
 80009e6:	4a09      	ldr	r2, [pc, #36]	; (8000a0c <del_key+0x19c>)
 80009e8:	f992 2000 	ldrsb.w	r2, [r2]
 80009ec:	4293      	cmp	r3, r2
 80009ee:	f47f af4e 	bne.w	800088e <del_key+0x1e>
    }
}
 80009f2:	e7ff      	b.n	80009f4 <del_key+0x184>
 80009f4:	bf00      	nop
 80009f6:	3714      	adds	r7, #20
 80009f8:	46bd      	mov	sp, r7
 80009fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fe:	4770      	bx	lr
 8000a00:	200001e4 	.word	0x200001e4
 8000a04:	200001e6 	.word	0x200001e6
 8000a08:	20000000 	.word	0x20000000
 8000a0c:	200001e5 	.word	0x200001e5
 8000a10:	2aaaaaab 	.word	0x2aaaaaab

08000a14 <add_mods>:

/* modifier */
void add_mods(uint8_t mods) {
 8000a14:	b480      	push	{r7}
 8000a16:	b083      	sub	sp, #12
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	71fb      	strb	r3, [r7, #7]
	keyboard_report->mods |= mods;
 8000a1e:	4b07      	ldr	r3, [pc, #28]	; (8000a3c <add_mods+0x28>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	7819      	ldrb	r1, [r3, #0]
 8000a24:	4b05      	ldr	r3, [pc, #20]	; (8000a3c <add_mods+0x28>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	79fa      	ldrb	r2, [r7, #7]
 8000a2a:	430a      	orrs	r2, r1
 8000a2c:	b2d2      	uxtb	r2, r2
 8000a2e:	701a      	strb	r2, [r3, #0]
}
 8000a30:	bf00      	nop
 8000a32:	370c      	adds	r7, #12
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr
 8000a3c:	20000000 	.word	0x20000000

08000a40 <del_mods>:
void del_mods(uint8_t mods) {
 8000a40:	b480      	push	{r7}
 8000a42:	b083      	sub	sp, #12
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	4603      	mov	r3, r0
 8000a48:	71fb      	strb	r3, [r7, #7]
	keyboard_report->mods ^= mods;
 8000a4a:	4b07      	ldr	r3, [pc, #28]	; (8000a68 <del_mods+0x28>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	7819      	ldrb	r1, [r3, #0]
 8000a50:	4b05      	ldr	r3, [pc, #20]	; (8000a68 <del_mods+0x28>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	79fa      	ldrb	r2, [r7, #7]
 8000a56:	404a      	eors	r2, r1
 8000a58:	b2d2      	uxtb	r2, r2
 8000a5a:	701a      	strb	r2, [r3, #0]
}
 8000a5c:	bf00      	nop
 8000a5e:	370c      	adds	r7, #12
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr
 8000a68:	20000000 	.word	0x20000000

08000a6c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b08a      	sub	sp, #40	; 0x28
 8000a70:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a72:	f107 0314 	add.w	r3, r7, #20
 8000a76:	2200      	movs	r2, #0
 8000a78:	601a      	str	r2, [r3, #0]
 8000a7a:	605a      	str	r2, [r3, #4]
 8000a7c:	609a      	str	r2, [r3, #8]
 8000a7e:	60da      	str	r2, [r3, #12]
 8000a80:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	613b      	str	r3, [r7, #16]
 8000a86:	4b57      	ldr	r3, [pc, #348]	; (8000be4 <MX_GPIO_Init+0x178>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	4a56      	ldr	r2, [pc, #344]	; (8000be4 <MX_GPIO_Init+0x178>)
 8000a8c:	f043 0304 	orr.w	r3, r3, #4
 8000a90:	6313      	str	r3, [r2, #48]	; 0x30
 8000a92:	4b54      	ldr	r3, [pc, #336]	; (8000be4 <MX_GPIO_Init+0x178>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	f003 0304 	and.w	r3, r3, #4
 8000a9a:	613b      	str	r3, [r7, #16]
 8000a9c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	60fb      	str	r3, [r7, #12]
 8000aa2:	4b50      	ldr	r3, [pc, #320]	; (8000be4 <MX_GPIO_Init+0x178>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	4a4f      	ldr	r2, [pc, #316]	; (8000be4 <MX_GPIO_Init+0x178>)
 8000aa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000aac:	6313      	str	r3, [r2, #48]	; 0x30
 8000aae:	4b4d      	ldr	r3, [pc, #308]	; (8000be4 <MX_GPIO_Init+0x178>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ab6:	60fb      	str	r3, [r7, #12]
 8000ab8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	60bb      	str	r3, [r7, #8]
 8000abe:	4b49      	ldr	r3, [pc, #292]	; (8000be4 <MX_GPIO_Init+0x178>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	4a48      	ldr	r2, [pc, #288]	; (8000be4 <MX_GPIO_Init+0x178>)
 8000ac4:	f043 0301 	orr.w	r3, r3, #1
 8000ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aca:	4b46      	ldr	r3, [pc, #280]	; (8000be4 <MX_GPIO_Init+0x178>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	f003 0301 	and.w	r3, r3, #1
 8000ad2:	60bb      	str	r3, [r7, #8]
 8000ad4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	607b      	str	r3, [r7, #4]
 8000ada:	4b42      	ldr	r3, [pc, #264]	; (8000be4 <MX_GPIO_Init+0x178>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	4a41      	ldr	r2, [pc, #260]	; (8000be4 <MX_GPIO_Init+0x178>)
 8000ae0:	f043 0302 	orr.w	r3, r3, #2
 8000ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae6:	4b3f      	ldr	r3, [pc, #252]	; (8000be4 <MX_GPIO_Init+0x178>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	f003 0302 	and.w	r3, r3, #2
 8000aee:	607b      	str	r3, [r7, #4]
 8000af0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED2_Pin, GPIO_PIN_SET);
 8000af2:	2201      	movs	r2, #1
 8000af4:	2102      	movs	r1, #2
 8000af6:	483c      	ldr	r0, [pc, #240]	; (8000be8 <MX_GPIO_Init+0x17c>)
 8000af8:	f000 ff88 	bl	8001a0c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, CAPLED_Pin, GPIO_PIN_SET);
 8000afc:	2201      	movs	r2, #1
 8000afe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b02:	483a      	ldr	r0, [pc, #232]	; (8000bec <MX_GPIO_Init+0x180>)
 8000b04:	f000 ff82 	bl	8001a0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ROW1_Pin, GPIO_PIN_RESET);
 8000b08:	2200      	movs	r2, #0
 8000b0a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b0e:	4836      	ldr	r0, [pc, #216]	; (8000be8 <MX_GPIO_Init+0x17c>)
 8000b10:	f000 ff7c 	bl	8001a0c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, ROW0_Pin|ROW2_Pin|ROW3_Pin|ROW4_Pin 
 8000b14:	2200      	movs	r2, #0
 8000b16:	f242 11c8 	movw	r1, #8648	; 0x21c8
 8000b1a:	4834      	ldr	r0, [pc, #208]	; (8000bec <MX_GPIO_Init+0x180>)
 8000b1c:	f000 ff76 	bl	8001a0c <HAL_GPIO_WritePin>
                          |ROW5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000b20:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000b24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b26:	2303      	movs	r3, #3
 8000b28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b2e:	f107 0314 	add.w	r3, r7, #20
 8000b32:	4619      	mov	r1, r3
 8000b34:	482e      	ldr	r0, [pc, #184]	; (8000bf0 <MX_GPIO_Init+0x184>)
 8000b36:	f000 fdcf 	bl	80016d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b3e:	2303      	movs	r3, #3
 8000b40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b42:	2300      	movs	r3, #0
 8000b44:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b46:	f107 0314 	add.w	r3, r7, #20
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	4826      	ldr	r0, [pc, #152]	; (8000be8 <MX_GPIO_Init+0x17c>)
 8000b4e:	f000 fdc3 	bl	80016d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LED2_Pin|ROW1_Pin;
 8000b52:	f44f 7381 	mov.w	r3, #258	; 0x102
 8000b56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b5c:	2302      	movs	r3, #2
 8000b5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b60:	2300      	movs	r3, #0
 8000b62:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b64:	f107 0314 	add.w	r3, r7, #20
 8000b68:	4619      	mov	r1, r3
 8000b6a:	481f      	ldr	r0, [pc, #124]	; (8000be8 <MX_GPIO_Init+0x17c>)
 8000b6c:	f000 fdb4 	bl	80016d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin 
                           PAPin PAPin PAPin PAPin 
                           PAPin */
  GPIO_InitStruct.Pin = COL7_Pin|COL8_Pin|COL9_Pin|COL10_Pin 
 8000b70:	f248 63fc 	movw	r3, #34556	; 0x86fc
 8000b74:	617b      	str	r3, [r7, #20]
                          |COL11_Pin|COL16_Pin|COL6_Pin|COL2_Pin 
                          |COL5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b76:	2300      	movs	r3, #0
 8000b78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b7a:	2302      	movs	r3, #2
 8000b7c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b7e:	f107 0314 	add.w	r3, r7, #20
 8000b82:	4619      	mov	r1, r3
 8000b84:	4818      	ldr	r0, [pc, #96]	; (8000be8 <MX_GPIO_Init+0x17c>)
 8000b86:	f000 fda7 	bl	80016d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin 
                           PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = COL15_Pin|COL14_Pin|COL13_Pin|COL12_Pin 
 8000b8a:	f24c 4337 	movw	r3, #50231	; 0xc437
 8000b8e:	617b      	str	r3, [r7, #20]
                          |COL0_Pin|COL1_Pin|COL3_Pin|COL4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b90:	2300      	movs	r3, #0
 8000b92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b94:	2302      	movs	r3, #2
 8000b96:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b98:	f107 0314 	add.w	r3, r7, #20
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	4813      	ldr	r0, [pc, #76]	; (8000bec <MX_GPIO_Init+0x180>)
 8000ba0:	f000 fd9a 	bl	80016d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000ba4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ba8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000baa:	2303      	movs	r3, #3
 8000bac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bb2:	f107 0314 	add.w	r3, r7, #20
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	480c      	ldr	r0, [pc, #48]	; (8000bec <MX_GPIO_Init+0x180>)
 8000bba:	f000 fd8d 	bl	80016d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin 
                           PBPin PBPin */
  GPIO_InitStruct.Pin = ROW0_Pin|ROW2_Pin|ROW3_Pin|ROW4_Pin 
 8000bbe:	f242 33c8 	movw	r3, #9160	; 0x23c8
 8000bc2:	617b      	str	r3, [r7, #20]
                          |ROW5_Pin|CAPLED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000bc8:	2302      	movs	r3, #2
 8000bca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bd0:	f107 0314 	add.w	r3, r7, #20
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	4805      	ldr	r0, [pc, #20]	; (8000bec <MX_GPIO_Init+0x180>)
 8000bd8:	f000 fd7e 	bl	80016d8 <HAL_GPIO_Init>

}
 8000bdc:	bf00      	nop
 8000bde:	3728      	adds	r7, #40	; 0x28
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	40023800 	.word	0x40023800
 8000be8:	40020000 	.word	0x40020000
 8000bec:	40020400 	.word	0x40020400
 8000bf0:	40020800 	.word	0x40020800

08000bf4 <keyboard_init>:
{
    matrix_setup();
}

void keyboard_init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
    matrix_init();
 8000bf8:	f000 f8f2 	bl	8000de0 <matrix_init>
}
 8000bfc:	bf00      	nop
 8000bfe:	bd80      	pop	{r7, pc}

08000c00 <keyboard_task>:
/*
 * Do keyboard routine jobs: scan matrix, light LEDs, ...
 * This is repeatedly called as fast as possible.
 */
void keyboard_task(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b088      	sub	sp, #32
 8000c04:	af00      	add	r7, sp, #0
	static matrix_row_t matrix_prev[MATRIX_ROWS];
    matrix_row_t matrix_row = 0;
 8000c06:	2300      	movs	r3, #0
 8000c08:	613b      	str	r3, [r7, #16]
    matrix_row_t matrix_change = 0;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	60fb      	str	r3, [r7, #12]
    uint8_t is_changed = 0;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	77fb      	strb	r3, [r7, #31]
    uint8_t ret = 0;
 8000c12:	2300      	movs	r3, #0
 8000c14:	77bb      	strb	r3, [r7, #30]

    matrix_scan();
 8000c16:	f000 f903 	bl	8000e20 <matrix_scan>
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	777b      	strb	r3, [r7, #29]
 8000c1e:	e04b      	b.n	8000cb8 <keyboard_task+0xb8>

        matrix_row = matrix_get_row(r);
 8000c20:	7f7b      	ldrb	r3, [r7, #29]
 8000c22:	4618      	mov	r0, r3
 8000c24:	f000 f954 	bl	8000ed0 <matrix_get_row>
 8000c28:	6138      	str	r0, [r7, #16]

        matrix_change = matrix_row ^ matrix_prev[r];
 8000c2a:	7f7b      	ldrb	r3, [r7, #29]
 8000c2c:	4a2b      	ldr	r2, [pc, #172]	; (8000cdc <keyboard_task+0xdc>)
 8000c2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c32:	693a      	ldr	r2, [r7, #16]
 8000c34:	4053      	eors	r3, r2
 8000c36:	60fb      	str	r3, [r7, #12]
        if (matrix_change) {
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d039      	beq.n	8000cb2 <keyboard_task+0xb2>
        	is_changed = 1;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	77fb      	strb	r3, [r7, #31]

            matrix_row_t col_mask = 1;
 8000c42:	2301      	movs	r3, #1
 8000c44:	61bb      	str	r3, [r7, #24]
            for (uint8_t c = 0; c < MATRIX_COLS; c++, col_mask <<= 1 ) {
 8000c46:	2300      	movs	r3, #0
 8000c48:	75fb      	strb	r3, [r7, #23]
 8000c4a:	e02d      	b.n	8000ca8 <keyboard_task+0xa8>
                if (matrix_change & col_mask) {
 8000c4c:	68fa      	ldr	r2, [r7, #12]
 8000c4e:	69bb      	ldr	r3, [r7, #24]
 8000c50:	4013      	ands	r3, r2
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d022      	beq.n	8000c9c <keyboard_task+0x9c>
                    keyevent_t e = (keyevent_t){
 8000c56:	7dfb      	ldrb	r3, [r7, #23]
 8000c58:	713b      	strb	r3, [r7, #4]
 8000c5a:	7f7b      	ldrb	r3, [r7, #29]
 8000c5c:	717b      	strb	r3, [r7, #5]
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & col_mask),
 8000c5e:	693a      	ldr	r2, [r7, #16]
 8000c60:	69bb      	ldr	r3, [r7, #24]
 8000c62:	4013      	ands	r3, r2
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	bf14      	ite	ne
 8000c68:	2301      	movne	r3, #1
 8000c6a:	2300      	moveq	r3, #0
 8000c6c:	b2db      	uxtb	r3, r3
                    keyevent_t e = (keyevent_t){
 8000c6e:	71bb      	strb	r3, [r7, #6]
 8000c70:	2301      	movs	r3, #1
 8000c72:	813b      	strh	r3, [r7, #8]
                        .time = 1/* time should not be 0 */
                    };
                    ret = action_exec(e);
 8000c74:	1d3b      	adds	r3, r7, #4
 8000c76:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000c7a:	f7ff fc69 	bl	8000550 <action_exec>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	77bb      	strb	r3, [r7, #30]
                    if (ret==0){
 8000c82:	7fbb      	ldrb	r3, [r7, #30]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d013      	beq.n	8000cb0 <keyboard_task+0xb0>
                        break;
                    }

                    // record a processed key
                    matrix_prev[r] ^= col_mask;
 8000c88:	7f7b      	ldrb	r3, [r7, #29]
 8000c8a:	4a14      	ldr	r2, [pc, #80]	; (8000cdc <keyboard_task+0xdc>)
 8000c8c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000c90:	7f7b      	ldrb	r3, [r7, #29]
 8000c92:	69ba      	ldr	r2, [r7, #24]
 8000c94:	404a      	eors	r2, r1
 8000c96:	4911      	ldr	r1, [pc, #68]	; (8000cdc <keyboard_task+0xdc>)
 8000c98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            for (uint8_t c = 0; c < MATRIX_COLS; c++, col_mask <<= 1 ) {
 8000c9c:	7dfb      	ldrb	r3, [r7, #23]
 8000c9e:	3301      	adds	r3, #1
 8000ca0:	75fb      	strb	r3, [r7, #23]
 8000ca2:	69bb      	ldr	r3, [r7, #24]
 8000ca4:	005b      	lsls	r3, r3, #1
 8000ca6:	61bb      	str	r3, [r7, #24]
 8000ca8:	7dfb      	ldrb	r3, [r7, #23]
 8000caa:	2b10      	cmp	r3, #16
 8000cac:	d9ce      	bls.n	8000c4c <keyboard_task+0x4c>
 8000cae:	e000      	b.n	8000cb2 <keyboard_task+0xb2>
                        break;
 8000cb0:	bf00      	nop
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
 8000cb2:	7f7b      	ldrb	r3, [r7, #29]
 8000cb4:	3301      	adds	r3, #1
 8000cb6:	777b      	strb	r3, [r7, #29]
 8000cb8:	7f7b      	ldrb	r3, [r7, #29]
 8000cba:	2b05      	cmp	r3, #5
 8000cbc:	d9b0      	bls.n	8000c20 <keyboard_task+0x20>
                }
            }
        }
    }
    if (is_changed == 1 && ret == 1){
 8000cbe:	7ffb      	ldrb	r3, [r7, #31]
 8000cc0:	2b01      	cmp	r3, #1
 8000cc2:	d106      	bne.n	8000cd2 <keyboard_task+0xd2>
 8000cc4:	7fbb      	ldrb	r3, [r7, #30]
 8000cc6:	2b01      	cmp	r3, #1
 8000cc8:	d103      	bne.n	8000cd2 <keyboard_task+0xd2>
    	send_keyboard_report();
 8000cca:	f7ff fc21 	bl	8000510 <send_keyboard_report>
    	is_changed = 0;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	77fb      	strb	r3, [r7, #31]
    }
//    set_led();
}
 8000cd2:	bf00      	nop
 8000cd4:	3720      	adds	r7, #32
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	200001f0 	.word	0x200001f0

08000ce0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ce4:	f000 fb52 	bl	800138c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ce8:	f000 f80a 	bl	8000d00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cec:	f7ff febe 	bl	8000a6c <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000cf0:	f005 f9f6 	bl	80060e0 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  keyboard_init();
 8000cf4:	f7ff ff7e 	bl	8000bf4 <keyboard_init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  keyboard_task();
 8000cf8:	f7ff ff82 	bl	8000c00 <keyboard_task>
 8000cfc:	e7fc      	b.n	8000cf8 <main+0x18>
	...

08000d00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b094      	sub	sp, #80	; 0x50
 8000d04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d06:	f107 0320 	add.w	r3, r7, #32
 8000d0a:	2230      	movs	r2, #48	; 0x30
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f005 fe34 	bl	800697c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d14:	f107 030c 	add.w	r3, r7, #12
 8000d18:	2200      	movs	r2, #0
 8000d1a:	601a      	str	r2, [r3, #0]
 8000d1c:	605a      	str	r2, [r3, #4]
 8000d1e:	609a      	str	r2, [r3, #8]
 8000d20:	60da      	str	r2, [r3, #12]
 8000d22:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d24:	2300      	movs	r3, #0
 8000d26:	60bb      	str	r3, [r7, #8]
 8000d28:	4b27      	ldr	r3, [pc, #156]	; (8000dc8 <SystemClock_Config+0xc8>)
 8000d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d2c:	4a26      	ldr	r2, [pc, #152]	; (8000dc8 <SystemClock_Config+0xc8>)
 8000d2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d32:	6413      	str	r3, [r2, #64]	; 0x40
 8000d34:	4b24      	ldr	r3, [pc, #144]	; (8000dc8 <SystemClock_Config+0xc8>)
 8000d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d3c:	60bb      	str	r3, [r7, #8]
 8000d3e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d40:	2300      	movs	r3, #0
 8000d42:	607b      	str	r3, [r7, #4]
 8000d44:	4b21      	ldr	r3, [pc, #132]	; (8000dcc <SystemClock_Config+0xcc>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a20      	ldr	r2, [pc, #128]	; (8000dcc <SystemClock_Config+0xcc>)
 8000d4a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d4e:	6013      	str	r3, [r2, #0]
 8000d50:	4b1e      	ldr	r3, [pc, #120]	; (8000dcc <SystemClock_Config+0xcc>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d58:	607b      	str	r3, [r7, #4]
 8000d5a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d60:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d64:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d66:	2302      	movs	r3, #2
 8000d68:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d6a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000d70:	2319      	movs	r3, #25
 8000d72:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000d74:	23c0      	movs	r3, #192	; 0xc0
 8000d76:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d78:	2302      	movs	r3, #2
 8000d7a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d7c:	2304      	movs	r3, #4
 8000d7e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d80:	f107 0320 	add.w	r3, r7, #32
 8000d84:	4618      	mov	r0, r3
 8000d86:	f001 ffc5 	bl	8002d14 <HAL_RCC_OscConfig>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000d90:	f000 f81e 	bl	8000dd0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d94:	230f      	movs	r3, #15
 8000d96:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d98:	2302      	movs	r3, #2
 8000d9a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000da0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000da4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000da6:	2300      	movs	r3, #0
 8000da8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000daa:	f107 030c 	add.w	r3, r7, #12
 8000dae:	2103      	movs	r1, #3
 8000db0:	4618      	mov	r0, r3
 8000db2:	f002 fa1f 	bl	80031f4 <HAL_RCC_ClockConfig>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000dbc:	f000 f808 	bl	8000dd0 <Error_Handler>
  }
}
 8000dc0:	bf00      	nop
 8000dc2:	3750      	adds	r7, #80	; 0x50
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	40023800 	.word	0x40023800
 8000dcc:	40007000 	.word	0x40007000

08000dd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000dd4:	bf00      	nop
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
	...

08000de0 <matrix_init>:
#define LED_OFF()   do { palSetPad(GPIOC, GPIOC_LED); } while (0)
#define LED_TGL()   do { palTogglePad(GPIOC, GPIOC_LED); } while (0)
#endif

void matrix_init(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
    // initialize matrix state: all keys off
    for (uint8_t i=0; i < MATRIX_ROWS; i++) {
 8000de6:	2300      	movs	r3, #0
 8000de8:	71fb      	strb	r3, [r7, #7]
 8000dea:	e00c      	b.n	8000e06 <matrix_init+0x26>
        matrix[i] = 0;
 8000dec:	79fb      	ldrb	r3, [r7, #7]
 8000dee:	4a0a      	ldr	r2, [pc, #40]	; (8000e18 <matrix_init+0x38>)
 8000df0:	2100      	movs	r1, #0
 8000df2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        matrix_debouncing[i] = 0;
 8000df6:	79fb      	ldrb	r3, [r7, #7]
 8000df8:	4a08      	ldr	r2, [pc, #32]	; (8000e1c <matrix_init+0x3c>)
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (uint8_t i=0; i < MATRIX_ROWS; i++) {
 8000e00:	79fb      	ldrb	r3, [r7, #7]
 8000e02:	3301      	adds	r3, #1
 8000e04:	71fb      	strb	r3, [r7, #7]
 8000e06:	79fb      	ldrb	r3, [r7, #7]
 8000e08:	2b05      	cmp	r3, #5
 8000e0a:	d9ef      	bls.n	8000dec <matrix_init+0xc>
    }
}
 8000e0c:	bf00      	nop
 8000e0e:	370c      	adds	r7, #12
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr
 8000e18:	20000208 	.word	0x20000208
 8000e1c:	20000220 	.word	0x20000220

08000e20 <matrix_scan>:

uint8_t matrix_scan(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0

    for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
 8000e26:	2300      	movs	r3, #0
 8000e28:	71fb      	strb	r3, [r7, #7]
 8000e2a:	e01f      	b.n	8000e6c <matrix_scan+0x4c>
    	select_row(i);
 8000e2c:	79fb      	ldrb	r3, [r7, #7]
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f000 f97a 	bl	8001128 <select_row>
    	HAL_Delay(1); // without this wait read unstable value.
 8000e34:	2001      	movs	r0, #1
 8000e36:	f000 fb1b 	bl	8001470 <HAL_Delay>
        matrix_row_t cols = read_cols();
 8000e3a:	f000 f85b 	bl	8000ef4 <read_cols>
 8000e3e:	6038      	str	r0, [r7, #0]
        if (matrix_debouncing[i] != cols) {
 8000e40:	79fb      	ldrb	r3, [r7, #7]
 8000e42:	4a20      	ldr	r2, [pc, #128]	; (8000ec4 <matrix_scan+0xa4>)
 8000e44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e48:	683a      	ldr	r2, [r7, #0]
 8000e4a:	429a      	cmp	r2, r3
 8000e4c:	d007      	beq.n	8000e5e <matrix_scan+0x3e>
            matrix_debouncing[i] = cols;
 8000e4e:	79fb      	ldrb	r3, [r7, #7]
 8000e50:	491c      	ldr	r1, [pc, #112]	; (8000ec4 <matrix_scan+0xa4>)
 8000e52:	683a      	ldr	r2, [r7, #0]
 8000e54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

            debouncing = DEBOUNCE;
 8000e58:	4b1b      	ldr	r3, [pc, #108]	; (8000ec8 <matrix_scan+0xa8>)
 8000e5a:	2203      	movs	r2, #3
 8000e5c:	701a      	strb	r2, [r3, #0]
        }
        unselect_rows(i);
 8000e5e:	79fb      	ldrb	r3, [r7, #7]
 8000e60:	4618      	mov	r0, r3
 8000e62:	f000 f919 	bl	8001098 <unselect_rows>
    for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
 8000e66:	79fb      	ldrb	r3, [r7, #7]
 8000e68:	3301      	adds	r3, #1
 8000e6a:	71fb      	strb	r3, [r7, #7]
 8000e6c:	79fb      	ldrb	r3, [r7, #7]
 8000e6e:	2b05      	cmp	r3, #5
 8000e70:	d9dc      	bls.n	8000e2c <matrix_scan+0xc>
    }

    if (debouncing) {
 8000e72:	4b15      	ldr	r3, [pc, #84]	; (8000ec8 <matrix_scan+0xa8>)
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d01e      	beq.n	8000eb8 <matrix_scan+0x98>
        if (--debouncing) {
 8000e7a:	4b13      	ldr	r3, [pc, #76]	; (8000ec8 <matrix_scan+0xa8>)
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	3b01      	subs	r3, #1
 8000e80:	b2da      	uxtb	r2, r3
 8000e82:	4b11      	ldr	r3, [pc, #68]	; (8000ec8 <matrix_scan+0xa8>)
 8000e84:	701a      	strb	r2, [r3, #0]
 8000e86:	4b10      	ldr	r3, [pc, #64]	; (8000ec8 <matrix_scan+0xa8>)
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d003      	beq.n	8000e96 <matrix_scan+0x76>
        	HAL_Delay(1);
 8000e8e:	2001      	movs	r0, #1
 8000e90:	f000 faee 	bl	8001470 <HAL_Delay>
 8000e94:	e010      	b.n	8000eb8 <matrix_scan+0x98>
        } else {
            for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
 8000e96:	2300      	movs	r3, #0
 8000e98:	71bb      	strb	r3, [r7, #6]
 8000e9a:	e00a      	b.n	8000eb2 <matrix_scan+0x92>
                matrix[i] = matrix_debouncing[i];
 8000e9c:	79ba      	ldrb	r2, [r7, #6]
 8000e9e:	79bb      	ldrb	r3, [r7, #6]
 8000ea0:	4908      	ldr	r1, [pc, #32]	; (8000ec4 <matrix_scan+0xa4>)
 8000ea2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000ea6:	4909      	ldr	r1, [pc, #36]	; (8000ecc <matrix_scan+0xac>)
 8000ea8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
 8000eac:	79bb      	ldrb	r3, [r7, #6]
 8000eae:	3301      	adds	r3, #1
 8000eb0:	71bb      	strb	r3, [r7, #6]
 8000eb2:	79bb      	ldrb	r3, [r7, #6]
 8000eb4:	2b05      	cmp	r3, #5
 8000eb6:	d9f1      	bls.n	8000e9c <matrix_scan+0x7c>
            }
        }
    }

    return 1;
 8000eb8:	2301      	movs	r3, #1
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	20000220 	.word	0x20000220
 8000ec8:	20000004 	.word	0x20000004
 8000ecc:	20000208 	.word	0x20000208

08000ed0 <matrix_get_row>:
    return (matrix[row] & ((matrix_row_t)1<<col));
}


inline matrix_row_t matrix_get_row(uint8_t row)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	71fb      	strb	r3, [r7, #7]
    return matrix[row];
 8000eda:	79fb      	ldrb	r3, [r7, #7]
 8000edc:	4a04      	ldr	r2, [pc, #16]	; (8000ef0 <matrix_get_row+0x20>)
 8000ede:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	370c      	adds	r7, #12
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	20000208 	.word	0x20000208

08000ef4 <read_cols>:
//
/* Returns status of switches(1:on, 0:off)
    读取每列的电平，如果检测到高电平，则视为该列的键被按下
*/
matrix_row_t read_cols(void)
{
 8000ef4:	b598      	push	{r3, r4, r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
    return ((HAL_GPIO_ReadPin(COL0_GPIO_Port, COL0_Pin)==1) ? (1<<0):0) |
 8000ef8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000efc:	4864      	ldr	r0, [pc, #400]	; (8001090 <read_cols+0x19c>)
 8000efe:	f000 fd6d 	bl	80019dc <HAL_GPIO_ReadPin>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b01      	cmp	r3, #1
 8000f06:	bf0c      	ite	eq
 8000f08:	2301      	moveq	r3, #1
 8000f0a:	2300      	movne	r3, #0
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	461c      	mov	r4, r3
           ((HAL_GPIO_ReadPin(COL1_GPIO_Port, COL1_Pin)==1) ? (1<<1):0) |
 8000f10:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f14:	485e      	ldr	r0, [pc, #376]	; (8001090 <read_cols+0x19c>)
 8000f16:	f000 fd61 	bl	80019dc <HAL_GPIO_ReadPin>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b01      	cmp	r3, #1
 8000f1e:	d101      	bne.n	8000f24 <read_cols+0x30>
 8000f20:	2302      	movs	r3, #2
 8000f22:	e000      	b.n	8000f26 <read_cols+0x32>
 8000f24:	2300      	movs	r3, #0
    return ((HAL_GPIO_ReadPin(COL0_GPIO_Port, COL0_Pin)==1) ? (1<<0):0) |
 8000f26:	431c      	orrs	r4, r3
           ((HAL_GPIO_ReadPin(COL2_GPIO_Port, COL2_Pin)==1) ? (1<<2):0) |
 8000f28:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f2c:	4859      	ldr	r0, [pc, #356]	; (8001094 <read_cols+0x1a0>)
 8000f2e:	f000 fd55 	bl	80019dc <HAL_GPIO_ReadPin>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b01      	cmp	r3, #1
 8000f36:	d101      	bne.n	8000f3c <read_cols+0x48>
 8000f38:	2304      	movs	r3, #4
 8000f3a:	e000      	b.n	8000f3e <read_cols+0x4a>
 8000f3c:	2300      	movs	r3, #0
           ((HAL_GPIO_ReadPin(COL1_GPIO_Port, COL1_Pin)==1) ? (1<<1):0) |
 8000f3e:	431c      	orrs	r4, r3
           ((HAL_GPIO_ReadPin(COL3_GPIO_Port, COL3_Pin)==1) ? (1<<3):0) |
 8000f40:	2110      	movs	r1, #16
 8000f42:	4853      	ldr	r0, [pc, #332]	; (8001090 <read_cols+0x19c>)
 8000f44:	f000 fd4a 	bl	80019dc <HAL_GPIO_ReadPin>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b01      	cmp	r3, #1
 8000f4c:	d101      	bne.n	8000f52 <read_cols+0x5e>
 8000f4e:	2308      	movs	r3, #8
 8000f50:	e000      	b.n	8000f54 <read_cols+0x60>
 8000f52:	2300      	movs	r3, #0
           ((HAL_GPIO_ReadPin(COL2_GPIO_Port, COL2_Pin)==1) ? (1<<2):0) |
 8000f54:	431c      	orrs	r4, r3
           ((HAL_GPIO_ReadPin(COL4_GPIO_Port, COL4_Pin)==1) ? (1<<4):0) |
 8000f56:	2120      	movs	r1, #32
 8000f58:	484d      	ldr	r0, [pc, #308]	; (8001090 <read_cols+0x19c>)
 8000f5a:	f000 fd3f 	bl	80019dc <HAL_GPIO_ReadPin>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b01      	cmp	r3, #1
 8000f62:	d101      	bne.n	8000f68 <read_cols+0x74>
 8000f64:	2310      	movs	r3, #16
 8000f66:	e000      	b.n	8000f6a <read_cols+0x76>
 8000f68:	2300      	movs	r3, #0
           ((HAL_GPIO_ReadPin(COL3_GPIO_Port, COL3_Pin)==1) ? (1<<3):0) |
 8000f6a:	431c      	orrs	r4, r3
           ((HAL_GPIO_ReadPin(COL5_GPIO_Port, COL5_Pin)==1) ? (1<<5):0) |
 8000f6c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f70:	4848      	ldr	r0, [pc, #288]	; (8001094 <read_cols+0x1a0>)
 8000f72:	f000 fd33 	bl	80019dc <HAL_GPIO_ReadPin>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b01      	cmp	r3, #1
 8000f7a:	d101      	bne.n	8000f80 <read_cols+0x8c>
 8000f7c:	2320      	movs	r3, #32
 8000f7e:	e000      	b.n	8000f82 <read_cols+0x8e>
 8000f80:	2300      	movs	r3, #0
           ((HAL_GPIO_ReadPin(COL4_GPIO_Port, COL4_Pin)==1) ? (1<<4):0) |
 8000f82:	431c      	orrs	r4, r3
           ((HAL_GPIO_ReadPin(COL6_GPIO_Port, COL6_Pin)==1) ? (1<<6):0) |
 8000f84:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f88:	4842      	ldr	r0, [pc, #264]	; (8001094 <read_cols+0x1a0>)
 8000f8a:	f000 fd27 	bl	80019dc <HAL_GPIO_ReadPin>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b01      	cmp	r3, #1
 8000f92:	d101      	bne.n	8000f98 <read_cols+0xa4>
 8000f94:	2340      	movs	r3, #64	; 0x40
 8000f96:	e000      	b.n	8000f9a <read_cols+0xa6>
 8000f98:	2300      	movs	r3, #0
           ((HAL_GPIO_ReadPin(COL5_GPIO_Port, COL5_Pin)==1) ? (1<<5):0) |
 8000f9a:	431c      	orrs	r4, r3
           ((HAL_GPIO_ReadPin(COL7_GPIO_Port, COL7_Pin)==1) ? (1<<7):0) |
 8000f9c:	2104      	movs	r1, #4
 8000f9e:	483d      	ldr	r0, [pc, #244]	; (8001094 <read_cols+0x1a0>)
 8000fa0:	f000 fd1c 	bl	80019dc <HAL_GPIO_ReadPin>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b01      	cmp	r3, #1
 8000fa8:	d101      	bne.n	8000fae <read_cols+0xba>
 8000faa:	2380      	movs	r3, #128	; 0x80
 8000fac:	e000      	b.n	8000fb0 <read_cols+0xbc>
 8000fae:	2300      	movs	r3, #0
           ((HAL_GPIO_ReadPin(COL6_GPIO_Port, COL6_Pin)==1) ? (1<<6):0) |
 8000fb0:	431c      	orrs	r4, r3
           ((HAL_GPIO_ReadPin(COL8_GPIO_Port, COL8_Pin)==1) ? (1<<8):0) |
 8000fb2:	2108      	movs	r1, #8
 8000fb4:	4837      	ldr	r0, [pc, #220]	; (8001094 <read_cols+0x1a0>)
 8000fb6:	f000 fd11 	bl	80019dc <HAL_GPIO_ReadPin>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b01      	cmp	r3, #1
 8000fbe:	d102      	bne.n	8000fc6 <read_cols+0xd2>
 8000fc0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fc4:	e000      	b.n	8000fc8 <read_cols+0xd4>
 8000fc6:	2300      	movs	r3, #0
           ((HAL_GPIO_ReadPin(COL7_GPIO_Port, COL7_Pin)==1) ? (1<<7):0) |
 8000fc8:	431c      	orrs	r4, r3
           ((HAL_GPIO_ReadPin(COL9_GPIO_Port, COL9_Pin)==1) ? (1<<9):0) |
 8000fca:	2110      	movs	r1, #16
 8000fcc:	4831      	ldr	r0, [pc, #196]	; (8001094 <read_cols+0x1a0>)
 8000fce:	f000 fd05 	bl	80019dc <HAL_GPIO_ReadPin>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b01      	cmp	r3, #1
 8000fd6:	d102      	bne.n	8000fde <read_cols+0xea>
 8000fd8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fdc:	e000      	b.n	8000fe0 <read_cols+0xec>
 8000fde:	2300      	movs	r3, #0
           ((HAL_GPIO_ReadPin(COL8_GPIO_Port, COL8_Pin)==1) ? (1<<8):0) |
 8000fe0:	431c      	orrs	r4, r3
           ((HAL_GPIO_ReadPin(COL10_GPIO_Port, COL10_Pin)==1) ? (1<<10):0) |
 8000fe2:	2120      	movs	r1, #32
 8000fe4:	482b      	ldr	r0, [pc, #172]	; (8001094 <read_cols+0x1a0>)
 8000fe6:	f000 fcf9 	bl	80019dc <HAL_GPIO_ReadPin>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b01      	cmp	r3, #1
 8000fee:	d102      	bne.n	8000ff6 <read_cols+0x102>
 8000ff0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ff4:	e000      	b.n	8000ff8 <read_cols+0x104>
 8000ff6:	2300      	movs	r3, #0
           ((HAL_GPIO_ReadPin(COL9_GPIO_Port, COL9_Pin)==1) ? (1<<9):0) |
 8000ff8:	431c      	orrs	r4, r3
           ((HAL_GPIO_ReadPin(COL11_GPIO_Port, COL11_Pin)==1) ? (1<<11):0) |
 8000ffa:	2140      	movs	r1, #64	; 0x40
 8000ffc:	4825      	ldr	r0, [pc, #148]	; (8001094 <read_cols+0x1a0>)
 8000ffe:	f000 fced 	bl	80019dc <HAL_GPIO_ReadPin>
 8001002:	4603      	mov	r3, r0
 8001004:	2b01      	cmp	r3, #1
 8001006:	d102      	bne.n	800100e <read_cols+0x11a>
 8001008:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800100c:	e000      	b.n	8001010 <read_cols+0x11c>
 800100e:	2300      	movs	r3, #0
           ((HAL_GPIO_ReadPin(COL10_GPIO_Port, COL10_Pin)==1) ? (1<<10):0) |
 8001010:	431c      	orrs	r4, r3
           ((HAL_GPIO_ReadPin(COL12_GPIO_Port, COL12_Pin)==1) ? (1<<12):0) |
 8001012:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001016:	481e      	ldr	r0, [pc, #120]	; (8001090 <read_cols+0x19c>)
 8001018:	f000 fce0 	bl	80019dc <HAL_GPIO_ReadPin>
 800101c:	4603      	mov	r3, r0
 800101e:	2b01      	cmp	r3, #1
 8001020:	d102      	bne.n	8001028 <read_cols+0x134>
 8001022:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001026:	e000      	b.n	800102a <read_cols+0x136>
 8001028:	2300      	movs	r3, #0
           ((HAL_GPIO_ReadPin(COL11_GPIO_Port, COL11_Pin)==1) ? (1<<11):0) |
 800102a:	431c      	orrs	r4, r3
           ((HAL_GPIO_ReadPin(COL13_GPIO_Port, COL13_Pin)==1) ? (1<<13):0) |
 800102c:	2104      	movs	r1, #4
 800102e:	4818      	ldr	r0, [pc, #96]	; (8001090 <read_cols+0x19c>)
 8001030:	f000 fcd4 	bl	80019dc <HAL_GPIO_ReadPin>
 8001034:	4603      	mov	r3, r0
 8001036:	2b01      	cmp	r3, #1
 8001038:	d102      	bne.n	8001040 <read_cols+0x14c>
 800103a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800103e:	e000      	b.n	8001042 <read_cols+0x14e>
 8001040:	2300      	movs	r3, #0
           ((HAL_GPIO_ReadPin(COL12_GPIO_Port, COL12_Pin)==1) ? (1<<12):0) |
 8001042:	431c      	orrs	r4, r3
           ((HAL_GPIO_ReadPin(COL14_GPIO_Port, COL14_Pin)==1) ? (1<<14):0) |
 8001044:	2102      	movs	r1, #2
 8001046:	4812      	ldr	r0, [pc, #72]	; (8001090 <read_cols+0x19c>)
 8001048:	f000 fcc8 	bl	80019dc <HAL_GPIO_ReadPin>
 800104c:	4603      	mov	r3, r0
 800104e:	2b01      	cmp	r3, #1
 8001050:	d102      	bne.n	8001058 <read_cols+0x164>
 8001052:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001056:	e000      	b.n	800105a <read_cols+0x166>
 8001058:	2300      	movs	r3, #0
           ((HAL_GPIO_ReadPin(COL13_GPIO_Port, COL13_Pin)==1) ? (1<<13):0) |
 800105a:	431c      	orrs	r4, r3
           ((HAL_GPIO_ReadPin(COL15_GPIO_Port, COL15_Pin)==1) ? (1<<15):0) |
 800105c:	2101      	movs	r1, #1
 800105e:	480c      	ldr	r0, [pc, #48]	; (8001090 <read_cols+0x19c>)
 8001060:	f000 fcbc 	bl	80019dc <HAL_GPIO_ReadPin>
 8001064:	4603      	mov	r3, r0
 8001066:	2b01      	cmp	r3, #1
 8001068:	d102      	bne.n	8001070 <read_cols+0x17c>
 800106a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800106e:	e000      	b.n	8001072 <read_cols+0x17e>
 8001070:	2300      	movs	r3, #0
           ((HAL_GPIO_ReadPin(COL14_GPIO_Port, COL14_Pin)==1) ? (1<<14):0) |
 8001072:	431c      	orrs	r4, r3
           ((HAL_GPIO_ReadPin(COL16_GPIO_Port, COL16_Pin)==1) ? (1<<16):0);
 8001074:	2180      	movs	r1, #128	; 0x80
 8001076:	4807      	ldr	r0, [pc, #28]	; (8001094 <read_cols+0x1a0>)
 8001078:	f000 fcb0 	bl	80019dc <HAL_GPIO_ReadPin>
 800107c:	4603      	mov	r3, r0
 800107e:	2b01      	cmp	r3, #1
 8001080:	d102      	bne.n	8001088 <read_cols+0x194>
 8001082:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001086:	e000      	b.n	800108a <read_cols+0x196>
 8001088:	2300      	movs	r3, #0
           ((HAL_GPIO_ReadPin(COL15_GPIO_Port, COL15_Pin)==1) ? (1<<15):0) |
 800108a:	4323      	orrs	r3, r4
}
 800108c:	4618      	mov	r0, r3
 800108e:	bd98      	pop	{r3, r4, r7, pc}
 8001090:	40020400 	.word	0x40020400
 8001094:	40020000 	.word	0x40020000

08001098 <unselect_rows>:

/* 复位每行的电平为低电平 */
void unselect_rows(uint8_t row)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	4603      	mov	r3, r0
 80010a0:	71fb      	strb	r3, [r7, #7]
	switch (row) {
 80010a2:	79fb      	ldrb	r3, [r7, #7]
 80010a4:	2b05      	cmp	r3, #5
 80010a6:	d836      	bhi.n	8001116 <unselect_rows+0x7e>
 80010a8:	a201      	add	r2, pc, #4	; (adr r2, 80010b0 <unselect_rows+0x18>)
 80010aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010ae:	bf00      	nop
 80010b0:	080010c9 	.word	0x080010c9
 80010b4:	080010d7 	.word	0x080010d7
 80010b8:	080010e5 	.word	0x080010e5
 80010bc:	080010f1 	.word	0x080010f1
 80010c0:	080010fd 	.word	0x080010fd
 80010c4:	08001109 	.word	0x08001109
		case 0:
			HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, GPIO_PIN_RESET);
 80010c8:	2200      	movs	r2, #0
 80010ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010ce:	4814      	ldr	r0, [pc, #80]	; (8001120 <unselect_rows+0x88>)
 80010d0:	f000 fc9c 	bl	8001a0c <HAL_GPIO_WritePin>
			break;
 80010d4:	e01f      	b.n	8001116 <unselect_rows+0x7e>
		case 1:
			HAL_GPIO_WritePin(ROW1_GPIO_Port, ROW1_Pin, GPIO_PIN_RESET);
 80010d6:	2200      	movs	r2, #0
 80010d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010dc:	4811      	ldr	r0, [pc, #68]	; (8001124 <unselect_rows+0x8c>)
 80010de:	f000 fc95 	bl	8001a0c <HAL_GPIO_WritePin>
			break;
 80010e2:	e018      	b.n	8001116 <unselect_rows+0x7e>
		case 2:
			HAL_GPIO_WritePin(ROW2_GPIO_Port, ROW2_Pin, GPIO_PIN_RESET);
 80010e4:	2200      	movs	r2, #0
 80010e6:	2108      	movs	r1, #8
 80010e8:	480d      	ldr	r0, [pc, #52]	; (8001120 <unselect_rows+0x88>)
 80010ea:	f000 fc8f 	bl	8001a0c <HAL_GPIO_WritePin>
			break;
 80010ee:	e012      	b.n	8001116 <unselect_rows+0x7e>
		case 3:
			HAL_GPIO_WritePin(ROW3_GPIO_Port, ROW3_Pin, GPIO_PIN_RESET);
 80010f0:	2200      	movs	r2, #0
 80010f2:	2140      	movs	r1, #64	; 0x40
 80010f4:	480a      	ldr	r0, [pc, #40]	; (8001120 <unselect_rows+0x88>)
 80010f6:	f000 fc89 	bl	8001a0c <HAL_GPIO_WritePin>
			break;
 80010fa:	e00c      	b.n	8001116 <unselect_rows+0x7e>
		case 4:
			HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW4_Pin, GPIO_PIN_RESET);
 80010fc:	2200      	movs	r2, #0
 80010fe:	2180      	movs	r1, #128	; 0x80
 8001100:	4807      	ldr	r0, [pc, #28]	; (8001120 <unselect_rows+0x88>)
 8001102:	f000 fc83 	bl	8001a0c <HAL_GPIO_WritePin>
			break;
 8001106:	e006      	b.n	8001116 <unselect_rows+0x7e>
		case 5:
			HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW5_Pin, GPIO_PIN_RESET);
 8001108:	2200      	movs	r2, #0
 800110a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800110e:	4804      	ldr	r0, [pc, #16]	; (8001120 <unselect_rows+0x88>)
 8001110:	f000 fc7c 	bl	8001a0c <HAL_GPIO_WritePin>
			break;
 8001114:	bf00      	nop
	}
}
 8001116:	bf00      	nop
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	40020400 	.word	0x40020400
 8001124:	40020000 	.word	0x40020000

08001128 <select_row>:

/* 设置每行的输出电平为高电平 */
void select_row(uint8_t row)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	4603      	mov	r3, r0
 8001130:	71fb      	strb	r3, [r7, #7]
    switch (row) {
 8001132:	79fb      	ldrb	r3, [r7, #7]
 8001134:	2b05      	cmp	r3, #5
 8001136:	d836      	bhi.n	80011a6 <select_row+0x7e>
 8001138:	a201      	add	r2, pc, #4	; (adr r2, 8001140 <select_row+0x18>)
 800113a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800113e:	bf00      	nop
 8001140:	08001159 	.word	0x08001159
 8001144:	08001167 	.word	0x08001167
 8001148:	08001175 	.word	0x08001175
 800114c:	08001181 	.word	0x08001181
 8001150:	0800118d 	.word	0x0800118d
 8001154:	08001199 	.word	0x08001199
        case 0:
        	HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, GPIO_PIN_SET);
 8001158:	2201      	movs	r2, #1
 800115a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800115e:	4814      	ldr	r0, [pc, #80]	; (80011b0 <select_row+0x88>)
 8001160:	f000 fc54 	bl	8001a0c <HAL_GPIO_WritePin>
            break;
 8001164:	e01f      	b.n	80011a6 <select_row+0x7e>
        case 1:
        	HAL_GPIO_WritePin(ROW1_GPIO_Port, ROW1_Pin, GPIO_PIN_SET);
 8001166:	2201      	movs	r2, #1
 8001168:	f44f 7180 	mov.w	r1, #256	; 0x100
 800116c:	4811      	ldr	r0, [pc, #68]	; (80011b4 <select_row+0x8c>)
 800116e:	f000 fc4d 	bl	8001a0c <HAL_GPIO_WritePin>
            break;
 8001172:	e018      	b.n	80011a6 <select_row+0x7e>
        case 2:
        	HAL_GPIO_WritePin(ROW2_GPIO_Port, ROW2_Pin, GPIO_PIN_SET);
 8001174:	2201      	movs	r2, #1
 8001176:	2108      	movs	r1, #8
 8001178:	480d      	ldr	r0, [pc, #52]	; (80011b0 <select_row+0x88>)
 800117a:	f000 fc47 	bl	8001a0c <HAL_GPIO_WritePin>
            break;
 800117e:	e012      	b.n	80011a6 <select_row+0x7e>
        case 3:
        	HAL_GPIO_WritePin(ROW3_GPIO_Port, ROW3_Pin, GPIO_PIN_SET);
 8001180:	2201      	movs	r2, #1
 8001182:	2140      	movs	r1, #64	; 0x40
 8001184:	480a      	ldr	r0, [pc, #40]	; (80011b0 <select_row+0x88>)
 8001186:	f000 fc41 	bl	8001a0c <HAL_GPIO_WritePin>
            break;
 800118a:	e00c      	b.n	80011a6 <select_row+0x7e>
        case 4:
        	HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW4_Pin, GPIO_PIN_SET);
 800118c:	2201      	movs	r2, #1
 800118e:	2180      	movs	r1, #128	; 0x80
 8001190:	4807      	ldr	r0, [pc, #28]	; (80011b0 <select_row+0x88>)
 8001192:	f000 fc3b 	bl	8001a0c <HAL_GPIO_WritePin>
            break;
 8001196:	e006      	b.n	80011a6 <select_row+0x7e>
        case 5:
        	HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW5_Pin, GPIO_PIN_SET);
 8001198:	2201      	movs	r2, #1
 800119a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800119e:	4804      	ldr	r0, [pc, #16]	; (80011b0 <select_row+0x88>)
 80011a0:	f000 fc34 	bl	8001a0c <HAL_GPIO_WritePin>
            break;
 80011a4:	bf00      	nop
    }
}
 80011a6:	bf00      	nop
 80011a8:	3708      	adds	r7, #8
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	40020400 	.word	0x40020400
 80011b4:	40020000 	.word	0x40020000

080011b8 <keymap_key_to_keycode>:
    return keycode_to_action(keycode);
}

/* translates key to keycode */
uint8_t keymap_key_to_keycode(uint8_t layer, keypos_t key)
{
 80011b8:	b490      	push	{r4, r7}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	4603      	mov	r3, r0
 80011c0:	8039      	strh	r1, [r7, #0]
 80011c2:	71fb      	strb	r3, [r7, #7]
    return keymaps[(layer)][(key.row)][(key.col)];
 80011c4:	79fa      	ldrb	r2, [r7, #7]
 80011c6:	787b      	ldrb	r3, [r7, #1]
 80011c8:	4618      	mov	r0, r3
 80011ca:	783b      	ldrb	r3, [r7, #0]
 80011cc:	461c      	mov	r4, r3
 80011ce:	4908      	ldr	r1, [pc, #32]	; (80011f0 <keymap_key_to_keycode+0x38>)
 80011d0:	4603      	mov	r3, r0
 80011d2:	011b      	lsls	r3, r3, #4
 80011d4:	4403      	add	r3, r0
 80011d6:	2066      	movs	r0, #102	; 0x66
 80011d8:	fb00 f202 	mul.w	r2, r0, r2
 80011dc:	4413      	add	r3, r2
 80011de:	440b      	add	r3, r1
 80011e0:	4423      	add	r3, r4
 80011e2:	781b      	ldrb	r3, [r3, #0]
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	3708      	adds	r7, #8
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bc90      	pop	{r4, r7}
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	08006b60 	.word	0x08006b60

080011f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011fa:	2300      	movs	r3, #0
 80011fc:	607b      	str	r3, [r7, #4]
 80011fe:	4b10      	ldr	r3, [pc, #64]	; (8001240 <HAL_MspInit+0x4c>)
 8001200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001202:	4a0f      	ldr	r2, [pc, #60]	; (8001240 <HAL_MspInit+0x4c>)
 8001204:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001208:	6453      	str	r3, [r2, #68]	; 0x44
 800120a:	4b0d      	ldr	r3, [pc, #52]	; (8001240 <HAL_MspInit+0x4c>)
 800120c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800120e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001212:	607b      	str	r3, [r7, #4]
 8001214:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001216:	2300      	movs	r3, #0
 8001218:	603b      	str	r3, [r7, #0]
 800121a:	4b09      	ldr	r3, [pc, #36]	; (8001240 <HAL_MspInit+0x4c>)
 800121c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121e:	4a08      	ldr	r2, [pc, #32]	; (8001240 <HAL_MspInit+0x4c>)
 8001220:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001224:	6413      	str	r3, [r2, #64]	; 0x40
 8001226:	4b06      	ldr	r3, [pc, #24]	; (8001240 <HAL_MspInit+0x4c>)
 8001228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800122e:	603b      	str	r3, [r7, #0]
 8001230:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001232:	bf00      	nop
 8001234:	370c      	adds	r7, #12
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	40023800 	.word	0x40023800

08001244 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001248:	bf00      	nop
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr

08001252 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001252:	b480      	push	{r7}
 8001254:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001256:	e7fe      	b.n	8001256 <HardFault_Handler+0x4>

08001258 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800125c:	e7fe      	b.n	800125c <MemManage_Handler+0x4>

0800125e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800125e:	b480      	push	{r7}
 8001260:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001262:	e7fe      	b.n	8001262 <BusFault_Handler+0x4>

08001264 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001268:	e7fe      	b.n	8001268 <UsageFault_Handler+0x4>

0800126a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800126a:	b480      	push	{r7}
 800126c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800126e:	bf00      	nop
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr

08001278 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800127c:	bf00      	nop
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr

08001286 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001286:	b480      	push	{r7}
 8001288:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800128a:	bf00      	nop
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr

08001294 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001298:	f000 f8ca 	bl	8001430 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800129c:	bf00      	nop
 800129e:	bd80      	pop	{r7, pc}

080012a0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80012a4:	4802      	ldr	r0, [pc, #8]	; (80012b0 <OTG_FS_IRQHandler+0x10>)
 80012a6:	f000 fd1a 	bl	8001cde <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80012aa:	bf00      	nop
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	2000071c 	.word	0x2000071c

080012b4 <_sbrk>:
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b084      	sub	sp, #16
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	4b11      	ldr	r3, [pc, #68]	; (8001304 <_sbrk+0x50>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d102      	bne.n	80012ca <_sbrk+0x16>
 80012c4:	4b0f      	ldr	r3, [pc, #60]	; (8001304 <_sbrk+0x50>)
 80012c6:	4a10      	ldr	r2, [pc, #64]	; (8001308 <_sbrk+0x54>)
 80012c8:	601a      	str	r2, [r3, #0]
 80012ca:	4b0e      	ldr	r3, [pc, #56]	; (8001304 <_sbrk+0x50>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	60fb      	str	r3, [r7, #12]
 80012d0:	4b0c      	ldr	r3, [pc, #48]	; (8001304 <_sbrk+0x50>)
 80012d2:	681a      	ldr	r2, [r3, #0]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	4413      	add	r3, r2
 80012d8:	466a      	mov	r2, sp
 80012da:	4293      	cmp	r3, r2
 80012dc:	d907      	bls.n	80012ee <_sbrk+0x3a>
 80012de:	f005 fb13 	bl	8006908 <__errno>
 80012e2:	4602      	mov	r2, r0
 80012e4:	230c      	movs	r3, #12
 80012e6:	6013      	str	r3, [r2, #0]
 80012e8:	f04f 33ff 	mov.w	r3, #4294967295
 80012ec:	e006      	b.n	80012fc <_sbrk+0x48>
 80012ee:	4b05      	ldr	r3, [pc, #20]	; (8001304 <_sbrk+0x50>)
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4413      	add	r3, r2
 80012f6:	4a03      	ldr	r2, [pc, #12]	; (8001304 <_sbrk+0x50>)
 80012f8:	6013      	str	r3, [r2, #0]
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	4618      	mov	r0, r3
 80012fe:	3710      	adds	r7, #16
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	20000238 	.word	0x20000238
 8001308:	20000b28 	.word	0x20000b28

0800130c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001310:	4b08      	ldr	r3, [pc, #32]	; (8001334 <SystemInit+0x28>)
 8001312:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001316:	4a07      	ldr	r2, [pc, #28]	; (8001334 <SystemInit+0x28>)
 8001318:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800131c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001320:	4b04      	ldr	r3, [pc, #16]	; (8001334 <SystemInit+0x28>)
 8001322:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001326:	609a      	str	r2, [r3, #8]
#endif
}
 8001328:	bf00      	nop
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	e000ed00 	.word	0xe000ed00

08001338 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001338:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001370 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800133c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800133e:	e003      	b.n	8001348 <LoopCopyDataInit>

08001340 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001340:	4b0c      	ldr	r3, [pc, #48]	; (8001374 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001342:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001344:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001346:	3104      	adds	r1, #4

08001348 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001348:	480b      	ldr	r0, [pc, #44]	; (8001378 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800134a:	4b0c      	ldr	r3, [pc, #48]	; (800137c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800134c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800134e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001350:	d3f6      	bcc.n	8001340 <CopyDataInit>
  ldr  r2, =_sbss
 8001352:	4a0b      	ldr	r2, [pc, #44]	; (8001380 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001354:	e002      	b.n	800135c <LoopFillZerobss>

08001356 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001356:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001358:	f842 3b04 	str.w	r3, [r2], #4

0800135c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800135c:	4b09      	ldr	r3, [pc, #36]	; (8001384 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800135e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001360:	d3f9      	bcc.n	8001356 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001362:	f7ff ffd3 	bl	800130c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001366:	f005 fad5 	bl	8006914 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800136a:	f7ff fcb9 	bl	8000ce0 <main>
  bx  lr    
 800136e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001370:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001374:	08006c4c 	.word	0x08006c4c
  ldr  r0, =_sdata
 8001378:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800137c:	200001c8 	.word	0x200001c8
  ldr  r2, =_sbss
 8001380:	200001c8 	.word	0x200001c8
  ldr  r3, = _ebss
 8001384:	20000b28 	.word	0x20000b28

08001388 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001388:	e7fe      	b.n	8001388 <ADC_IRQHandler>
	...

0800138c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001390:	4b0e      	ldr	r3, [pc, #56]	; (80013cc <HAL_Init+0x40>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a0d      	ldr	r2, [pc, #52]	; (80013cc <HAL_Init+0x40>)
 8001396:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800139a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800139c:	4b0b      	ldr	r3, [pc, #44]	; (80013cc <HAL_Init+0x40>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a0a      	ldr	r2, [pc, #40]	; (80013cc <HAL_Init+0x40>)
 80013a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013a8:	4b08      	ldr	r3, [pc, #32]	; (80013cc <HAL_Init+0x40>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a07      	ldr	r2, [pc, #28]	; (80013cc <HAL_Init+0x40>)
 80013ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013b4:	2003      	movs	r0, #3
 80013b6:	f000 f94d 	bl	8001654 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013ba:	2000      	movs	r0, #0
 80013bc:	f000 f808 	bl	80013d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013c0:	f7ff ff18 	bl	80011f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013c4:	2300      	movs	r3, #0
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	40023c00 	.word	0x40023c00

080013d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013d8:	4b12      	ldr	r3, [pc, #72]	; (8001424 <HAL_InitTick+0x54>)
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	4b12      	ldr	r3, [pc, #72]	; (8001428 <HAL_InitTick+0x58>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	4619      	mov	r1, r3
 80013e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80013ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80013ee:	4618      	mov	r0, r3
 80013f0:	f000 f965 	bl	80016be <HAL_SYSTICK_Config>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e00e      	b.n	800141c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2b0f      	cmp	r3, #15
 8001402:	d80a      	bhi.n	800141a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001404:	2200      	movs	r2, #0
 8001406:	6879      	ldr	r1, [r7, #4]
 8001408:	f04f 30ff 	mov.w	r0, #4294967295
 800140c:	f000 f92d 	bl	800166a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001410:	4a06      	ldr	r2, [pc, #24]	; (800142c <HAL_InitTick+0x5c>)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001416:	2300      	movs	r3, #0
 8001418:	e000      	b.n	800141c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800141a:	2301      	movs	r3, #1
}
 800141c:	4618      	mov	r0, r3
 800141e:	3708      	adds	r7, #8
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	20000008 	.word	0x20000008
 8001428:	20000010 	.word	0x20000010
 800142c:	2000000c 	.word	0x2000000c

08001430 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001434:	4b06      	ldr	r3, [pc, #24]	; (8001450 <HAL_IncTick+0x20>)
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	461a      	mov	r2, r3
 800143a:	4b06      	ldr	r3, [pc, #24]	; (8001454 <HAL_IncTick+0x24>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4413      	add	r3, r2
 8001440:	4a04      	ldr	r2, [pc, #16]	; (8001454 <HAL_IncTick+0x24>)
 8001442:	6013      	str	r3, [r2, #0]
}
 8001444:	bf00      	nop
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	20000010 	.word	0x20000010
 8001454:	20000248 	.word	0x20000248

08001458 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  return uwTick;
 800145c:	4b03      	ldr	r3, [pc, #12]	; (800146c <HAL_GetTick+0x14>)
 800145e:	681b      	ldr	r3, [r3, #0]
}
 8001460:	4618      	mov	r0, r3
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	20000248 	.word	0x20000248

08001470 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b084      	sub	sp, #16
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001478:	f7ff ffee 	bl	8001458 <HAL_GetTick>
 800147c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001488:	d005      	beq.n	8001496 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800148a:	4b09      	ldr	r3, [pc, #36]	; (80014b0 <HAL_Delay+0x40>)
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	461a      	mov	r2, r3
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	4413      	add	r3, r2
 8001494:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001496:	bf00      	nop
 8001498:	f7ff ffde 	bl	8001458 <HAL_GetTick>
 800149c:	4602      	mov	r2, r0
 800149e:	68bb      	ldr	r3, [r7, #8]
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	68fa      	ldr	r2, [r7, #12]
 80014a4:	429a      	cmp	r2, r3
 80014a6:	d8f7      	bhi.n	8001498 <HAL_Delay+0x28>
  {
  }
}
 80014a8:	bf00      	nop
 80014aa:	3710      	adds	r7, #16
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	20000010 	.word	0x20000010

080014b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b085      	sub	sp, #20
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	f003 0307 	and.w	r3, r3, #7
 80014c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014c4:	4b0c      	ldr	r3, [pc, #48]	; (80014f8 <__NVIC_SetPriorityGrouping+0x44>)
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014ca:	68ba      	ldr	r2, [r7, #8]
 80014cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014d0:	4013      	ands	r3, r2
 80014d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014e6:	4a04      	ldr	r2, [pc, #16]	; (80014f8 <__NVIC_SetPriorityGrouping+0x44>)
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	60d3      	str	r3, [r2, #12]
}
 80014ec:	bf00      	nop
 80014ee:	3714      	adds	r7, #20
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr
 80014f8:	e000ed00 	.word	0xe000ed00

080014fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001500:	4b04      	ldr	r3, [pc, #16]	; (8001514 <__NVIC_GetPriorityGrouping+0x18>)
 8001502:	68db      	ldr	r3, [r3, #12]
 8001504:	0a1b      	lsrs	r3, r3, #8
 8001506:	f003 0307 	and.w	r3, r3, #7
}
 800150a:	4618      	mov	r0, r3
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr
 8001514:	e000ed00 	.word	0xe000ed00

08001518 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	4603      	mov	r3, r0
 8001520:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001526:	2b00      	cmp	r3, #0
 8001528:	db0b      	blt.n	8001542 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800152a:	79fb      	ldrb	r3, [r7, #7]
 800152c:	f003 021f 	and.w	r2, r3, #31
 8001530:	4907      	ldr	r1, [pc, #28]	; (8001550 <__NVIC_EnableIRQ+0x38>)
 8001532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001536:	095b      	lsrs	r3, r3, #5
 8001538:	2001      	movs	r0, #1
 800153a:	fa00 f202 	lsl.w	r2, r0, r2
 800153e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001542:	bf00      	nop
 8001544:	370c      	adds	r7, #12
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	e000e100 	.word	0xe000e100

08001554 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	4603      	mov	r3, r0
 800155c:	6039      	str	r1, [r7, #0]
 800155e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001560:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001564:	2b00      	cmp	r3, #0
 8001566:	db0a      	blt.n	800157e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	b2da      	uxtb	r2, r3
 800156c:	490c      	ldr	r1, [pc, #48]	; (80015a0 <__NVIC_SetPriority+0x4c>)
 800156e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001572:	0112      	lsls	r2, r2, #4
 8001574:	b2d2      	uxtb	r2, r2
 8001576:	440b      	add	r3, r1
 8001578:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800157c:	e00a      	b.n	8001594 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	b2da      	uxtb	r2, r3
 8001582:	4908      	ldr	r1, [pc, #32]	; (80015a4 <__NVIC_SetPriority+0x50>)
 8001584:	79fb      	ldrb	r3, [r7, #7]
 8001586:	f003 030f 	and.w	r3, r3, #15
 800158a:	3b04      	subs	r3, #4
 800158c:	0112      	lsls	r2, r2, #4
 800158e:	b2d2      	uxtb	r2, r2
 8001590:	440b      	add	r3, r1
 8001592:	761a      	strb	r2, [r3, #24]
}
 8001594:	bf00      	nop
 8001596:	370c      	adds	r7, #12
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr
 80015a0:	e000e100 	.word	0xe000e100
 80015a4:	e000ed00 	.word	0xe000ed00

080015a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b089      	sub	sp, #36	; 0x24
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	60f8      	str	r0, [r7, #12]
 80015b0:	60b9      	str	r1, [r7, #8]
 80015b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	f003 0307 	and.w	r3, r3, #7
 80015ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015bc:	69fb      	ldr	r3, [r7, #28]
 80015be:	f1c3 0307 	rsb	r3, r3, #7
 80015c2:	2b04      	cmp	r3, #4
 80015c4:	bf28      	it	cs
 80015c6:	2304      	movcs	r3, #4
 80015c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015ca:	69fb      	ldr	r3, [r7, #28]
 80015cc:	3304      	adds	r3, #4
 80015ce:	2b06      	cmp	r3, #6
 80015d0:	d902      	bls.n	80015d8 <NVIC_EncodePriority+0x30>
 80015d2:	69fb      	ldr	r3, [r7, #28]
 80015d4:	3b03      	subs	r3, #3
 80015d6:	e000      	b.n	80015da <NVIC_EncodePriority+0x32>
 80015d8:	2300      	movs	r3, #0
 80015da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015dc:	f04f 32ff 	mov.w	r2, #4294967295
 80015e0:	69bb      	ldr	r3, [r7, #24]
 80015e2:	fa02 f303 	lsl.w	r3, r2, r3
 80015e6:	43da      	mvns	r2, r3
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	401a      	ands	r2, r3
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015f0:	f04f 31ff 	mov.w	r1, #4294967295
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	fa01 f303 	lsl.w	r3, r1, r3
 80015fa:	43d9      	mvns	r1, r3
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001600:	4313      	orrs	r3, r2
         );
}
 8001602:	4618      	mov	r0, r3
 8001604:	3724      	adds	r7, #36	; 0x24
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
	...

08001610 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	3b01      	subs	r3, #1
 800161c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001620:	d301      	bcc.n	8001626 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001622:	2301      	movs	r3, #1
 8001624:	e00f      	b.n	8001646 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001626:	4a0a      	ldr	r2, [pc, #40]	; (8001650 <SysTick_Config+0x40>)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	3b01      	subs	r3, #1
 800162c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800162e:	210f      	movs	r1, #15
 8001630:	f04f 30ff 	mov.w	r0, #4294967295
 8001634:	f7ff ff8e 	bl	8001554 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001638:	4b05      	ldr	r3, [pc, #20]	; (8001650 <SysTick_Config+0x40>)
 800163a:	2200      	movs	r2, #0
 800163c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800163e:	4b04      	ldr	r3, [pc, #16]	; (8001650 <SysTick_Config+0x40>)
 8001640:	2207      	movs	r2, #7
 8001642:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001644:	2300      	movs	r3, #0
}
 8001646:	4618      	mov	r0, r3
 8001648:	3708      	adds	r7, #8
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	e000e010 	.word	0xe000e010

08001654 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800165c:	6878      	ldr	r0, [r7, #4]
 800165e:	f7ff ff29 	bl	80014b4 <__NVIC_SetPriorityGrouping>
}
 8001662:	bf00      	nop
 8001664:	3708      	adds	r7, #8
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}

0800166a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800166a:	b580      	push	{r7, lr}
 800166c:	b086      	sub	sp, #24
 800166e:	af00      	add	r7, sp, #0
 8001670:	4603      	mov	r3, r0
 8001672:	60b9      	str	r1, [r7, #8]
 8001674:	607a      	str	r2, [r7, #4]
 8001676:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001678:	2300      	movs	r3, #0
 800167a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800167c:	f7ff ff3e 	bl	80014fc <__NVIC_GetPriorityGrouping>
 8001680:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001682:	687a      	ldr	r2, [r7, #4]
 8001684:	68b9      	ldr	r1, [r7, #8]
 8001686:	6978      	ldr	r0, [r7, #20]
 8001688:	f7ff ff8e 	bl	80015a8 <NVIC_EncodePriority>
 800168c:	4602      	mov	r2, r0
 800168e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001692:	4611      	mov	r1, r2
 8001694:	4618      	mov	r0, r3
 8001696:	f7ff ff5d 	bl	8001554 <__NVIC_SetPriority>
}
 800169a:	bf00      	nop
 800169c:	3718      	adds	r7, #24
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}

080016a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016a2:	b580      	push	{r7, lr}
 80016a4:	b082      	sub	sp, #8
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	4603      	mov	r3, r0
 80016aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b0:	4618      	mov	r0, r3
 80016b2:	f7ff ff31 	bl	8001518 <__NVIC_EnableIRQ>
}
 80016b6:	bf00      	nop
 80016b8:	3708      	adds	r7, #8
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}

080016be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016be:	b580      	push	{r7, lr}
 80016c0:	b082      	sub	sp, #8
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016c6:	6878      	ldr	r0, [r7, #4]
 80016c8:	f7ff ffa2 	bl	8001610 <SysTick_Config>
 80016cc:	4603      	mov	r3, r0
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	3708      	adds	r7, #8
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
	...

080016d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016d8:	b480      	push	{r7}
 80016da:	b089      	sub	sp, #36	; 0x24
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80016e2:	2300      	movs	r3, #0
 80016e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80016e6:	2300      	movs	r3, #0
 80016e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80016ea:	2300      	movs	r3, #0
 80016ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016ee:	2300      	movs	r3, #0
 80016f0:	61fb      	str	r3, [r7, #28]
 80016f2:	e159      	b.n	80019a8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80016f4:	2201      	movs	r2, #1
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	fa02 f303 	lsl.w	r3, r2, r3
 80016fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	697a      	ldr	r2, [r7, #20]
 8001704:	4013      	ands	r3, r2
 8001706:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001708:	693a      	ldr	r2, [r7, #16]
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	429a      	cmp	r2, r3
 800170e:	f040 8148 	bne.w	80019a2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	2b01      	cmp	r3, #1
 8001718:	d00b      	beq.n	8001732 <HAL_GPIO_Init+0x5a>
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	2b02      	cmp	r3, #2
 8001720:	d007      	beq.n	8001732 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001726:	2b11      	cmp	r3, #17
 8001728:	d003      	beq.n	8001732 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	2b12      	cmp	r3, #18
 8001730:	d130      	bne.n	8001794 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001738:	69fb      	ldr	r3, [r7, #28]
 800173a:	005b      	lsls	r3, r3, #1
 800173c:	2203      	movs	r2, #3
 800173e:	fa02 f303 	lsl.w	r3, r2, r3
 8001742:	43db      	mvns	r3, r3
 8001744:	69ba      	ldr	r2, [r7, #24]
 8001746:	4013      	ands	r3, r2
 8001748:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	68da      	ldr	r2, [r3, #12]
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	005b      	lsls	r3, r3, #1
 8001752:	fa02 f303 	lsl.w	r3, r2, r3
 8001756:	69ba      	ldr	r2, [r7, #24]
 8001758:	4313      	orrs	r3, r2
 800175a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	69ba      	ldr	r2, [r7, #24]
 8001760:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001768:	2201      	movs	r2, #1
 800176a:	69fb      	ldr	r3, [r7, #28]
 800176c:	fa02 f303 	lsl.w	r3, r2, r3
 8001770:	43db      	mvns	r3, r3
 8001772:	69ba      	ldr	r2, [r7, #24]
 8001774:	4013      	ands	r3, r2
 8001776:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	091b      	lsrs	r3, r3, #4
 800177e:	f003 0201 	and.w	r2, r3, #1
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	fa02 f303 	lsl.w	r3, r2, r3
 8001788:	69ba      	ldr	r2, [r7, #24]
 800178a:	4313      	orrs	r3, r2
 800178c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	69ba      	ldr	r2, [r7, #24]
 8001792:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	005b      	lsls	r3, r3, #1
 800179e:	2203      	movs	r2, #3
 80017a0:	fa02 f303 	lsl.w	r3, r2, r3
 80017a4:	43db      	mvns	r3, r3
 80017a6:	69ba      	ldr	r2, [r7, #24]
 80017a8:	4013      	ands	r3, r2
 80017aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	689a      	ldr	r2, [r3, #8]
 80017b0:	69fb      	ldr	r3, [r7, #28]
 80017b2:	005b      	lsls	r3, r3, #1
 80017b4:	fa02 f303 	lsl.w	r3, r2, r3
 80017b8:	69ba      	ldr	r2, [r7, #24]
 80017ba:	4313      	orrs	r3, r2
 80017bc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	69ba      	ldr	r2, [r7, #24]
 80017c2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	2b02      	cmp	r3, #2
 80017ca:	d003      	beq.n	80017d4 <HAL_GPIO_Init+0xfc>
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	2b12      	cmp	r3, #18
 80017d2:	d123      	bne.n	800181c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017d4:	69fb      	ldr	r3, [r7, #28]
 80017d6:	08da      	lsrs	r2, r3, #3
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	3208      	adds	r2, #8
 80017dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	f003 0307 	and.w	r3, r3, #7
 80017e8:	009b      	lsls	r3, r3, #2
 80017ea:	220f      	movs	r2, #15
 80017ec:	fa02 f303 	lsl.w	r3, r2, r3
 80017f0:	43db      	mvns	r3, r3
 80017f2:	69ba      	ldr	r2, [r7, #24]
 80017f4:	4013      	ands	r3, r2
 80017f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	691a      	ldr	r2, [r3, #16]
 80017fc:	69fb      	ldr	r3, [r7, #28]
 80017fe:	f003 0307 	and.w	r3, r3, #7
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	fa02 f303 	lsl.w	r3, r2, r3
 8001808:	69ba      	ldr	r2, [r7, #24]
 800180a:	4313      	orrs	r3, r2
 800180c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	08da      	lsrs	r2, r3, #3
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	3208      	adds	r2, #8
 8001816:	69b9      	ldr	r1, [r7, #24]
 8001818:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	005b      	lsls	r3, r3, #1
 8001826:	2203      	movs	r2, #3
 8001828:	fa02 f303 	lsl.w	r3, r2, r3
 800182c:	43db      	mvns	r3, r3
 800182e:	69ba      	ldr	r2, [r7, #24]
 8001830:	4013      	ands	r3, r2
 8001832:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f003 0203 	and.w	r2, r3, #3
 800183c:	69fb      	ldr	r3, [r7, #28]
 800183e:	005b      	lsls	r3, r3, #1
 8001840:	fa02 f303 	lsl.w	r3, r2, r3
 8001844:	69ba      	ldr	r2, [r7, #24]
 8001846:	4313      	orrs	r3, r2
 8001848:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	69ba      	ldr	r2, [r7, #24]
 800184e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001858:	2b00      	cmp	r3, #0
 800185a:	f000 80a2 	beq.w	80019a2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800185e:	2300      	movs	r3, #0
 8001860:	60fb      	str	r3, [r7, #12]
 8001862:	4b56      	ldr	r3, [pc, #344]	; (80019bc <HAL_GPIO_Init+0x2e4>)
 8001864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001866:	4a55      	ldr	r2, [pc, #340]	; (80019bc <HAL_GPIO_Init+0x2e4>)
 8001868:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800186c:	6453      	str	r3, [r2, #68]	; 0x44
 800186e:	4b53      	ldr	r3, [pc, #332]	; (80019bc <HAL_GPIO_Init+0x2e4>)
 8001870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001872:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001876:	60fb      	str	r3, [r7, #12]
 8001878:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800187a:	4a51      	ldr	r2, [pc, #324]	; (80019c0 <HAL_GPIO_Init+0x2e8>)
 800187c:	69fb      	ldr	r3, [r7, #28]
 800187e:	089b      	lsrs	r3, r3, #2
 8001880:	3302      	adds	r3, #2
 8001882:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001886:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001888:	69fb      	ldr	r3, [r7, #28]
 800188a:	f003 0303 	and.w	r3, r3, #3
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	220f      	movs	r2, #15
 8001892:	fa02 f303 	lsl.w	r3, r2, r3
 8001896:	43db      	mvns	r3, r3
 8001898:	69ba      	ldr	r2, [r7, #24]
 800189a:	4013      	ands	r3, r2
 800189c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4a48      	ldr	r2, [pc, #288]	; (80019c4 <HAL_GPIO_Init+0x2ec>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d019      	beq.n	80018da <HAL_GPIO_Init+0x202>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4a47      	ldr	r2, [pc, #284]	; (80019c8 <HAL_GPIO_Init+0x2f0>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d013      	beq.n	80018d6 <HAL_GPIO_Init+0x1fe>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	4a46      	ldr	r2, [pc, #280]	; (80019cc <HAL_GPIO_Init+0x2f4>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d00d      	beq.n	80018d2 <HAL_GPIO_Init+0x1fa>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	4a45      	ldr	r2, [pc, #276]	; (80019d0 <HAL_GPIO_Init+0x2f8>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d007      	beq.n	80018ce <HAL_GPIO_Init+0x1f6>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4a44      	ldr	r2, [pc, #272]	; (80019d4 <HAL_GPIO_Init+0x2fc>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d101      	bne.n	80018ca <HAL_GPIO_Init+0x1f2>
 80018c6:	2304      	movs	r3, #4
 80018c8:	e008      	b.n	80018dc <HAL_GPIO_Init+0x204>
 80018ca:	2307      	movs	r3, #7
 80018cc:	e006      	b.n	80018dc <HAL_GPIO_Init+0x204>
 80018ce:	2303      	movs	r3, #3
 80018d0:	e004      	b.n	80018dc <HAL_GPIO_Init+0x204>
 80018d2:	2302      	movs	r3, #2
 80018d4:	e002      	b.n	80018dc <HAL_GPIO_Init+0x204>
 80018d6:	2301      	movs	r3, #1
 80018d8:	e000      	b.n	80018dc <HAL_GPIO_Init+0x204>
 80018da:	2300      	movs	r3, #0
 80018dc:	69fa      	ldr	r2, [r7, #28]
 80018de:	f002 0203 	and.w	r2, r2, #3
 80018e2:	0092      	lsls	r2, r2, #2
 80018e4:	4093      	lsls	r3, r2
 80018e6:	69ba      	ldr	r2, [r7, #24]
 80018e8:	4313      	orrs	r3, r2
 80018ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018ec:	4934      	ldr	r1, [pc, #208]	; (80019c0 <HAL_GPIO_Init+0x2e8>)
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	089b      	lsrs	r3, r3, #2
 80018f2:	3302      	adds	r3, #2
 80018f4:	69ba      	ldr	r2, [r7, #24]
 80018f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018fa:	4b37      	ldr	r3, [pc, #220]	; (80019d8 <HAL_GPIO_Init+0x300>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	43db      	mvns	r3, r3
 8001904:	69ba      	ldr	r2, [r7, #24]
 8001906:	4013      	ands	r3, r2
 8001908:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001912:	2b00      	cmp	r3, #0
 8001914:	d003      	beq.n	800191e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001916:	69ba      	ldr	r2, [r7, #24]
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	4313      	orrs	r3, r2
 800191c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800191e:	4a2e      	ldr	r2, [pc, #184]	; (80019d8 <HAL_GPIO_Init+0x300>)
 8001920:	69bb      	ldr	r3, [r7, #24]
 8001922:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001924:	4b2c      	ldr	r3, [pc, #176]	; (80019d8 <HAL_GPIO_Init+0x300>)
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	43db      	mvns	r3, r3
 800192e:	69ba      	ldr	r2, [r7, #24]
 8001930:	4013      	ands	r3, r2
 8001932:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800193c:	2b00      	cmp	r3, #0
 800193e:	d003      	beq.n	8001948 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001940:	69ba      	ldr	r2, [r7, #24]
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	4313      	orrs	r3, r2
 8001946:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001948:	4a23      	ldr	r2, [pc, #140]	; (80019d8 <HAL_GPIO_Init+0x300>)
 800194a:	69bb      	ldr	r3, [r7, #24]
 800194c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800194e:	4b22      	ldr	r3, [pc, #136]	; (80019d8 <HAL_GPIO_Init+0x300>)
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	43db      	mvns	r3, r3
 8001958:	69ba      	ldr	r2, [r7, #24]
 800195a:	4013      	ands	r3, r2
 800195c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d003      	beq.n	8001972 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800196a:	69ba      	ldr	r2, [r7, #24]
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	4313      	orrs	r3, r2
 8001970:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001972:	4a19      	ldr	r2, [pc, #100]	; (80019d8 <HAL_GPIO_Init+0x300>)
 8001974:	69bb      	ldr	r3, [r7, #24]
 8001976:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001978:	4b17      	ldr	r3, [pc, #92]	; (80019d8 <HAL_GPIO_Init+0x300>)
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	43db      	mvns	r3, r3
 8001982:	69ba      	ldr	r2, [r7, #24]
 8001984:	4013      	ands	r3, r2
 8001986:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001990:	2b00      	cmp	r3, #0
 8001992:	d003      	beq.n	800199c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001994:	69ba      	ldr	r2, [r7, #24]
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	4313      	orrs	r3, r2
 800199a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800199c:	4a0e      	ldr	r2, [pc, #56]	; (80019d8 <HAL_GPIO_Init+0x300>)
 800199e:	69bb      	ldr	r3, [r7, #24]
 80019a0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	3301      	adds	r3, #1
 80019a6:	61fb      	str	r3, [r7, #28]
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	2b0f      	cmp	r3, #15
 80019ac:	f67f aea2 	bls.w	80016f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80019b0:	bf00      	nop
 80019b2:	3724      	adds	r7, #36	; 0x24
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr
 80019bc:	40023800 	.word	0x40023800
 80019c0:	40013800 	.word	0x40013800
 80019c4:	40020000 	.word	0x40020000
 80019c8:	40020400 	.word	0x40020400
 80019cc:	40020800 	.word	0x40020800
 80019d0:	40020c00 	.word	0x40020c00
 80019d4:	40021000 	.word	0x40021000
 80019d8:	40013c00 	.word	0x40013c00

080019dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80019dc:	b480      	push	{r7}
 80019de:	b085      	sub	sp, #20
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	460b      	mov	r3, r1
 80019e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	691a      	ldr	r2, [r3, #16]
 80019ec:	887b      	ldrh	r3, [r7, #2]
 80019ee:	4013      	ands	r3, r2
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d002      	beq.n	80019fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80019f4:	2301      	movs	r3, #1
 80019f6:	73fb      	strb	r3, [r7, #15]
 80019f8:	e001      	b.n	80019fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80019fa:	2300      	movs	r3, #0
 80019fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80019fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3714      	adds	r7, #20
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr

08001a0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
 8001a14:	460b      	mov	r3, r1
 8001a16:	807b      	strh	r3, [r7, #2]
 8001a18:	4613      	mov	r3, r2
 8001a1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a1c:	787b      	ldrb	r3, [r7, #1]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d003      	beq.n	8001a2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a22:	887a      	ldrh	r2, [r7, #2]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a28:	e003      	b.n	8001a32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a2a:	887b      	ldrh	r3, [r7, #2]
 8001a2c:	041a      	lsls	r2, r3, #16
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	619a      	str	r2, [r3, #24]
}
 8001a32:	bf00      	nop
 8001a34:	370c      	adds	r7, #12
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr

08001a3e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001a3e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a40:	b08f      	sub	sp, #60	; 0x3c
 8001a42:	af0a      	add	r7, sp, #40	; 0x28
 8001a44:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d101      	bne.n	8001a50 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e10f      	b.n	8001c70 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d106      	bne.n	8001a70 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2200      	movs	r2, #0
 8001a66:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f004 fc6c 	bl	8006348 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2203      	movs	r2, #3
 8001a74:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d102      	bne.n	8001a8a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2200      	movs	r2, #0
 8001a88:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f001 fe69 	bl	8003766 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	603b      	str	r3, [r7, #0]
 8001a9a:	687e      	ldr	r6, [r7, #4]
 8001a9c:	466d      	mov	r5, sp
 8001a9e:	f106 0410 	add.w	r4, r6, #16
 8001aa2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001aa4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001aa6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001aa8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001aaa:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001aae:	e885 0003 	stmia.w	r5, {r0, r1}
 8001ab2:	1d33      	adds	r3, r6, #4
 8001ab4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ab6:	6838      	ldr	r0, [r7, #0]
 8001ab8:	f001 fd40 	bl	800353c <USB_CoreInit>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d005      	beq.n	8001ace <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2202      	movs	r2, #2
 8001ac6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e0d0      	b.n	8001c70 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	2100      	movs	r1, #0
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f001 fe57 	bl	8003788 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ada:	2300      	movs	r3, #0
 8001adc:	73fb      	strb	r3, [r7, #15]
 8001ade:	e04a      	b.n	8001b76 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001ae0:	7bfa      	ldrb	r2, [r7, #15]
 8001ae2:	6879      	ldr	r1, [r7, #4]
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	00db      	lsls	r3, r3, #3
 8001ae8:	1a9b      	subs	r3, r3, r2
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	440b      	add	r3, r1
 8001aee:	333d      	adds	r3, #61	; 0x3d
 8001af0:	2201      	movs	r2, #1
 8001af2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001af4:	7bfa      	ldrb	r2, [r7, #15]
 8001af6:	6879      	ldr	r1, [r7, #4]
 8001af8:	4613      	mov	r3, r2
 8001afa:	00db      	lsls	r3, r3, #3
 8001afc:	1a9b      	subs	r3, r3, r2
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	440b      	add	r3, r1
 8001b02:	333c      	adds	r3, #60	; 0x3c
 8001b04:	7bfa      	ldrb	r2, [r7, #15]
 8001b06:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001b08:	7bfa      	ldrb	r2, [r7, #15]
 8001b0a:	7bfb      	ldrb	r3, [r7, #15]
 8001b0c:	b298      	uxth	r0, r3
 8001b0e:	6879      	ldr	r1, [r7, #4]
 8001b10:	4613      	mov	r3, r2
 8001b12:	00db      	lsls	r3, r3, #3
 8001b14:	1a9b      	subs	r3, r3, r2
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	440b      	add	r3, r1
 8001b1a:	3342      	adds	r3, #66	; 0x42
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001b20:	7bfa      	ldrb	r2, [r7, #15]
 8001b22:	6879      	ldr	r1, [r7, #4]
 8001b24:	4613      	mov	r3, r2
 8001b26:	00db      	lsls	r3, r3, #3
 8001b28:	1a9b      	subs	r3, r3, r2
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	440b      	add	r3, r1
 8001b2e:	333f      	adds	r3, #63	; 0x3f
 8001b30:	2200      	movs	r2, #0
 8001b32:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001b34:	7bfa      	ldrb	r2, [r7, #15]
 8001b36:	6879      	ldr	r1, [r7, #4]
 8001b38:	4613      	mov	r3, r2
 8001b3a:	00db      	lsls	r3, r3, #3
 8001b3c:	1a9b      	subs	r3, r3, r2
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	440b      	add	r3, r1
 8001b42:	3344      	adds	r3, #68	; 0x44
 8001b44:	2200      	movs	r2, #0
 8001b46:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001b48:	7bfa      	ldrb	r2, [r7, #15]
 8001b4a:	6879      	ldr	r1, [r7, #4]
 8001b4c:	4613      	mov	r3, r2
 8001b4e:	00db      	lsls	r3, r3, #3
 8001b50:	1a9b      	subs	r3, r3, r2
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	440b      	add	r3, r1
 8001b56:	3348      	adds	r3, #72	; 0x48
 8001b58:	2200      	movs	r2, #0
 8001b5a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001b5c:	7bfa      	ldrb	r2, [r7, #15]
 8001b5e:	6879      	ldr	r1, [r7, #4]
 8001b60:	4613      	mov	r3, r2
 8001b62:	00db      	lsls	r3, r3, #3
 8001b64:	1a9b      	subs	r3, r3, r2
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	440b      	add	r3, r1
 8001b6a:	3350      	adds	r3, #80	; 0x50
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b70:	7bfb      	ldrb	r3, [r7, #15]
 8001b72:	3301      	adds	r3, #1
 8001b74:	73fb      	strb	r3, [r7, #15]
 8001b76:	7bfa      	ldrb	r2, [r7, #15]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d3af      	bcc.n	8001ae0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b80:	2300      	movs	r3, #0
 8001b82:	73fb      	strb	r3, [r7, #15]
 8001b84:	e044      	b.n	8001c10 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001b86:	7bfa      	ldrb	r2, [r7, #15]
 8001b88:	6879      	ldr	r1, [r7, #4]
 8001b8a:	4613      	mov	r3, r2
 8001b8c:	00db      	lsls	r3, r3, #3
 8001b8e:	1a9b      	subs	r3, r3, r2
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	440b      	add	r3, r1
 8001b94:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001b98:	2200      	movs	r2, #0
 8001b9a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001b9c:	7bfa      	ldrb	r2, [r7, #15]
 8001b9e:	6879      	ldr	r1, [r7, #4]
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	00db      	lsls	r3, r3, #3
 8001ba4:	1a9b      	subs	r3, r3, r2
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	440b      	add	r3, r1
 8001baa:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001bae:	7bfa      	ldrb	r2, [r7, #15]
 8001bb0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001bb2:	7bfa      	ldrb	r2, [r7, #15]
 8001bb4:	6879      	ldr	r1, [r7, #4]
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	00db      	lsls	r3, r3, #3
 8001bba:	1a9b      	subs	r3, r3, r2
 8001bbc:	009b      	lsls	r3, r3, #2
 8001bbe:	440b      	add	r3, r1
 8001bc0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001bc8:	7bfa      	ldrb	r2, [r7, #15]
 8001bca:	6879      	ldr	r1, [r7, #4]
 8001bcc:	4613      	mov	r3, r2
 8001bce:	00db      	lsls	r3, r3, #3
 8001bd0:	1a9b      	subs	r3, r3, r2
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	440b      	add	r3, r1
 8001bd6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001bda:	2200      	movs	r2, #0
 8001bdc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001bde:	7bfa      	ldrb	r2, [r7, #15]
 8001be0:	6879      	ldr	r1, [r7, #4]
 8001be2:	4613      	mov	r3, r2
 8001be4:	00db      	lsls	r3, r3, #3
 8001be6:	1a9b      	subs	r3, r3, r2
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	440b      	add	r3, r1
 8001bec:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001bf4:	7bfa      	ldrb	r2, [r7, #15]
 8001bf6:	6879      	ldr	r1, [r7, #4]
 8001bf8:	4613      	mov	r3, r2
 8001bfa:	00db      	lsls	r3, r3, #3
 8001bfc:	1a9b      	subs	r3, r3, r2
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	440b      	add	r3, r1
 8001c02:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001c06:	2200      	movs	r2, #0
 8001c08:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c0a:	7bfb      	ldrb	r3, [r7, #15]
 8001c0c:	3301      	adds	r3, #1
 8001c0e:	73fb      	strb	r3, [r7, #15]
 8001c10:	7bfa      	ldrb	r2, [r7, #15]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d3b5      	bcc.n	8001b86 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	603b      	str	r3, [r7, #0]
 8001c20:	687e      	ldr	r6, [r7, #4]
 8001c22:	466d      	mov	r5, sp
 8001c24:	f106 0410 	add.w	r4, r6, #16
 8001c28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c30:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001c34:	e885 0003 	stmia.w	r5, {r0, r1}
 8001c38:	1d33      	adds	r3, r6, #4
 8001c3a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c3c:	6838      	ldr	r0, [r7, #0]
 8001c3e:	f001 fdcd 	bl	80037dc <USB_DevInit>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d005      	beq.n	8001c54 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2202      	movs	r2, #2
 8001c4c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	e00d      	b.n	8001c70 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2200      	movs	r2, #0
 8001c58:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2201      	movs	r2, #1
 8001c60:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f002 fe0c 	bl	8004886 <USB_DevDisconnect>

  return HAL_OK;
 8001c6e:	2300      	movs	r3, #0
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3714      	adds	r7, #20
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001c78 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b084      	sub	sp, #16
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d101      	bne.n	8001c94 <HAL_PCD_Start+0x1c>
 8001c90:	2302      	movs	r3, #2
 8001c92:	e020      	b.n	8001cd6 <HAL_PCD_Start+0x5e>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2201      	movs	r2, #1
 8001c98:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d109      	bne.n	8001cb8 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d005      	beq.n	8001cb8 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cb0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f002 fdca 	bl	8004856 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f001 fd3c 	bl	8003744 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001cd4:	2300      	movs	r3, #0
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3710      	adds	r7, #16
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}

08001cde <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001cde:	b590      	push	{r4, r7, lr}
 8001ce0:	b08d      	sub	sp, #52	; 0x34
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001cec:	6a3b      	ldr	r3, [r7, #32]
 8001cee:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f002 fe71 	bl	80049dc <USB_GetMode>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	f040 839d 	bne.w	800243c <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4618      	mov	r0, r3
 8001d08:	f002 fdd5 	bl	80048b6 <USB_ReadInterrupts>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	f000 8393 	beq.w	800243a <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f002 fdcc 	bl	80048b6 <USB_ReadInterrupts>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	f003 0302 	and.w	r3, r3, #2
 8001d24:	2b02      	cmp	r3, #2
 8001d26:	d107      	bne.n	8001d38 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	695a      	ldr	r2, [r3, #20]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f002 0202 	and.w	r2, r2, #2
 8001d36:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f002 fdba 	bl	80048b6 <USB_ReadInterrupts>
 8001d42:	4603      	mov	r3, r0
 8001d44:	f003 0310 	and.w	r3, r3, #16
 8001d48:	2b10      	cmp	r3, #16
 8001d4a:	d161      	bne.n	8001e10 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	699a      	ldr	r2, [r3, #24]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f022 0210 	bic.w	r2, r2, #16
 8001d5a:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001d5c:	6a3b      	ldr	r3, [r7, #32]
 8001d5e:	6a1b      	ldr	r3, [r3, #32]
 8001d60:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001d62:	69bb      	ldr	r3, [r7, #24]
 8001d64:	f003 020f 	and.w	r2, r3, #15
 8001d68:	4613      	mov	r3, r2
 8001d6a:	00db      	lsls	r3, r3, #3
 8001d6c:	1a9b      	subs	r3, r3, r2
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001d74:	687a      	ldr	r2, [r7, #4]
 8001d76:	4413      	add	r3, r2
 8001d78:	3304      	adds	r3, #4
 8001d7a:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001d7c:	69bb      	ldr	r3, [r7, #24]
 8001d7e:	0c5b      	lsrs	r3, r3, #17
 8001d80:	f003 030f 	and.w	r3, r3, #15
 8001d84:	2b02      	cmp	r3, #2
 8001d86:	d124      	bne.n	8001dd2 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001d88:	69ba      	ldr	r2, [r7, #24]
 8001d8a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001d8e:	4013      	ands	r3, r2
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d035      	beq.n	8001e00 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001d98:	69bb      	ldr	r3, [r7, #24]
 8001d9a:	091b      	lsrs	r3, r3, #4
 8001d9c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001d9e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001da2:	b29b      	uxth	r3, r3
 8001da4:	461a      	mov	r2, r3
 8001da6:	6a38      	ldr	r0, [r7, #32]
 8001da8:	f002 fc32 	bl	8004610 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	68da      	ldr	r2, [r3, #12]
 8001db0:	69bb      	ldr	r3, [r7, #24]
 8001db2:	091b      	lsrs	r3, r3, #4
 8001db4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001db8:	441a      	add	r2, r3
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	699a      	ldr	r2, [r3, #24]
 8001dc2:	69bb      	ldr	r3, [r7, #24]
 8001dc4:	091b      	lsrs	r3, r3, #4
 8001dc6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001dca:	441a      	add	r2, r3
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	619a      	str	r2, [r3, #24]
 8001dd0:	e016      	b.n	8001e00 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001dd2:	69bb      	ldr	r3, [r7, #24]
 8001dd4:	0c5b      	lsrs	r3, r3, #17
 8001dd6:	f003 030f 	and.w	r3, r3, #15
 8001dda:	2b06      	cmp	r3, #6
 8001ddc:	d110      	bne.n	8001e00 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001de4:	2208      	movs	r2, #8
 8001de6:	4619      	mov	r1, r3
 8001de8:	6a38      	ldr	r0, [r7, #32]
 8001dea:	f002 fc11 	bl	8004610 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	699a      	ldr	r2, [r3, #24]
 8001df2:	69bb      	ldr	r3, [r7, #24]
 8001df4:	091b      	lsrs	r3, r3, #4
 8001df6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001dfa:	441a      	add	r2, r3
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	699a      	ldr	r2, [r3, #24]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f042 0210 	orr.w	r2, r2, #16
 8001e0e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4618      	mov	r0, r3
 8001e16:	f002 fd4e 	bl	80048b6 <USB_ReadInterrupts>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e20:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001e24:	d16e      	bne.n	8001f04 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8001e26:	2300      	movs	r3, #0
 8001e28:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f002 fd54 	bl	80048dc <USB_ReadDevAllOutEpInterrupt>
 8001e34:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001e36:	e062      	b.n	8001efe <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e3a:	f003 0301 	and.w	r3, r3, #1
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d057      	beq.n	8001ef2 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e48:	b2d2      	uxtb	r2, r2
 8001e4a:	4611      	mov	r1, r2
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f002 fd79 	bl	8004944 <USB_ReadDevOutEPInterrupt>
 8001e52:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	f003 0301 	and.w	r3, r3, #1
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d00c      	beq.n	8001e78 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e60:	015a      	lsls	r2, r3, #5
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	4413      	add	r3, r2
 8001e66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001e70:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f000 fd98 	bl	80029a8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	f003 0308 	and.w	r3, r3, #8
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d00c      	beq.n	8001e9c <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e84:	015a      	lsls	r2, r3, #5
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	4413      	add	r3, r2
 8001e8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e8e:	461a      	mov	r2, r3
 8001e90:	2308      	movs	r3, #8
 8001e92:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001e94:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f000 fe92 	bl	8002bc0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	f003 0310 	and.w	r3, r3, #16
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d008      	beq.n	8001eb8 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea8:	015a      	lsls	r2, r3, #5
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	4413      	add	r3, r2
 8001eae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	2310      	movs	r3, #16
 8001eb6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	f003 0320 	and.w	r3, r3, #32
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d008      	beq.n	8001ed4 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec4:	015a      	lsls	r2, r3, #5
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	4413      	add	r3, r2
 8001eca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ece:	461a      	mov	r2, r3
 8001ed0:	2320      	movs	r3, #32
 8001ed2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d009      	beq.n	8001ef2 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee0:	015a      	lsls	r2, r3, #5
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	4413      	add	r3, r2
 8001ee6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001eea:	461a      	mov	r2, r3
 8001eec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ef0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef4:	3301      	adds	r3, #1
 8001ef6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001efa:	085b      	lsrs	r3, r3, #1
 8001efc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d199      	bne.n	8001e38 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f002 fcd4 	bl	80048b6 <USB_ReadInterrupts>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f14:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001f18:	f040 80c0 	bne.w	800209c <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4618      	mov	r0, r3
 8001f22:	f002 fcf5 	bl	8004910 <USB_ReadDevAllInEpInterrupt>
 8001f26:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001f2c:	e0b2      	b.n	8002094 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f30:	f003 0301 	and.w	r3, r3, #1
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	f000 80a7 	beq.w	8002088 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f40:	b2d2      	uxtb	r2, r2
 8001f42:	4611      	mov	r1, r2
 8001f44:	4618      	mov	r0, r3
 8001f46:	f002 fd1b 	bl	8004980 <USB_ReadDevInEPInterrupt>
 8001f4a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	f003 0301 	and.w	r3, r3, #1
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d057      	beq.n	8002006 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f58:	f003 030f 	and.w	r3, r3, #15
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f62:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001f64:	69fb      	ldr	r3, [r7, #28]
 8001f66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	43db      	mvns	r3, r3
 8001f70:	69f9      	ldr	r1, [r7, #28]
 8001f72:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001f76:	4013      	ands	r3, r2
 8001f78:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7c:	015a      	lsls	r2, r3, #5
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	4413      	add	r3, r2
 8001f82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f86:	461a      	mov	r2, r3
 8001f88:	2301      	movs	r3, #1
 8001f8a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	691b      	ldr	r3, [r3, #16]
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	d132      	bne.n	8001ffa <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001f94:	6879      	ldr	r1, [r7, #4]
 8001f96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f98:	4613      	mov	r3, r2
 8001f9a:	00db      	lsls	r3, r3, #3
 8001f9c:	1a9b      	subs	r3, r3, r2
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	440b      	add	r3, r1
 8001fa2:	3348      	adds	r3, #72	; 0x48
 8001fa4:	6819      	ldr	r1, [r3, #0]
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001faa:	4613      	mov	r3, r2
 8001fac:	00db      	lsls	r3, r3, #3
 8001fae:	1a9b      	subs	r3, r3, r2
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	4403      	add	r3, r0
 8001fb4:	3344      	adds	r3, #68	; 0x44
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4419      	add	r1, r3
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fbe:	4613      	mov	r3, r2
 8001fc0:	00db      	lsls	r3, r3, #3
 8001fc2:	1a9b      	subs	r3, r3, r2
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	4403      	add	r3, r0
 8001fc8:	3348      	adds	r3, #72	; 0x48
 8001fca:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d113      	bne.n	8001ffa <HAL_PCD_IRQHandler+0x31c>
 8001fd2:	6879      	ldr	r1, [r7, #4]
 8001fd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fd6:	4613      	mov	r3, r2
 8001fd8:	00db      	lsls	r3, r3, #3
 8001fda:	1a9b      	subs	r3, r3, r2
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	440b      	add	r3, r1
 8001fe0:	3350      	adds	r3, #80	; 0x50
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d108      	bne.n	8001ffa <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6818      	ldr	r0, [r3, #0]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	2101      	movs	r1, #1
 8001ff6:	f002 fd23 	bl	8004a40 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	4619      	mov	r1, r3
 8002000:	6878      	ldr	r0, [r7, #4]
 8002002:	f004 fa22 	bl	800644a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	f003 0308 	and.w	r3, r3, #8
 800200c:	2b00      	cmp	r3, #0
 800200e:	d008      	beq.n	8002022 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002012:	015a      	lsls	r2, r3, #5
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	4413      	add	r3, r2
 8002018:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800201c:	461a      	mov	r2, r3
 800201e:	2308      	movs	r3, #8
 8002020:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	f003 0310 	and.w	r3, r3, #16
 8002028:	2b00      	cmp	r3, #0
 800202a:	d008      	beq.n	800203e <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800202c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800202e:	015a      	lsls	r2, r3, #5
 8002030:	69fb      	ldr	r3, [r7, #28]
 8002032:	4413      	add	r3, r2
 8002034:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002038:	461a      	mov	r2, r3
 800203a:	2310      	movs	r3, #16
 800203c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002044:	2b00      	cmp	r3, #0
 8002046:	d008      	beq.n	800205a <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800204a:	015a      	lsls	r2, r3, #5
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	4413      	add	r3, r2
 8002050:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002054:	461a      	mov	r2, r3
 8002056:	2340      	movs	r3, #64	; 0x40
 8002058:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	f003 0302 	and.w	r3, r3, #2
 8002060:	2b00      	cmp	r3, #0
 8002062:	d008      	beq.n	8002076 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002066:	015a      	lsls	r2, r3, #5
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	4413      	add	r3, r2
 800206c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002070:	461a      	mov	r2, r3
 8002072:	2302      	movs	r3, #2
 8002074:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800207c:	2b00      	cmp	r3, #0
 800207e:	d003      	beq.n	8002088 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002080:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f000 fc03 	bl	800288e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208a:	3301      	adds	r3, #1
 800208c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800208e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002090:	085b      	lsrs	r3, r3, #1
 8002092:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002096:	2b00      	cmp	r3, #0
 8002098:	f47f af49 	bne.w	8001f2e <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4618      	mov	r0, r3
 80020a2:	f002 fc08 	bl	80048b6 <USB_ReadInterrupts>
 80020a6:	4603      	mov	r3, r0
 80020a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80020ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80020b0:	d122      	bne.n	80020f8 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	69fa      	ldr	r2, [r7, #28]
 80020bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80020c0:	f023 0301 	bic.w	r3, r3, #1
 80020c4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d108      	bne.n	80020e2 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2200      	movs	r2, #0
 80020d4:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80020d8:	2100      	movs	r1, #0
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f000 fe0e 	bl	8002cfc <HAL_PCDEx_LPM_Callback>
 80020e0:	e002      	b.n	80020e8 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f004 fa1e 	bl	8006524 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	695a      	ldr	r2, [r3, #20]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80020f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4618      	mov	r0, r3
 80020fe:	f002 fbda 	bl	80048b6 <USB_ReadInterrupts>
 8002102:	4603      	mov	r3, r0
 8002104:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002108:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800210c:	d112      	bne.n	8002134 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	f003 0301 	and.w	r3, r3, #1
 800211a:	2b01      	cmp	r3, #1
 800211c:	d102      	bne.n	8002124 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f004 f9da 	bl	80064d8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	695a      	ldr	r2, [r3, #20]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002132:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4618      	mov	r0, r3
 800213a:	f002 fbbc 	bl	80048b6 <USB_ReadInterrupts>
 800213e:	4603      	mov	r3, r0
 8002140:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002144:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002148:	f040 80c7 	bne.w	80022da <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	69fa      	ldr	r2, [r7, #28]
 8002156:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800215a:	f023 0301 	bic.w	r3, r3, #1
 800215e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	2110      	movs	r1, #16
 8002166:	4618      	mov	r0, r3
 8002168:	f001 fc9c 	bl	8003aa4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800216c:	2300      	movs	r3, #0
 800216e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002170:	e056      	b.n	8002220 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002174:	015a      	lsls	r2, r3, #5
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	4413      	add	r3, r2
 800217a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800217e:	461a      	mov	r2, r3
 8002180:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002184:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002188:	015a      	lsls	r2, r3, #5
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	4413      	add	r3, r2
 800218e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002196:	0151      	lsls	r1, r2, #5
 8002198:	69fa      	ldr	r2, [r7, #28]
 800219a:	440a      	add	r2, r1
 800219c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80021a0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80021a4:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80021a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021a8:	015a      	lsls	r2, r3, #5
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	4413      	add	r3, r2
 80021ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80021b6:	0151      	lsls	r1, r2, #5
 80021b8:	69fa      	ldr	r2, [r7, #28]
 80021ba:	440a      	add	r2, r1
 80021bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80021c0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80021c4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80021c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021c8:	015a      	lsls	r2, r3, #5
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	4413      	add	r3, r2
 80021ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021d2:	461a      	mov	r2, r3
 80021d4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80021d8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80021da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021dc:	015a      	lsls	r2, r3, #5
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	4413      	add	r3, r2
 80021e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80021ea:	0151      	lsls	r1, r2, #5
 80021ec:	69fa      	ldr	r2, [r7, #28]
 80021ee:	440a      	add	r2, r1
 80021f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80021f4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80021f8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80021fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021fc:	015a      	lsls	r2, r3, #5
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	4413      	add	r3, r2
 8002202:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800220a:	0151      	lsls	r1, r2, #5
 800220c:	69fa      	ldr	r2, [r7, #28]
 800220e:	440a      	add	r2, r1
 8002210:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002214:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002218:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800221a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800221c:	3301      	adds	r3, #1
 800221e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002226:	429a      	cmp	r2, r3
 8002228:	d3a3      	bcc.n	8002172 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002230:	69db      	ldr	r3, [r3, #28]
 8002232:	69fa      	ldr	r2, [r7, #28]
 8002234:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002238:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800223c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002242:	2b00      	cmp	r3, #0
 8002244:	d016      	beq.n	8002274 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800224c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002250:	69fa      	ldr	r2, [r7, #28]
 8002252:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002256:	f043 030b 	orr.w	r3, r3, #11
 800225a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002266:	69fa      	ldr	r2, [r7, #28]
 8002268:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800226c:	f043 030b 	orr.w	r3, r3, #11
 8002270:	6453      	str	r3, [r2, #68]	; 0x44
 8002272:	e015      	b.n	80022a0 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800227a:	695b      	ldr	r3, [r3, #20]
 800227c:	69fa      	ldr	r2, [r7, #28]
 800227e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002282:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002286:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800228a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800228c:	69fb      	ldr	r3, [r7, #28]
 800228e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002292:	691b      	ldr	r3, [r3, #16]
 8002294:	69fa      	ldr	r2, [r7, #28]
 8002296:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800229a:	f043 030b 	orr.w	r3, r3, #11
 800229e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80022a0:	69fb      	ldr	r3, [r7, #28]
 80022a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	69fa      	ldr	r2, [r7, #28]
 80022aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80022ae:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80022b2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6818      	ldr	r0, [r3, #0]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	691b      	ldr	r3, [r3, #16]
 80022bc:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80022c4:	461a      	mov	r2, r3
 80022c6:	f002 fbbb 	bl	8004a40 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	695a      	ldr	r2, [r3, #20]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80022d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4618      	mov	r0, r3
 80022e0:	f002 fae9 	bl	80048b6 <USB_ReadInterrupts>
 80022e4:	4603      	mov	r3, r0
 80022e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022ee:	d124      	bne.n	800233a <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4618      	mov	r0, r3
 80022f6:	f002 fb7f 	bl	80049f8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4618      	mov	r0, r3
 8002300:	f001 fc31 	bl	8003b66 <USB_GetDevSpeed>
 8002304:	4603      	mov	r3, r0
 8002306:	461a      	mov	r2, r3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681c      	ldr	r4, [r3, #0]
 8002310:	f001 f908 	bl	8003524 <HAL_RCC_GetHCLKFreq>
 8002314:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800231a:	b2db      	uxtb	r3, r3
 800231c:	461a      	mov	r2, r3
 800231e:	4620      	mov	r0, r4
 8002320:	f001 f96e 	bl	8003600 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	f004 f8b8 	bl	800649a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	695a      	ldr	r2, [r3, #20]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002338:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4618      	mov	r0, r3
 8002340:	f002 fab9 	bl	80048b6 <USB_ReadInterrupts>
 8002344:	4603      	mov	r3, r0
 8002346:	f003 0308 	and.w	r3, r3, #8
 800234a:	2b08      	cmp	r3, #8
 800234c:	d10a      	bne.n	8002364 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	f004 f895 	bl	800647e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	695a      	ldr	r2, [r3, #20]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f002 0208 	and.w	r2, r2, #8
 8002362:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4618      	mov	r0, r3
 800236a:	f002 faa4 	bl	80048b6 <USB_ReadInterrupts>
 800236e:	4603      	mov	r3, r0
 8002370:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002374:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002378:	d10f      	bne.n	800239a <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800237a:	2300      	movs	r3, #0
 800237c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800237e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002380:	b2db      	uxtb	r3, r3
 8002382:	4619      	mov	r1, r3
 8002384:	6878      	ldr	r0, [r7, #4]
 8002386:	f004 f8ed 	bl	8006564 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	695a      	ldr	r2, [r3, #20]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002398:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4618      	mov	r0, r3
 80023a0:	f002 fa89 	bl	80048b6 <USB_ReadInterrupts>
 80023a4:	4603      	mov	r3, r0
 80023a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80023ae:	d10f      	bne.n	80023d0 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80023b0:	2300      	movs	r3, #0
 80023b2:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80023b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b6:	b2db      	uxtb	r3, r3
 80023b8:	4619      	mov	r1, r3
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f004 f8c0 	bl	8006540 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	695a      	ldr	r2, [r3, #20]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80023ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4618      	mov	r0, r3
 80023d6:	f002 fa6e 	bl	80048b6 <USB_ReadInterrupts>
 80023da:	4603      	mov	r3, r0
 80023dc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80023e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023e4:	d10a      	bne.n	80023fc <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f004 f8ce 	bl	8006588 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	695a      	ldr	r2, [r3, #20]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80023fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4618      	mov	r0, r3
 8002402:	f002 fa58 	bl	80048b6 <USB_ReadInterrupts>
 8002406:	4603      	mov	r3, r0
 8002408:	f003 0304 	and.w	r3, r3, #4
 800240c:	2b04      	cmp	r3, #4
 800240e:	d115      	bne.n	800243c <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002418:	69bb      	ldr	r3, [r7, #24]
 800241a:	f003 0304 	and.w	r3, r3, #4
 800241e:	2b00      	cmp	r3, #0
 8002420:	d002      	beq.n	8002428 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f004 f8be 	bl	80065a4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	6859      	ldr	r1, [r3, #4]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	69ba      	ldr	r2, [r7, #24]
 8002434:	430a      	orrs	r2, r1
 8002436:	605a      	str	r2, [r3, #4]
 8002438:	e000      	b.n	800243c <HAL_PCD_IRQHandler+0x75e>
      return;
 800243a:	bf00      	nop
    }
  }
}
 800243c:	3734      	adds	r7, #52	; 0x34
 800243e:	46bd      	mov	sp, r7
 8002440:	bd90      	pop	{r4, r7, pc}

08002442 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002442:	b580      	push	{r7, lr}
 8002444:	b082      	sub	sp, #8
 8002446:	af00      	add	r7, sp, #0
 8002448:	6078      	str	r0, [r7, #4]
 800244a:	460b      	mov	r3, r1
 800244c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002454:	2b01      	cmp	r3, #1
 8002456:	d101      	bne.n	800245c <HAL_PCD_SetAddress+0x1a>
 8002458:	2302      	movs	r3, #2
 800245a:	e013      	b.n	8002484 <HAL_PCD_SetAddress+0x42>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2201      	movs	r2, #1
 8002460:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	78fa      	ldrb	r2, [r7, #3]
 8002468:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	78fa      	ldrb	r2, [r7, #3]
 8002472:	4611      	mov	r1, r2
 8002474:	4618      	mov	r0, r3
 8002476:	f002 f9c8 	bl	800480a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2200      	movs	r2, #0
 800247e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002482:	2300      	movs	r3, #0
}
 8002484:	4618      	mov	r0, r3
 8002486:	3708      	adds	r7, #8
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}

0800248c <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b084      	sub	sp, #16
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	4608      	mov	r0, r1
 8002496:	4611      	mov	r1, r2
 8002498:	461a      	mov	r2, r3
 800249a:	4603      	mov	r3, r0
 800249c:	70fb      	strb	r3, [r7, #3]
 800249e:	460b      	mov	r3, r1
 80024a0:	803b      	strh	r3, [r7, #0]
 80024a2:	4613      	mov	r3, r2
 80024a4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80024a6:	2300      	movs	r3, #0
 80024a8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80024aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	da0f      	bge.n	80024d2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024b2:	78fb      	ldrb	r3, [r7, #3]
 80024b4:	f003 020f 	and.w	r2, r3, #15
 80024b8:	4613      	mov	r3, r2
 80024ba:	00db      	lsls	r3, r3, #3
 80024bc:	1a9b      	subs	r3, r3, r2
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	3338      	adds	r3, #56	; 0x38
 80024c2:	687a      	ldr	r2, [r7, #4]
 80024c4:	4413      	add	r3, r2
 80024c6:	3304      	adds	r3, #4
 80024c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2201      	movs	r2, #1
 80024ce:	705a      	strb	r2, [r3, #1]
 80024d0:	e00f      	b.n	80024f2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80024d2:	78fb      	ldrb	r3, [r7, #3]
 80024d4:	f003 020f 	and.w	r2, r3, #15
 80024d8:	4613      	mov	r3, r2
 80024da:	00db      	lsls	r3, r3, #3
 80024dc:	1a9b      	subs	r3, r3, r2
 80024de:	009b      	lsls	r3, r3, #2
 80024e0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80024e4:	687a      	ldr	r2, [r7, #4]
 80024e6:	4413      	add	r3, r2
 80024e8:	3304      	adds	r3, #4
 80024ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	2200      	movs	r2, #0
 80024f0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80024f2:	78fb      	ldrb	r3, [r7, #3]
 80024f4:	f003 030f 	and.w	r3, r3, #15
 80024f8:	b2da      	uxtb	r2, r3
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80024fe:	883a      	ldrh	r2, [r7, #0]
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	78ba      	ldrb	r2, [r7, #2]
 8002508:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	785b      	ldrb	r3, [r3, #1]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d004      	beq.n	800251c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	b29a      	uxth	r2, r3
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800251c:	78bb      	ldrb	r3, [r7, #2]
 800251e:	2b02      	cmp	r3, #2
 8002520:	d102      	bne.n	8002528 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2200      	movs	r2, #0
 8002526:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800252e:	2b01      	cmp	r3, #1
 8002530:	d101      	bne.n	8002536 <HAL_PCD_EP_Open+0xaa>
 8002532:	2302      	movs	r3, #2
 8002534:	e00e      	b.n	8002554 <HAL_PCD_EP_Open+0xc8>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2201      	movs	r2, #1
 800253a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	68f9      	ldr	r1, [r7, #12]
 8002544:	4618      	mov	r0, r3
 8002546:	f001 fb33 	bl	8003bb0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2200      	movs	r2, #0
 800254e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002552:	7afb      	ldrb	r3, [r7, #11]
}
 8002554:	4618      	mov	r0, r3
 8002556:	3710      	adds	r7, #16
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}

0800255c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	460b      	mov	r3, r1
 8002566:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002568:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800256c:	2b00      	cmp	r3, #0
 800256e:	da0f      	bge.n	8002590 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002570:	78fb      	ldrb	r3, [r7, #3]
 8002572:	f003 020f 	and.w	r2, r3, #15
 8002576:	4613      	mov	r3, r2
 8002578:	00db      	lsls	r3, r3, #3
 800257a:	1a9b      	subs	r3, r3, r2
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	3338      	adds	r3, #56	; 0x38
 8002580:	687a      	ldr	r2, [r7, #4]
 8002582:	4413      	add	r3, r2
 8002584:	3304      	adds	r3, #4
 8002586:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2201      	movs	r2, #1
 800258c:	705a      	strb	r2, [r3, #1]
 800258e:	e00f      	b.n	80025b0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002590:	78fb      	ldrb	r3, [r7, #3]
 8002592:	f003 020f 	and.w	r2, r3, #15
 8002596:	4613      	mov	r3, r2
 8002598:	00db      	lsls	r3, r3, #3
 800259a:	1a9b      	subs	r3, r3, r2
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80025a2:	687a      	ldr	r2, [r7, #4]
 80025a4:	4413      	add	r3, r2
 80025a6:	3304      	adds	r3, #4
 80025a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	2200      	movs	r2, #0
 80025ae:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80025b0:	78fb      	ldrb	r3, [r7, #3]
 80025b2:	f003 030f 	and.w	r3, r3, #15
 80025b6:	b2da      	uxtb	r2, r3
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d101      	bne.n	80025ca <HAL_PCD_EP_Close+0x6e>
 80025c6:	2302      	movs	r3, #2
 80025c8:	e00e      	b.n	80025e8 <HAL_PCD_EP_Close+0x8c>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2201      	movs	r2, #1
 80025ce:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	68f9      	ldr	r1, [r7, #12]
 80025d8:	4618      	mov	r0, r3
 80025da:	f001 fb71 	bl	8003cc0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2200      	movs	r2, #0
 80025e2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80025e6:	2300      	movs	r3, #0
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	3710      	adds	r7, #16
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}

080025f0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b086      	sub	sp, #24
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	60f8      	str	r0, [r7, #12]
 80025f8:	607a      	str	r2, [r7, #4]
 80025fa:	603b      	str	r3, [r7, #0]
 80025fc:	460b      	mov	r3, r1
 80025fe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002600:	7afb      	ldrb	r3, [r7, #11]
 8002602:	f003 020f 	and.w	r2, r3, #15
 8002606:	4613      	mov	r3, r2
 8002608:	00db      	lsls	r3, r3, #3
 800260a:	1a9b      	subs	r3, r3, r2
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002612:	68fa      	ldr	r2, [r7, #12]
 8002614:	4413      	add	r3, r2
 8002616:	3304      	adds	r3, #4
 8002618:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	687a      	ldr	r2, [r7, #4]
 800261e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	683a      	ldr	r2, [r7, #0]
 8002624:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	2200      	movs	r2, #0
 800262a:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	2200      	movs	r2, #0
 8002630:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002632:	7afb      	ldrb	r3, [r7, #11]
 8002634:	f003 030f 	and.w	r3, r3, #15
 8002638:	b2da      	uxtb	r2, r3
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	691b      	ldr	r3, [r3, #16]
 8002642:	2b01      	cmp	r3, #1
 8002644:	d102      	bne.n	800264c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002646:	687a      	ldr	r2, [r7, #4]
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800264c:	7afb      	ldrb	r3, [r7, #11]
 800264e:	f003 030f 	and.w	r3, r3, #15
 8002652:	2b00      	cmp	r3, #0
 8002654:	d109      	bne.n	800266a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	6818      	ldr	r0, [r3, #0]
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	691b      	ldr	r3, [r3, #16]
 800265e:	b2db      	uxtb	r3, r3
 8002660:	461a      	mov	r2, r3
 8002662:	6979      	ldr	r1, [r7, #20]
 8002664:	f001 fe4c 	bl	8004300 <USB_EP0StartXfer>
 8002668:	e008      	b.n	800267c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	6818      	ldr	r0, [r3, #0]
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	691b      	ldr	r3, [r3, #16]
 8002672:	b2db      	uxtb	r3, r3
 8002674:	461a      	mov	r2, r3
 8002676:	6979      	ldr	r1, [r7, #20]
 8002678:	f001 fbfe 	bl	8003e78 <USB_EPStartXfer>
  }

  return HAL_OK;
 800267c:	2300      	movs	r3, #0
}
 800267e:	4618      	mov	r0, r3
 8002680:	3718      	adds	r7, #24
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}

08002686 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002686:	b580      	push	{r7, lr}
 8002688:	b086      	sub	sp, #24
 800268a:	af00      	add	r7, sp, #0
 800268c:	60f8      	str	r0, [r7, #12]
 800268e:	607a      	str	r2, [r7, #4]
 8002690:	603b      	str	r3, [r7, #0]
 8002692:	460b      	mov	r3, r1
 8002694:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002696:	7afb      	ldrb	r3, [r7, #11]
 8002698:	f003 020f 	and.w	r2, r3, #15
 800269c:	4613      	mov	r3, r2
 800269e:	00db      	lsls	r3, r3, #3
 80026a0:	1a9b      	subs	r3, r3, r2
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	3338      	adds	r3, #56	; 0x38
 80026a6:	68fa      	ldr	r2, [r7, #12]
 80026a8:	4413      	add	r3, r2
 80026aa:	3304      	adds	r3, #4
 80026ac:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	687a      	ldr	r2, [r7, #4]
 80026b2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	683a      	ldr	r2, [r7, #0]
 80026b8:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	2200      	movs	r2, #0
 80026be:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	2201      	movs	r2, #1
 80026c4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80026c6:	7afb      	ldrb	r3, [r7, #11]
 80026c8:	f003 030f 	and.w	r3, r3, #15
 80026cc:	b2da      	uxtb	r2, r3
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	691b      	ldr	r3, [r3, #16]
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d102      	bne.n	80026e0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80026da:	687a      	ldr	r2, [r7, #4]
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80026e0:	7afb      	ldrb	r3, [r7, #11]
 80026e2:	f003 030f 	and.w	r3, r3, #15
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d109      	bne.n	80026fe <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	6818      	ldr	r0, [r3, #0]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	691b      	ldr	r3, [r3, #16]
 80026f2:	b2db      	uxtb	r3, r3
 80026f4:	461a      	mov	r2, r3
 80026f6:	6979      	ldr	r1, [r7, #20]
 80026f8:	f001 fe02 	bl	8004300 <USB_EP0StartXfer>
 80026fc:	e008      	b.n	8002710 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	6818      	ldr	r0, [r3, #0]
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	691b      	ldr	r3, [r3, #16]
 8002706:	b2db      	uxtb	r3, r3
 8002708:	461a      	mov	r2, r3
 800270a:	6979      	ldr	r1, [r7, #20]
 800270c:	f001 fbb4 	bl	8003e78 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002710:	2300      	movs	r3, #0
}
 8002712:	4618      	mov	r0, r3
 8002714:	3718      	adds	r7, #24
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}

0800271a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800271a:	b580      	push	{r7, lr}
 800271c:	b084      	sub	sp, #16
 800271e:	af00      	add	r7, sp, #0
 8002720:	6078      	str	r0, [r7, #4]
 8002722:	460b      	mov	r3, r1
 8002724:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002726:	78fb      	ldrb	r3, [r7, #3]
 8002728:	f003 020f 	and.w	r2, r3, #15
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	429a      	cmp	r2, r3
 8002732:	d901      	bls.n	8002738 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	e050      	b.n	80027da <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002738:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800273c:	2b00      	cmp	r3, #0
 800273e:	da0f      	bge.n	8002760 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002740:	78fb      	ldrb	r3, [r7, #3]
 8002742:	f003 020f 	and.w	r2, r3, #15
 8002746:	4613      	mov	r3, r2
 8002748:	00db      	lsls	r3, r3, #3
 800274a:	1a9b      	subs	r3, r3, r2
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	3338      	adds	r3, #56	; 0x38
 8002750:	687a      	ldr	r2, [r7, #4]
 8002752:	4413      	add	r3, r2
 8002754:	3304      	adds	r3, #4
 8002756:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2201      	movs	r2, #1
 800275c:	705a      	strb	r2, [r3, #1]
 800275e:	e00d      	b.n	800277c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002760:	78fa      	ldrb	r2, [r7, #3]
 8002762:	4613      	mov	r3, r2
 8002764:	00db      	lsls	r3, r3, #3
 8002766:	1a9b      	subs	r3, r3, r2
 8002768:	009b      	lsls	r3, r3, #2
 800276a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	4413      	add	r3, r2
 8002772:	3304      	adds	r3, #4
 8002774:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2200      	movs	r2, #0
 800277a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2201      	movs	r2, #1
 8002780:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002782:	78fb      	ldrb	r3, [r7, #3]
 8002784:	f003 030f 	and.w	r3, r3, #15
 8002788:	b2da      	uxtb	r2, r3
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002794:	2b01      	cmp	r3, #1
 8002796:	d101      	bne.n	800279c <HAL_PCD_EP_SetStall+0x82>
 8002798:	2302      	movs	r3, #2
 800279a:	e01e      	b.n	80027da <HAL_PCD_EP_SetStall+0xc0>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2201      	movs	r2, #1
 80027a0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	68f9      	ldr	r1, [r7, #12]
 80027aa:	4618      	mov	r0, r3
 80027ac:	f001 ff59 	bl	8004662 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80027b0:	78fb      	ldrb	r3, [r7, #3]
 80027b2:	f003 030f 	and.w	r3, r3, #15
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d10a      	bne.n	80027d0 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6818      	ldr	r0, [r3, #0]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	691b      	ldr	r3, [r3, #16]
 80027c2:	b2d9      	uxtb	r1, r3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80027ca:	461a      	mov	r2, r3
 80027cc:	f002 f938 	bl	8004a40 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2200      	movs	r2, #0
 80027d4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80027d8:	2300      	movs	r3, #0
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3710      	adds	r7, #16
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}

080027e2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80027e2:	b580      	push	{r7, lr}
 80027e4:	b084      	sub	sp, #16
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	6078      	str	r0, [r7, #4]
 80027ea:	460b      	mov	r3, r1
 80027ec:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80027ee:	78fb      	ldrb	r3, [r7, #3]
 80027f0:	f003 020f 	and.w	r2, r3, #15
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d901      	bls.n	8002800 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e042      	b.n	8002886 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002800:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002804:	2b00      	cmp	r3, #0
 8002806:	da0f      	bge.n	8002828 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002808:	78fb      	ldrb	r3, [r7, #3]
 800280a:	f003 020f 	and.w	r2, r3, #15
 800280e:	4613      	mov	r3, r2
 8002810:	00db      	lsls	r3, r3, #3
 8002812:	1a9b      	subs	r3, r3, r2
 8002814:	009b      	lsls	r3, r3, #2
 8002816:	3338      	adds	r3, #56	; 0x38
 8002818:	687a      	ldr	r2, [r7, #4]
 800281a:	4413      	add	r3, r2
 800281c:	3304      	adds	r3, #4
 800281e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2201      	movs	r2, #1
 8002824:	705a      	strb	r2, [r3, #1]
 8002826:	e00f      	b.n	8002848 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002828:	78fb      	ldrb	r3, [r7, #3]
 800282a:	f003 020f 	and.w	r2, r3, #15
 800282e:	4613      	mov	r3, r2
 8002830:	00db      	lsls	r3, r3, #3
 8002832:	1a9b      	subs	r3, r3, r2
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800283a:	687a      	ldr	r2, [r7, #4]
 800283c:	4413      	add	r3, r2
 800283e:	3304      	adds	r3, #4
 8002840:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2200      	movs	r2, #0
 8002846:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2200      	movs	r2, #0
 800284c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800284e:	78fb      	ldrb	r3, [r7, #3]
 8002850:	f003 030f 	and.w	r3, r3, #15
 8002854:	b2da      	uxtb	r2, r3
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002860:	2b01      	cmp	r3, #1
 8002862:	d101      	bne.n	8002868 <HAL_PCD_EP_ClrStall+0x86>
 8002864:	2302      	movs	r3, #2
 8002866:	e00e      	b.n	8002886 <HAL_PCD_EP_ClrStall+0xa4>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2201      	movs	r2, #1
 800286c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	68f9      	ldr	r1, [r7, #12]
 8002876:	4618      	mov	r0, r3
 8002878:	f001 ff61 	bl	800473e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2200      	movs	r2, #0
 8002880:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002884:	2300      	movs	r3, #0
}
 8002886:	4618      	mov	r0, r3
 8002888:	3710      	adds	r7, #16
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}

0800288e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800288e:	b580      	push	{r7, lr}
 8002890:	b08a      	sub	sp, #40	; 0x28
 8002892:	af02      	add	r7, sp, #8
 8002894:	6078      	str	r0, [r7, #4]
 8002896:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80028a2:	683a      	ldr	r2, [r7, #0]
 80028a4:	4613      	mov	r3, r2
 80028a6:	00db      	lsls	r3, r3, #3
 80028a8:	1a9b      	subs	r3, r3, r2
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	3338      	adds	r3, #56	; 0x38
 80028ae:	687a      	ldr	r2, [r7, #4]
 80028b0:	4413      	add	r3, r2
 80028b2:	3304      	adds	r3, #4
 80028b4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	699a      	ldr	r2, [r3, #24]
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	695b      	ldr	r3, [r3, #20]
 80028be:	429a      	cmp	r2, r3
 80028c0:	d901      	bls.n	80028c6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e06c      	b.n	80029a0 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	695a      	ldr	r2, [r3, #20]
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	699b      	ldr	r3, [r3, #24]
 80028ce:	1ad3      	subs	r3, r2, r3
 80028d0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	69fa      	ldr	r2, [r7, #28]
 80028d8:	429a      	cmp	r2, r3
 80028da:	d902      	bls.n	80028e2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	3303      	adds	r3, #3
 80028e6:	089b      	lsrs	r3, r3, #2
 80028e8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80028ea:	e02b      	b.n	8002944 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	695a      	ldr	r2, [r3, #20]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	699b      	ldr	r3, [r3, #24]
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	69fa      	ldr	r2, [r7, #28]
 80028fe:	429a      	cmp	r2, r3
 8002900:	d902      	bls.n	8002908 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002908:	69fb      	ldr	r3, [r7, #28]
 800290a:	3303      	adds	r3, #3
 800290c:	089b      	lsrs	r3, r3, #2
 800290e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	68d9      	ldr	r1, [r3, #12]
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	b2da      	uxtb	r2, r3
 8002918:	69fb      	ldr	r3, [r7, #28]
 800291a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002920:	b2db      	uxtb	r3, r3
 8002922:	9300      	str	r3, [sp, #0]
 8002924:	4603      	mov	r3, r0
 8002926:	6978      	ldr	r0, [r7, #20]
 8002928:	f001 fe3d 	bl	80045a6 <USB_WritePacket>

    ep->xfer_buff  += len;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	68da      	ldr	r2, [r3, #12]
 8002930:	69fb      	ldr	r3, [r7, #28]
 8002932:	441a      	add	r2, r3
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	699a      	ldr	r2, [r3, #24]
 800293c:	69fb      	ldr	r3, [r7, #28]
 800293e:	441a      	add	r2, r3
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	015a      	lsls	r2, r3, #5
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	4413      	add	r3, r2
 800294c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002950:	699b      	ldr	r3, [r3, #24]
 8002952:	b29b      	uxth	r3, r3
 8002954:	69ba      	ldr	r2, [r7, #24]
 8002956:	429a      	cmp	r2, r3
 8002958:	d809      	bhi.n	800296e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	699a      	ldr	r2, [r3, #24]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002962:	429a      	cmp	r2, r3
 8002964:	d203      	bcs.n	800296e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	695b      	ldr	r3, [r3, #20]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d1be      	bne.n	80028ec <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	695a      	ldr	r2, [r3, #20]
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	699b      	ldr	r3, [r3, #24]
 8002976:	429a      	cmp	r2, r3
 8002978:	d811      	bhi.n	800299e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	f003 030f 	and.w	r3, r3, #15
 8002980:	2201      	movs	r2, #1
 8002982:	fa02 f303 	lsl.w	r3, r2, r3
 8002986:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800298e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	43db      	mvns	r3, r3
 8002994:	6939      	ldr	r1, [r7, #16]
 8002996:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800299a:	4013      	ands	r3, r2
 800299c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800299e:	2300      	movs	r3, #0
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	3720      	adds	r7, #32
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}

080029a8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b086      	sub	sp, #24
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
 80029b0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	333c      	adds	r3, #60	; 0x3c
 80029c0:	3304      	adds	r3, #4
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	015a      	lsls	r2, r3, #5
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	4413      	add	r3, r2
 80029ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	691b      	ldr	r3, [r3, #16]
 80029da:	2b01      	cmp	r3, #1
 80029dc:	f040 80a0 	bne.w	8002b20 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	f003 0308 	and.w	r3, r3, #8
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d015      	beq.n	8002a16 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	4a72      	ldr	r2, [pc, #456]	; (8002bb8 <PCD_EP_OutXfrComplete_int+0x210>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	f240 80dd 	bls.w	8002bae <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	f000 80d7 	beq.w	8002bae <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	015a      	lsls	r2, r3, #5
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	4413      	add	r3, r2
 8002a08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a12:	6093      	str	r3, [r2, #8]
 8002a14:	e0cb      	b.n	8002bae <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	f003 0320 	and.w	r3, r3, #32
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d009      	beq.n	8002a34 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	015a      	lsls	r2, r3, #5
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	4413      	add	r3, r2
 8002a28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a2c:	461a      	mov	r2, r3
 8002a2e:	2320      	movs	r3, #32
 8002a30:	6093      	str	r3, [r2, #8]
 8002a32:	e0bc      	b.n	8002bae <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	f040 80b7 	bne.w	8002bae <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	4a5d      	ldr	r2, [pc, #372]	; (8002bb8 <PCD_EP_OutXfrComplete_int+0x210>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d90f      	bls.n	8002a68 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d00a      	beq.n	8002a68 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	015a      	lsls	r2, r3, #5
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	4413      	add	r3, r2
 8002a5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a5e:	461a      	mov	r2, r3
 8002a60:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a64:	6093      	str	r3, [r2, #8]
 8002a66:	e0a2      	b.n	8002bae <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8002a68:	6879      	ldr	r1, [r7, #4]
 8002a6a:	683a      	ldr	r2, [r7, #0]
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	00db      	lsls	r3, r3, #3
 8002a70:	1a9b      	subs	r3, r3, r2
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	440b      	add	r3, r1
 8002a76:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002a7a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	0159      	lsls	r1, r3, #5
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	440b      	add	r3, r1
 8002a84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a88:	691b      	ldr	r3, [r3, #16]
 8002a8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8002a8e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002a90:	6878      	ldr	r0, [r7, #4]
 8002a92:	683a      	ldr	r2, [r7, #0]
 8002a94:	4613      	mov	r3, r2
 8002a96:	00db      	lsls	r3, r3, #3
 8002a98:	1a9b      	subs	r3, r3, r2
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	4403      	add	r3, r0
 8002a9e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002aa2:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002aa4:	6879      	ldr	r1, [r7, #4]
 8002aa6:	683a      	ldr	r2, [r7, #0]
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	00db      	lsls	r3, r3, #3
 8002aac:	1a9b      	subs	r3, r3, r2
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	440b      	add	r3, r1
 8002ab2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002ab6:	6819      	ldr	r1, [r3, #0]
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	683a      	ldr	r2, [r7, #0]
 8002abc:	4613      	mov	r3, r2
 8002abe:	00db      	lsls	r3, r3, #3
 8002ac0:	1a9b      	subs	r3, r3, r2
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	4403      	add	r3, r0
 8002ac6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4419      	add	r1, r3
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	683a      	ldr	r2, [r7, #0]
 8002ad2:	4613      	mov	r3, r2
 8002ad4:	00db      	lsls	r3, r3, #3
 8002ad6:	1a9b      	subs	r3, r3, r2
 8002ad8:	009b      	lsls	r3, r3, #2
 8002ada:	4403      	add	r3, r0
 8002adc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002ae0:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d114      	bne.n	8002b12 <PCD_EP_OutXfrComplete_int+0x16a>
 8002ae8:	6879      	ldr	r1, [r7, #4]
 8002aea:	683a      	ldr	r2, [r7, #0]
 8002aec:	4613      	mov	r3, r2
 8002aee:	00db      	lsls	r3, r3, #3
 8002af0:	1a9b      	subs	r3, r3, r2
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	440b      	add	r3, r1
 8002af6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d108      	bne.n	8002b12 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6818      	ldr	r0, [r3, #0]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002b0a:	461a      	mov	r2, r3
 8002b0c:	2101      	movs	r1, #1
 8002b0e:	f001 ff97 	bl	8004a40 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	4619      	mov	r1, r3
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	f003 fc7b 	bl	8006414 <HAL_PCD_DataOutStageCallback>
 8002b1e:	e046      	b.n	8002bae <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	4a26      	ldr	r2, [pc, #152]	; (8002bbc <PCD_EP_OutXfrComplete_int+0x214>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d124      	bne.n	8002b72 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d00a      	beq.n	8002b48 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	015a      	lsls	r2, r3, #5
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	4413      	add	r3, r2
 8002b3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b3e:	461a      	mov	r2, r3
 8002b40:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b44:	6093      	str	r3, [r2, #8]
 8002b46:	e032      	b.n	8002bae <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	f003 0320 	and.w	r3, r3, #32
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d008      	beq.n	8002b64 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	015a      	lsls	r2, r3, #5
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	4413      	add	r3, r2
 8002b5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b5e:	461a      	mov	r2, r3
 8002b60:	2320      	movs	r3, #32
 8002b62:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	b2db      	uxtb	r3, r3
 8002b68:	4619      	mov	r1, r3
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f003 fc52 	bl	8006414 <HAL_PCD_DataOutStageCallback>
 8002b70:	e01d      	b.n	8002bae <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d114      	bne.n	8002ba2 <PCD_EP_OutXfrComplete_int+0x1fa>
 8002b78:	6879      	ldr	r1, [r7, #4]
 8002b7a:	683a      	ldr	r2, [r7, #0]
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	00db      	lsls	r3, r3, #3
 8002b80:	1a9b      	subs	r3, r3, r2
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	440b      	add	r3, r1
 8002b86:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d108      	bne.n	8002ba2 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6818      	ldr	r0, [r3, #0]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	2100      	movs	r1, #0
 8002b9e:	f001 ff4f 	bl	8004a40 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	f003 fc33 	bl	8006414 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002bae:	2300      	movs	r3, #0
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	3718      	adds	r7, #24
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}
 8002bb8:	4f54300a 	.word	0x4f54300a
 8002bbc:	4f54310a 	.word	0x4f54310a

08002bc0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b086      	sub	sp, #24
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	333c      	adds	r3, #60	; 0x3c
 8002bd8:	3304      	adds	r3, #4
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	015a      	lsls	r2, r3, #5
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	4413      	add	r3, r2
 8002be6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	4a15      	ldr	r2, [pc, #84]	; (8002c48 <PCD_EP_OutSetupPacket_int+0x88>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d90e      	bls.n	8002c14 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d009      	beq.n	8002c14 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	015a      	lsls	r2, r3, #5
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	4413      	add	r3, r2
 8002c08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c0c:	461a      	mov	r2, r3
 8002c0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c12:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002c14:	6878      	ldr	r0, [r7, #4]
 8002c16:	f003 fbeb 	bl	80063f0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	4a0a      	ldr	r2, [pc, #40]	; (8002c48 <PCD_EP_OutSetupPacket_int+0x88>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d90c      	bls.n	8002c3c <PCD_EP_OutSetupPacket_int+0x7c>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	691b      	ldr	r3, [r3, #16]
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d108      	bne.n	8002c3c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6818      	ldr	r0, [r3, #0]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002c34:	461a      	mov	r2, r3
 8002c36:	2101      	movs	r1, #1
 8002c38:	f001 ff02 	bl	8004a40 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002c3c:	2300      	movs	r3, #0
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3718      	adds	r7, #24
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	4f54300a 	.word	0x4f54300a

08002c4c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b085      	sub	sp, #20
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
 8002c54:	460b      	mov	r3, r1
 8002c56:	70fb      	strb	r3, [r7, #3]
 8002c58:	4613      	mov	r3, r2
 8002c5a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c62:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002c64:	78fb      	ldrb	r3, [r7, #3]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d107      	bne.n	8002c7a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002c6a:	883b      	ldrh	r3, [r7, #0]
 8002c6c:	0419      	lsls	r1, r3, #16
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	68ba      	ldr	r2, [r7, #8]
 8002c74:	430a      	orrs	r2, r1
 8002c76:	629a      	str	r2, [r3, #40]	; 0x28
 8002c78:	e028      	b.n	8002ccc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c80:	0c1b      	lsrs	r3, r3, #16
 8002c82:	68ba      	ldr	r2, [r7, #8]
 8002c84:	4413      	add	r3, r2
 8002c86:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002c88:	2300      	movs	r3, #0
 8002c8a:	73fb      	strb	r3, [r7, #15]
 8002c8c:	e00d      	b.n	8002caa <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	7bfb      	ldrb	r3, [r7, #15]
 8002c94:	3340      	adds	r3, #64	; 0x40
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	4413      	add	r3, r2
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	0c1b      	lsrs	r3, r3, #16
 8002c9e:	68ba      	ldr	r2, [r7, #8]
 8002ca0:	4413      	add	r3, r2
 8002ca2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002ca4:	7bfb      	ldrb	r3, [r7, #15]
 8002ca6:	3301      	adds	r3, #1
 8002ca8:	73fb      	strb	r3, [r7, #15]
 8002caa:	7bfa      	ldrb	r2, [r7, #15]
 8002cac:	78fb      	ldrb	r3, [r7, #3]
 8002cae:	3b01      	subs	r3, #1
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d3ec      	bcc.n	8002c8e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002cb4:	883b      	ldrh	r3, [r7, #0]
 8002cb6:	0418      	lsls	r0, r3, #16
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6819      	ldr	r1, [r3, #0]
 8002cbc:	78fb      	ldrb	r3, [r7, #3]
 8002cbe:	3b01      	subs	r3, #1
 8002cc0:	68ba      	ldr	r2, [r7, #8]
 8002cc2:	4302      	orrs	r2, r0
 8002cc4:	3340      	adds	r3, #64	; 0x40
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	440b      	add	r3, r1
 8002cca:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002ccc:	2300      	movs	r3, #0
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3714      	adds	r7, #20
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr

08002cda <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002cda:	b480      	push	{r7}
 8002cdc:	b083      	sub	sp, #12
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	6078      	str	r0, [r7, #4]
 8002ce2:	460b      	mov	r3, r1
 8002ce4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	887a      	ldrh	r2, [r7, #2]
 8002cec:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002cee:	2300      	movs	r3, #0
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	370c      	adds	r7, #12
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr

08002cfc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b083      	sub	sp, #12
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
 8002d04:	460b      	mov	r3, r1
 8002d06:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002d08:	bf00      	nop
 8002d0a:	370c      	adds	r7, #12
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr

08002d14 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b086      	sub	sp, #24
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d101      	bne.n	8002d26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e25b      	b.n	80031de <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 0301 	and.w	r3, r3, #1
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d075      	beq.n	8002e1e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d32:	4ba3      	ldr	r3, [pc, #652]	; (8002fc0 <HAL_RCC_OscConfig+0x2ac>)
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	f003 030c 	and.w	r3, r3, #12
 8002d3a:	2b04      	cmp	r3, #4
 8002d3c:	d00c      	beq.n	8002d58 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d3e:	4ba0      	ldr	r3, [pc, #640]	; (8002fc0 <HAL_RCC_OscConfig+0x2ac>)
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d46:	2b08      	cmp	r3, #8
 8002d48:	d112      	bne.n	8002d70 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d4a:	4b9d      	ldr	r3, [pc, #628]	; (8002fc0 <HAL_RCC_OscConfig+0x2ac>)
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d52:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d56:	d10b      	bne.n	8002d70 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d58:	4b99      	ldr	r3, [pc, #612]	; (8002fc0 <HAL_RCC_OscConfig+0x2ac>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d05b      	beq.n	8002e1c <HAL_RCC_OscConfig+0x108>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d157      	bne.n	8002e1c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e236      	b.n	80031de <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d78:	d106      	bne.n	8002d88 <HAL_RCC_OscConfig+0x74>
 8002d7a:	4b91      	ldr	r3, [pc, #580]	; (8002fc0 <HAL_RCC_OscConfig+0x2ac>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a90      	ldr	r2, [pc, #576]	; (8002fc0 <HAL_RCC_OscConfig+0x2ac>)
 8002d80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d84:	6013      	str	r3, [r2, #0]
 8002d86:	e01d      	b.n	8002dc4 <HAL_RCC_OscConfig+0xb0>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d90:	d10c      	bne.n	8002dac <HAL_RCC_OscConfig+0x98>
 8002d92:	4b8b      	ldr	r3, [pc, #556]	; (8002fc0 <HAL_RCC_OscConfig+0x2ac>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a8a      	ldr	r2, [pc, #552]	; (8002fc0 <HAL_RCC_OscConfig+0x2ac>)
 8002d98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d9c:	6013      	str	r3, [r2, #0]
 8002d9e:	4b88      	ldr	r3, [pc, #544]	; (8002fc0 <HAL_RCC_OscConfig+0x2ac>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a87      	ldr	r2, [pc, #540]	; (8002fc0 <HAL_RCC_OscConfig+0x2ac>)
 8002da4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002da8:	6013      	str	r3, [r2, #0]
 8002daa:	e00b      	b.n	8002dc4 <HAL_RCC_OscConfig+0xb0>
 8002dac:	4b84      	ldr	r3, [pc, #528]	; (8002fc0 <HAL_RCC_OscConfig+0x2ac>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a83      	ldr	r2, [pc, #524]	; (8002fc0 <HAL_RCC_OscConfig+0x2ac>)
 8002db2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002db6:	6013      	str	r3, [r2, #0]
 8002db8:	4b81      	ldr	r3, [pc, #516]	; (8002fc0 <HAL_RCC_OscConfig+0x2ac>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a80      	ldr	r2, [pc, #512]	; (8002fc0 <HAL_RCC_OscConfig+0x2ac>)
 8002dbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dc2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d013      	beq.n	8002df4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dcc:	f7fe fb44 	bl	8001458 <HAL_GetTick>
 8002dd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dd2:	e008      	b.n	8002de6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002dd4:	f7fe fb40 	bl	8001458 <HAL_GetTick>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	2b64      	cmp	r3, #100	; 0x64
 8002de0:	d901      	bls.n	8002de6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002de2:	2303      	movs	r3, #3
 8002de4:	e1fb      	b.n	80031de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002de6:	4b76      	ldr	r3, [pc, #472]	; (8002fc0 <HAL_RCC_OscConfig+0x2ac>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d0f0      	beq.n	8002dd4 <HAL_RCC_OscConfig+0xc0>
 8002df2:	e014      	b.n	8002e1e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002df4:	f7fe fb30 	bl	8001458 <HAL_GetTick>
 8002df8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dfa:	e008      	b.n	8002e0e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002dfc:	f7fe fb2c 	bl	8001458 <HAL_GetTick>
 8002e00:	4602      	mov	r2, r0
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	2b64      	cmp	r3, #100	; 0x64
 8002e08:	d901      	bls.n	8002e0e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e0a:	2303      	movs	r3, #3
 8002e0c:	e1e7      	b.n	80031de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e0e:	4b6c      	ldr	r3, [pc, #432]	; (8002fc0 <HAL_RCC_OscConfig+0x2ac>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d1f0      	bne.n	8002dfc <HAL_RCC_OscConfig+0xe8>
 8002e1a:	e000      	b.n	8002e1e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 0302 	and.w	r3, r3, #2
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d063      	beq.n	8002ef2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e2a:	4b65      	ldr	r3, [pc, #404]	; (8002fc0 <HAL_RCC_OscConfig+0x2ac>)
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	f003 030c 	and.w	r3, r3, #12
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d00b      	beq.n	8002e4e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e36:	4b62      	ldr	r3, [pc, #392]	; (8002fc0 <HAL_RCC_OscConfig+0x2ac>)
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e3e:	2b08      	cmp	r3, #8
 8002e40:	d11c      	bne.n	8002e7c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e42:	4b5f      	ldr	r3, [pc, #380]	; (8002fc0 <HAL_RCC_OscConfig+0x2ac>)
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d116      	bne.n	8002e7c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e4e:	4b5c      	ldr	r3, [pc, #368]	; (8002fc0 <HAL_RCC_OscConfig+0x2ac>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0302 	and.w	r3, r3, #2
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d005      	beq.n	8002e66 <HAL_RCC_OscConfig+0x152>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d001      	beq.n	8002e66 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e1bb      	b.n	80031de <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e66:	4b56      	ldr	r3, [pc, #344]	; (8002fc0 <HAL_RCC_OscConfig+0x2ac>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	691b      	ldr	r3, [r3, #16]
 8002e72:	00db      	lsls	r3, r3, #3
 8002e74:	4952      	ldr	r1, [pc, #328]	; (8002fc0 <HAL_RCC_OscConfig+0x2ac>)
 8002e76:	4313      	orrs	r3, r2
 8002e78:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e7a:	e03a      	b.n	8002ef2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	68db      	ldr	r3, [r3, #12]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d020      	beq.n	8002ec6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e84:	4b4f      	ldr	r3, [pc, #316]	; (8002fc4 <HAL_RCC_OscConfig+0x2b0>)
 8002e86:	2201      	movs	r2, #1
 8002e88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e8a:	f7fe fae5 	bl	8001458 <HAL_GetTick>
 8002e8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e90:	e008      	b.n	8002ea4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e92:	f7fe fae1 	bl	8001458 <HAL_GetTick>
 8002e96:	4602      	mov	r2, r0
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	1ad3      	subs	r3, r2, r3
 8002e9c:	2b02      	cmp	r3, #2
 8002e9e:	d901      	bls.n	8002ea4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002ea0:	2303      	movs	r3, #3
 8002ea2:	e19c      	b.n	80031de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ea4:	4b46      	ldr	r3, [pc, #280]	; (8002fc0 <HAL_RCC_OscConfig+0x2ac>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0302 	and.w	r3, r3, #2
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d0f0      	beq.n	8002e92 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eb0:	4b43      	ldr	r3, [pc, #268]	; (8002fc0 <HAL_RCC_OscConfig+0x2ac>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	691b      	ldr	r3, [r3, #16]
 8002ebc:	00db      	lsls	r3, r3, #3
 8002ebe:	4940      	ldr	r1, [pc, #256]	; (8002fc0 <HAL_RCC_OscConfig+0x2ac>)
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	600b      	str	r3, [r1, #0]
 8002ec4:	e015      	b.n	8002ef2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ec6:	4b3f      	ldr	r3, [pc, #252]	; (8002fc4 <HAL_RCC_OscConfig+0x2b0>)
 8002ec8:	2200      	movs	r2, #0
 8002eca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ecc:	f7fe fac4 	bl	8001458 <HAL_GetTick>
 8002ed0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ed2:	e008      	b.n	8002ee6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ed4:	f7fe fac0 	bl	8001458 <HAL_GetTick>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	2b02      	cmp	r3, #2
 8002ee0:	d901      	bls.n	8002ee6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	e17b      	b.n	80031de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ee6:	4b36      	ldr	r3, [pc, #216]	; (8002fc0 <HAL_RCC_OscConfig+0x2ac>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 0302 	and.w	r3, r3, #2
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d1f0      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0308 	and.w	r3, r3, #8
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d030      	beq.n	8002f60 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	695b      	ldr	r3, [r3, #20]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d016      	beq.n	8002f34 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f06:	4b30      	ldr	r3, [pc, #192]	; (8002fc8 <HAL_RCC_OscConfig+0x2b4>)
 8002f08:	2201      	movs	r2, #1
 8002f0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f0c:	f7fe faa4 	bl	8001458 <HAL_GetTick>
 8002f10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f12:	e008      	b.n	8002f26 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f14:	f7fe faa0 	bl	8001458 <HAL_GetTick>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	d901      	bls.n	8002f26 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002f22:	2303      	movs	r3, #3
 8002f24:	e15b      	b.n	80031de <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f26:	4b26      	ldr	r3, [pc, #152]	; (8002fc0 <HAL_RCC_OscConfig+0x2ac>)
 8002f28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f2a:	f003 0302 	and.w	r3, r3, #2
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d0f0      	beq.n	8002f14 <HAL_RCC_OscConfig+0x200>
 8002f32:	e015      	b.n	8002f60 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f34:	4b24      	ldr	r3, [pc, #144]	; (8002fc8 <HAL_RCC_OscConfig+0x2b4>)
 8002f36:	2200      	movs	r2, #0
 8002f38:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f3a:	f7fe fa8d 	bl	8001458 <HAL_GetTick>
 8002f3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f40:	e008      	b.n	8002f54 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f42:	f7fe fa89 	bl	8001458 <HAL_GetTick>
 8002f46:	4602      	mov	r2, r0
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	1ad3      	subs	r3, r2, r3
 8002f4c:	2b02      	cmp	r3, #2
 8002f4e:	d901      	bls.n	8002f54 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002f50:	2303      	movs	r3, #3
 8002f52:	e144      	b.n	80031de <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f54:	4b1a      	ldr	r3, [pc, #104]	; (8002fc0 <HAL_RCC_OscConfig+0x2ac>)
 8002f56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f58:	f003 0302 	and.w	r3, r3, #2
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d1f0      	bne.n	8002f42 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 0304 	and.w	r3, r3, #4
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	f000 80a0 	beq.w	80030ae <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f72:	4b13      	ldr	r3, [pc, #76]	; (8002fc0 <HAL_RCC_OscConfig+0x2ac>)
 8002f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d10f      	bne.n	8002f9e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f7e:	2300      	movs	r3, #0
 8002f80:	60bb      	str	r3, [r7, #8]
 8002f82:	4b0f      	ldr	r3, [pc, #60]	; (8002fc0 <HAL_RCC_OscConfig+0x2ac>)
 8002f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f86:	4a0e      	ldr	r2, [pc, #56]	; (8002fc0 <HAL_RCC_OscConfig+0x2ac>)
 8002f88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f8c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f8e:	4b0c      	ldr	r3, [pc, #48]	; (8002fc0 <HAL_RCC_OscConfig+0x2ac>)
 8002f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f96:	60bb      	str	r3, [r7, #8]
 8002f98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f9e:	4b0b      	ldr	r3, [pc, #44]	; (8002fcc <HAL_RCC_OscConfig+0x2b8>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d121      	bne.n	8002fee <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002faa:	4b08      	ldr	r3, [pc, #32]	; (8002fcc <HAL_RCC_OscConfig+0x2b8>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a07      	ldr	r2, [pc, #28]	; (8002fcc <HAL_RCC_OscConfig+0x2b8>)
 8002fb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fb6:	f7fe fa4f 	bl	8001458 <HAL_GetTick>
 8002fba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fbc:	e011      	b.n	8002fe2 <HAL_RCC_OscConfig+0x2ce>
 8002fbe:	bf00      	nop
 8002fc0:	40023800 	.word	0x40023800
 8002fc4:	42470000 	.word	0x42470000
 8002fc8:	42470e80 	.word	0x42470e80
 8002fcc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fd0:	f7fe fa42 	bl	8001458 <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	2b02      	cmp	r3, #2
 8002fdc:	d901      	bls.n	8002fe2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	e0fd      	b.n	80031de <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fe2:	4b81      	ldr	r3, [pc, #516]	; (80031e8 <HAL_RCC_OscConfig+0x4d4>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d0f0      	beq.n	8002fd0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d106      	bne.n	8003004 <HAL_RCC_OscConfig+0x2f0>
 8002ff6:	4b7d      	ldr	r3, [pc, #500]	; (80031ec <HAL_RCC_OscConfig+0x4d8>)
 8002ff8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ffa:	4a7c      	ldr	r2, [pc, #496]	; (80031ec <HAL_RCC_OscConfig+0x4d8>)
 8002ffc:	f043 0301 	orr.w	r3, r3, #1
 8003000:	6713      	str	r3, [r2, #112]	; 0x70
 8003002:	e01c      	b.n	800303e <HAL_RCC_OscConfig+0x32a>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	2b05      	cmp	r3, #5
 800300a:	d10c      	bne.n	8003026 <HAL_RCC_OscConfig+0x312>
 800300c:	4b77      	ldr	r3, [pc, #476]	; (80031ec <HAL_RCC_OscConfig+0x4d8>)
 800300e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003010:	4a76      	ldr	r2, [pc, #472]	; (80031ec <HAL_RCC_OscConfig+0x4d8>)
 8003012:	f043 0304 	orr.w	r3, r3, #4
 8003016:	6713      	str	r3, [r2, #112]	; 0x70
 8003018:	4b74      	ldr	r3, [pc, #464]	; (80031ec <HAL_RCC_OscConfig+0x4d8>)
 800301a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800301c:	4a73      	ldr	r2, [pc, #460]	; (80031ec <HAL_RCC_OscConfig+0x4d8>)
 800301e:	f043 0301 	orr.w	r3, r3, #1
 8003022:	6713      	str	r3, [r2, #112]	; 0x70
 8003024:	e00b      	b.n	800303e <HAL_RCC_OscConfig+0x32a>
 8003026:	4b71      	ldr	r3, [pc, #452]	; (80031ec <HAL_RCC_OscConfig+0x4d8>)
 8003028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800302a:	4a70      	ldr	r2, [pc, #448]	; (80031ec <HAL_RCC_OscConfig+0x4d8>)
 800302c:	f023 0301 	bic.w	r3, r3, #1
 8003030:	6713      	str	r3, [r2, #112]	; 0x70
 8003032:	4b6e      	ldr	r3, [pc, #440]	; (80031ec <HAL_RCC_OscConfig+0x4d8>)
 8003034:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003036:	4a6d      	ldr	r2, [pc, #436]	; (80031ec <HAL_RCC_OscConfig+0x4d8>)
 8003038:	f023 0304 	bic.w	r3, r3, #4
 800303c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d015      	beq.n	8003072 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003046:	f7fe fa07 	bl	8001458 <HAL_GetTick>
 800304a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800304c:	e00a      	b.n	8003064 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800304e:	f7fe fa03 	bl	8001458 <HAL_GetTick>
 8003052:	4602      	mov	r2, r0
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	1ad3      	subs	r3, r2, r3
 8003058:	f241 3288 	movw	r2, #5000	; 0x1388
 800305c:	4293      	cmp	r3, r2
 800305e:	d901      	bls.n	8003064 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003060:	2303      	movs	r3, #3
 8003062:	e0bc      	b.n	80031de <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003064:	4b61      	ldr	r3, [pc, #388]	; (80031ec <HAL_RCC_OscConfig+0x4d8>)
 8003066:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003068:	f003 0302 	and.w	r3, r3, #2
 800306c:	2b00      	cmp	r3, #0
 800306e:	d0ee      	beq.n	800304e <HAL_RCC_OscConfig+0x33a>
 8003070:	e014      	b.n	800309c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003072:	f7fe f9f1 	bl	8001458 <HAL_GetTick>
 8003076:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003078:	e00a      	b.n	8003090 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800307a:	f7fe f9ed 	bl	8001458 <HAL_GetTick>
 800307e:	4602      	mov	r2, r0
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	1ad3      	subs	r3, r2, r3
 8003084:	f241 3288 	movw	r2, #5000	; 0x1388
 8003088:	4293      	cmp	r3, r2
 800308a:	d901      	bls.n	8003090 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800308c:	2303      	movs	r3, #3
 800308e:	e0a6      	b.n	80031de <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003090:	4b56      	ldr	r3, [pc, #344]	; (80031ec <HAL_RCC_OscConfig+0x4d8>)
 8003092:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003094:	f003 0302 	and.w	r3, r3, #2
 8003098:	2b00      	cmp	r3, #0
 800309a:	d1ee      	bne.n	800307a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800309c:	7dfb      	ldrb	r3, [r7, #23]
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d105      	bne.n	80030ae <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030a2:	4b52      	ldr	r3, [pc, #328]	; (80031ec <HAL_RCC_OscConfig+0x4d8>)
 80030a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a6:	4a51      	ldr	r2, [pc, #324]	; (80031ec <HAL_RCC_OscConfig+0x4d8>)
 80030a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030ac:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	699b      	ldr	r3, [r3, #24]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	f000 8092 	beq.w	80031dc <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80030b8:	4b4c      	ldr	r3, [pc, #304]	; (80031ec <HAL_RCC_OscConfig+0x4d8>)
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	f003 030c 	and.w	r3, r3, #12
 80030c0:	2b08      	cmp	r3, #8
 80030c2:	d05c      	beq.n	800317e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	699b      	ldr	r3, [r3, #24]
 80030c8:	2b02      	cmp	r3, #2
 80030ca:	d141      	bne.n	8003150 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030cc:	4b48      	ldr	r3, [pc, #288]	; (80031f0 <HAL_RCC_OscConfig+0x4dc>)
 80030ce:	2200      	movs	r2, #0
 80030d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030d2:	f7fe f9c1 	bl	8001458 <HAL_GetTick>
 80030d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030d8:	e008      	b.n	80030ec <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030da:	f7fe f9bd 	bl	8001458 <HAL_GetTick>
 80030de:	4602      	mov	r2, r0
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	1ad3      	subs	r3, r2, r3
 80030e4:	2b02      	cmp	r3, #2
 80030e6:	d901      	bls.n	80030ec <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80030e8:	2303      	movs	r3, #3
 80030ea:	e078      	b.n	80031de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030ec:	4b3f      	ldr	r3, [pc, #252]	; (80031ec <HAL_RCC_OscConfig+0x4d8>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d1f0      	bne.n	80030da <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	69da      	ldr	r2, [r3, #28]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6a1b      	ldr	r3, [r3, #32]
 8003100:	431a      	orrs	r2, r3
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003106:	019b      	lsls	r3, r3, #6
 8003108:	431a      	orrs	r2, r3
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800310e:	085b      	lsrs	r3, r3, #1
 8003110:	3b01      	subs	r3, #1
 8003112:	041b      	lsls	r3, r3, #16
 8003114:	431a      	orrs	r2, r3
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800311a:	061b      	lsls	r3, r3, #24
 800311c:	4933      	ldr	r1, [pc, #204]	; (80031ec <HAL_RCC_OscConfig+0x4d8>)
 800311e:	4313      	orrs	r3, r2
 8003120:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003122:	4b33      	ldr	r3, [pc, #204]	; (80031f0 <HAL_RCC_OscConfig+0x4dc>)
 8003124:	2201      	movs	r2, #1
 8003126:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003128:	f7fe f996 	bl	8001458 <HAL_GetTick>
 800312c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800312e:	e008      	b.n	8003142 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003130:	f7fe f992 	bl	8001458 <HAL_GetTick>
 8003134:	4602      	mov	r2, r0
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	2b02      	cmp	r3, #2
 800313c:	d901      	bls.n	8003142 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800313e:	2303      	movs	r3, #3
 8003140:	e04d      	b.n	80031de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003142:	4b2a      	ldr	r3, [pc, #168]	; (80031ec <HAL_RCC_OscConfig+0x4d8>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800314a:	2b00      	cmp	r3, #0
 800314c:	d0f0      	beq.n	8003130 <HAL_RCC_OscConfig+0x41c>
 800314e:	e045      	b.n	80031dc <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003150:	4b27      	ldr	r3, [pc, #156]	; (80031f0 <HAL_RCC_OscConfig+0x4dc>)
 8003152:	2200      	movs	r2, #0
 8003154:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003156:	f7fe f97f 	bl	8001458 <HAL_GetTick>
 800315a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800315c:	e008      	b.n	8003170 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800315e:	f7fe f97b 	bl	8001458 <HAL_GetTick>
 8003162:	4602      	mov	r2, r0
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	1ad3      	subs	r3, r2, r3
 8003168:	2b02      	cmp	r3, #2
 800316a:	d901      	bls.n	8003170 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800316c:	2303      	movs	r3, #3
 800316e:	e036      	b.n	80031de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003170:	4b1e      	ldr	r3, [pc, #120]	; (80031ec <HAL_RCC_OscConfig+0x4d8>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003178:	2b00      	cmp	r3, #0
 800317a:	d1f0      	bne.n	800315e <HAL_RCC_OscConfig+0x44a>
 800317c:	e02e      	b.n	80031dc <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	699b      	ldr	r3, [r3, #24]
 8003182:	2b01      	cmp	r3, #1
 8003184:	d101      	bne.n	800318a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e029      	b.n	80031de <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800318a:	4b18      	ldr	r3, [pc, #96]	; (80031ec <HAL_RCC_OscConfig+0x4d8>)
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	69db      	ldr	r3, [r3, #28]
 800319a:	429a      	cmp	r2, r3
 800319c:	d11c      	bne.n	80031d8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d115      	bne.n	80031d8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80031ac:	68fa      	ldr	r2, [r7, #12]
 80031ae:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80031b2:	4013      	ands	r3, r2
 80031b4:	687a      	ldr	r2, [r7, #4]
 80031b6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d10d      	bne.n	80031d8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80031c6:	429a      	cmp	r2, r3
 80031c8:	d106      	bne.n	80031d8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d001      	beq.n	80031dc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e000      	b.n	80031de <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80031dc:	2300      	movs	r3, #0
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3718      	adds	r7, #24
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	40007000 	.word	0x40007000
 80031ec:	40023800 	.word	0x40023800
 80031f0:	42470060 	.word	0x42470060

080031f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b084      	sub	sp, #16
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d101      	bne.n	8003208 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	e0cc      	b.n	80033a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003208:	4b68      	ldr	r3, [pc, #416]	; (80033ac <HAL_RCC_ClockConfig+0x1b8>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 030f 	and.w	r3, r3, #15
 8003210:	683a      	ldr	r2, [r7, #0]
 8003212:	429a      	cmp	r2, r3
 8003214:	d90c      	bls.n	8003230 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003216:	4b65      	ldr	r3, [pc, #404]	; (80033ac <HAL_RCC_ClockConfig+0x1b8>)
 8003218:	683a      	ldr	r2, [r7, #0]
 800321a:	b2d2      	uxtb	r2, r2
 800321c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800321e:	4b63      	ldr	r3, [pc, #396]	; (80033ac <HAL_RCC_ClockConfig+0x1b8>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 030f 	and.w	r3, r3, #15
 8003226:	683a      	ldr	r2, [r7, #0]
 8003228:	429a      	cmp	r2, r3
 800322a:	d001      	beq.n	8003230 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	e0b8      	b.n	80033a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 0302 	and.w	r3, r3, #2
 8003238:	2b00      	cmp	r3, #0
 800323a:	d020      	beq.n	800327e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 0304 	and.w	r3, r3, #4
 8003244:	2b00      	cmp	r3, #0
 8003246:	d005      	beq.n	8003254 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003248:	4b59      	ldr	r3, [pc, #356]	; (80033b0 <HAL_RCC_ClockConfig+0x1bc>)
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	4a58      	ldr	r2, [pc, #352]	; (80033b0 <HAL_RCC_ClockConfig+0x1bc>)
 800324e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003252:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 0308 	and.w	r3, r3, #8
 800325c:	2b00      	cmp	r3, #0
 800325e:	d005      	beq.n	800326c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003260:	4b53      	ldr	r3, [pc, #332]	; (80033b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	4a52      	ldr	r2, [pc, #328]	; (80033b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003266:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800326a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800326c:	4b50      	ldr	r3, [pc, #320]	; (80033b0 <HAL_RCC_ClockConfig+0x1bc>)
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	494d      	ldr	r1, [pc, #308]	; (80033b0 <HAL_RCC_ClockConfig+0x1bc>)
 800327a:	4313      	orrs	r3, r2
 800327c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0301 	and.w	r3, r3, #1
 8003286:	2b00      	cmp	r3, #0
 8003288:	d044      	beq.n	8003314 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	2b01      	cmp	r3, #1
 8003290:	d107      	bne.n	80032a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003292:	4b47      	ldr	r3, [pc, #284]	; (80033b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d119      	bne.n	80032d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e07f      	b.n	80033a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d003      	beq.n	80032b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032ae:	2b03      	cmp	r3, #3
 80032b0:	d107      	bne.n	80032c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032b2:	4b3f      	ldr	r3, [pc, #252]	; (80033b0 <HAL_RCC_ClockConfig+0x1bc>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d109      	bne.n	80032d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e06f      	b.n	80033a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032c2:	4b3b      	ldr	r3, [pc, #236]	; (80033b0 <HAL_RCC_ClockConfig+0x1bc>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 0302 	and.w	r3, r3, #2
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d101      	bne.n	80032d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e067      	b.n	80033a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032d2:	4b37      	ldr	r3, [pc, #220]	; (80033b0 <HAL_RCC_ClockConfig+0x1bc>)
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	f023 0203 	bic.w	r2, r3, #3
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	4934      	ldr	r1, [pc, #208]	; (80033b0 <HAL_RCC_ClockConfig+0x1bc>)
 80032e0:	4313      	orrs	r3, r2
 80032e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032e4:	f7fe f8b8 	bl	8001458 <HAL_GetTick>
 80032e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032ea:	e00a      	b.n	8003302 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032ec:	f7fe f8b4 	bl	8001458 <HAL_GetTick>
 80032f0:	4602      	mov	r2, r0
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d901      	bls.n	8003302 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032fe:	2303      	movs	r3, #3
 8003300:	e04f      	b.n	80033a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003302:	4b2b      	ldr	r3, [pc, #172]	; (80033b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	f003 020c 	and.w	r2, r3, #12
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	429a      	cmp	r2, r3
 8003312:	d1eb      	bne.n	80032ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003314:	4b25      	ldr	r3, [pc, #148]	; (80033ac <HAL_RCC_ClockConfig+0x1b8>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 030f 	and.w	r3, r3, #15
 800331c:	683a      	ldr	r2, [r7, #0]
 800331e:	429a      	cmp	r2, r3
 8003320:	d20c      	bcs.n	800333c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003322:	4b22      	ldr	r3, [pc, #136]	; (80033ac <HAL_RCC_ClockConfig+0x1b8>)
 8003324:	683a      	ldr	r2, [r7, #0]
 8003326:	b2d2      	uxtb	r2, r2
 8003328:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800332a:	4b20      	ldr	r3, [pc, #128]	; (80033ac <HAL_RCC_ClockConfig+0x1b8>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 030f 	and.w	r3, r3, #15
 8003332:	683a      	ldr	r2, [r7, #0]
 8003334:	429a      	cmp	r2, r3
 8003336:	d001      	beq.n	800333c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	e032      	b.n	80033a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 0304 	and.w	r3, r3, #4
 8003344:	2b00      	cmp	r3, #0
 8003346:	d008      	beq.n	800335a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003348:	4b19      	ldr	r3, [pc, #100]	; (80033b0 <HAL_RCC_ClockConfig+0x1bc>)
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	68db      	ldr	r3, [r3, #12]
 8003354:	4916      	ldr	r1, [pc, #88]	; (80033b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003356:	4313      	orrs	r3, r2
 8003358:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 0308 	and.w	r3, r3, #8
 8003362:	2b00      	cmp	r3, #0
 8003364:	d009      	beq.n	800337a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003366:	4b12      	ldr	r3, [pc, #72]	; (80033b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	691b      	ldr	r3, [r3, #16]
 8003372:	00db      	lsls	r3, r3, #3
 8003374:	490e      	ldr	r1, [pc, #56]	; (80033b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003376:	4313      	orrs	r3, r2
 8003378:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800337a:	f000 f821 	bl	80033c0 <HAL_RCC_GetSysClockFreq>
 800337e:	4601      	mov	r1, r0
 8003380:	4b0b      	ldr	r3, [pc, #44]	; (80033b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	091b      	lsrs	r3, r3, #4
 8003386:	f003 030f 	and.w	r3, r3, #15
 800338a:	4a0a      	ldr	r2, [pc, #40]	; (80033b4 <HAL_RCC_ClockConfig+0x1c0>)
 800338c:	5cd3      	ldrb	r3, [r2, r3]
 800338e:	fa21 f303 	lsr.w	r3, r1, r3
 8003392:	4a09      	ldr	r2, [pc, #36]	; (80033b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003394:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003396:	4b09      	ldr	r3, [pc, #36]	; (80033bc <HAL_RCC_ClockConfig+0x1c8>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4618      	mov	r0, r3
 800339c:	f7fe f818 	bl	80013d0 <HAL_InitTick>

  return HAL_OK;
 80033a0:	2300      	movs	r3, #0
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3710      	adds	r7, #16
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	40023c00 	.word	0x40023c00
 80033b0:	40023800 	.word	0x40023800
 80033b4:	08006c2c 	.word	0x08006c2c
 80033b8:	20000008 	.word	0x20000008
 80033bc:	2000000c 	.word	0x2000000c

080033c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033c2:	b085      	sub	sp, #20
 80033c4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80033c6:	2300      	movs	r3, #0
 80033c8:	607b      	str	r3, [r7, #4]
 80033ca:	2300      	movs	r3, #0
 80033cc:	60fb      	str	r3, [r7, #12]
 80033ce:	2300      	movs	r3, #0
 80033d0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80033d2:	2300      	movs	r3, #0
 80033d4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033d6:	4b50      	ldr	r3, [pc, #320]	; (8003518 <HAL_RCC_GetSysClockFreq+0x158>)
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	f003 030c 	and.w	r3, r3, #12
 80033de:	2b04      	cmp	r3, #4
 80033e0:	d007      	beq.n	80033f2 <HAL_RCC_GetSysClockFreq+0x32>
 80033e2:	2b08      	cmp	r3, #8
 80033e4:	d008      	beq.n	80033f8 <HAL_RCC_GetSysClockFreq+0x38>
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	f040 808d 	bne.w	8003506 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80033ec:	4b4b      	ldr	r3, [pc, #300]	; (800351c <HAL_RCC_GetSysClockFreq+0x15c>)
 80033ee:	60bb      	str	r3, [r7, #8]
       break;
 80033f0:	e08c      	b.n	800350c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80033f2:	4b4b      	ldr	r3, [pc, #300]	; (8003520 <HAL_RCC_GetSysClockFreq+0x160>)
 80033f4:	60bb      	str	r3, [r7, #8]
      break;
 80033f6:	e089      	b.n	800350c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033f8:	4b47      	ldr	r3, [pc, #284]	; (8003518 <HAL_RCC_GetSysClockFreq+0x158>)
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003400:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003402:	4b45      	ldr	r3, [pc, #276]	; (8003518 <HAL_RCC_GetSysClockFreq+0x158>)
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800340a:	2b00      	cmp	r3, #0
 800340c:	d023      	beq.n	8003456 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800340e:	4b42      	ldr	r3, [pc, #264]	; (8003518 <HAL_RCC_GetSysClockFreq+0x158>)
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	099b      	lsrs	r3, r3, #6
 8003414:	f04f 0400 	mov.w	r4, #0
 8003418:	f240 11ff 	movw	r1, #511	; 0x1ff
 800341c:	f04f 0200 	mov.w	r2, #0
 8003420:	ea03 0501 	and.w	r5, r3, r1
 8003424:	ea04 0602 	and.w	r6, r4, r2
 8003428:	4a3d      	ldr	r2, [pc, #244]	; (8003520 <HAL_RCC_GetSysClockFreq+0x160>)
 800342a:	fb02 f106 	mul.w	r1, r2, r6
 800342e:	2200      	movs	r2, #0
 8003430:	fb02 f205 	mul.w	r2, r2, r5
 8003434:	440a      	add	r2, r1
 8003436:	493a      	ldr	r1, [pc, #232]	; (8003520 <HAL_RCC_GetSysClockFreq+0x160>)
 8003438:	fba5 0101 	umull	r0, r1, r5, r1
 800343c:	1853      	adds	r3, r2, r1
 800343e:	4619      	mov	r1, r3
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	f04f 0400 	mov.w	r4, #0
 8003446:	461a      	mov	r2, r3
 8003448:	4623      	mov	r3, r4
 800344a:	f7fc fec5 	bl	80001d8 <__aeabi_uldivmod>
 800344e:	4603      	mov	r3, r0
 8003450:	460c      	mov	r4, r1
 8003452:	60fb      	str	r3, [r7, #12]
 8003454:	e049      	b.n	80034ea <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003456:	4b30      	ldr	r3, [pc, #192]	; (8003518 <HAL_RCC_GetSysClockFreq+0x158>)
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	099b      	lsrs	r3, r3, #6
 800345c:	f04f 0400 	mov.w	r4, #0
 8003460:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003464:	f04f 0200 	mov.w	r2, #0
 8003468:	ea03 0501 	and.w	r5, r3, r1
 800346c:	ea04 0602 	and.w	r6, r4, r2
 8003470:	4629      	mov	r1, r5
 8003472:	4632      	mov	r2, r6
 8003474:	f04f 0300 	mov.w	r3, #0
 8003478:	f04f 0400 	mov.w	r4, #0
 800347c:	0154      	lsls	r4, r2, #5
 800347e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003482:	014b      	lsls	r3, r1, #5
 8003484:	4619      	mov	r1, r3
 8003486:	4622      	mov	r2, r4
 8003488:	1b49      	subs	r1, r1, r5
 800348a:	eb62 0206 	sbc.w	r2, r2, r6
 800348e:	f04f 0300 	mov.w	r3, #0
 8003492:	f04f 0400 	mov.w	r4, #0
 8003496:	0194      	lsls	r4, r2, #6
 8003498:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800349c:	018b      	lsls	r3, r1, #6
 800349e:	1a5b      	subs	r3, r3, r1
 80034a0:	eb64 0402 	sbc.w	r4, r4, r2
 80034a4:	f04f 0100 	mov.w	r1, #0
 80034a8:	f04f 0200 	mov.w	r2, #0
 80034ac:	00e2      	lsls	r2, r4, #3
 80034ae:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80034b2:	00d9      	lsls	r1, r3, #3
 80034b4:	460b      	mov	r3, r1
 80034b6:	4614      	mov	r4, r2
 80034b8:	195b      	adds	r3, r3, r5
 80034ba:	eb44 0406 	adc.w	r4, r4, r6
 80034be:	f04f 0100 	mov.w	r1, #0
 80034c2:	f04f 0200 	mov.w	r2, #0
 80034c6:	02a2      	lsls	r2, r4, #10
 80034c8:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80034cc:	0299      	lsls	r1, r3, #10
 80034ce:	460b      	mov	r3, r1
 80034d0:	4614      	mov	r4, r2
 80034d2:	4618      	mov	r0, r3
 80034d4:	4621      	mov	r1, r4
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	f04f 0400 	mov.w	r4, #0
 80034dc:	461a      	mov	r2, r3
 80034de:	4623      	mov	r3, r4
 80034e0:	f7fc fe7a 	bl	80001d8 <__aeabi_uldivmod>
 80034e4:	4603      	mov	r3, r0
 80034e6:	460c      	mov	r4, r1
 80034e8:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80034ea:	4b0b      	ldr	r3, [pc, #44]	; (8003518 <HAL_RCC_GetSysClockFreq+0x158>)
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	0c1b      	lsrs	r3, r3, #16
 80034f0:	f003 0303 	and.w	r3, r3, #3
 80034f4:	3301      	adds	r3, #1
 80034f6:	005b      	lsls	r3, r3, #1
 80034f8:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80034fa:	68fa      	ldr	r2, [r7, #12]
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003502:	60bb      	str	r3, [r7, #8]
      break;
 8003504:	e002      	b.n	800350c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003506:	4b05      	ldr	r3, [pc, #20]	; (800351c <HAL_RCC_GetSysClockFreq+0x15c>)
 8003508:	60bb      	str	r3, [r7, #8]
      break;
 800350a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800350c:	68bb      	ldr	r3, [r7, #8]
}
 800350e:	4618      	mov	r0, r3
 8003510:	3714      	adds	r7, #20
 8003512:	46bd      	mov	sp, r7
 8003514:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003516:	bf00      	nop
 8003518:	40023800 	.word	0x40023800
 800351c:	00f42400 	.word	0x00f42400
 8003520:	017d7840 	.word	0x017d7840

08003524 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003524:	b480      	push	{r7}
 8003526:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003528:	4b03      	ldr	r3, [pc, #12]	; (8003538 <HAL_RCC_GetHCLKFreq+0x14>)
 800352a:	681b      	ldr	r3, [r3, #0]
}
 800352c:	4618      	mov	r0, r3
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr
 8003536:	bf00      	nop
 8003538:	20000008 	.word	0x20000008

0800353c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800353c:	b084      	sub	sp, #16
 800353e:	b580      	push	{r7, lr}
 8003540:	b084      	sub	sp, #16
 8003542:	af00      	add	r7, sp, #0
 8003544:	6078      	str	r0, [r7, #4]
 8003546:	f107 001c 	add.w	r0, r7, #28
 800354a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800354e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003550:	2b01      	cmp	r3, #1
 8003552:	d122      	bne.n	800359a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003558:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	68db      	ldr	r3, [r3, #12]
 8003564:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003568:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800356c:	687a      	ldr	r2, [r7, #4]
 800356e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	68db      	ldr	r3, [r3, #12]
 8003574:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800357c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800357e:	2b01      	cmp	r3, #1
 8003580:	d105      	bne.n	800358e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	68db      	ldr	r3, [r3, #12]
 8003586:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f001 fab4 	bl	8004afc <USB_CoreReset>
 8003594:	4603      	mov	r3, r0
 8003596:	73fb      	strb	r3, [r7, #15]
 8003598:	e01a      	b.n	80035d0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	68db      	ldr	r3, [r3, #12]
 800359e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f001 faa8 	bl	8004afc <USB_CoreReset>
 80035ac:	4603      	mov	r3, r0
 80035ae:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80035b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d106      	bne.n	80035c4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ba:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	639a      	str	r2, [r3, #56]	; 0x38
 80035c2:	e005      	b.n	80035d0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035c8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80035d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d10b      	bne.n	80035ee <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	f043 0206 	orr.w	r2, r3, #6
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	f043 0220 	orr.w	r2, r3, #32
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80035ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	3710      	adds	r7, #16
 80035f4:	46bd      	mov	sp, r7
 80035f6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80035fa:	b004      	add	sp, #16
 80035fc:	4770      	bx	lr
	...

08003600 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003600:	b480      	push	{r7}
 8003602:	b087      	sub	sp, #28
 8003604:	af00      	add	r7, sp, #0
 8003606:	60f8      	str	r0, [r7, #12]
 8003608:	60b9      	str	r1, [r7, #8]
 800360a:	4613      	mov	r3, r2
 800360c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800360e:	79fb      	ldrb	r3, [r7, #7]
 8003610:	2b02      	cmp	r3, #2
 8003612:	d165      	bne.n	80036e0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	4a41      	ldr	r2, [pc, #260]	; (800371c <USB_SetTurnaroundTime+0x11c>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d906      	bls.n	800362a <USB_SetTurnaroundTime+0x2a>
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	4a40      	ldr	r2, [pc, #256]	; (8003720 <USB_SetTurnaroundTime+0x120>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d802      	bhi.n	800362a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003624:	230f      	movs	r3, #15
 8003626:	617b      	str	r3, [r7, #20]
 8003628:	e062      	b.n	80036f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	4a3c      	ldr	r2, [pc, #240]	; (8003720 <USB_SetTurnaroundTime+0x120>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d906      	bls.n	8003640 <USB_SetTurnaroundTime+0x40>
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	4a3b      	ldr	r2, [pc, #236]	; (8003724 <USB_SetTurnaroundTime+0x124>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d802      	bhi.n	8003640 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800363a:	230e      	movs	r3, #14
 800363c:	617b      	str	r3, [r7, #20]
 800363e:	e057      	b.n	80036f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	4a38      	ldr	r2, [pc, #224]	; (8003724 <USB_SetTurnaroundTime+0x124>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d906      	bls.n	8003656 <USB_SetTurnaroundTime+0x56>
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	4a37      	ldr	r2, [pc, #220]	; (8003728 <USB_SetTurnaroundTime+0x128>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d802      	bhi.n	8003656 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003650:	230d      	movs	r3, #13
 8003652:	617b      	str	r3, [r7, #20]
 8003654:	e04c      	b.n	80036f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	4a33      	ldr	r2, [pc, #204]	; (8003728 <USB_SetTurnaroundTime+0x128>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d906      	bls.n	800366c <USB_SetTurnaroundTime+0x6c>
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	4a32      	ldr	r2, [pc, #200]	; (800372c <USB_SetTurnaroundTime+0x12c>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d802      	bhi.n	800366c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003666:	230c      	movs	r3, #12
 8003668:	617b      	str	r3, [r7, #20]
 800366a:	e041      	b.n	80036f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	4a2f      	ldr	r2, [pc, #188]	; (800372c <USB_SetTurnaroundTime+0x12c>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d906      	bls.n	8003682 <USB_SetTurnaroundTime+0x82>
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	4a2e      	ldr	r2, [pc, #184]	; (8003730 <USB_SetTurnaroundTime+0x130>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d802      	bhi.n	8003682 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800367c:	230b      	movs	r3, #11
 800367e:	617b      	str	r3, [r7, #20]
 8003680:	e036      	b.n	80036f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	4a2a      	ldr	r2, [pc, #168]	; (8003730 <USB_SetTurnaroundTime+0x130>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d906      	bls.n	8003698 <USB_SetTurnaroundTime+0x98>
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	4a29      	ldr	r2, [pc, #164]	; (8003734 <USB_SetTurnaroundTime+0x134>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d802      	bhi.n	8003698 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003692:	230a      	movs	r3, #10
 8003694:	617b      	str	r3, [r7, #20]
 8003696:	e02b      	b.n	80036f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	4a26      	ldr	r2, [pc, #152]	; (8003734 <USB_SetTurnaroundTime+0x134>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d906      	bls.n	80036ae <USB_SetTurnaroundTime+0xae>
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	4a25      	ldr	r2, [pc, #148]	; (8003738 <USB_SetTurnaroundTime+0x138>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d802      	bhi.n	80036ae <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80036a8:	2309      	movs	r3, #9
 80036aa:	617b      	str	r3, [r7, #20]
 80036ac:	e020      	b.n	80036f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	4a21      	ldr	r2, [pc, #132]	; (8003738 <USB_SetTurnaroundTime+0x138>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d906      	bls.n	80036c4 <USB_SetTurnaroundTime+0xc4>
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	4a20      	ldr	r2, [pc, #128]	; (800373c <USB_SetTurnaroundTime+0x13c>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d802      	bhi.n	80036c4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80036be:	2308      	movs	r3, #8
 80036c0:	617b      	str	r3, [r7, #20]
 80036c2:	e015      	b.n	80036f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	4a1d      	ldr	r2, [pc, #116]	; (800373c <USB_SetTurnaroundTime+0x13c>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d906      	bls.n	80036da <USB_SetTurnaroundTime+0xda>
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	4a1c      	ldr	r2, [pc, #112]	; (8003740 <USB_SetTurnaroundTime+0x140>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d802      	bhi.n	80036da <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80036d4:	2307      	movs	r3, #7
 80036d6:	617b      	str	r3, [r7, #20]
 80036d8:	e00a      	b.n	80036f0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80036da:	2306      	movs	r3, #6
 80036dc:	617b      	str	r3, [r7, #20]
 80036de:	e007      	b.n	80036f0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80036e0:	79fb      	ldrb	r3, [r7, #7]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d102      	bne.n	80036ec <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80036e6:	2309      	movs	r3, #9
 80036e8:	617b      	str	r3, [r7, #20]
 80036ea:	e001      	b.n	80036f0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80036ec:	2309      	movs	r3, #9
 80036ee:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	68da      	ldr	r2, [r3, #12]
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	029b      	lsls	r3, r3, #10
 8003704:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003708:	431a      	orrs	r2, r3
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800370e:	2300      	movs	r3, #0
}
 8003710:	4618      	mov	r0, r3
 8003712:	371c      	adds	r7, #28
 8003714:	46bd      	mov	sp, r7
 8003716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371a:	4770      	bx	lr
 800371c:	00d8acbf 	.word	0x00d8acbf
 8003720:	00e4e1bf 	.word	0x00e4e1bf
 8003724:	00f423ff 	.word	0x00f423ff
 8003728:	0106737f 	.word	0x0106737f
 800372c:	011a499f 	.word	0x011a499f
 8003730:	01312cff 	.word	0x01312cff
 8003734:	014ca43f 	.word	0x014ca43f
 8003738:	016e35ff 	.word	0x016e35ff
 800373c:	01a6ab1f 	.word	0x01a6ab1f
 8003740:	01e847ff 	.word	0x01e847ff

08003744 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003744:	b480      	push	{r7}
 8003746:	b083      	sub	sp, #12
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	f043 0201 	orr.w	r2, r3, #1
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003758:	2300      	movs	r3, #0
}
 800375a:	4618      	mov	r0, r3
 800375c:	370c      	adds	r7, #12
 800375e:	46bd      	mov	sp, r7
 8003760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003764:	4770      	bx	lr

08003766 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003766:	b480      	push	{r7}
 8003768:	b083      	sub	sp, #12
 800376a:	af00      	add	r7, sp, #0
 800376c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	f023 0201 	bic.w	r2, r3, #1
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800377a:	2300      	movs	r3, #0
}
 800377c:	4618      	mov	r0, r3
 800377e:	370c      	adds	r7, #12
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	4770      	bx	lr

08003788 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b082      	sub	sp, #8
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
 8003790:	460b      	mov	r3, r1
 8003792:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80037a0:	78fb      	ldrb	r3, [r7, #3]
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d106      	bne.n	80037b4 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	68db      	ldr	r3, [r3, #12]
 80037aa:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	60da      	str	r2, [r3, #12]
 80037b2:	e00b      	b.n	80037cc <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80037b4:	78fb      	ldrb	r3, [r7, #3]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d106      	bne.n	80037c8 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	68db      	ldr	r3, [r3, #12]
 80037be:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	60da      	str	r2, [r3, #12]
 80037c6:	e001      	b.n	80037cc <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e003      	b.n	80037d4 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80037cc:	2032      	movs	r0, #50	; 0x32
 80037ce:	f7fd fe4f 	bl	8001470 <HAL_Delay>

  return HAL_OK;
 80037d2:	2300      	movs	r3, #0
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	3708      	adds	r7, #8
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}

080037dc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80037dc:	b084      	sub	sp, #16
 80037de:	b580      	push	{r7, lr}
 80037e0:	b086      	sub	sp, #24
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	6078      	str	r0, [r7, #4]
 80037e6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80037ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80037ee:	2300      	movs	r3, #0
 80037f0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80037f6:	2300      	movs	r3, #0
 80037f8:	613b      	str	r3, [r7, #16]
 80037fa:	e009      	b.n	8003810 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80037fc:	687a      	ldr	r2, [r7, #4]
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	3340      	adds	r3, #64	; 0x40
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	4413      	add	r3, r2
 8003806:	2200      	movs	r2, #0
 8003808:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	3301      	adds	r3, #1
 800380e:	613b      	str	r3, [r7, #16]
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	2b0e      	cmp	r3, #14
 8003814:	d9f2      	bls.n	80037fc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003816:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003818:	2b00      	cmp	r3, #0
 800381a:	d11c      	bne.n	8003856 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	68fa      	ldr	r2, [r7, #12]
 8003826:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800382a:	f043 0302 	orr.w	r3, r3, #2
 800382e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003834:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003840:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800384c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	639a      	str	r2, [r3, #56]	; 0x38
 8003854:	e00b      	b.n	800386e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800385a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003866:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003874:	461a      	mov	r2, r3
 8003876:	2300      	movs	r3, #0
 8003878:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003880:	4619      	mov	r1, r3
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003888:	461a      	mov	r2, r3
 800388a:	680b      	ldr	r3, [r1, #0]
 800388c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800388e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003890:	2b01      	cmp	r3, #1
 8003892:	d10c      	bne.n	80038ae <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003896:	2b00      	cmp	r3, #0
 8003898:	d104      	bne.n	80038a4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800389a:	2100      	movs	r1, #0
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	f000 f949 	bl	8003b34 <USB_SetDevSpeed>
 80038a2:	e008      	b.n	80038b6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80038a4:	2101      	movs	r1, #1
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f000 f944 	bl	8003b34 <USB_SetDevSpeed>
 80038ac:	e003      	b.n	80038b6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80038ae:	2103      	movs	r1, #3
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	f000 f93f 	bl	8003b34 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80038b6:	2110      	movs	r1, #16
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	f000 f8f3 	bl	8003aa4 <USB_FlushTxFifo>
 80038be:	4603      	mov	r3, r0
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d001      	beq.n	80038c8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	f000 f911 	bl	8003af0 <USB_FlushRxFifo>
 80038ce:	4603      	mov	r3, r0
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d001      	beq.n	80038d8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038de:	461a      	mov	r2, r3
 80038e0:	2300      	movs	r3, #0
 80038e2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038ea:	461a      	mov	r2, r3
 80038ec:	2300      	movs	r3, #0
 80038ee:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038f6:	461a      	mov	r2, r3
 80038f8:	2300      	movs	r3, #0
 80038fa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80038fc:	2300      	movs	r3, #0
 80038fe:	613b      	str	r3, [r7, #16]
 8003900:	e043      	b.n	800398a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	015a      	lsls	r2, r3, #5
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	4413      	add	r3, r2
 800390a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003914:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003918:	d118      	bne.n	800394c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d10a      	bne.n	8003936 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	015a      	lsls	r2, r3, #5
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	4413      	add	r3, r2
 8003928:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800392c:	461a      	mov	r2, r3
 800392e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003932:	6013      	str	r3, [r2, #0]
 8003934:	e013      	b.n	800395e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	015a      	lsls	r2, r3, #5
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	4413      	add	r3, r2
 800393e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003942:	461a      	mov	r2, r3
 8003944:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003948:	6013      	str	r3, [r2, #0]
 800394a:	e008      	b.n	800395e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	015a      	lsls	r2, r3, #5
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	4413      	add	r3, r2
 8003954:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003958:	461a      	mov	r2, r3
 800395a:	2300      	movs	r3, #0
 800395c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	015a      	lsls	r2, r3, #5
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	4413      	add	r3, r2
 8003966:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800396a:	461a      	mov	r2, r3
 800396c:	2300      	movs	r3, #0
 800396e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	015a      	lsls	r2, r3, #5
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	4413      	add	r3, r2
 8003978:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800397c:	461a      	mov	r2, r3
 800397e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003982:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	3301      	adds	r3, #1
 8003988:	613b      	str	r3, [r7, #16]
 800398a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800398c:	693a      	ldr	r2, [r7, #16]
 800398e:	429a      	cmp	r2, r3
 8003990:	d3b7      	bcc.n	8003902 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003992:	2300      	movs	r3, #0
 8003994:	613b      	str	r3, [r7, #16]
 8003996:	e043      	b.n	8003a20 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	015a      	lsls	r2, r3, #5
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	4413      	add	r3, r2
 80039a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80039aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80039ae:	d118      	bne.n	80039e2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d10a      	bne.n	80039cc <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	015a      	lsls	r2, r3, #5
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	4413      	add	r3, r2
 80039be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039c2:	461a      	mov	r2, r3
 80039c4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80039c8:	6013      	str	r3, [r2, #0]
 80039ca:	e013      	b.n	80039f4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	015a      	lsls	r2, r3, #5
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	4413      	add	r3, r2
 80039d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039d8:	461a      	mov	r2, r3
 80039da:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80039de:	6013      	str	r3, [r2, #0]
 80039e0:	e008      	b.n	80039f4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	015a      	lsls	r2, r3, #5
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	4413      	add	r3, r2
 80039ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039ee:	461a      	mov	r2, r3
 80039f0:	2300      	movs	r3, #0
 80039f2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	015a      	lsls	r2, r3, #5
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	4413      	add	r3, r2
 80039fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a00:	461a      	mov	r2, r3
 8003a02:	2300      	movs	r3, #0
 8003a04:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	015a      	lsls	r2, r3, #5
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	4413      	add	r3, r2
 8003a0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a12:	461a      	mov	r2, r3
 8003a14:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003a18:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	3301      	adds	r3, #1
 8003a1e:	613b      	str	r3, [r7, #16]
 8003a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a22:	693a      	ldr	r2, [r7, #16]
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d3b7      	bcc.n	8003998 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a2e:	691b      	ldr	r3, [r3, #16]
 8003a30:	68fa      	ldr	r2, [r7, #12]
 8003a32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a36:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a3a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003a48:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d105      	bne.n	8003a5c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	699b      	ldr	r3, [r3, #24]
 8003a54:	f043 0210 	orr.w	r2, r3, #16
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	699a      	ldr	r2, [r3, #24]
 8003a60:	4b0f      	ldr	r3, [pc, #60]	; (8003aa0 <USB_DevInit+0x2c4>)
 8003a62:	4313      	orrs	r3, r2
 8003a64:	687a      	ldr	r2, [r7, #4]
 8003a66:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003a68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d005      	beq.n	8003a7a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	699b      	ldr	r3, [r3, #24]
 8003a72:	f043 0208 	orr.w	r2, r3, #8
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003a7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d107      	bne.n	8003a90 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	699b      	ldr	r3, [r3, #24]
 8003a84:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003a88:	f043 0304 	orr.w	r3, r3, #4
 8003a8c:	687a      	ldr	r2, [r7, #4]
 8003a8e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003a90:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3718      	adds	r7, #24
 8003a96:	46bd      	mov	sp, r7
 8003a98:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003a9c:	b004      	add	sp, #16
 8003a9e:	4770      	bx	lr
 8003aa0:	803c3800 	.word	0x803c3800

08003aa4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b085      	sub	sp, #20
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
 8003aac:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	019b      	lsls	r3, r3, #6
 8003ab6:	f043 0220 	orr.w	r2, r3, #32
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	3301      	adds	r3, #1
 8003ac2:	60fb      	str	r3, [r7, #12]
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	4a09      	ldr	r2, [pc, #36]	; (8003aec <USB_FlushTxFifo+0x48>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d901      	bls.n	8003ad0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8003acc:	2303      	movs	r3, #3
 8003ace:	e006      	b.n	8003ade <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	691b      	ldr	r3, [r3, #16]
 8003ad4:	f003 0320 	and.w	r3, r3, #32
 8003ad8:	2b20      	cmp	r3, #32
 8003ada:	d0f0      	beq.n	8003abe <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8003adc:	2300      	movs	r3, #0
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3714      	adds	r7, #20
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae8:	4770      	bx	lr
 8003aea:	bf00      	nop
 8003aec:	00030d40 	.word	0x00030d40

08003af0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b085      	sub	sp, #20
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8003af8:	2300      	movs	r3, #0
 8003afa:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2210      	movs	r2, #16
 8003b00:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	3301      	adds	r3, #1
 8003b06:	60fb      	str	r3, [r7, #12]
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	4a09      	ldr	r2, [pc, #36]	; (8003b30 <USB_FlushRxFifo+0x40>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d901      	bls.n	8003b14 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8003b10:	2303      	movs	r3, #3
 8003b12:	e006      	b.n	8003b22 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	691b      	ldr	r3, [r3, #16]
 8003b18:	f003 0310 	and.w	r3, r3, #16
 8003b1c:	2b10      	cmp	r3, #16
 8003b1e:	d0f0      	beq.n	8003b02 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8003b20:	2300      	movs	r3, #0
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3714      	adds	r7, #20
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr
 8003b2e:	bf00      	nop
 8003b30:	00030d40 	.word	0x00030d40

08003b34 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b085      	sub	sp, #20
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
 8003b3c:	460b      	mov	r3, r1
 8003b3e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	78fb      	ldrb	r3, [r7, #3]
 8003b4e:	68f9      	ldr	r1, [r7, #12]
 8003b50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003b54:	4313      	orrs	r3, r2
 8003b56:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003b58:	2300      	movs	r3, #0
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3714      	adds	r7, #20
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b64:	4770      	bx	lr

08003b66 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003b66:	b480      	push	{r7}
 8003b68:	b087      	sub	sp, #28
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	f003 0306 	and.w	r3, r3, #6
 8003b7e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d102      	bne.n	8003b8c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003b86:	2300      	movs	r3, #0
 8003b88:	75fb      	strb	r3, [r7, #23]
 8003b8a:	e00a      	b.n	8003ba2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2b02      	cmp	r3, #2
 8003b90:	d002      	beq.n	8003b98 <USB_GetDevSpeed+0x32>
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2b06      	cmp	r3, #6
 8003b96:	d102      	bne.n	8003b9e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003b98:	2302      	movs	r3, #2
 8003b9a:	75fb      	strb	r3, [r7, #23]
 8003b9c:	e001      	b.n	8003ba2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003b9e:	230f      	movs	r3, #15
 8003ba0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003ba2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	371c      	adds	r7, #28
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr

08003bb0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b085      	sub	sp, #20
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
 8003bb8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	781b      	ldrb	r3, [r3, #0]
 8003bc2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	785b      	ldrb	r3, [r3, #1]
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d13a      	bne.n	8003c42 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bd2:	69da      	ldr	r2, [r3, #28]
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	781b      	ldrb	r3, [r3, #0]
 8003bd8:	f003 030f 	and.w	r3, r3, #15
 8003bdc:	2101      	movs	r1, #1
 8003bde:	fa01 f303 	lsl.w	r3, r1, r3
 8003be2:	b29b      	uxth	r3, r3
 8003be4:	68f9      	ldr	r1, [r7, #12]
 8003be6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003bea:	4313      	orrs	r3, r2
 8003bec:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	015a      	lsls	r2, r3, #5
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	4413      	add	r3, r2
 8003bf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d155      	bne.n	8003cb0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	015a      	lsls	r2, r3, #5
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	4413      	add	r3, r2
 8003c0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c10:	681a      	ldr	r2, [r3, #0]
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	78db      	ldrb	r3, [r3, #3]
 8003c1e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003c20:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	059b      	lsls	r3, r3, #22
 8003c26:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	68ba      	ldr	r2, [r7, #8]
 8003c2c:	0151      	lsls	r1, r2, #5
 8003c2e:	68fa      	ldr	r2, [r7, #12]
 8003c30:	440a      	add	r2, r1
 8003c32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c3e:	6013      	str	r3, [r2, #0]
 8003c40:	e036      	b.n	8003cb0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c48:	69da      	ldr	r2, [r3, #28]
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	781b      	ldrb	r3, [r3, #0]
 8003c4e:	f003 030f 	and.w	r3, r3, #15
 8003c52:	2101      	movs	r1, #1
 8003c54:	fa01 f303 	lsl.w	r3, r1, r3
 8003c58:	041b      	lsls	r3, r3, #16
 8003c5a:	68f9      	ldr	r1, [r7, #12]
 8003c5c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c60:	4313      	orrs	r3, r2
 8003c62:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	015a      	lsls	r2, r3, #5
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	4413      	add	r3, r2
 8003c6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d11a      	bne.n	8003cb0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	015a      	lsls	r2, r3, #5
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	4413      	add	r3, r2
 8003c82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c86:	681a      	ldr	r2, [r3, #0]
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	78db      	ldrb	r3, [r3, #3]
 8003c94:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003c96:	430b      	orrs	r3, r1
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	68ba      	ldr	r2, [r7, #8]
 8003c9c:	0151      	lsls	r1, r2, #5
 8003c9e:	68fa      	ldr	r2, [r7, #12]
 8003ca0:	440a      	add	r2, r1
 8003ca2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ca6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003caa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cae:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003cb0:	2300      	movs	r3, #0
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3714      	adds	r7, #20
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr
	...

08003cc0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b085      	sub	sp, #20
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
 8003cc8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	781b      	ldrb	r3, [r3, #0]
 8003cd2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	785b      	ldrb	r3, [r3, #1]
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d161      	bne.n	8003da0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	015a      	lsls	r2, r3, #5
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	4413      	add	r3, r2
 8003ce4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003cee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003cf2:	d11f      	bne.n	8003d34 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	015a      	lsls	r2, r3, #5
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	4413      	add	r3, r2
 8003cfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	68ba      	ldr	r2, [r7, #8]
 8003d04:	0151      	lsls	r1, r2, #5
 8003d06:	68fa      	ldr	r2, [r7, #12]
 8003d08:	440a      	add	r2, r1
 8003d0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d0e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003d12:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	015a      	lsls	r2, r3, #5
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	4413      	add	r3, r2
 8003d1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	68ba      	ldr	r2, [r7, #8]
 8003d24:	0151      	lsls	r1, r2, #5
 8003d26:	68fa      	ldr	r2, [r7, #12]
 8003d28:	440a      	add	r2, r1
 8003d2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d2e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003d32:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	781b      	ldrb	r3, [r3, #0]
 8003d40:	f003 030f 	and.w	r3, r3, #15
 8003d44:	2101      	movs	r1, #1
 8003d46:	fa01 f303 	lsl.w	r3, r1, r3
 8003d4a:	b29b      	uxth	r3, r3
 8003d4c:	43db      	mvns	r3, r3
 8003d4e:	68f9      	ldr	r1, [r7, #12]
 8003d50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d54:	4013      	ands	r3, r2
 8003d56:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d5e:	69da      	ldr	r2, [r3, #28]
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	781b      	ldrb	r3, [r3, #0]
 8003d64:	f003 030f 	and.w	r3, r3, #15
 8003d68:	2101      	movs	r1, #1
 8003d6a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d6e:	b29b      	uxth	r3, r3
 8003d70:	43db      	mvns	r3, r3
 8003d72:	68f9      	ldr	r1, [r7, #12]
 8003d74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d78:	4013      	ands	r3, r2
 8003d7a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	015a      	lsls	r2, r3, #5
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	4413      	add	r3, r2
 8003d84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	0159      	lsls	r1, r3, #5
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	440b      	add	r3, r1
 8003d92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d96:	4619      	mov	r1, r3
 8003d98:	4b35      	ldr	r3, [pc, #212]	; (8003e70 <USB_DeactivateEndpoint+0x1b0>)
 8003d9a:	4013      	ands	r3, r2
 8003d9c:	600b      	str	r3, [r1, #0]
 8003d9e:	e060      	b.n	8003e62 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	015a      	lsls	r2, r3, #5
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	4413      	add	r3, r2
 8003da8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003db2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003db6:	d11f      	bne.n	8003df8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	015a      	lsls	r2, r3, #5
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	4413      	add	r3, r2
 8003dc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	68ba      	ldr	r2, [r7, #8]
 8003dc8:	0151      	lsls	r1, r2, #5
 8003dca:	68fa      	ldr	r2, [r7, #12]
 8003dcc:	440a      	add	r2, r1
 8003dce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003dd2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003dd6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	015a      	lsls	r2, r3, #5
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	4413      	add	r3, r2
 8003de0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	68ba      	ldr	r2, [r7, #8]
 8003de8:	0151      	lsls	r1, r2, #5
 8003dea:	68fa      	ldr	r2, [r7, #12]
 8003dec:	440a      	add	r2, r1
 8003dee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003df2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003df6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dfe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	781b      	ldrb	r3, [r3, #0]
 8003e04:	f003 030f 	and.w	r3, r3, #15
 8003e08:	2101      	movs	r1, #1
 8003e0a:	fa01 f303 	lsl.w	r3, r1, r3
 8003e0e:	041b      	lsls	r3, r3, #16
 8003e10:	43db      	mvns	r3, r3
 8003e12:	68f9      	ldr	r1, [r7, #12]
 8003e14:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e18:	4013      	ands	r3, r2
 8003e1a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e22:	69da      	ldr	r2, [r3, #28]
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	781b      	ldrb	r3, [r3, #0]
 8003e28:	f003 030f 	and.w	r3, r3, #15
 8003e2c:	2101      	movs	r1, #1
 8003e2e:	fa01 f303 	lsl.w	r3, r1, r3
 8003e32:	041b      	lsls	r3, r3, #16
 8003e34:	43db      	mvns	r3, r3
 8003e36:	68f9      	ldr	r1, [r7, #12]
 8003e38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e3c:	4013      	ands	r3, r2
 8003e3e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	015a      	lsls	r2, r3, #5
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	4413      	add	r3, r2
 8003e48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	0159      	lsls	r1, r3, #5
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	440b      	add	r3, r1
 8003e56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e5a:	4619      	mov	r1, r3
 8003e5c:	4b05      	ldr	r3, [pc, #20]	; (8003e74 <USB_DeactivateEndpoint+0x1b4>)
 8003e5e:	4013      	ands	r3, r2
 8003e60:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003e62:	2300      	movs	r3, #0
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	3714      	adds	r7, #20
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6e:	4770      	bx	lr
 8003e70:	ec337800 	.word	0xec337800
 8003e74:	eff37800 	.word	0xeff37800

08003e78 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b08a      	sub	sp, #40	; 0x28
 8003e7c:	af02      	add	r7, sp, #8
 8003e7e:	60f8      	str	r0, [r7, #12]
 8003e80:	60b9      	str	r1, [r7, #8]
 8003e82:	4613      	mov	r3, r2
 8003e84:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	781b      	ldrb	r3, [r3, #0]
 8003e8e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	785b      	ldrb	r3, [r3, #1]
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	f040 815c 	bne.w	8004152 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	695b      	ldr	r3, [r3, #20]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d132      	bne.n	8003f08 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003ea2:	69bb      	ldr	r3, [r7, #24]
 8003ea4:	015a      	lsls	r2, r3, #5
 8003ea6:	69fb      	ldr	r3, [r7, #28]
 8003ea8:	4413      	add	r3, r2
 8003eaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003eae:	691b      	ldr	r3, [r3, #16]
 8003eb0:	69ba      	ldr	r2, [r7, #24]
 8003eb2:	0151      	lsls	r1, r2, #5
 8003eb4:	69fa      	ldr	r2, [r7, #28]
 8003eb6:	440a      	add	r2, r1
 8003eb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ebc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003ec0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003ec4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003ec6:	69bb      	ldr	r3, [r7, #24]
 8003ec8:	015a      	lsls	r2, r3, #5
 8003eca:	69fb      	ldr	r3, [r7, #28]
 8003ecc:	4413      	add	r3, r2
 8003ece:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ed2:	691b      	ldr	r3, [r3, #16]
 8003ed4:	69ba      	ldr	r2, [r7, #24]
 8003ed6:	0151      	lsls	r1, r2, #5
 8003ed8:	69fa      	ldr	r2, [r7, #28]
 8003eda:	440a      	add	r2, r1
 8003edc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ee0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003ee4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003ee6:	69bb      	ldr	r3, [r7, #24]
 8003ee8:	015a      	lsls	r2, r3, #5
 8003eea:	69fb      	ldr	r3, [r7, #28]
 8003eec:	4413      	add	r3, r2
 8003eee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ef2:	691b      	ldr	r3, [r3, #16]
 8003ef4:	69ba      	ldr	r2, [r7, #24]
 8003ef6:	0151      	lsls	r1, r2, #5
 8003ef8:	69fa      	ldr	r2, [r7, #28]
 8003efa:	440a      	add	r2, r1
 8003efc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f00:	0cdb      	lsrs	r3, r3, #19
 8003f02:	04db      	lsls	r3, r3, #19
 8003f04:	6113      	str	r3, [r2, #16]
 8003f06:	e074      	b.n	8003ff2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003f08:	69bb      	ldr	r3, [r7, #24]
 8003f0a:	015a      	lsls	r2, r3, #5
 8003f0c:	69fb      	ldr	r3, [r7, #28]
 8003f0e:	4413      	add	r3, r2
 8003f10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f14:	691b      	ldr	r3, [r3, #16]
 8003f16:	69ba      	ldr	r2, [r7, #24]
 8003f18:	0151      	lsls	r1, r2, #5
 8003f1a:	69fa      	ldr	r2, [r7, #28]
 8003f1c:	440a      	add	r2, r1
 8003f1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f22:	0cdb      	lsrs	r3, r3, #19
 8003f24:	04db      	lsls	r3, r3, #19
 8003f26:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003f28:	69bb      	ldr	r3, [r7, #24]
 8003f2a:	015a      	lsls	r2, r3, #5
 8003f2c:	69fb      	ldr	r3, [r7, #28]
 8003f2e:	4413      	add	r3, r2
 8003f30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f34:	691b      	ldr	r3, [r3, #16]
 8003f36:	69ba      	ldr	r2, [r7, #24]
 8003f38:	0151      	lsls	r1, r2, #5
 8003f3a:	69fa      	ldr	r2, [r7, #28]
 8003f3c:	440a      	add	r2, r1
 8003f3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f42:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003f46:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003f4a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003f4c:	69bb      	ldr	r3, [r7, #24]
 8003f4e:	015a      	lsls	r2, r3, #5
 8003f50:	69fb      	ldr	r3, [r7, #28]
 8003f52:	4413      	add	r3, r2
 8003f54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f58:	691a      	ldr	r2, [r3, #16]
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	6959      	ldr	r1, [r3, #20]
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	440b      	add	r3, r1
 8003f64:	1e59      	subs	r1, r3, #1
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f6e:	04d9      	lsls	r1, r3, #19
 8003f70:	4b9d      	ldr	r3, [pc, #628]	; (80041e8 <USB_EPStartXfer+0x370>)
 8003f72:	400b      	ands	r3, r1
 8003f74:	69b9      	ldr	r1, [r7, #24]
 8003f76:	0148      	lsls	r0, r1, #5
 8003f78:	69f9      	ldr	r1, [r7, #28]
 8003f7a:	4401      	add	r1, r0
 8003f7c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003f80:	4313      	orrs	r3, r2
 8003f82:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003f84:	69bb      	ldr	r3, [r7, #24]
 8003f86:	015a      	lsls	r2, r3, #5
 8003f88:	69fb      	ldr	r3, [r7, #28]
 8003f8a:	4413      	add	r3, r2
 8003f8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f90:	691a      	ldr	r2, [r3, #16]
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	695b      	ldr	r3, [r3, #20]
 8003f96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f9a:	69b9      	ldr	r1, [r7, #24]
 8003f9c:	0148      	lsls	r0, r1, #5
 8003f9e:	69f9      	ldr	r1, [r7, #28]
 8003fa0:	4401      	add	r1, r0
 8003fa2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	78db      	ldrb	r3, [r3, #3]
 8003fae:	2b01      	cmp	r3, #1
 8003fb0:	d11f      	bne.n	8003ff2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003fb2:	69bb      	ldr	r3, [r7, #24]
 8003fb4:	015a      	lsls	r2, r3, #5
 8003fb6:	69fb      	ldr	r3, [r7, #28]
 8003fb8:	4413      	add	r3, r2
 8003fba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fbe:	691b      	ldr	r3, [r3, #16]
 8003fc0:	69ba      	ldr	r2, [r7, #24]
 8003fc2:	0151      	lsls	r1, r2, #5
 8003fc4:	69fa      	ldr	r2, [r7, #28]
 8003fc6:	440a      	add	r2, r1
 8003fc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fcc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003fd0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003fd2:	69bb      	ldr	r3, [r7, #24]
 8003fd4:	015a      	lsls	r2, r3, #5
 8003fd6:	69fb      	ldr	r3, [r7, #28]
 8003fd8:	4413      	add	r3, r2
 8003fda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fde:	691b      	ldr	r3, [r3, #16]
 8003fe0:	69ba      	ldr	r2, [r7, #24]
 8003fe2:	0151      	lsls	r1, r2, #5
 8003fe4:	69fa      	ldr	r2, [r7, #28]
 8003fe6:	440a      	add	r2, r1
 8003fe8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003ff0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8003ff2:	79fb      	ldrb	r3, [r7, #7]
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d14b      	bne.n	8004090 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	691b      	ldr	r3, [r3, #16]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d009      	beq.n	8004014 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004000:	69bb      	ldr	r3, [r7, #24]
 8004002:	015a      	lsls	r2, r3, #5
 8004004:	69fb      	ldr	r3, [r7, #28]
 8004006:	4413      	add	r3, r2
 8004008:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800400c:	461a      	mov	r2, r3
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	691b      	ldr	r3, [r3, #16]
 8004012:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	78db      	ldrb	r3, [r3, #3]
 8004018:	2b01      	cmp	r3, #1
 800401a:	d128      	bne.n	800406e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800401c:	69fb      	ldr	r3, [r7, #28]
 800401e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004028:	2b00      	cmp	r3, #0
 800402a:	d110      	bne.n	800404e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800402c:	69bb      	ldr	r3, [r7, #24]
 800402e:	015a      	lsls	r2, r3, #5
 8004030:	69fb      	ldr	r3, [r7, #28]
 8004032:	4413      	add	r3, r2
 8004034:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	69ba      	ldr	r2, [r7, #24]
 800403c:	0151      	lsls	r1, r2, #5
 800403e:	69fa      	ldr	r2, [r7, #28]
 8004040:	440a      	add	r2, r1
 8004042:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004046:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800404a:	6013      	str	r3, [r2, #0]
 800404c:	e00f      	b.n	800406e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800404e:	69bb      	ldr	r3, [r7, #24]
 8004050:	015a      	lsls	r2, r3, #5
 8004052:	69fb      	ldr	r3, [r7, #28]
 8004054:	4413      	add	r3, r2
 8004056:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	69ba      	ldr	r2, [r7, #24]
 800405e:	0151      	lsls	r1, r2, #5
 8004060:	69fa      	ldr	r2, [r7, #28]
 8004062:	440a      	add	r2, r1
 8004064:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004068:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800406c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800406e:	69bb      	ldr	r3, [r7, #24]
 8004070:	015a      	lsls	r2, r3, #5
 8004072:	69fb      	ldr	r3, [r7, #28]
 8004074:	4413      	add	r3, r2
 8004076:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	69ba      	ldr	r2, [r7, #24]
 800407e:	0151      	lsls	r1, r2, #5
 8004080:	69fa      	ldr	r2, [r7, #28]
 8004082:	440a      	add	r2, r1
 8004084:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004088:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800408c:	6013      	str	r3, [r2, #0]
 800408e:	e12f      	b.n	80042f0 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004090:	69bb      	ldr	r3, [r7, #24]
 8004092:	015a      	lsls	r2, r3, #5
 8004094:	69fb      	ldr	r3, [r7, #28]
 8004096:	4413      	add	r3, r2
 8004098:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	69ba      	ldr	r2, [r7, #24]
 80040a0:	0151      	lsls	r1, r2, #5
 80040a2:	69fa      	ldr	r2, [r7, #28]
 80040a4:	440a      	add	r2, r1
 80040a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040aa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80040ae:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	78db      	ldrb	r3, [r3, #3]
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d015      	beq.n	80040e4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	695b      	ldr	r3, [r3, #20]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	f000 8117 	beq.w	80042f0 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80040c2:	69fb      	ldr	r3, [r7, #28]
 80040c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	781b      	ldrb	r3, [r3, #0]
 80040ce:	f003 030f 	and.w	r3, r3, #15
 80040d2:	2101      	movs	r1, #1
 80040d4:	fa01 f303 	lsl.w	r3, r1, r3
 80040d8:	69f9      	ldr	r1, [r7, #28]
 80040da:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80040de:	4313      	orrs	r3, r2
 80040e0:	634b      	str	r3, [r1, #52]	; 0x34
 80040e2:	e105      	b.n	80042f0 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80040e4:	69fb      	ldr	r3, [r7, #28]
 80040e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d110      	bne.n	8004116 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80040f4:	69bb      	ldr	r3, [r7, #24]
 80040f6:	015a      	lsls	r2, r3, #5
 80040f8:	69fb      	ldr	r3, [r7, #28]
 80040fa:	4413      	add	r3, r2
 80040fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	69ba      	ldr	r2, [r7, #24]
 8004104:	0151      	lsls	r1, r2, #5
 8004106:	69fa      	ldr	r2, [r7, #28]
 8004108:	440a      	add	r2, r1
 800410a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800410e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004112:	6013      	str	r3, [r2, #0]
 8004114:	e00f      	b.n	8004136 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004116:	69bb      	ldr	r3, [r7, #24]
 8004118:	015a      	lsls	r2, r3, #5
 800411a:	69fb      	ldr	r3, [r7, #28]
 800411c:	4413      	add	r3, r2
 800411e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	69ba      	ldr	r2, [r7, #24]
 8004126:	0151      	lsls	r1, r2, #5
 8004128:	69fa      	ldr	r2, [r7, #28]
 800412a:	440a      	add	r2, r1
 800412c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004130:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004134:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	68d9      	ldr	r1, [r3, #12]
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	781a      	ldrb	r2, [r3, #0]
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	695b      	ldr	r3, [r3, #20]
 8004142:	b298      	uxth	r0, r3
 8004144:	79fb      	ldrb	r3, [r7, #7]
 8004146:	9300      	str	r3, [sp, #0]
 8004148:	4603      	mov	r3, r0
 800414a:	68f8      	ldr	r0, [r7, #12]
 800414c:	f000 fa2b 	bl	80045a6 <USB_WritePacket>
 8004150:	e0ce      	b.n	80042f0 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004152:	69bb      	ldr	r3, [r7, #24]
 8004154:	015a      	lsls	r2, r3, #5
 8004156:	69fb      	ldr	r3, [r7, #28]
 8004158:	4413      	add	r3, r2
 800415a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800415e:	691b      	ldr	r3, [r3, #16]
 8004160:	69ba      	ldr	r2, [r7, #24]
 8004162:	0151      	lsls	r1, r2, #5
 8004164:	69fa      	ldr	r2, [r7, #28]
 8004166:	440a      	add	r2, r1
 8004168:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800416c:	0cdb      	lsrs	r3, r3, #19
 800416e:	04db      	lsls	r3, r3, #19
 8004170:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004172:	69bb      	ldr	r3, [r7, #24]
 8004174:	015a      	lsls	r2, r3, #5
 8004176:	69fb      	ldr	r3, [r7, #28]
 8004178:	4413      	add	r3, r2
 800417a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800417e:	691b      	ldr	r3, [r3, #16]
 8004180:	69ba      	ldr	r2, [r7, #24]
 8004182:	0151      	lsls	r1, r2, #5
 8004184:	69fa      	ldr	r2, [r7, #28]
 8004186:	440a      	add	r2, r1
 8004188:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800418c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004190:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004194:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	695b      	ldr	r3, [r3, #20]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d126      	bne.n	80041ec <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800419e:	69bb      	ldr	r3, [r7, #24]
 80041a0:	015a      	lsls	r2, r3, #5
 80041a2:	69fb      	ldr	r3, [r7, #28]
 80041a4:	4413      	add	r3, r2
 80041a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041aa:	691a      	ldr	r2, [r3, #16]
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041b4:	69b9      	ldr	r1, [r7, #24]
 80041b6:	0148      	lsls	r0, r1, #5
 80041b8:	69f9      	ldr	r1, [r7, #28]
 80041ba:	4401      	add	r1, r0
 80041bc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80041c0:	4313      	orrs	r3, r2
 80041c2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80041c4:	69bb      	ldr	r3, [r7, #24]
 80041c6:	015a      	lsls	r2, r3, #5
 80041c8:	69fb      	ldr	r3, [r7, #28]
 80041ca:	4413      	add	r3, r2
 80041cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041d0:	691b      	ldr	r3, [r3, #16]
 80041d2:	69ba      	ldr	r2, [r7, #24]
 80041d4:	0151      	lsls	r1, r2, #5
 80041d6:	69fa      	ldr	r2, [r7, #28]
 80041d8:	440a      	add	r2, r1
 80041da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80041de:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80041e2:	6113      	str	r3, [r2, #16]
 80041e4:	e036      	b.n	8004254 <USB_EPStartXfer+0x3dc>
 80041e6:	bf00      	nop
 80041e8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	695a      	ldr	r2, [r3, #20]
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	4413      	add	r3, r2
 80041f6:	1e5a      	subs	r2, r3, #1
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004200:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004202:	69bb      	ldr	r3, [r7, #24]
 8004204:	015a      	lsls	r2, r3, #5
 8004206:	69fb      	ldr	r3, [r7, #28]
 8004208:	4413      	add	r3, r2
 800420a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800420e:	691a      	ldr	r2, [r3, #16]
 8004210:	8afb      	ldrh	r3, [r7, #22]
 8004212:	04d9      	lsls	r1, r3, #19
 8004214:	4b39      	ldr	r3, [pc, #228]	; (80042fc <USB_EPStartXfer+0x484>)
 8004216:	400b      	ands	r3, r1
 8004218:	69b9      	ldr	r1, [r7, #24]
 800421a:	0148      	lsls	r0, r1, #5
 800421c:	69f9      	ldr	r1, [r7, #28]
 800421e:	4401      	add	r1, r0
 8004220:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004224:	4313      	orrs	r3, r2
 8004226:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8004228:	69bb      	ldr	r3, [r7, #24]
 800422a:	015a      	lsls	r2, r3, #5
 800422c:	69fb      	ldr	r3, [r7, #28]
 800422e:	4413      	add	r3, r2
 8004230:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004234:	691a      	ldr	r2, [r3, #16]
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	8af9      	ldrh	r1, [r7, #22]
 800423c:	fb01 f303 	mul.w	r3, r1, r3
 8004240:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004244:	69b9      	ldr	r1, [r7, #24]
 8004246:	0148      	lsls	r0, r1, #5
 8004248:	69f9      	ldr	r1, [r7, #28]
 800424a:	4401      	add	r1, r0
 800424c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004250:	4313      	orrs	r3, r2
 8004252:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004254:	79fb      	ldrb	r3, [r7, #7]
 8004256:	2b01      	cmp	r3, #1
 8004258:	d10d      	bne.n	8004276 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	68db      	ldr	r3, [r3, #12]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d009      	beq.n	8004276 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	68d9      	ldr	r1, [r3, #12]
 8004266:	69bb      	ldr	r3, [r7, #24]
 8004268:	015a      	lsls	r2, r3, #5
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	4413      	add	r3, r2
 800426e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004272:	460a      	mov	r2, r1
 8004274:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	78db      	ldrb	r3, [r3, #3]
 800427a:	2b01      	cmp	r3, #1
 800427c:	d128      	bne.n	80042d0 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800427e:	69fb      	ldr	r3, [r7, #28]
 8004280:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800428a:	2b00      	cmp	r3, #0
 800428c:	d110      	bne.n	80042b0 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800428e:	69bb      	ldr	r3, [r7, #24]
 8004290:	015a      	lsls	r2, r3, #5
 8004292:	69fb      	ldr	r3, [r7, #28]
 8004294:	4413      	add	r3, r2
 8004296:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	69ba      	ldr	r2, [r7, #24]
 800429e:	0151      	lsls	r1, r2, #5
 80042a0:	69fa      	ldr	r2, [r7, #28]
 80042a2:	440a      	add	r2, r1
 80042a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042a8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80042ac:	6013      	str	r3, [r2, #0]
 80042ae:	e00f      	b.n	80042d0 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80042b0:	69bb      	ldr	r3, [r7, #24]
 80042b2:	015a      	lsls	r2, r3, #5
 80042b4:	69fb      	ldr	r3, [r7, #28]
 80042b6:	4413      	add	r3, r2
 80042b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	69ba      	ldr	r2, [r7, #24]
 80042c0:	0151      	lsls	r1, r2, #5
 80042c2:	69fa      	ldr	r2, [r7, #28]
 80042c4:	440a      	add	r2, r1
 80042c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042ce:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80042d0:	69bb      	ldr	r3, [r7, #24]
 80042d2:	015a      	lsls	r2, r3, #5
 80042d4:	69fb      	ldr	r3, [r7, #28]
 80042d6:	4413      	add	r3, r2
 80042d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	69ba      	ldr	r2, [r7, #24]
 80042e0:	0151      	lsls	r1, r2, #5
 80042e2:	69fa      	ldr	r2, [r7, #28]
 80042e4:	440a      	add	r2, r1
 80042e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042ea:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80042ee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80042f0:	2300      	movs	r3, #0
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	3720      	adds	r7, #32
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}
 80042fa:	bf00      	nop
 80042fc:	1ff80000 	.word	0x1ff80000

08004300 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004300:	b480      	push	{r7}
 8004302:	b087      	sub	sp, #28
 8004304:	af00      	add	r7, sp, #0
 8004306:	60f8      	str	r0, [r7, #12]
 8004308:	60b9      	str	r1, [r7, #8]
 800430a:	4613      	mov	r3, r2
 800430c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	781b      	ldrb	r3, [r3, #0]
 8004316:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	785b      	ldrb	r3, [r3, #1]
 800431c:	2b01      	cmp	r3, #1
 800431e:	f040 80cd 	bne.w	80044bc <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	695b      	ldr	r3, [r3, #20]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d132      	bne.n	8004390 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	015a      	lsls	r2, r3, #5
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	4413      	add	r3, r2
 8004332:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004336:	691b      	ldr	r3, [r3, #16]
 8004338:	693a      	ldr	r2, [r7, #16]
 800433a:	0151      	lsls	r1, r2, #5
 800433c:	697a      	ldr	r2, [r7, #20]
 800433e:	440a      	add	r2, r1
 8004340:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004344:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004348:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800434c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	015a      	lsls	r2, r3, #5
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	4413      	add	r3, r2
 8004356:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800435a:	691b      	ldr	r3, [r3, #16]
 800435c:	693a      	ldr	r2, [r7, #16]
 800435e:	0151      	lsls	r1, r2, #5
 8004360:	697a      	ldr	r2, [r7, #20]
 8004362:	440a      	add	r2, r1
 8004364:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004368:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800436c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	015a      	lsls	r2, r3, #5
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	4413      	add	r3, r2
 8004376:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800437a:	691b      	ldr	r3, [r3, #16]
 800437c:	693a      	ldr	r2, [r7, #16]
 800437e:	0151      	lsls	r1, r2, #5
 8004380:	697a      	ldr	r2, [r7, #20]
 8004382:	440a      	add	r2, r1
 8004384:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004388:	0cdb      	lsrs	r3, r3, #19
 800438a:	04db      	lsls	r3, r3, #19
 800438c:	6113      	str	r3, [r2, #16]
 800438e:	e04e      	b.n	800442e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	015a      	lsls	r2, r3, #5
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	4413      	add	r3, r2
 8004398:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800439c:	691b      	ldr	r3, [r3, #16]
 800439e:	693a      	ldr	r2, [r7, #16]
 80043a0:	0151      	lsls	r1, r2, #5
 80043a2:	697a      	ldr	r2, [r7, #20]
 80043a4:	440a      	add	r2, r1
 80043a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043aa:	0cdb      	lsrs	r3, r3, #19
 80043ac:	04db      	lsls	r3, r3, #19
 80043ae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	015a      	lsls	r2, r3, #5
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	4413      	add	r3, r2
 80043b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043bc:	691b      	ldr	r3, [r3, #16]
 80043be:	693a      	ldr	r2, [r7, #16]
 80043c0:	0151      	lsls	r1, r2, #5
 80043c2:	697a      	ldr	r2, [r7, #20]
 80043c4:	440a      	add	r2, r1
 80043c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043ca:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80043ce:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80043d2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	695a      	ldr	r2, [r3, #20]
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	429a      	cmp	r2, r3
 80043de:	d903      	bls.n	80043e8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	689a      	ldr	r2, [r3, #8]
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	015a      	lsls	r2, r3, #5
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	4413      	add	r3, r2
 80043f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043f4:	691b      	ldr	r3, [r3, #16]
 80043f6:	693a      	ldr	r2, [r7, #16]
 80043f8:	0151      	lsls	r1, r2, #5
 80043fa:	697a      	ldr	r2, [r7, #20]
 80043fc:	440a      	add	r2, r1
 80043fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004402:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004406:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	015a      	lsls	r2, r3, #5
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	4413      	add	r3, r2
 8004410:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004414:	691a      	ldr	r2, [r3, #16]
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	695b      	ldr	r3, [r3, #20]
 800441a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800441e:	6939      	ldr	r1, [r7, #16]
 8004420:	0148      	lsls	r0, r1, #5
 8004422:	6979      	ldr	r1, [r7, #20]
 8004424:	4401      	add	r1, r0
 8004426:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800442a:	4313      	orrs	r3, r2
 800442c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800442e:	79fb      	ldrb	r3, [r7, #7]
 8004430:	2b01      	cmp	r3, #1
 8004432:	d11e      	bne.n	8004472 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	691b      	ldr	r3, [r3, #16]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d009      	beq.n	8004450 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	015a      	lsls	r2, r3, #5
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	4413      	add	r3, r2
 8004444:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004448:	461a      	mov	r2, r3
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	691b      	ldr	r3, [r3, #16]
 800444e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	015a      	lsls	r2, r3, #5
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	4413      	add	r3, r2
 8004458:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	693a      	ldr	r2, [r7, #16]
 8004460:	0151      	lsls	r1, r2, #5
 8004462:	697a      	ldr	r2, [r7, #20]
 8004464:	440a      	add	r2, r1
 8004466:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800446a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800446e:	6013      	str	r3, [r2, #0]
 8004470:	e092      	b.n	8004598 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	015a      	lsls	r2, r3, #5
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	4413      	add	r3, r2
 800447a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	693a      	ldr	r2, [r7, #16]
 8004482:	0151      	lsls	r1, r2, #5
 8004484:	697a      	ldr	r2, [r7, #20]
 8004486:	440a      	add	r2, r1
 8004488:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800448c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004490:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	695b      	ldr	r3, [r3, #20]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d07e      	beq.n	8004598 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	781b      	ldrb	r3, [r3, #0]
 80044a6:	f003 030f 	and.w	r3, r3, #15
 80044aa:	2101      	movs	r1, #1
 80044ac:	fa01 f303 	lsl.w	r3, r1, r3
 80044b0:	6979      	ldr	r1, [r7, #20]
 80044b2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80044b6:	4313      	orrs	r3, r2
 80044b8:	634b      	str	r3, [r1, #52]	; 0x34
 80044ba:	e06d      	b.n	8004598 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	015a      	lsls	r2, r3, #5
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	4413      	add	r3, r2
 80044c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044c8:	691b      	ldr	r3, [r3, #16]
 80044ca:	693a      	ldr	r2, [r7, #16]
 80044cc:	0151      	lsls	r1, r2, #5
 80044ce:	697a      	ldr	r2, [r7, #20]
 80044d0:	440a      	add	r2, r1
 80044d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044d6:	0cdb      	lsrs	r3, r3, #19
 80044d8:	04db      	lsls	r3, r3, #19
 80044da:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	015a      	lsls	r2, r3, #5
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	4413      	add	r3, r2
 80044e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044e8:	691b      	ldr	r3, [r3, #16]
 80044ea:	693a      	ldr	r2, [r7, #16]
 80044ec:	0151      	lsls	r1, r2, #5
 80044ee:	697a      	ldr	r2, [r7, #20]
 80044f0:	440a      	add	r2, r1
 80044f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044f6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80044fa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80044fe:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	695b      	ldr	r3, [r3, #20]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d003      	beq.n	8004510 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	689a      	ldr	r2, [r3, #8]
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	015a      	lsls	r2, r3, #5
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	4413      	add	r3, r2
 8004518:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800451c:	691b      	ldr	r3, [r3, #16]
 800451e:	693a      	ldr	r2, [r7, #16]
 8004520:	0151      	lsls	r1, r2, #5
 8004522:	697a      	ldr	r2, [r7, #20]
 8004524:	440a      	add	r2, r1
 8004526:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800452a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800452e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	015a      	lsls	r2, r3, #5
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	4413      	add	r3, r2
 8004538:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800453c:	691a      	ldr	r2, [r3, #16]
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004546:	6939      	ldr	r1, [r7, #16]
 8004548:	0148      	lsls	r0, r1, #5
 800454a:	6979      	ldr	r1, [r7, #20]
 800454c:	4401      	add	r1, r0
 800454e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004552:	4313      	orrs	r3, r2
 8004554:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004556:	79fb      	ldrb	r3, [r7, #7]
 8004558:	2b01      	cmp	r3, #1
 800455a:	d10d      	bne.n	8004578 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	68db      	ldr	r3, [r3, #12]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d009      	beq.n	8004578 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	68d9      	ldr	r1, [r3, #12]
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	015a      	lsls	r2, r3, #5
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	4413      	add	r3, r2
 8004570:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004574:	460a      	mov	r2, r1
 8004576:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	015a      	lsls	r2, r3, #5
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	4413      	add	r3, r2
 8004580:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	693a      	ldr	r2, [r7, #16]
 8004588:	0151      	lsls	r1, r2, #5
 800458a:	697a      	ldr	r2, [r7, #20]
 800458c:	440a      	add	r2, r1
 800458e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004592:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004596:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004598:	2300      	movs	r3, #0
}
 800459a:	4618      	mov	r0, r3
 800459c:	371c      	adds	r7, #28
 800459e:	46bd      	mov	sp, r7
 80045a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a4:	4770      	bx	lr

080045a6 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80045a6:	b480      	push	{r7}
 80045a8:	b089      	sub	sp, #36	; 0x24
 80045aa:	af00      	add	r7, sp, #0
 80045ac:	60f8      	str	r0, [r7, #12]
 80045ae:	60b9      	str	r1, [r7, #8]
 80045b0:	4611      	mov	r1, r2
 80045b2:	461a      	mov	r2, r3
 80045b4:	460b      	mov	r3, r1
 80045b6:	71fb      	strb	r3, [r7, #7]
 80045b8:	4613      	mov	r3, r2
 80045ba:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80045c4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d11a      	bne.n	8004602 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80045cc:	88bb      	ldrh	r3, [r7, #4]
 80045ce:	3303      	adds	r3, #3
 80045d0:	089b      	lsrs	r3, r3, #2
 80045d2:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80045d4:	2300      	movs	r3, #0
 80045d6:	61bb      	str	r3, [r7, #24]
 80045d8:	e00f      	b.n	80045fa <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80045da:	79fb      	ldrb	r3, [r7, #7]
 80045dc:	031a      	lsls	r2, r3, #12
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	4413      	add	r3, r2
 80045e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045e6:	461a      	mov	r2, r3
 80045e8:	69fb      	ldr	r3, [r7, #28]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	6013      	str	r3, [r2, #0]
      pSrc++;
 80045ee:	69fb      	ldr	r3, [r7, #28]
 80045f0:	3304      	adds	r3, #4
 80045f2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80045f4:	69bb      	ldr	r3, [r7, #24]
 80045f6:	3301      	adds	r3, #1
 80045f8:	61bb      	str	r3, [r7, #24]
 80045fa:	69ba      	ldr	r2, [r7, #24]
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	429a      	cmp	r2, r3
 8004600:	d3eb      	bcc.n	80045da <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004602:	2300      	movs	r3, #0
}
 8004604:	4618      	mov	r0, r3
 8004606:	3724      	adds	r7, #36	; 0x24
 8004608:	46bd      	mov	sp, r7
 800460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460e:	4770      	bx	lr

08004610 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004610:	b480      	push	{r7}
 8004612:	b089      	sub	sp, #36	; 0x24
 8004614:	af00      	add	r7, sp, #0
 8004616:	60f8      	str	r0, [r7, #12]
 8004618:	60b9      	str	r1, [r7, #8]
 800461a:	4613      	mov	r3, r2
 800461c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8004626:	88fb      	ldrh	r3, [r7, #6]
 8004628:	3303      	adds	r3, #3
 800462a:	089b      	lsrs	r3, r3, #2
 800462c:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800462e:	2300      	movs	r3, #0
 8004630:	61bb      	str	r3, [r7, #24]
 8004632:	e00b      	b.n	800464c <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	69fb      	ldr	r3, [r7, #28]
 800463e:	601a      	str	r2, [r3, #0]
    pDest++;
 8004640:	69fb      	ldr	r3, [r7, #28]
 8004642:	3304      	adds	r3, #4
 8004644:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8004646:	69bb      	ldr	r3, [r7, #24]
 8004648:	3301      	adds	r3, #1
 800464a:	61bb      	str	r3, [r7, #24]
 800464c:	69ba      	ldr	r2, [r7, #24]
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	429a      	cmp	r2, r3
 8004652:	d3ef      	bcc.n	8004634 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8004654:	69fb      	ldr	r3, [r7, #28]
}
 8004656:	4618      	mov	r0, r3
 8004658:	3724      	adds	r7, #36	; 0x24
 800465a:	46bd      	mov	sp, r7
 800465c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004660:	4770      	bx	lr

08004662 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004662:	b480      	push	{r7}
 8004664:	b085      	sub	sp, #20
 8004666:	af00      	add	r7, sp, #0
 8004668:	6078      	str	r0, [r7, #4]
 800466a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	781b      	ldrb	r3, [r3, #0]
 8004674:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	785b      	ldrb	r3, [r3, #1]
 800467a:	2b01      	cmp	r3, #1
 800467c:	d12c      	bne.n	80046d8 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	015a      	lsls	r2, r3, #5
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	4413      	add	r3, r2
 8004686:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	2b00      	cmp	r3, #0
 800468e:	db12      	blt.n	80046b6 <USB_EPSetStall+0x54>
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d00f      	beq.n	80046b6 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	015a      	lsls	r2, r3, #5
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	4413      	add	r3, r2
 800469e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	68ba      	ldr	r2, [r7, #8]
 80046a6:	0151      	lsls	r1, r2, #5
 80046a8:	68fa      	ldr	r2, [r7, #12]
 80046aa:	440a      	add	r2, r1
 80046ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046b0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80046b4:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	015a      	lsls	r2, r3, #5
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	4413      	add	r3, r2
 80046be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	68ba      	ldr	r2, [r7, #8]
 80046c6:	0151      	lsls	r1, r2, #5
 80046c8:	68fa      	ldr	r2, [r7, #12]
 80046ca:	440a      	add	r2, r1
 80046cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80046d4:	6013      	str	r3, [r2, #0]
 80046d6:	e02b      	b.n	8004730 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	015a      	lsls	r2, r3, #5
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	4413      	add	r3, r2
 80046e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	db12      	blt.n	8004710 <USB_EPSetStall+0xae>
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d00f      	beq.n	8004710 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	015a      	lsls	r2, r3, #5
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	4413      	add	r3, r2
 80046f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	68ba      	ldr	r2, [r7, #8]
 8004700:	0151      	lsls	r1, r2, #5
 8004702:	68fa      	ldr	r2, [r7, #12]
 8004704:	440a      	add	r2, r1
 8004706:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800470a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800470e:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	015a      	lsls	r2, r3, #5
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	4413      	add	r3, r2
 8004718:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	68ba      	ldr	r2, [r7, #8]
 8004720:	0151      	lsls	r1, r2, #5
 8004722:	68fa      	ldr	r2, [r7, #12]
 8004724:	440a      	add	r2, r1
 8004726:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800472a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800472e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004730:	2300      	movs	r3, #0
}
 8004732:	4618      	mov	r0, r3
 8004734:	3714      	adds	r7, #20
 8004736:	46bd      	mov	sp, r7
 8004738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473c:	4770      	bx	lr

0800473e <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800473e:	b480      	push	{r7}
 8004740:	b085      	sub	sp, #20
 8004742:	af00      	add	r7, sp, #0
 8004744:	6078      	str	r0, [r7, #4]
 8004746:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	781b      	ldrb	r3, [r3, #0]
 8004750:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	785b      	ldrb	r3, [r3, #1]
 8004756:	2b01      	cmp	r3, #1
 8004758:	d128      	bne.n	80047ac <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	015a      	lsls	r2, r3, #5
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	4413      	add	r3, r2
 8004762:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	68ba      	ldr	r2, [r7, #8]
 800476a:	0151      	lsls	r1, r2, #5
 800476c:	68fa      	ldr	r2, [r7, #12]
 800476e:	440a      	add	r2, r1
 8004770:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004774:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004778:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	78db      	ldrb	r3, [r3, #3]
 800477e:	2b03      	cmp	r3, #3
 8004780:	d003      	beq.n	800478a <USB_EPClearStall+0x4c>
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	78db      	ldrb	r3, [r3, #3]
 8004786:	2b02      	cmp	r3, #2
 8004788:	d138      	bne.n	80047fc <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	015a      	lsls	r2, r3, #5
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	4413      	add	r3, r2
 8004792:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	68ba      	ldr	r2, [r7, #8]
 800479a:	0151      	lsls	r1, r2, #5
 800479c:	68fa      	ldr	r2, [r7, #12]
 800479e:	440a      	add	r2, r1
 80047a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047a8:	6013      	str	r3, [r2, #0]
 80047aa:	e027      	b.n	80047fc <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	015a      	lsls	r2, r3, #5
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	4413      	add	r3, r2
 80047b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	68ba      	ldr	r2, [r7, #8]
 80047bc:	0151      	lsls	r1, r2, #5
 80047be:	68fa      	ldr	r2, [r7, #12]
 80047c0:	440a      	add	r2, r1
 80047c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047c6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80047ca:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	78db      	ldrb	r3, [r3, #3]
 80047d0:	2b03      	cmp	r3, #3
 80047d2:	d003      	beq.n	80047dc <USB_EPClearStall+0x9e>
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	78db      	ldrb	r3, [r3, #3]
 80047d8:	2b02      	cmp	r3, #2
 80047da:	d10f      	bne.n	80047fc <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	015a      	lsls	r2, r3, #5
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	4413      	add	r3, r2
 80047e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	68ba      	ldr	r2, [r7, #8]
 80047ec:	0151      	lsls	r1, r2, #5
 80047ee:	68fa      	ldr	r2, [r7, #12]
 80047f0:	440a      	add	r2, r1
 80047f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047fa:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80047fc:	2300      	movs	r3, #0
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3714      	adds	r7, #20
 8004802:	46bd      	mov	sp, r7
 8004804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004808:	4770      	bx	lr

0800480a <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800480a:	b480      	push	{r7}
 800480c:	b085      	sub	sp, #20
 800480e:	af00      	add	r7, sp, #0
 8004810:	6078      	str	r0, [r7, #4]
 8004812:	460b      	mov	r3, r1
 8004814:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	68fa      	ldr	r2, [r7, #12]
 8004824:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004828:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800482c:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	78fb      	ldrb	r3, [r7, #3]
 8004838:	011b      	lsls	r3, r3, #4
 800483a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800483e:	68f9      	ldr	r1, [r7, #12]
 8004840:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004844:	4313      	orrs	r3, r2
 8004846:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004848:	2300      	movs	r3, #0
}
 800484a:	4618      	mov	r0, r3
 800484c:	3714      	adds	r7, #20
 800484e:	46bd      	mov	sp, r7
 8004850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004854:	4770      	bx	lr

08004856 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004856:	b580      	push	{r7, lr}
 8004858:	b084      	sub	sp, #16
 800485a:	af00      	add	r7, sp, #0
 800485c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	68fa      	ldr	r2, [r7, #12]
 800486c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004870:	f023 0302 	bic.w	r3, r3, #2
 8004874:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8004876:	2003      	movs	r0, #3
 8004878:	f7fc fdfa 	bl	8001470 <HAL_Delay>

  return HAL_OK;
 800487c:	2300      	movs	r3, #0
}
 800487e:	4618      	mov	r0, r3
 8004880:	3710      	adds	r7, #16
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}

08004886 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004886:	b580      	push	{r7, lr}
 8004888:	b084      	sub	sp, #16
 800488a:	af00      	add	r7, sp, #0
 800488c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	68fa      	ldr	r2, [r7, #12]
 800489c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80048a0:	f043 0302 	orr.w	r3, r3, #2
 80048a4:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80048a6:	2003      	movs	r0, #3
 80048a8:	f7fc fde2 	bl	8001470 <HAL_Delay>

  return HAL_OK;
 80048ac:	2300      	movs	r3, #0
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	3710      	adds	r7, #16
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}

080048b6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80048b6:	b480      	push	{r7}
 80048b8:	b085      	sub	sp, #20
 80048ba:	af00      	add	r7, sp, #0
 80048bc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	695b      	ldr	r3, [r3, #20]
 80048c2:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	699b      	ldr	r3, [r3, #24]
 80048c8:	68fa      	ldr	r2, [r7, #12]
 80048ca:	4013      	ands	r3, r2
 80048cc:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80048ce:	68fb      	ldr	r3, [r7, #12]
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	3714      	adds	r7, #20
 80048d4:	46bd      	mov	sp, r7
 80048d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048da:	4770      	bx	lr

080048dc <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80048dc:	b480      	push	{r7}
 80048de:	b085      	sub	sp, #20
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048ee:	699b      	ldr	r3, [r3, #24]
 80048f0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048f8:	69db      	ldr	r3, [r3, #28]
 80048fa:	68ba      	ldr	r2, [r7, #8]
 80048fc:	4013      	ands	r3, r2
 80048fe:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	0c1b      	lsrs	r3, r3, #16
}
 8004904:	4618      	mov	r0, r3
 8004906:	3714      	adds	r7, #20
 8004908:	46bd      	mov	sp, r7
 800490a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490e:	4770      	bx	lr

08004910 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004910:	b480      	push	{r7}
 8004912:	b085      	sub	sp, #20
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004922:	699b      	ldr	r3, [r3, #24]
 8004924:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800492c:	69db      	ldr	r3, [r3, #28]
 800492e:	68ba      	ldr	r2, [r7, #8]
 8004930:	4013      	ands	r3, r2
 8004932:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	b29b      	uxth	r3, r3
}
 8004938:	4618      	mov	r0, r3
 800493a:	3714      	adds	r7, #20
 800493c:	46bd      	mov	sp, r7
 800493e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004942:	4770      	bx	lr

08004944 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004944:	b480      	push	{r7}
 8004946:	b085      	sub	sp, #20
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
 800494c:	460b      	mov	r3, r1
 800494e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004954:	78fb      	ldrb	r3, [r7, #3]
 8004956:	015a      	lsls	r2, r3, #5
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	4413      	add	r3, r2
 800495c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800496a:	695b      	ldr	r3, [r3, #20]
 800496c:	68ba      	ldr	r2, [r7, #8]
 800496e:	4013      	ands	r3, r2
 8004970:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004972:	68bb      	ldr	r3, [r7, #8]
}
 8004974:	4618      	mov	r0, r3
 8004976:	3714      	adds	r7, #20
 8004978:	46bd      	mov	sp, r7
 800497a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497e:	4770      	bx	lr

08004980 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004980:	b480      	push	{r7}
 8004982:	b087      	sub	sp, #28
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
 8004988:	460b      	mov	r3, r1
 800498a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004996:	691b      	ldr	r3, [r3, #16]
 8004998:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049a2:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80049a4:	78fb      	ldrb	r3, [r7, #3]
 80049a6:	f003 030f 	and.w	r3, r3, #15
 80049aa:	68fa      	ldr	r2, [r7, #12]
 80049ac:	fa22 f303 	lsr.w	r3, r2, r3
 80049b0:	01db      	lsls	r3, r3, #7
 80049b2:	b2db      	uxtb	r3, r3
 80049b4:	693a      	ldr	r2, [r7, #16]
 80049b6:	4313      	orrs	r3, r2
 80049b8:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80049ba:	78fb      	ldrb	r3, [r7, #3]
 80049bc:	015a      	lsls	r2, r3, #5
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	4413      	add	r3, r2
 80049c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	693a      	ldr	r2, [r7, #16]
 80049ca:	4013      	ands	r3, r2
 80049cc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80049ce:	68bb      	ldr	r3, [r7, #8]
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	371c      	adds	r7, #28
 80049d4:	46bd      	mov	sp, r7
 80049d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049da:	4770      	bx	lr

080049dc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80049dc:	b480      	push	{r7}
 80049de:	b083      	sub	sp, #12
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	695b      	ldr	r3, [r3, #20]
 80049e8:	f003 0301 	and.w	r3, r3, #1
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	370c      	adds	r7, #12
 80049f0:	46bd      	mov	sp, r7
 80049f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f6:	4770      	bx	lr

080049f8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b085      	sub	sp, #20
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	68fa      	ldr	r2, [r7, #12]
 8004a0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a12:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004a16:	f023 0307 	bic.w	r3, r3, #7
 8004a1a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	68fa      	ldr	r2, [r7, #12]
 8004a26:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a2e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004a30:	2300      	movs	r3, #0
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3714      	adds	r7, #20
 8004a36:	46bd      	mov	sp, r7
 8004a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3c:	4770      	bx	lr
	...

08004a40 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b087      	sub	sp, #28
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	60f8      	str	r0, [r7, #12]
 8004a48:	460b      	mov	r3, r1
 8004a4a:	607a      	str	r2, [r7, #4]
 8004a4c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	333c      	adds	r3, #60	; 0x3c
 8004a56:	3304      	adds	r3, #4
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	4a26      	ldr	r2, [pc, #152]	; (8004af8 <USB_EP0_OutStart+0xb8>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d90a      	bls.n	8004a7a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a70:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a74:	d101      	bne.n	8004a7a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004a76:	2300      	movs	r3, #0
 8004a78:	e037      	b.n	8004aea <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a80:	461a      	mov	r2, r3
 8004a82:	2300      	movs	r3, #0
 8004a84:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a8c:	691b      	ldr	r3, [r3, #16]
 8004a8e:	697a      	ldr	r2, [r7, #20]
 8004a90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a94:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004a98:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004aa0:	691b      	ldr	r3, [r3, #16]
 8004aa2:	697a      	ldr	r2, [r7, #20]
 8004aa4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004aa8:	f043 0318 	orr.w	r3, r3, #24
 8004aac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ab4:	691b      	ldr	r3, [r3, #16]
 8004ab6:	697a      	ldr	r2, [r7, #20]
 8004ab8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004abc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004ac0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004ac2:	7afb      	ldrb	r3, [r7, #11]
 8004ac4:	2b01      	cmp	r3, #1
 8004ac6:	d10f      	bne.n	8004ae8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ace:	461a      	mov	r2, r3
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	697a      	ldr	r2, [r7, #20]
 8004ade:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ae2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004ae6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004ae8:	2300      	movs	r3, #0
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	371c      	adds	r7, #28
 8004aee:	46bd      	mov	sp, r7
 8004af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af4:	4770      	bx	lr
 8004af6:	bf00      	nop
 8004af8:	4f54300a 	.word	0x4f54300a

08004afc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b085      	sub	sp, #20
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004b04:	2300      	movs	r3, #0
 8004b06:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	3301      	adds	r3, #1
 8004b0c:	60fb      	str	r3, [r7, #12]
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	4a13      	ldr	r2, [pc, #76]	; (8004b60 <USB_CoreReset+0x64>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d901      	bls.n	8004b1a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004b16:	2303      	movs	r3, #3
 8004b18:	e01b      	b.n	8004b52 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	691b      	ldr	r3, [r3, #16]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	daf2      	bge.n	8004b08 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004b22:	2300      	movs	r3, #0
 8004b24:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	691b      	ldr	r3, [r3, #16]
 8004b2a:	f043 0201 	orr.w	r2, r3, #1
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	3301      	adds	r3, #1
 8004b36:	60fb      	str	r3, [r7, #12]
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	4a09      	ldr	r2, [pc, #36]	; (8004b60 <USB_CoreReset+0x64>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d901      	bls.n	8004b44 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004b40:	2303      	movs	r3, #3
 8004b42:	e006      	b.n	8004b52 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	691b      	ldr	r3, [r3, #16]
 8004b48:	f003 0301 	and.w	r3, r3, #1
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d0f0      	beq.n	8004b32 <USB_CoreReset+0x36>

  return HAL_OK;
 8004b50:	2300      	movs	r3, #0
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3714      	adds	r7, #20
 8004b56:	46bd      	mov	sp, r7
 8004b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5c:	4770      	bx	lr
 8004b5e:	bf00      	nop
 8004b60:	00030d40 	.word	0x00030d40

08004b64 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b084      	sub	sp, #16
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
 8004b6c:	460b      	mov	r3, r1
 8004b6e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8004b70:	2010      	movs	r0, #16
 8004b72:	f001 fef3 	bl	800695c <malloc>
 8004b76:	4603      	mov	r3, r0
 8004b78:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d105      	bne.n	8004b8c <USBD_HID_Init+0x28>
  {
    pdev->pClassData = NULL;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2200      	movs	r2, #0
 8004b84:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8004b88:	2302      	movs	r3, #2
 8004b8a:	e01b      	b.n	8004bc4 <USBD_HID_Init+0x60>
  }

  pdev->pClassData = (void *)hhid;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	68fa      	ldr	r2, [r7, #12]
 8004b90:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	7c1b      	ldrb	r3, [r3, #16]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d103      	bne.n	8004ba4 <USBD_HID_Init+0x40>
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2207      	movs	r2, #7
 8004ba0:	875a      	strh	r2, [r3, #58]	; 0x3a
 8004ba2:	e002      	b.n	8004baa <USBD_HID_Init+0x46>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	220a      	movs	r2, #10
 8004ba8:	875a      	strh	r2, [r3, #58]	; 0x3a
  }

    /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8004baa:	2304      	movs	r3, #4
 8004bac:	2203      	movs	r2, #3
 8004bae:	2181      	movs	r1, #129	; 0x81
 8004bb0:	6878      	ldr	r0, [r7, #4]
 8004bb2:	f001 fd6c 	bl	800668e <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2201      	movs	r2, #1
 8004bba:	871a      	strh	r2, [r3, #56]	; 0x38

  hhid->state = HID_IDLE;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8004bc2:	2300      	movs	r3, #0
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	3710      	adds	r7, #16
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}

08004bcc <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b082      	sub	sp, #8
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
 8004bd4:	460b      	mov	r3, r1
 8004bd6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8004bd8:	2181      	movs	r1, #129	; 0x81
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	f001 fd7d 	bl	80066da <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2200      	movs	r2, #0
 8004be4:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2200      	movs	r2, #0
 8004bea:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d009      	beq.n	8004c0a <USBD_HID_DeInit+0x3e>
  {
    (void)USBD_free(pdev->pClassData);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	f001 feb5 	bl	800696c <free>
    pdev->pClassData = NULL;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2200      	movs	r2, #0
 8004c06:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004c0a:	2300      	movs	r3, #0
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	3708      	adds	r7, #8
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bd80      	pop	{r7, pc}

08004c14 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b086      	sub	sp, #24
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
 8004c1c:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004c24:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8004c26:	2300      	movs	r3, #0
 8004c28:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	817b      	strh	r3, [r7, #10]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	781b      	ldrb	r3, [r3, #0]
 8004c32:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d045      	beq.n	8004cc6 <USBD_HID_Setup+0xb2>
 8004c3a:	2b20      	cmp	r3, #32
 8004c3c:	f040 80d4 	bne.w	8004de8 <USBD_HID_Setup+0x1d4>
  {
  case USB_REQ_TYPE_CLASS :
    switch (req->bRequest)
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	785b      	ldrb	r3, [r3, #1]
 8004c44:	3b02      	subs	r3, #2
 8004c46:	2b09      	cmp	r3, #9
 8004c48:	d835      	bhi.n	8004cb6 <USBD_HID_Setup+0xa2>
 8004c4a:	a201      	add	r2, pc, #4	; (adr r2, 8004c50 <USBD_HID_Setup+0x3c>)
 8004c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c50:	08004ca7 	.word	0x08004ca7
 8004c54:	08004c87 	.word	0x08004c87
 8004c58:	08004cb7 	.word	0x08004cb7
 8004c5c:	08004cb7 	.word	0x08004cb7
 8004c60:	08004cb7 	.word	0x08004cb7
 8004c64:	08004cb7 	.word	0x08004cb7
 8004c68:	08004cb7 	.word	0x08004cb7
 8004c6c:	08004cb7 	.word	0x08004cb7
 8004c70:	08004c95 	.word	0x08004c95
 8004c74:	08004c79 	.word	0x08004c79
    {
    case HID_REQ_SET_PROTOCOL:
      hhid->Protocol = (uint8_t)(req->wValue);
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	885b      	ldrh	r3, [r3, #2]
 8004c7c:	b2db      	uxtb	r3, r3
 8004c7e:	461a      	mov	r2, r3
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	601a      	str	r2, [r3, #0]
      break;
 8004c84:	e01e      	b.n	8004cc4 <USBD_HID_Setup+0xb0>

    case HID_REQ_GET_PROTOCOL:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2201      	movs	r2, #1
 8004c8a:	4619      	mov	r1, r3
 8004c8c:	6878      	ldr	r0, [r7, #4]
 8004c8e:	f001 f9b4 	bl	8005ffa <USBD_CtlSendData>
      break;
 8004c92:	e017      	b.n	8004cc4 <USBD_HID_Setup+0xb0>

    case HID_REQ_SET_IDLE:
      hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	885b      	ldrh	r3, [r3, #2]
 8004c98:	0a1b      	lsrs	r3, r3, #8
 8004c9a:	b29b      	uxth	r3, r3
 8004c9c:	b2db      	uxtb	r3, r3
 8004c9e:	461a      	mov	r2, r3
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	605a      	str	r2, [r3, #4]
      break;
 8004ca4:	e00e      	b.n	8004cc4 <USBD_HID_Setup+0xb0>

    case HID_REQ_GET_IDLE:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	3304      	adds	r3, #4
 8004caa:	2201      	movs	r2, #1
 8004cac:	4619      	mov	r1, r3
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f001 f9a3 	bl	8005ffa <USBD_CtlSendData>
      break;
 8004cb4:	e006      	b.n	8004cc4 <USBD_HID_Setup+0xb0>

    default:
      USBD_CtlError(pdev, req);
 8004cb6:	6839      	ldr	r1, [r7, #0]
 8004cb8:	6878      	ldr	r0, [r7, #4]
 8004cba:	f001 f92d 	bl	8005f18 <USBD_CtlError>
      ret = USBD_FAIL;
 8004cbe:	2303      	movs	r3, #3
 8004cc0:	75fb      	strb	r3, [r7, #23]
      break;
 8004cc2:	bf00      	nop
    }
    break;
 8004cc4:	e097      	b.n	8004df6 <USBD_HID_Setup+0x1e2>
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	785b      	ldrb	r3, [r3, #1]
 8004cca:	2b0b      	cmp	r3, #11
 8004ccc:	f200 8083 	bhi.w	8004dd6 <USBD_HID_Setup+0x1c2>
 8004cd0:	a201      	add	r2, pc, #4	; (adr r2, 8004cd8 <USBD_HID_Setup+0xc4>)
 8004cd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cd6:	bf00      	nop
 8004cd8:	08004d09 	.word	0x08004d09
 8004cdc:	08004de5 	.word	0x08004de5
 8004ce0:	08004dd7 	.word	0x08004dd7
 8004ce4:	08004dd7 	.word	0x08004dd7
 8004ce8:	08004dd7 	.word	0x08004dd7
 8004cec:	08004dd7 	.word	0x08004dd7
 8004cf0:	08004d31 	.word	0x08004d31
 8004cf4:	08004dd7 	.word	0x08004dd7
 8004cf8:	08004dd7 	.word	0x08004dd7
 8004cfc:	08004dd7 	.word	0x08004dd7
 8004d00:	08004d89 	.word	0x08004d89
 8004d04:	08004db1 	.word	0x08004db1
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004d0e:	2b03      	cmp	r3, #3
 8004d10:	d107      	bne.n	8004d22 <USBD_HID_Setup+0x10e>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004d12:	f107 030a 	add.w	r3, r7, #10
 8004d16:	2202      	movs	r2, #2
 8004d18:	4619      	mov	r1, r3
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f001 f96d 	bl	8005ffa <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8004d20:	e061      	b.n	8004de6 <USBD_HID_Setup+0x1d2>
        USBD_CtlError(pdev, req);
 8004d22:	6839      	ldr	r1, [r7, #0]
 8004d24:	6878      	ldr	r0, [r7, #4]
 8004d26:	f001 f8f7 	bl	8005f18 <USBD_CtlError>
        ret = USBD_FAIL;
 8004d2a:	2303      	movs	r3, #3
 8004d2c:	75fb      	strb	r3, [r7, #23]
      break;
 8004d2e:	e05a      	b.n	8004de6 <USBD_HID_Setup+0x1d2>

    case USB_REQ_GET_DESCRIPTOR:
      if ((req->wValue >> 8) == HID_REPORT_DESC)
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	885b      	ldrh	r3, [r3, #2]
 8004d34:	0a1b      	lsrs	r3, r3, #8
 8004d36:	b29b      	uxth	r3, r3
 8004d38:	2b22      	cmp	r3, #34	; 0x22
 8004d3a:	d108      	bne.n	8004d4e <USBD_HID_Setup+0x13a>
      {
        len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	88db      	ldrh	r3, [r3, #6]
 8004d40:	2b43      	cmp	r3, #67	; 0x43
 8004d42:	bf28      	it	cs
 8004d44:	2343      	movcs	r3, #67	; 0x43
 8004d46:	82bb      	strh	r3, [r7, #20]
        pbuf = HID_MOUSE_ReportDesc;
 8004d48:	4b2d      	ldr	r3, [pc, #180]	; (8004e00 <USBD_HID_Setup+0x1ec>)
 8004d4a:	613b      	str	r3, [r7, #16]
 8004d4c:	e015      	b.n	8004d7a <USBD_HID_Setup+0x166>
      }
      else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	885b      	ldrh	r3, [r3, #2]
 8004d52:	0a1b      	lsrs	r3, r3, #8
 8004d54:	b29b      	uxth	r3, r3
 8004d56:	2b21      	cmp	r3, #33	; 0x21
 8004d58:	d108      	bne.n	8004d6c <USBD_HID_Setup+0x158>
      {
        pbuf = USBD_HID_Desc;
 8004d5a:	4b2a      	ldr	r3, [pc, #168]	; (8004e04 <USBD_HID_Setup+0x1f0>)
 8004d5c:	613b      	str	r3, [r7, #16]
        len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	88db      	ldrh	r3, [r3, #6]
 8004d62:	2b09      	cmp	r3, #9
 8004d64:	bf28      	it	cs
 8004d66:	2309      	movcs	r3, #9
 8004d68:	82bb      	strh	r3, [r7, #20]
 8004d6a:	e006      	b.n	8004d7a <USBD_HID_Setup+0x166>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8004d6c:	6839      	ldr	r1, [r7, #0]
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f001 f8d2 	bl	8005f18 <USBD_CtlError>
        ret = USBD_FAIL;
 8004d74:	2303      	movs	r3, #3
 8004d76:	75fb      	strb	r3, [r7, #23]
        break;
 8004d78:	e035      	b.n	8004de6 <USBD_HID_Setup+0x1d2>
      }
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8004d7a:	8abb      	ldrh	r3, [r7, #20]
 8004d7c:	461a      	mov	r2, r3
 8004d7e:	6939      	ldr	r1, [r7, #16]
 8004d80:	6878      	ldr	r0, [r7, #4]
 8004d82:	f001 f93a 	bl	8005ffa <USBD_CtlSendData>
      break;
 8004d86:	e02e      	b.n	8004de6 <USBD_HID_Setup+0x1d2>

    case USB_REQ_GET_INTERFACE :
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004d8e:	2b03      	cmp	r3, #3
 8004d90:	d107      	bne.n	8004da2 <USBD_HID_Setup+0x18e>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	3308      	adds	r3, #8
 8004d96:	2201      	movs	r2, #1
 8004d98:	4619      	mov	r1, r3
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f001 f92d 	bl	8005ffa <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8004da0:	e021      	b.n	8004de6 <USBD_HID_Setup+0x1d2>
        USBD_CtlError(pdev, req);
 8004da2:	6839      	ldr	r1, [r7, #0]
 8004da4:	6878      	ldr	r0, [r7, #4]
 8004da6:	f001 f8b7 	bl	8005f18 <USBD_CtlError>
        ret = USBD_FAIL;
 8004daa:	2303      	movs	r3, #3
 8004dac:	75fb      	strb	r3, [r7, #23]
      break;
 8004dae:	e01a      	b.n	8004de6 <USBD_HID_Setup+0x1d2>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004db6:	2b03      	cmp	r3, #3
 8004db8:	d106      	bne.n	8004dc8 <USBD_HID_Setup+0x1b4>
      {
        hhid->AltSetting = (uint8_t)(req->wValue);
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	885b      	ldrh	r3, [r3, #2]
 8004dbe:	b2db      	uxtb	r3, r3
 8004dc0:	461a      	mov	r2, r3
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	609a      	str	r2, [r3, #8]
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8004dc6:	e00e      	b.n	8004de6 <USBD_HID_Setup+0x1d2>
        USBD_CtlError(pdev, req);
 8004dc8:	6839      	ldr	r1, [r7, #0]
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f001 f8a4 	bl	8005f18 <USBD_CtlError>
        ret = USBD_FAIL;
 8004dd0:	2303      	movs	r3, #3
 8004dd2:	75fb      	strb	r3, [r7, #23]
      break;
 8004dd4:	e007      	b.n	8004de6 <USBD_HID_Setup+0x1d2>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8004dd6:	6839      	ldr	r1, [r7, #0]
 8004dd8:	6878      	ldr	r0, [r7, #4]
 8004dda:	f001 f89d 	bl	8005f18 <USBD_CtlError>
      ret = USBD_FAIL;
 8004dde:	2303      	movs	r3, #3
 8004de0:	75fb      	strb	r3, [r7, #23]
      break;
 8004de2:	e000      	b.n	8004de6 <USBD_HID_Setup+0x1d2>
      break;
 8004de4:	bf00      	nop
    }
    break;
 8004de6:	e006      	b.n	8004df6 <USBD_HID_Setup+0x1e2>

  default:
    USBD_CtlError(pdev, req);
 8004de8:	6839      	ldr	r1, [r7, #0]
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	f001 f894 	bl	8005f18 <USBD_CtlError>
    ret = USBD_FAIL;
 8004df0:	2303      	movs	r3, #3
 8004df2:	75fb      	strb	r3, [r7, #23]
    break;
 8004df4:	bf00      	nop
  }

  return (uint8_t)ret;
 8004df6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	3718      	adds	r7, #24
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}
 8004e00:	200000d0 	.word	0x200000d0
 8004e04:	200000b8 	.word	0x200000b8

08004e08 <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b086      	sub	sp, #24
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	60f8      	str	r0, [r7, #12]
 8004e10:	60b9      	str	r1, [r7, #8]
 8004e12:	4613      	mov	r3, r2
 8004e14:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004e1c:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004e24:	2b03      	cmp	r3, #3
 8004e26:	d10c      	bne.n	8004e42 <USBD_HID_SendReport+0x3a>
  {
    if (hhid->state == HID_IDLE)
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	7b1b      	ldrb	r3, [r3, #12]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d108      	bne.n	8004e42 <USBD_HID_SendReport+0x3a>
    {
      hhid->state = HID_BUSY;
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	2201      	movs	r2, #1
 8004e34:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HID_EPIN_ADDR, report, len);
 8004e36:	88fb      	ldrh	r3, [r7, #6]
 8004e38:	68ba      	ldr	r2, [r7, #8]
 8004e3a:	2181      	movs	r1, #129	; 0x81
 8004e3c:	68f8      	ldr	r0, [r7, #12]
 8004e3e:	f001 fcf4 	bl	800682a <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 8004e42:	2300      	movs	r3, #0
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	3718      	adds	r7, #24
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}

08004e4c <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b083      	sub	sp, #12
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgFSDesc);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2222      	movs	r2, #34	; 0x22
 8004e58:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgFSDesc;
 8004e5a:	4b03      	ldr	r3, [pc, #12]	; (8004e68 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	370c      	adds	r7, #12
 8004e60:	46bd      	mov	sp, r7
 8004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e66:	4770      	bx	lr
 8004e68:	2000004c 	.word	0x2000004c

08004e6c <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b083      	sub	sp, #12
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgHSDesc);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2222      	movs	r2, #34	; 0x22
 8004e78:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgHSDesc;
 8004e7a:	4b03      	ldr	r3, [pc, #12]	; (8004e88 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	370c      	adds	r7, #12
 8004e80:	46bd      	mov	sp, r7
 8004e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e86:	4770      	bx	lr
 8004e88:	20000070 	.word	0x20000070

08004e8c <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b083      	sub	sp, #12
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_OtherSpeedCfgDesc);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2222      	movs	r2, #34	; 0x22
 8004e98:	801a      	strh	r2, [r3, #0]

  return USBD_HID_OtherSpeedCfgDesc;
 8004e9a:	4b03      	ldr	r3, [pc, #12]	; (8004ea8 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	370c      	adds	r7, #12
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea6:	4770      	bx	lr
 8004ea8:	20000094 	.word	0x20000094

08004eac <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b083      	sub	sp, #12
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
 8004eb4:	460b      	mov	r3, r1
 8004eb6:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8004ec2:	2300      	movs	r3, #0
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	370c      	adds	r7, #12
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ece:	4770      	bx	lr

08004ed0 <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b083      	sub	sp, #12
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	220a      	movs	r2, #10
 8004edc:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 8004ede:	4b03      	ldr	r3, [pc, #12]	; (8004eec <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	370c      	adds	r7, #12
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eea:	4770      	bx	lr
 8004eec:	200000c4 	.word	0x200000c4

08004ef0 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b086      	sub	sp, #24
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	60f8      	str	r0, [r7, #12]
 8004ef8:	60b9      	str	r1, [r7, #8]
 8004efa:	4613      	mov	r3, r2
 8004efc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d101      	bne.n	8004f08 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8004f04:	2303      	movs	r3, #3
 8004f06:	e025      	b.n	8004f54 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d003      	beq.n	8004f1a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2200      	movs	r2, #0
 8004f16:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d003      	beq.n	8004f2c <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	2200      	movs	r2, #0
 8004f28:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d003      	beq.n	8004f3a <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	68ba      	ldr	r2, [r7, #8]
 8004f36:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2201      	movs	r2, #1
 8004f3e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	79fa      	ldrb	r2, [r7, #7]
 8004f46:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8004f48:	68f8      	ldr	r0, [r7, #12]
 8004f4a:	f001 fb39 	bl	80065c0 <USBD_LL_Init>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	75fb      	strb	r3, [r7, #23]

  return ret;
 8004f52:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	3718      	adds	r7, #24
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bd80      	pop	{r7, pc}

08004f5c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b084      	sub	sp, #16
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
 8004f64:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8004f66:	2300      	movs	r3, #0
 8004f68:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d101      	bne.n	8004f74 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8004f70:	2303      	movs	r3, #3
 8004f72:	e010      	b.n	8004f96 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	683a      	ldr	r2, [r7, #0]
 8004f78:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f84:	f107 020e 	add.w	r2, r7, #14
 8004f88:	4610      	mov	r0, r2
 8004f8a:	4798      	blx	r3
 8004f8c:	4602      	mov	r2, r0
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8004f94:	2300      	movs	r3, #0
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	3710      	adds	r7, #16
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}

08004f9e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004f9e:	b580      	push	{r7, lr}
 8004fa0:	b082      	sub	sp, #8
 8004fa2:	af00      	add	r7, sp, #0
 8004fa4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	f001 fb56 	bl	8006658 <USBD_LL_Start>
 8004fac:	4603      	mov	r3, r0
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3708      	adds	r7, #8
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}

08004fb6 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8004fb6:	b480      	push	{r7}
 8004fb8:	b083      	sub	sp, #12
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004fbe:	2300      	movs	r3, #0
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	370c      	adds	r7, #12
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fca:	4770      	bx	lr

08004fcc <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b084      	sub	sp, #16
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
 8004fd4:	460b      	mov	r3, r1
 8004fd6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8004fd8:	2303      	movs	r3, #3
 8004fda:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d009      	beq.n	8004ffa <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	78fa      	ldrb	r2, [r7, #3]
 8004ff0:	4611      	mov	r1, r2
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	4798      	blx	r3
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8004ffa:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3710      	adds	r7, #16
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}

08005004 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b082      	sub	sp, #8
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
 800500c:	460b      	mov	r3, r1
 800500e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005016:	2b00      	cmp	r3, #0
 8005018:	d007      	beq.n	800502a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	78fa      	ldrb	r2, [r7, #3]
 8005024:	4611      	mov	r1, r2
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	4798      	blx	r3
  }

  return USBD_OK;
 800502a:	2300      	movs	r3, #0
}
 800502c:	4618      	mov	r0, r3
 800502e:	3708      	adds	r7, #8
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}

08005034 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b084      	sub	sp, #16
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
 800503c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005044:	6839      	ldr	r1, [r7, #0]
 8005046:	4618      	mov	r0, r3
 8005048:	f000 ff2c 	bl	8005ea4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2201      	movs	r2, #1
 8005050:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800505a:	461a      	mov	r2, r3
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005068:	f003 031f 	and.w	r3, r3, #31
 800506c:	2b01      	cmp	r3, #1
 800506e:	d00e      	beq.n	800508e <USBD_LL_SetupStage+0x5a>
 8005070:	2b01      	cmp	r3, #1
 8005072:	d302      	bcc.n	800507a <USBD_LL_SetupStage+0x46>
 8005074:	2b02      	cmp	r3, #2
 8005076:	d014      	beq.n	80050a2 <USBD_LL_SetupStage+0x6e>
 8005078:	e01d      	b.n	80050b6 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005080:	4619      	mov	r1, r3
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f000 fa18 	bl	80054b8 <USBD_StdDevReq>
 8005088:	4603      	mov	r3, r0
 800508a:	73fb      	strb	r3, [r7, #15]
      break;
 800508c:	e020      	b.n	80050d0 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005094:	4619      	mov	r1, r3
 8005096:	6878      	ldr	r0, [r7, #4]
 8005098:	f000 fa7c 	bl	8005594 <USBD_StdItfReq>
 800509c:	4603      	mov	r3, r0
 800509e:	73fb      	strb	r3, [r7, #15]
      break;
 80050a0:	e016      	b.n	80050d0 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80050a8:	4619      	mov	r1, r3
 80050aa:	6878      	ldr	r0, [r7, #4]
 80050ac:	f000 fab8 	bl	8005620 <USBD_StdEPReq>
 80050b0:	4603      	mov	r3, r0
 80050b2:	73fb      	strb	r3, [r7, #15]
      break;
 80050b4:	e00c      	b.n	80050d0 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80050bc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80050c0:	b2db      	uxtb	r3, r3
 80050c2:	4619      	mov	r1, r3
 80050c4:	6878      	ldr	r0, [r7, #4]
 80050c6:	f001 fb27 	bl	8006718 <USBD_LL_StallEP>
 80050ca:	4603      	mov	r3, r0
 80050cc:	73fb      	strb	r3, [r7, #15]
      break;
 80050ce:	bf00      	nop
  }

  return ret;
 80050d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3710      	adds	r7, #16
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}

080050da <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80050da:	b580      	push	{r7, lr}
 80050dc:	b086      	sub	sp, #24
 80050de:	af00      	add	r7, sp, #0
 80050e0:	60f8      	str	r0, [r7, #12]
 80050e2:	460b      	mov	r3, r1
 80050e4:	607a      	str	r2, [r7, #4]
 80050e6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80050e8:	7afb      	ldrb	r3, [r7, #11]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d137      	bne.n	800515e <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80050f4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80050fc:	2b03      	cmp	r3, #3
 80050fe:	d14a      	bne.n	8005196 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	689a      	ldr	r2, [r3, #8]
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	68db      	ldr	r3, [r3, #12]
 8005108:	429a      	cmp	r2, r3
 800510a:	d913      	bls.n	8005134 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	689a      	ldr	r2, [r3, #8]
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	68db      	ldr	r3, [r3, #12]
 8005114:	1ad2      	subs	r2, r2, r3
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	68da      	ldr	r2, [r3, #12]
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	4293      	cmp	r3, r2
 8005124:	bf28      	it	cs
 8005126:	4613      	movcs	r3, r2
 8005128:	461a      	mov	r2, r3
 800512a:	6879      	ldr	r1, [r7, #4]
 800512c:	68f8      	ldr	r0, [r7, #12]
 800512e:	f000 ff90 	bl	8006052 <USBD_CtlContinueRx>
 8005132:	e030      	b.n	8005196 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800513a:	691b      	ldr	r3, [r3, #16]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d00a      	beq.n	8005156 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005146:	2b03      	cmp	r3, #3
 8005148:	d105      	bne.n	8005156 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005150:	691b      	ldr	r3, [r3, #16]
 8005152:	68f8      	ldr	r0, [r7, #12]
 8005154:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8005156:	68f8      	ldr	r0, [r7, #12]
 8005158:	f000 ff8c 	bl	8006074 <USBD_CtlSendStatus>
 800515c:	e01b      	b.n	8005196 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005164:	699b      	ldr	r3, [r3, #24]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d013      	beq.n	8005192 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8005170:	2b03      	cmp	r3, #3
 8005172:	d10e      	bne.n	8005192 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800517a:	699b      	ldr	r3, [r3, #24]
 800517c:	7afa      	ldrb	r2, [r7, #11]
 800517e:	4611      	mov	r1, r2
 8005180:	68f8      	ldr	r0, [r7, #12]
 8005182:	4798      	blx	r3
 8005184:	4603      	mov	r3, r0
 8005186:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8005188:	7dfb      	ldrb	r3, [r7, #23]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d003      	beq.n	8005196 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800518e:	7dfb      	ldrb	r3, [r7, #23]
 8005190:	e002      	b.n	8005198 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005192:	2303      	movs	r3, #3
 8005194:	e000      	b.n	8005198 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8005196:	2300      	movs	r3, #0
}
 8005198:	4618      	mov	r0, r3
 800519a:	3718      	adds	r7, #24
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}

080051a0 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b086      	sub	sp, #24
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	60f8      	str	r0, [r7, #12]
 80051a8:	460b      	mov	r3, r1
 80051aa:	607a      	str	r2, [r7, #4]
 80051ac:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80051ae:	7afb      	ldrb	r3, [r7, #11]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d16a      	bne.n	800528a <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	3314      	adds	r3, #20
 80051b8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80051c0:	2b02      	cmp	r3, #2
 80051c2:	d155      	bne.n	8005270 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	689a      	ldr	r2, [r3, #8]
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	68db      	ldr	r3, [r3, #12]
 80051cc:	429a      	cmp	r2, r3
 80051ce:	d914      	bls.n	80051fa <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	689a      	ldr	r2, [r3, #8]
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	68db      	ldr	r3, [r3, #12]
 80051d8:	1ad2      	subs	r2, r2, r3
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	689b      	ldr	r3, [r3, #8]
 80051e2:	461a      	mov	r2, r3
 80051e4:	6879      	ldr	r1, [r7, #4]
 80051e6:	68f8      	ldr	r0, [r7, #12]
 80051e8:	f000 ff22 	bl	8006030 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80051ec:	2300      	movs	r3, #0
 80051ee:	2200      	movs	r2, #0
 80051f0:	2100      	movs	r1, #0
 80051f2:	68f8      	ldr	r0, [r7, #12]
 80051f4:	f001 fb3a 	bl	800686c <USBD_LL_PrepareReceive>
 80051f8:	e03a      	b.n	8005270 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	68da      	ldr	r2, [r3, #12]
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	689b      	ldr	r3, [r3, #8]
 8005202:	429a      	cmp	r2, r3
 8005204:	d11c      	bne.n	8005240 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	685a      	ldr	r2, [r3, #4]
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800520e:	429a      	cmp	r2, r3
 8005210:	d316      	bcc.n	8005240 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	685a      	ldr	r2, [r3, #4]
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800521c:	429a      	cmp	r2, r3
 800521e:	d20f      	bcs.n	8005240 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005220:	2200      	movs	r2, #0
 8005222:	2100      	movs	r1, #0
 8005224:	68f8      	ldr	r0, [r7, #12]
 8005226:	f000 ff03 	bl	8006030 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	2200      	movs	r2, #0
 800522e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005232:	2300      	movs	r3, #0
 8005234:	2200      	movs	r2, #0
 8005236:	2100      	movs	r1, #0
 8005238:	68f8      	ldr	r0, [r7, #12]
 800523a:	f001 fb17 	bl	800686c <USBD_LL_PrepareReceive>
 800523e:	e017      	b.n	8005270 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005246:	68db      	ldr	r3, [r3, #12]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d00a      	beq.n	8005262 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005252:	2b03      	cmp	r3, #3
 8005254:	d105      	bne.n	8005262 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800525c:	68db      	ldr	r3, [r3, #12]
 800525e:	68f8      	ldr	r0, [r7, #12]
 8005260:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005262:	2180      	movs	r1, #128	; 0x80
 8005264:	68f8      	ldr	r0, [r7, #12]
 8005266:	f001 fa57 	bl	8006718 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800526a:	68f8      	ldr	r0, [r7, #12]
 800526c:	f000 ff15 	bl	800609a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005276:	2b01      	cmp	r3, #1
 8005278:	d123      	bne.n	80052c2 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800527a:	68f8      	ldr	r0, [r7, #12]
 800527c:	f7ff fe9b 	bl	8004fb6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	2200      	movs	r2, #0
 8005284:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005288:	e01b      	b.n	80052c2 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005290:	695b      	ldr	r3, [r3, #20]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d013      	beq.n	80052be <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800529c:	2b03      	cmp	r3, #3
 800529e:	d10e      	bne.n	80052be <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052a6:	695b      	ldr	r3, [r3, #20]
 80052a8:	7afa      	ldrb	r2, [r7, #11]
 80052aa:	4611      	mov	r1, r2
 80052ac:	68f8      	ldr	r0, [r7, #12]
 80052ae:	4798      	blx	r3
 80052b0:	4603      	mov	r3, r0
 80052b2:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80052b4:	7dfb      	ldrb	r3, [r7, #23]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d003      	beq.n	80052c2 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 80052ba:	7dfb      	ldrb	r3, [r7, #23]
 80052bc:	e002      	b.n	80052c4 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80052be:	2303      	movs	r3, #3
 80052c0:	e000      	b.n	80052c4 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 80052c2:	2300      	movs	r3, #0
}
 80052c4:	4618      	mov	r0, r3
 80052c6:	3718      	adds	r7, #24
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd80      	pop	{r7, pc}

080052cc <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b082      	sub	sp, #8
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2201      	movs	r2, #1
 80052d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2200      	movs	r2, #0
 80052e0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2200      	movs	r2, #0
 80052e8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2200      	movs	r2, #0
 80052ee:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d009      	beq.n	8005310 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	687a      	ldr	r2, [r7, #4]
 8005306:	6852      	ldr	r2, [r2, #4]
 8005308:	b2d2      	uxtb	r2, r2
 800530a:	4611      	mov	r1, r2
 800530c:	6878      	ldr	r0, [r7, #4]
 800530e:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005310:	2340      	movs	r3, #64	; 0x40
 8005312:	2200      	movs	r2, #0
 8005314:	2100      	movs	r1, #0
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	f001 f9b9 	bl	800668e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2201      	movs	r2, #1
 8005320:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2240      	movs	r2, #64	; 0x40
 8005328:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800532c:	2340      	movs	r3, #64	; 0x40
 800532e:	2200      	movs	r2, #0
 8005330:	2180      	movs	r1, #128	; 0x80
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f001 f9ab 	bl	800668e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2201      	movs	r2, #1
 800533c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2240      	movs	r2, #64	; 0x40
 8005342:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8005344:	2300      	movs	r3, #0
}
 8005346:	4618      	mov	r0, r3
 8005348:	3708      	adds	r7, #8
 800534a:	46bd      	mov	sp, r7
 800534c:	bd80      	pop	{r7, pc}

0800534e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800534e:	b480      	push	{r7}
 8005350:	b083      	sub	sp, #12
 8005352:	af00      	add	r7, sp, #0
 8005354:	6078      	str	r0, [r7, #4]
 8005356:	460b      	mov	r3, r1
 8005358:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	78fa      	ldrb	r2, [r7, #3]
 800535e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005360:	2300      	movs	r3, #0
}
 8005362:	4618      	mov	r0, r3
 8005364:	370c      	adds	r7, #12
 8005366:	46bd      	mov	sp, r7
 8005368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536c:	4770      	bx	lr

0800536e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800536e:	b480      	push	{r7}
 8005370:	b083      	sub	sp, #12
 8005372:	af00      	add	r7, sp, #0
 8005374:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2204      	movs	r2, #4
 8005386:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800538a:	2300      	movs	r3, #0
}
 800538c:	4618      	mov	r0, r3
 800538e:	370c      	adds	r7, #12
 8005390:	46bd      	mov	sp, r7
 8005392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005396:	4770      	bx	lr

08005398 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005398:	b480      	push	{r7}
 800539a:	b083      	sub	sp, #12
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80053a6:	2b04      	cmp	r3, #4
 80053a8:	d105      	bne.n	80053b6 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80053b6:	2300      	movs	r3, #0
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	370c      	adds	r7, #12
 80053bc:	46bd      	mov	sp, r7
 80053be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c2:	4770      	bx	lr

080053c4 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b082      	sub	sp, #8
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80053d2:	2b03      	cmp	r3, #3
 80053d4:	d10b      	bne.n	80053ee <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053dc:	69db      	ldr	r3, [r3, #28]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d005      	beq.n	80053ee <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053e8:	69db      	ldr	r3, [r3, #28]
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80053ee:	2300      	movs	r3, #0
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	3708      	adds	r7, #8
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bd80      	pop	{r7, pc}

080053f8 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b083      	sub	sp, #12
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
 8005400:	460b      	mov	r3, r1
 8005402:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8005404:	2300      	movs	r3, #0
}
 8005406:	4618      	mov	r0, r3
 8005408:	370c      	adds	r7, #12
 800540a:	46bd      	mov	sp, r7
 800540c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005410:	4770      	bx	lr

08005412 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005412:	b480      	push	{r7}
 8005414:	b083      	sub	sp, #12
 8005416:	af00      	add	r7, sp, #0
 8005418:	6078      	str	r0, [r7, #4]
 800541a:	460b      	mov	r3, r1
 800541c:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800541e:	2300      	movs	r3, #0
}
 8005420:	4618      	mov	r0, r3
 8005422:	370c      	adds	r7, #12
 8005424:	46bd      	mov	sp, r7
 8005426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542a:	4770      	bx	lr

0800542c <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800542c:	b480      	push	{r7}
 800542e:	b083      	sub	sp, #12
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005434:	2300      	movs	r3, #0
}
 8005436:	4618      	mov	r0, r3
 8005438:	370c      	adds	r7, #12
 800543a:	46bd      	mov	sp, r7
 800543c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005440:	4770      	bx	lr

08005442 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005442:	b580      	push	{r7, lr}
 8005444:	b082      	sub	sp, #8
 8005446:	af00      	add	r7, sp, #0
 8005448:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2201      	movs	r2, #1
 800544e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005458:	2b00      	cmp	r3, #0
 800545a:	d009      	beq.n	8005470 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	687a      	ldr	r2, [r7, #4]
 8005466:	6852      	ldr	r2, [r2, #4]
 8005468:	b2d2      	uxtb	r2, r2
 800546a:	4611      	mov	r1, r2
 800546c:	6878      	ldr	r0, [r7, #4]
 800546e:	4798      	blx	r3
  }

  return USBD_OK;
 8005470:	2300      	movs	r3, #0
}
 8005472:	4618      	mov	r0, r3
 8005474:	3708      	adds	r7, #8
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}

0800547a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800547a:	b480      	push	{r7}
 800547c:	b087      	sub	sp, #28
 800547e:	af00      	add	r7, sp, #0
 8005480:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	781b      	ldrb	r3, [r3, #0]
 800548a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	3301      	adds	r3, #1
 8005490:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	781b      	ldrb	r3, [r3, #0]
 8005496:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005498:	8a3b      	ldrh	r3, [r7, #16]
 800549a:	021b      	lsls	r3, r3, #8
 800549c:	b21a      	sxth	r2, r3
 800549e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80054a2:	4313      	orrs	r3, r2
 80054a4:	b21b      	sxth	r3, r3
 80054a6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80054a8:	89fb      	ldrh	r3, [r7, #14]
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	371c      	adds	r7, #28
 80054ae:	46bd      	mov	sp, r7
 80054b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b4:	4770      	bx	lr
	...

080054b8 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b084      	sub	sp, #16
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
 80054c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80054c2:	2300      	movs	r3, #0
 80054c4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	781b      	ldrb	r3, [r3, #0]
 80054ca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80054ce:	2b20      	cmp	r3, #32
 80054d0:	d004      	beq.n	80054dc <USBD_StdDevReq+0x24>
 80054d2:	2b40      	cmp	r3, #64	; 0x40
 80054d4:	d002      	beq.n	80054dc <USBD_StdDevReq+0x24>
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d00a      	beq.n	80054f0 <USBD_StdDevReq+0x38>
 80054da:	e050      	b.n	800557e <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054e2:	689b      	ldr	r3, [r3, #8]
 80054e4:	6839      	ldr	r1, [r7, #0]
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	4798      	blx	r3
 80054ea:	4603      	mov	r3, r0
 80054ec:	73fb      	strb	r3, [r7, #15]
    break;
 80054ee:	e04b      	b.n	8005588 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	785b      	ldrb	r3, [r3, #1]
 80054f4:	2b09      	cmp	r3, #9
 80054f6:	d83c      	bhi.n	8005572 <USBD_StdDevReq+0xba>
 80054f8:	a201      	add	r2, pc, #4	; (adr r2, 8005500 <USBD_StdDevReq+0x48>)
 80054fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054fe:	bf00      	nop
 8005500:	08005555 	.word	0x08005555
 8005504:	08005569 	.word	0x08005569
 8005508:	08005573 	.word	0x08005573
 800550c:	0800555f 	.word	0x0800555f
 8005510:	08005573 	.word	0x08005573
 8005514:	08005533 	.word	0x08005533
 8005518:	08005529 	.word	0x08005529
 800551c:	08005573 	.word	0x08005573
 8005520:	0800554b 	.word	0x0800554b
 8005524:	0800553d 	.word	0x0800553d
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8005528:	6839      	ldr	r1, [r7, #0]
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f000 f9ce 	bl	80058cc <USBD_GetDescriptor>
      break;
 8005530:	e024      	b.n	800557c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8005532:	6839      	ldr	r1, [r7, #0]
 8005534:	6878      	ldr	r0, [r7, #4]
 8005536:	f000 fb33 	bl	8005ba0 <USBD_SetAddress>
      break;
 800553a:	e01f      	b.n	800557c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800553c:	6839      	ldr	r1, [r7, #0]
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f000 fb70 	bl	8005c24 <USBD_SetConfig>
 8005544:	4603      	mov	r3, r0
 8005546:	73fb      	strb	r3, [r7, #15]
      break;
 8005548:	e018      	b.n	800557c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800554a:	6839      	ldr	r1, [r7, #0]
 800554c:	6878      	ldr	r0, [r7, #4]
 800554e:	f000 fc0d 	bl	8005d6c <USBD_GetConfig>
      break;
 8005552:	e013      	b.n	800557c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8005554:	6839      	ldr	r1, [r7, #0]
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f000 fc3c 	bl	8005dd4 <USBD_GetStatus>
      break;
 800555c:	e00e      	b.n	800557c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800555e:	6839      	ldr	r1, [r7, #0]
 8005560:	6878      	ldr	r0, [r7, #4]
 8005562:	f000 fc6a 	bl	8005e3a <USBD_SetFeature>
      break;
 8005566:	e009      	b.n	800557c <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8005568:	6839      	ldr	r1, [r7, #0]
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f000 fc79 	bl	8005e62 <USBD_ClrFeature>
      break;
 8005570:	e004      	b.n	800557c <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8005572:	6839      	ldr	r1, [r7, #0]
 8005574:	6878      	ldr	r0, [r7, #4]
 8005576:	f000 fccf 	bl	8005f18 <USBD_CtlError>
      break;
 800557a:	bf00      	nop
    }
    break;
 800557c:	e004      	b.n	8005588 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800557e:	6839      	ldr	r1, [r7, #0]
 8005580:	6878      	ldr	r0, [r7, #4]
 8005582:	f000 fcc9 	bl	8005f18 <USBD_CtlError>
    break;
 8005586:	bf00      	nop
  }

  return ret;
 8005588:	7bfb      	ldrb	r3, [r7, #15]
}
 800558a:	4618      	mov	r0, r3
 800558c:	3710      	adds	r7, #16
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}
 8005592:	bf00      	nop

08005594 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b084      	sub	sp, #16
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
 800559c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800559e:	2300      	movs	r3, #0
 80055a0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	781b      	ldrb	r3, [r3, #0]
 80055a6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80055aa:	2b20      	cmp	r3, #32
 80055ac:	d003      	beq.n	80055b6 <USBD_StdItfReq+0x22>
 80055ae:	2b40      	cmp	r3, #64	; 0x40
 80055b0:	d001      	beq.n	80055b6 <USBD_StdItfReq+0x22>
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d12a      	bne.n	800560c <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80055bc:	3b01      	subs	r3, #1
 80055be:	2b02      	cmp	r3, #2
 80055c0:	d81d      	bhi.n	80055fe <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	889b      	ldrh	r3, [r3, #4]
 80055c6:	b2db      	uxtb	r3, r3
 80055c8:	2b01      	cmp	r3, #1
 80055ca:	d813      	bhi.n	80055f4 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055d2:	689b      	ldr	r3, [r3, #8]
 80055d4:	6839      	ldr	r1, [r7, #0]
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	4798      	blx	r3
 80055da:	4603      	mov	r3, r0
 80055dc:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	88db      	ldrh	r3, [r3, #6]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d110      	bne.n	8005608 <USBD_StdItfReq+0x74>
 80055e6:	7bfb      	ldrb	r3, [r7, #15]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d10d      	bne.n	8005608 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	f000 fd41 	bl	8006074 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 80055f2:	e009      	b.n	8005608 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 80055f4:	6839      	ldr	r1, [r7, #0]
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f000 fc8e 	bl	8005f18 <USBD_CtlError>
      break;
 80055fc:	e004      	b.n	8005608 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 80055fe:	6839      	ldr	r1, [r7, #0]
 8005600:	6878      	ldr	r0, [r7, #4]
 8005602:	f000 fc89 	bl	8005f18 <USBD_CtlError>
      break;
 8005606:	e000      	b.n	800560a <USBD_StdItfReq+0x76>
      break;
 8005608:	bf00      	nop
    }
    break;
 800560a:	e004      	b.n	8005616 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800560c:	6839      	ldr	r1, [r7, #0]
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f000 fc82 	bl	8005f18 <USBD_CtlError>
    break;
 8005614:	bf00      	nop
  }

  return ret;
 8005616:	7bfb      	ldrb	r3, [r7, #15]
}
 8005618:	4618      	mov	r0, r3
 800561a:	3710      	adds	r7, #16
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}

08005620 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b084      	sub	sp, #16
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
 8005628:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800562a:	2300      	movs	r3, #0
 800562c:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	889b      	ldrh	r3, [r3, #4]
 8005632:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	781b      	ldrb	r3, [r3, #0]
 8005638:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800563c:	2b20      	cmp	r3, #32
 800563e:	d004      	beq.n	800564a <USBD_StdEPReq+0x2a>
 8005640:	2b40      	cmp	r3, #64	; 0x40
 8005642:	d002      	beq.n	800564a <USBD_StdEPReq+0x2a>
 8005644:	2b00      	cmp	r3, #0
 8005646:	d00a      	beq.n	800565e <USBD_StdEPReq+0x3e>
 8005648:	e135      	b.n	80058b6 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005650:	689b      	ldr	r3, [r3, #8]
 8005652:	6839      	ldr	r1, [r7, #0]
 8005654:	6878      	ldr	r0, [r7, #4]
 8005656:	4798      	blx	r3
 8005658:	4603      	mov	r3, r0
 800565a:	73fb      	strb	r3, [r7, #15]
    break;
 800565c:	e130      	b.n	80058c0 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	785b      	ldrb	r3, [r3, #1]
 8005662:	2b01      	cmp	r3, #1
 8005664:	d03e      	beq.n	80056e4 <USBD_StdEPReq+0xc4>
 8005666:	2b03      	cmp	r3, #3
 8005668:	d002      	beq.n	8005670 <USBD_StdEPReq+0x50>
 800566a:	2b00      	cmp	r3, #0
 800566c:	d077      	beq.n	800575e <USBD_StdEPReq+0x13e>
 800566e:	e11c      	b.n	80058aa <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005676:	2b02      	cmp	r3, #2
 8005678:	d002      	beq.n	8005680 <USBD_StdEPReq+0x60>
 800567a:	2b03      	cmp	r3, #3
 800567c:	d015      	beq.n	80056aa <USBD_StdEPReq+0x8a>
 800567e:	e02b      	b.n	80056d8 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005680:	7bbb      	ldrb	r3, [r7, #14]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d00c      	beq.n	80056a0 <USBD_StdEPReq+0x80>
 8005686:	7bbb      	ldrb	r3, [r7, #14]
 8005688:	2b80      	cmp	r3, #128	; 0x80
 800568a:	d009      	beq.n	80056a0 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800568c:	7bbb      	ldrb	r3, [r7, #14]
 800568e:	4619      	mov	r1, r3
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f001 f841 	bl	8006718 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005696:	2180      	movs	r1, #128	; 0x80
 8005698:	6878      	ldr	r0, [r7, #4]
 800569a:	f001 f83d 	bl	8006718 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800569e:	e020      	b.n	80056e2 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 80056a0:	6839      	ldr	r1, [r7, #0]
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f000 fc38 	bl	8005f18 <USBD_CtlError>
        break;
 80056a8:	e01b      	b.n	80056e2 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	885b      	ldrh	r3, [r3, #2]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d10e      	bne.n	80056d0 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80056b2:	7bbb      	ldrb	r3, [r7, #14]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d00b      	beq.n	80056d0 <USBD_StdEPReq+0xb0>
 80056b8:	7bbb      	ldrb	r3, [r7, #14]
 80056ba:	2b80      	cmp	r3, #128	; 0x80
 80056bc:	d008      	beq.n	80056d0 <USBD_StdEPReq+0xb0>
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	88db      	ldrh	r3, [r3, #6]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d104      	bne.n	80056d0 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 80056c6:	7bbb      	ldrb	r3, [r7, #14]
 80056c8:	4619      	mov	r1, r3
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f001 f824 	bl	8006718 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 80056d0:	6878      	ldr	r0, [r7, #4]
 80056d2:	f000 fccf 	bl	8006074 <USBD_CtlSendStatus>

        break;
 80056d6:	e004      	b.n	80056e2 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 80056d8:	6839      	ldr	r1, [r7, #0]
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f000 fc1c 	bl	8005f18 <USBD_CtlError>
        break;
 80056e0:	bf00      	nop
      }
      break;
 80056e2:	e0e7      	b.n	80058b4 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80056ea:	2b02      	cmp	r3, #2
 80056ec:	d002      	beq.n	80056f4 <USBD_StdEPReq+0xd4>
 80056ee:	2b03      	cmp	r3, #3
 80056f0:	d015      	beq.n	800571e <USBD_StdEPReq+0xfe>
 80056f2:	e02d      	b.n	8005750 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80056f4:	7bbb      	ldrb	r3, [r7, #14]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d00c      	beq.n	8005714 <USBD_StdEPReq+0xf4>
 80056fa:	7bbb      	ldrb	r3, [r7, #14]
 80056fc:	2b80      	cmp	r3, #128	; 0x80
 80056fe:	d009      	beq.n	8005714 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8005700:	7bbb      	ldrb	r3, [r7, #14]
 8005702:	4619      	mov	r1, r3
 8005704:	6878      	ldr	r0, [r7, #4]
 8005706:	f001 f807 	bl	8006718 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800570a:	2180      	movs	r1, #128	; 0x80
 800570c:	6878      	ldr	r0, [r7, #4]
 800570e:	f001 f803 	bl	8006718 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8005712:	e023      	b.n	800575c <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8005714:	6839      	ldr	r1, [r7, #0]
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f000 fbfe 	bl	8005f18 <USBD_CtlError>
        break;
 800571c:	e01e      	b.n	800575c <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	885b      	ldrh	r3, [r3, #2]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d119      	bne.n	800575a <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8005726:	7bbb      	ldrb	r3, [r7, #14]
 8005728:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800572c:	2b00      	cmp	r3, #0
 800572e:	d004      	beq.n	800573a <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005730:	7bbb      	ldrb	r3, [r7, #14]
 8005732:	4619      	mov	r1, r3
 8005734:	6878      	ldr	r0, [r7, #4]
 8005736:	f001 f80e 	bl	8006756 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800573a:	6878      	ldr	r0, [r7, #4]
 800573c:	f000 fc9a 	bl	8006074 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005746:	689b      	ldr	r3, [r3, #8]
 8005748:	6839      	ldr	r1, [r7, #0]
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	4798      	blx	r3
        }
        break;
 800574e:	e004      	b.n	800575a <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8005750:	6839      	ldr	r1, [r7, #0]
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f000 fbe0 	bl	8005f18 <USBD_CtlError>
        break;
 8005758:	e000      	b.n	800575c <USBD_StdEPReq+0x13c>
        break;
 800575a:	bf00      	nop
      }
      break;
 800575c:	e0aa      	b.n	80058b4 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005764:	2b02      	cmp	r3, #2
 8005766:	d002      	beq.n	800576e <USBD_StdEPReq+0x14e>
 8005768:	2b03      	cmp	r3, #3
 800576a:	d032      	beq.n	80057d2 <USBD_StdEPReq+0x1b2>
 800576c:	e097      	b.n	800589e <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800576e:	7bbb      	ldrb	r3, [r7, #14]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d007      	beq.n	8005784 <USBD_StdEPReq+0x164>
 8005774:	7bbb      	ldrb	r3, [r7, #14]
 8005776:	2b80      	cmp	r3, #128	; 0x80
 8005778:	d004      	beq.n	8005784 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 800577a:	6839      	ldr	r1, [r7, #0]
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	f000 fbcb 	bl	8005f18 <USBD_CtlError>
          break;
 8005782:	e091      	b.n	80058a8 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005784:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005788:	2b00      	cmp	r3, #0
 800578a:	da0b      	bge.n	80057a4 <USBD_StdEPReq+0x184>
 800578c:	7bbb      	ldrb	r3, [r7, #14]
 800578e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005792:	4613      	mov	r3, r2
 8005794:	009b      	lsls	r3, r3, #2
 8005796:	4413      	add	r3, r2
 8005798:	009b      	lsls	r3, r3, #2
 800579a:	3310      	adds	r3, #16
 800579c:	687a      	ldr	r2, [r7, #4]
 800579e:	4413      	add	r3, r2
 80057a0:	3304      	adds	r3, #4
 80057a2:	e00b      	b.n	80057bc <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 80057a4:	7bbb      	ldrb	r3, [r7, #14]
 80057a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80057aa:	4613      	mov	r3, r2
 80057ac:	009b      	lsls	r3, r3, #2
 80057ae:	4413      	add	r3, r2
 80057b0:	009b      	lsls	r3, r3, #2
 80057b2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80057b6:	687a      	ldr	r2, [r7, #4]
 80057b8:	4413      	add	r3, r2
 80057ba:	3304      	adds	r3, #4
 80057bc:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	2200      	movs	r2, #0
 80057c2:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	2202      	movs	r2, #2
 80057c8:	4619      	mov	r1, r3
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f000 fc15 	bl	8005ffa <USBD_CtlSendData>
        break;
 80057d0:	e06a      	b.n	80058a8 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 80057d2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	da11      	bge.n	80057fe <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80057da:	7bbb      	ldrb	r3, [r7, #14]
 80057dc:	f003 020f 	and.w	r2, r3, #15
 80057e0:	6879      	ldr	r1, [r7, #4]
 80057e2:	4613      	mov	r3, r2
 80057e4:	009b      	lsls	r3, r3, #2
 80057e6:	4413      	add	r3, r2
 80057e8:	009b      	lsls	r3, r3, #2
 80057ea:	440b      	add	r3, r1
 80057ec:	3324      	adds	r3, #36	; 0x24
 80057ee:	881b      	ldrh	r3, [r3, #0]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d117      	bne.n	8005824 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 80057f4:	6839      	ldr	r1, [r7, #0]
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f000 fb8e 	bl	8005f18 <USBD_CtlError>
            break;
 80057fc:	e054      	b.n	80058a8 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80057fe:	7bbb      	ldrb	r3, [r7, #14]
 8005800:	f003 020f 	and.w	r2, r3, #15
 8005804:	6879      	ldr	r1, [r7, #4]
 8005806:	4613      	mov	r3, r2
 8005808:	009b      	lsls	r3, r3, #2
 800580a:	4413      	add	r3, r2
 800580c:	009b      	lsls	r3, r3, #2
 800580e:	440b      	add	r3, r1
 8005810:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005814:	881b      	ldrh	r3, [r3, #0]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d104      	bne.n	8005824 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800581a:	6839      	ldr	r1, [r7, #0]
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	f000 fb7b 	bl	8005f18 <USBD_CtlError>
            break;
 8005822:	e041      	b.n	80058a8 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005824:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005828:	2b00      	cmp	r3, #0
 800582a:	da0b      	bge.n	8005844 <USBD_StdEPReq+0x224>
 800582c:	7bbb      	ldrb	r3, [r7, #14]
 800582e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005832:	4613      	mov	r3, r2
 8005834:	009b      	lsls	r3, r3, #2
 8005836:	4413      	add	r3, r2
 8005838:	009b      	lsls	r3, r3, #2
 800583a:	3310      	adds	r3, #16
 800583c:	687a      	ldr	r2, [r7, #4]
 800583e:	4413      	add	r3, r2
 8005840:	3304      	adds	r3, #4
 8005842:	e00b      	b.n	800585c <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8005844:	7bbb      	ldrb	r3, [r7, #14]
 8005846:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800584a:	4613      	mov	r3, r2
 800584c:	009b      	lsls	r3, r3, #2
 800584e:	4413      	add	r3, r2
 8005850:	009b      	lsls	r3, r3, #2
 8005852:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005856:	687a      	ldr	r2, [r7, #4]
 8005858:	4413      	add	r3, r2
 800585a:	3304      	adds	r3, #4
 800585c:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800585e:	7bbb      	ldrb	r3, [r7, #14]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d002      	beq.n	800586a <USBD_StdEPReq+0x24a>
 8005864:	7bbb      	ldrb	r3, [r7, #14]
 8005866:	2b80      	cmp	r3, #128	; 0x80
 8005868:	d103      	bne.n	8005872 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	2200      	movs	r2, #0
 800586e:	601a      	str	r2, [r3, #0]
 8005870:	e00e      	b.n	8005890 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8005872:	7bbb      	ldrb	r3, [r7, #14]
 8005874:	4619      	mov	r1, r3
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f000 ff8c 	bl	8006794 <USBD_LL_IsStallEP>
 800587c:	4603      	mov	r3, r0
 800587e:	2b00      	cmp	r3, #0
 8005880:	d003      	beq.n	800588a <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	2201      	movs	r2, #1
 8005886:	601a      	str	r2, [r3, #0]
 8005888:	e002      	b.n	8005890 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	2200      	movs	r2, #0
 800588e:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	2202      	movs	r2, #2
 8005894:	4619      	mov	r1, r3
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f000 fbaf 	bl	8005ffa <USBD_CtlSendData>
          break;
 800589c:	e004      	b.n	80058a8 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 800589e:	6839      	ldr	r1, [r7, #0]
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	f000 fb39 	bl	8005f18 <USBD_CtlError>
        break;
 80058a6:	bf00      	nop
      }
      break;
 80058a8:	e004      	b.n	80058b4 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 80058aa:	6839      	ldr	r1, [r7, #0]
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	f000 fb33 	bl	8005f18 <USBD_CtlError>
      break;
 80058b2:	bf00      	nop
    }
    break;
 80058b4:	e004      	b.n	80058c0 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 80058b6:	6839      	ldr	r1, [r7, #0]
 80058b8:	6878      	ldr	r0, [r7, #4]
 80058ba:	f000 fb2d 	bl	8005f18 <USBD_CtlError>
    break;
 80058be:	bf00      	nop
  }

  return ret;
 80058c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	3710      	adds	r7, #16
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}
	...

080058cc <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b084      	sub	sp, #16
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
 80058d4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80058d6:	2300      	movs	r3, #0
 80058d8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80058da:	2300      	movs	r3, #0
 80058dc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80058de:	2300      	movs	r3, #0
 80058e0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	885b      	ldrh	r3, [r3, #2]
 80058e6:	0a1b      	lsrs	r3, r3, #8
 80058e8:	b29b      	uxth	r3, r3
 80058ea:	3b01      	subs	r3, #1
 80058ec:	2b06      	cmp	r3, #6
 80058ee:	f200 8128 	bhi.w	8005b42 <USBD_GetDescriptor+0x276>
 80058f2:	a201      	add	r2, pc, #4	; (adr r2, 80058f8 <USBD_GetDescriptor+0x2c>)
 80058f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058f8:	08005915 	.word	0x08005915
 80058fc:	0800592d 	.word	0x0800592d
 8005900:	0800596d 	.word	0x0800596d
 8005904:	08005b43 	.word	0x08005b43
 8005908:	08005b43 	.word	0x08005b43
 800590c:	08005ae3 	.word	0x08005ae3
 8005910:	08005b0f 	.word	0x08005b0f
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	687a      	ldr	r2, [r7, #4]
 800591e:	7c12      	ldrb	r2, [r2, #16]
 8005920:	f107 0108 	add.w	r1, r7, #8
 8005924:	4610      	mov	r0, r2
 8005926:	4798      	blx	r3
 8005928:	60f8      	str	r0, [r7, #12]
    break;
 800592a:	e112      	b.n	8005b52 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	7c1b      	ldrb	r3, [r3, #16]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d10d      	bne.n	8005950 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800593a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800593c:	f107 0208 	add.w	r2, r7, #8
 8005940:	4610      	mov	r0, r2
 8005942:	4798      	blx	r3
 8005944:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	3301      	adds	r3, #1
 800594a:	2202      	movs	r2, #2
 800594c:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800594e:	e100      	b.n	8005b52 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005958:	f107 0208 	add.w	r2, r7, #8
 800595c:	4610      	mov	r0, r2
 800595e:	4798      	blx	r3
 8005960:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	3301      	adds	r3, #1
 8005966:	2202      	movs	r2, #2
 8005968:	701a      	strb	r2, [r3, #0]
    break;
 800596a:	e0f2      	b.n	8005b52 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	885b      	ldrh	r3, [r3, #2]
 8005970:	b2db      	uxtb	r3, r3
 8005972:	2b05      	cmp	r3, #5
 8005974:	f200 80ac 	bhi.w	8005ad0 <USBD_GetDescriptor+0x204>
 8005978:	a201      	add	r2, pc, #4	; (adr r2, 8005980 <USBD_GetDescriptor+0xb4>)
 800597a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800597e:	bf00      	nop
 8005980:	08005999 	.word	0x08005999
 8005984:	080059cd 	.word	0x080059cd
 8005988:	08005a01 	.word	0x08005a01
 800598c:	08005a35 	.word	0x08005a35
 8005990:	08005a69 	.word	0x08005a69
 8005994:	08005a9d 	.word	0x08005a9d
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800599e:	685b      	ldr	r3, [r3, #4]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d00b      	beq.n	80059bc <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80059aa:	685b      	ldr	r3, [r3, #4]
 80059ac:	687a      	ldr	r2, [r7, #4]
 80059ae:	7c12      	ldrb	r2, [r2, #16]
 80059b0:	f107 0108 	add.w	r1, r7, #8
 80059b4:	4610      	mov	r0, r2
 80059b6:	4798      	blx	r3
 80059b8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80059ba:	e091      	b.n	8005ae0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80059bc:	6839      	ldr	r1, [r7, #0]
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f000 faaa 	bl	8005f18 <USBD_CtlError>
        err++;
 80059c4:	7afb      	ldrb	r3, [r7, #11]
 80059c6:	3301      	adds	r3, #1
 80059c8:	72fb      	strb	r3, [r7, #11]
      break;
 80059ca:	e089      	b.n	8005ae0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80059d2:	689b      	ldr	r3, [r3, #8]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d00b      	beq.n	80059f0 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80059de:	689b      	ldr	r3, [r3, #8]
 80059e0:	687a      	ldr	r2, [r7, #4]
 80059e2:	7c12      	ldrb	r2, [r2, #16]
 80059e4:	f107 0108 	add.w	r1, r7, #8
 80059e8:	4610      	mov	r0, r2
 80059ea:	4798      	blx	r3
 80059ec:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80059ee:	e077      	b.n	8005ae0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80059f0:	6839      	ldr	r1, [r7, #0]
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f000 fa90 	bl	8005f18 <USBD_CtlError>
        err++;
 80059f8:	7afb      	ldrb	r3, [r7, #11]
 80059fa:	3301      	adds	r3, #1
 80059fc:	72fb      	strb	r3, [r7, #11]
      break;
 80059fe:	e06f      	b.n	8005ae0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a06:	68db      	ldr	r3, [r3, #12]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d00b      	beq.n	8005a24 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a12:	68db      	ldr	r3, [r3, #12]
 8005a14:	687a      	ldr	r2, [r7, #4]
 8005a16:	7c12      	ldrb	r2, [r2, #16]
 8005a18:	f107 0108 	add.w	r1, r7, #8
 8005a1c:	4610      	mov	r0, r2
 8005a1e:	4798      	blx	r3
 8005a20:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005a22:	e05d      	b.n	8005ae0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005a24:	6839      	ldr	r1, [r7, #0]
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f000 fa76 	bl	8005f18 <USBD_CtlError>
        err++;
 8005a2c:	7afb      	ldrb	r3, [r7, #11]
 8005a2e:	3301      	adds	r3, #1
 8005a30:	72fb      	strb	r3, [r7, #11]
      break;
 8005a32:	e055      	b.n	8005ae0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a3a:	691b      	ldr	r3, [r3, #16]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d00b      	beq.n	8005a58 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a46:	691b      	ldr	r3, [r3, #16]
 8005a48:	687a      	ldr	r2, [r7, #4]
 8005a4a:	7c12      	ldrb	r2, [r2, #16]
 8005a4c:	f107 0108 	add.w	r1, r7, #8
 8005a50:	4610      	mov	r0, r2
 8005a52:	4798      	blx	r3
 8005a54:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005a56:	e043      	b.n	8005ae0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005a58:	6839      	ldr	r1, [r7, #0]
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f000 fa5c 	bl	8005f18 <USBD_CtlError>
        err++;
 8005a60:	7afb      	ldrb	r3, [r7, #11]
 8005a62:	3301      	adds	r3, #1
 8005a64:	72fb      	strb	r3, [r7, #11]
      break;
 8005a66:	e03b      	b.n	8005ae0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a6e:	695b      	ldr	r3, [r3, #20]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d00b      	beq.n	8005a8c <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a7a:	695b      	ldr	r3, [r3, #20]
 8005a7c:	687a      	ldr	r2, [r7, #4]
 8005a7e:	7c12      	ldrb	r2, [r2, #16]
 8005a80:	f107 0108 	add.w	r1, r7, #8
 8005a84:	4610      	mov	r0, r2
 8005a86:	4798      	blx	r3
 8005a88:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005a8a:	e029      	b.n	8005ae0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005a8c:	6839      	ldr	r1, [r7, #0]
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f000 fa42 	bl	8005f18 <USBD_CtlError>
        err++;
 8005a94:	7afb      	ldrb	r3, [r7, #11]
 8005a96:	3301      	adds	r3, #1
 8005a98:	72fb      	strb	r3, [r7, #11]
      break;
 8005a9a:	e021      	b.n	8005ae0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005aa2:	699b      	ldr	r3, [r3, #24]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d00b      	beq.n	8005ac0 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005aae:	699b      	ldr	r3, [r3, #24]
 8005ab0:	687a      	ldr	r2, [r7, #4]
 8005ab2:	7c12      	ldrb	r2, [r2, #16]
 8005ab4:	f107 0108 	add.w	r1, r7, #8
 8005ab8:	4610      	mov	r0, r2
 8005aba:	4798      	blx	r3
 8005abc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005abe:	e00f      	b.n	8005ae0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005ac0:	6839      	ldr	r1, [r7, #0]
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f000 fa28 	bl	8005f18 <USBD_CtlError>
        err++;
 8005ac8:	7afb      	ldrb	r3, [r7, #11]
 8005aca:	3301      	adds	r3, #1
 8005acc:	72fb      	strb	r3, [r7, #11]
      break;
 8005ace:	e007      	b.n	8005ae0 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8005ad0:	6839      	ldr	r1, [r7, #0]
 8005ad2:	6878      	ldr	r0, [r7, #4]
 8005ad4:	f000 fa20 	bl	8005f18 <USBD_CtlError>
      err++;
 8005ad8:	7afb      	ldrb	r3, [r7, #11]
 8005ada:	3301      	adds	r3, #1
 8005adc:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8005ade:	bf00      	nop
    }
    break;
 8005ae0:	e037      	b.n	8005b52 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	7c1b      	ldrb	r3, [r3, #16]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d109      	bne.n	8005afe <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005af0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005af2:	f107 0208 	add.w	r2, r7, #8
 8005af6:	4610      	mov	r0, r2
 8005af8:	4798      	blx	r3
 8005afa:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8005afc:	e029      	b.n	8005b52 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8005afe:	6839      	ldr	r1, [r7, #0]
 8005b00:	6878      	ldr	r0, [r7, #4]
 8005b02:	f000 fa09 	bl	8005f18 <USBD_CtlError>
      err++;
 8005b06:	7afb      	ldrb	r3, [r7, #11]
 8005b08:	3301      	adds	r3, #1
 8005b0a:	72fb      	strb	r3, [r7, #11]
    break;
 8005b0c:	e021      	b.n	8005b52 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	7c1b      	ldrb	r3, [r3, #16]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d10d      	bne.n	8005b32 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b1e:	f107 0208 	add.w	r2, r7, #8
 8005b22:	4610      	mov	r0, r2
 8005b24:	4798      	blx	r3
 8005b26:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	3301      	adds	r3, #1
 8005b2c:	2207      	movs	r2, #7
 8005b2e:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8005b30:	e00f      	b.n	8005b52 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8005b32:	6839      	ldr	r1, [r7, #0]
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f000 f9ef 	bl	8005f18 <USBD_CtlError>
      err++;
 8005b3a:	7afb      	ldrb	r3, [r7, #11]
 8005b3c:	3301      	adds	r3, #1
 8005b3e:	72fb      	strb	r3, [r7, #11]
    break;
 8005b40:	e007      	b.n	8005b52 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8005b42:	6839      	ldr	r1, [r7, #0]
 8005b44:	6878      	ldr	r0, [r7, #4]
 8005b46:	f000 f9e7 	bl	8005f18 <USBD_CtlError>
    err++;
 8005b4a:	7afb      	ldrb	r3, [r7, #11]
 8005b4c:	3301      	adds	r3, #1
 8005b4e:	72fb      	strb	r3, [r7, #11]
    break;
 8005b50:	bf00      	nop
  }

  if (err != 0U)
 8005b52:	7afb      	ldrb	r3, [r7, #11]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d11e      	bne.n	8005b96 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	88db      	ldrh	r3, [r3, #6]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d016      	beq.n	8005b8e <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8005b60:	893b      	ldrh	r3, [r7, #8]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d00e      	beq.n	8005b84 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	88da      	ldrh	r2, [r3, #6]
 8005b6a:	893b      	ldrh	r3, [r7, #8]
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	bf28      	it	cs
 8005b70:	4613      	movcs	r3, r2
 8005b72:	b29b      	uxth	r3, r3
 8005b74:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8005b76:	893b      	ldrh	r3, [r7, #8]
 8005b78:	461a      	mov	r2, r3
 8005b7a:	68f9      	ldr	r1, [r7, #12]
 8005b7c:	6878      	ldr	r0, [r7, #4]
 8005b7e:	f000 fa3c 	bl	8005ffa <USBD_CtlSendData>
 8005b82:	e009      	b.n	8005b98 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8005b84:	6839      	ldr	r1, [r7, #0]
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f000 f9c6 	bl	8005f18 <USBD_CtlError>
 8005b8c:	e004      	b.n	8005b98 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f000 fa70 	bl	8006074 <USBD_CtlSendStatus>
 8005b94:	e000      	b.n	8005b98 <USBD_GetDescriptor+0x2cc>
    return;
 8005b96:	bf00      	nop
    }
  }
}
 8005b98:	3710      	adds	r7, #16
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}
 8005b9e:	bf00      	nop

08005ba0 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b084      	sub	sp, #16
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
 8005ba8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	889b      	ldrh	r3, [r3, #4]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d130      	bne.n	8005c14 <USBD_SetAddress+0x74>
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	88db      	ldrh	r3, [r3, #6]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d12c      	bne.n	8005c14 <USBD_SetAddress+0x74>
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	885b      	ldrh	r3, [r3, #2]
 8005bbe:	2b7f      	cmp	r3, #127	; 0x7f
 8005bc0:	d828      	bhi.n	8005c14 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	885b      	ldrh	r3, [r3, #2]
 8005bc6:	b2db      	uxtb	r3, r3
 8005bc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005bcc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005bd4:	2b03      	cmp	r3, #3
 8005bd6:	d104      	bne.n	8005be2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8005bd8:	6839      	ldr	r1, [r7, #0]
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	f000 f99c 	bl	8005f18 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005be0:	e01c      	b.n	8005c1c <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	7bfa      	ldrb	r2, [r7, #15]
 8005be6:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005bea:	7bfb      	ldrb	r3, [r7, #15]
 8005bec:	4619      	mov	r1, r3
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	f000 fdfc 	bl	80067ec <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8005bf4:	6878      	ldr	r0, [r7, #4]
 8005bf6:	f000 fa3d 	bl	8006074 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005bfa:	7bfb      	ldrb	r3, [r7, #15]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d004      	beq.n	8005c0a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2202      	movs	r2, #2
 8005c04:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c08:	e008      	b.n	8005c1c <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2201      	movs	r2, #1
 8005c0e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c12:	e003      	b.n	8005c1c <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005c14:	6839      	ldr	r1, [r7, #0]
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	f000 f97e 	bl	8005f18 <USBD_CtlError>
  }
}
 8005c1c:	bf00      	nop
 8005c1e:	3710      	adds	r7, #16
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bd80      	pop	{r7, pc}

08005c24 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b084      	sub	sp, #16
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
 8005c2c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005c2e:	2300      	movs	r3, #0
 8005c30:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	885b      	ldrh	r3, [r3, #2]
 8005c36:	b2da      	uxtb	r2, r3
 8005c38:	4b4b      	ldr	r3, [pc, #300]	; (8005d68 <USBD_SetConfig+0x144>)
 8005c3a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005c3c:	4b4a      	ldr	r3, [pc, #296]	; (8005d68 <USBD_SetConfig+0x144>)
 8005c3e:	781b      	ldrb	r3, [r3, #0]
 8005c40:	2b01      	cmp	r3, #1
 8005c42:	d905      	bls.n	8005c50 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8005c44:	6839      	ldr	r1, [r7, #0]
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f000 f966 	bl	8005f18 <USBD_CtlError>
    return USBD_FAIL;
 8005c4c:	2303      	movs	r3, #3
 8005c4e:	e087      	b.n	8005d60 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c56:	2b02      	cmp	r3, #2
 8005c58:	d002      	beq.n	8005c60 <USBD_SetConfig+0x3c>
 8005c5a:	2b03      	cmp	r3, #3
 8005c5c:	d025      	beq.n	8005caa <USBD_SetConfig+0x86>
 8005c5e:	e071      	b.n	8005d44 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8005c60:	4b41      	ldr	r3, [pc, #260]	; (8005d68 <USBD_SetConfig+0x144>)
 8005c62:	781b      	ldrb	r3, [r3, #0]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d01c      	beq.n	8005ca2 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8005c68:	4b3f      	ldr	r3, [pc, #252]	; (8005d68 <USBD_SetConfig+0x144>)
 8005c6a:	781b      	ldrb	r3, [r3, #0]
 8005c6c:	461a      	mov	r2, r3
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8005c72:	4b3d      	ldr	r3, [pc, #244]	; (8005d68 <USBD_SetConfig+0x144>)
 8005c74:	781b      	ldrb	r3, [r3, #0]
 8005c76:	4619      	mov	r1, r3
 8005c78:	6878      	ldr	r0, [r7, #4]
 8005c7a:	f7ff f9a7 	bl	8004fcc <USBD_SetClassConfig>
 8005c7e:	4603      	mov	r3, r0
 8005c80:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8005c82:	7bfb      	ldrb	r3, [r7, #15]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d004      	beq.n	8005c92 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8005c88:	6839      	ldr	r1, [r7, #0]
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f000 f944 	bl	8005f18 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8005c90:	e065      	b.n	8005d5e <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f000 f9ee 	bl	8006074 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2203      	movs	r2, #3
 8005c9c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8005ca0:	e05d      	b.n	8005d5e <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8005ca2:	6878      	ldr	r0, [r7, #4]
 8005ca4:	f000 f9e6 	bl	8006074 <USBD_CtlSendStatus>
    break;
 8005ca8:	e059      	b.n	8005d5e <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8005caa:	4b2f      	ldr	r3, [pc, #188]	; (8005d68 <USBD_SetConfig+0x144>)
 8005cac:	781b      	ldrb	r3, [r3, #0]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d112      	bne.n	8005cd8 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2202      	movs	r2, #2
 8005cb6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8005cba:	4b2b      	ldr	r3, [pc, #172]	; (8005d68 <USBD_SetConfig+0x144>)
 8005cbc:	781b      	ldrb	r3, [r3, #0]
 8005cbe:	461a      	mov	r2, r3
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005cc4:	4b28      	ldr	r3, [pc, #160]	; (8005d68 <USBD_SetConfig+0x144>)
 8005cc6:	781b      	ldrb	r3, [r3, #0]
 8005cc8:	4619      	mov	r1, r3
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	f7ff f99a 	bl	8005004 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8005cd0:	6878      	ldr	r0, [r7, #4]
 8005cd2:	f000 f9cf 	bl	8006074 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8005cd6:	e042      	b.n	8005d5e <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8005cd8:	4b23      	ldr	r3, [pc, #140]	; (8005d68 <USBD_SetConfig+0x144>)
 8005cda:	781b      	ldrb	r3, [r3, #0]
 8005cdc:	461a      	mov	r2, r3
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	685b      	ldr	r3, [r3, #4]
 8005ce2:	429a      	cmp	r2, r3
 8005ce4:	d02a      	beq.n	8005d3c <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	b2db      	uxtb	r3, r3
 8005cec:	4619      	mov	r1, r3
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	f7ff f988 	bl	8005004 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8005cf4:	4b1c      	ldr	r3, [pc, #112]	; (8005d68 <USBD_SetConfig+0x144>)
 8005cf6:	781b      	ldrb	r3, [r3, #0]
 8005cf8:	461a      	mov	r2, r3
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8005cfe:	4b1a      	ldr	r3, [pc, #104]	; (8005d68 <USBD_SetConfig+0x144>)
 8005d00:	781b      	ldrb	r3, [r3, #0]
 8005d02:	4619      	mov	r1, r3
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	f7ff f961 	bl	8004fcc <USBD_SetClassConfig>
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8005d0e:	7bfb      	ldrb	r3, [r7, #15]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d00f      	beq.n	8005d34 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8005d14:	6839      	ldr	r1, [r7, #0]
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f000 f8fe 	bl	8005f18 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	b2db      	uxtb	r3, r3
 8005d22:	4619      	mov	r1, r3
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	f7ff f96d 	bl	8005004 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2202      	movs	r2, #2
 8005d2e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8005d32:	e014      	b.n	8005d5e <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8005d34:	6878      	ldr	r0, [r7, #4]
 8005d36:	f000 f99d 	bl	8006074 <USBD_CtlSendStatus>
    break;
 8005d3a:	e010      	b.n	8005d5e <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8005d3c:	6878      	ldr	r0, [r7, #4]
 8005d3e:	f000 f999 	bl	8006074 <USBD_CtlSendStatus>
    break;
 8005d42:	e00c      	b.n	8005d5e <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8005d44:	6839      	ldr	r1, [r7, #0]
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f000 f8e6 	bl	8005f18 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005d4c:	4b06      	ldr	r3, [pc, #24]	; (8005d68 <USBD_SetConfig+0x144>)
 8005d4e:	781b      	ldrb	r3, [r3, #0]
 8005d50:	4619      	mov	r1, r3
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f7ff f956 	bl	8005004 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8005d58:	2303      	movs	r3, #3
 8005d5a:	73fb      	strb	r3, [r7, #15]
    break;
 8005d5c:	bf00      	nop
  }

  return ret;
 8005d5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	3710      	adds	r7, #16
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd80      	pop	{r7, pc}
 8005d68:	2000023c 	.word	0x2000023c

08005d6c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b082      	sub	sp, #8
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
 8005d74:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	88db      	ldrh	r3, [r3, #6]
 8005d7a:	2b01      	cmp	r3, #1
 8005d7c:	d004      	beq.n	8005d88 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8005d7e:	6839      	ldr	r1, [r7, #0]
 8005d80:	6878      	ldr	r0, [r7, #4]
 8005d82:	f000 f8c9 	bl	8005f18 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8005d86:	e021      	b.n	8005dcc <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d8e:	2b01      	cmp	r3, #1
 8005d90:	db17      	blt.n	8005dc2 <USBD_GetConfig+0x56>
 8005d92:	2b02      	cmp	r3, #2
 8005d94:	dd02      	ble.n	8005d9c <USBD_GetConfig+0x30>
 8005d96:	2b03      	cmp	r3, #3
 8005d98:	d00b      	beq.n	8005db2 <USBD_GetConfig+0x46>
 8005d9a:	e012      	b.n	8005dc2 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	3308      	adds	r3, #8
 8005da6:	2201      	movs	r2, #1
 8005da8:	4619      	mov	r1, r3
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f000 f925 	bl	8005ffa <USBD_CtlSendData>
      break;
 8005db0:	e00c      	b.n	8005dcc <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	3304      	adds	r3, #4
 8005db6:	2201      	movs	r2, #1
 8005db8:	4619      	mov	r1, r3
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	f000 f91d 	bl	8005ffa <USBD_CtlSendData>
      break;
 8005dc0:	e004      	b.n	8005dcc <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8005dc2:	6839      	ldr	r1, [r7, #0]
 8005dc4:	6878      	ldr	r0, [r7, #4]
 8005dc6:	f000 f8a7 	bl	8005f18 <USBD_CtlError>
      break;
 8005dca:	bf00      	nop
}
 8005dcc:	bf00      	nop
 8005dce:	3708      	adds	r7, #8
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bd80      	pop	{r7, pc}

08005dd4 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b082      	sub	sp, #8
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
 8005ddc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005de4:	3b01      	subs	r3, #1
 8005de6:	2b02      	cmp	r3, #2
 8005de8:	d81e      	bhi.n	8005e28 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	88db      	ldrh	r3, [r3, #6]
 8005dee:	2b02      	cmp	r3, #2
 8005df0:	d004      	beq.n	8005dfc <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8005df2:	6839      	ldr	r1, [r7, #0]
 8005df4:	6878      	ldr	r0, [r7, #4]
 8005df6:	f000 f88f 	bl	8005f18 <USBD_CtlError>
      break;
 8005dfa:	e01a      	b.n	8005e32 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2201      	movs	r2, #1
 8005e00:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d005      	beq.n	8005e18 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	68db      	ldr	r3, [r3, #12]
 8005e10:	f043 0202 	orr.w	r2, r3, #2
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	330c      	adds	r3, #12
 8005e1c:	2202      	movs	r2, #2
 8005e1e:	4619      	mov	r1, r3
 8005e20:	6878      	ldr	r0, [r7, #4]
 8005e22:	f000 f8ea 	bl	8005ffa <USBD_CtlSendData>
    break;
 8005e26:	e004      	b.n	8005e32 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8005e28:	6839      	ldr	r1, [r7, #0]
 8005e2a:	6878      	ldr	r0, [r7, #4]
 8005e2c:	f000 f874 	bl	8005f18 <USBD_CtlError>
    break;
 8005e30:	bf00      	nop
  }
}
 8005e32:	bf00      	nop
 8005e34:	3708      	adds	r7, #8
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bd80      	pop	{r7, pc}

08005e3a <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005e3a:	b580      	push	{r7, lr}
 8005e3c:	b082      	sub	sp, #8
 8005e3e:	af00      	add	r7, sp, #0
 8005e40:	6078      	str	r0, [r7, #4]
 8005e42:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	885b      	ldrh	r3, [r3, #2]
 8005e48:	2b01      	cmp	r3, #1
 8005e4a:	d106      	bne.n	8005e5a <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2201      	movs	r2, #1
 8005e50:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8005e54:	6878      	ldr	r0, [r7, #4]
 8005e56:	f000 f90d 	bl	8006074 <USBD_CtlSendStatus>
  }
}
 8005e5a:	bf00      	nop
 8005e5c:	3708      	adds	r7, #8
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd80      	pop	{r7, pc}

08005e62 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005e62:	b580      	push	{r7, lr}
 8005e64:	b082      	sub	sp, #8
 8005e66:	af00      	add	r7, sp, #0
 8005e68:	6078      	str	r0, [r7, #4]
 8005e6a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e72:	3b01      	subs	r3, #1
 8005e74:	2b02      	cmp	r3, #2
 8005e76:	d80b      	bhi.n	8005e90 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	885b      	ldrh	r3, [r3, #2]
 8005e7c:	2b01      	cmp	r3, #1
 8005e7e:	d10c      	bne.n	8005e9a <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2200      	movs	r2, #0
 8005e84:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8005e88:	6878      	ldr	r0, [r7, #4]
 8005e8a:	f000 f8f3 	bl	8006074 <USBD_CtlSendStatus>
      }
      break;
 8005e8e:	e004      	b.n	8005e9a <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8005e90:	6839      	ldr	r1, [r7, #0]
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f000 f840 	bl	8005f18 <USBD_CtlError>
      break;
 8005e98:	e000      	b.n	8005e9c <USBD_ClrFeature+0x3a>
      break;
 8005e9a:	bf00      	nop
  }
}
 8005e9c:	bf00      	nop
 8005e9e:	3708      	adds	r7, #8
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bd80      	pop	{r7, pc}

08005ea4 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b084      	sub	sp, #16
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
 8005eac:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	781a      	ldrb	r2, [r3, #0]
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	3301      	adds	r3, #1
 8005ebe:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	781a      	ldrb	r2, [r3, #0]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	3301      	adds	r3, #1
 8005ecc:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8005ece:	68f8      	ldr	r0, [r7, #12]
 8005ed0:	f7ff fad3 	bl	800547a <SWAPBYTE>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	461a      	mov	r2, r3
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	3301      	adds	r3, #1
 8005ee0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	3301      	adds	r3, #1
 8005ee6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8005ee8:	68f8      	ldr	r0, [r7, #12]
 8005eea:	f7ff fac6 	bl	800547a <SWAPBYTE>
 8005eee:	4603      	mov	r3, r0
 8005ef0:	461a      	mov	r2, r3
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	3301      	adds	r3, #1
 8005efa:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	3301      	adds	r3, #1
 8005f00:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8005f02:	68f8      	ldr	r0, [r7, #12]
 8005f04:	f7ff fab9 	bl	800547a <SWAPBYTE>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	461a      	mov	r2, r3
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	80da      	strh	r2, [r3, #6]
}
 8005f10:	bf00      	nop
 8005f12:	3710      	adds	r7, #16
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bd80      	pop	{r7, pc}

08005f18 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b082      	sub	sp, #8
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
 8005f20:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8005f22:	2180      	movs	r1, #128	; 0x80
 8005f24:	6878      	ldr	r0, [r7, #4]
 8005f26:	f000 fbf7 	bl	8006718 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8005f2a:	2100      	movs	r1, #0
 8005f2c:	6878      	ldr	r0, [r7, #4]
 8005f2e:	f000 fbf3 	bl	8006718 <USBD_LL_StallEP>
}
 8005f32:	bf00      	nop
 8005f34:	3708      	adds	r7, #8
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bd80      	pop	{r7, pc}

08005f3a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8005f3a:	b580      	push	{r7, lr}
 8005f3c:	b086      	sub	sp, #24
 8005f3e:	af00      	add	r7, sp, #0
 8005f40:	60f8      	str	r0, [r7, #12]
 8005f42:	60b9      	str	r1, [r7, #8]
 8005f44:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8005f46:	2300      	movs	r3, #0
 8005f48:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d036      	beq.n	8005fbe <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8005f54:	6938      	ldr	r0, [r7, #16]
 8005f56:	f000 f836 	bl	8005fc6 <USBD_GetLen>
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	3301      	adds	r3, #1
 8005f5e:	b29b      	uxth	r3, r3
 8005f60:	005b      	lsls	r3, r3, #1
 8005f62:	b29a      	uxth	r2, r3
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8005f68:	7dfb      	ldrb	r3, [r7, #23]
 8005f6a:	68ba      	ldr	r2, [r7, #8]
 8005f6c:	4413      	add	r3, r2
 8005f6e:	687a      	ldr	r2, [r7, #4]
 8005f70:	7812      	ldrb	r2, [r2, #0]
 8005f72:	701a      	strb	r2, [r3, #0]
  idx++;
 8005f74:	7dfb      	ldrb	r3, [r7, #23]
 8005f76:	3301      	adds	r3, #1
 8005f78:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8005f7a:	7dfb      	ldrb	r3, [r7, #23]
 8005f7c:	68ba      	ldr	r2, [r7, #8]
 8005f7e:	4413      	add	r3, r2
 8005f80:	2203      	movs	r2, #3
 8005f82:	701a      	strb	r2, [r3, #0]
  idx++;
 8005f84:	7dfb      	ldrb	r3, [r7, #23]
 8005f86:	3301      	adds	r3, #1
 8005f88:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8005f8a:	e013      	b.n	8005fb4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8005f8c:	7dfb      	ldrb	r3, [r7, #23]
 8005f8e:	68ba      	ldr	r2, [r7, #8]
 8005f90:	4413      	add	r3, r2
 8005f92:	693a      	ldr	r2, [r7, #16]
 8005f94:	7812      	ldrb	r2, [r2, #0]
 8005f96:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8005f98:	693b      	ldr	r3, [r7, #16]
 8005f9a:	3301      	adds	r3, #1
 8005f9c:	613b      	str	r3, [r7, #16]
    idx++;
 8005f9e:	7dfb      	ldrb	r3, [r7, #23]
 8005fa0:	3301      	adds	r3, #1
 8005fa2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8005fa4:	7dfb      	ldrb	r3, [r7, #23]
 8005fa6:	68ba      	ldr	r2, [r7, #8]
 8005fa8:	4413      	add	r3, r2
 8005faa:	2200      	movs	r2, #0
 8005fac:	701a      	strb	r2, [r3, #0]
    idx++;
 8005fae:	7dfb      	ldrb	r3, [r7, #23]
 8005fb0:	3301      	adds	r3, #1
 8005fb2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	781b      	ldrb	r3, [r3, #0]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d1e7      	bne.n	8005f8c <USBD_GetString+0x52>
 8005fbc:	e000      	b.n	8005fc0 <USBD_GetString+0x86>
    return;
 8005fbe:	bf00      	nop
  }
}
 8005fc0:	3718      	adds	r7, #24
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd80      	pop	{r7, pc}

08005fc6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8005fc6:	b480      	push	{r7}
 8005fc8:	b085      	sub	sp, #20
 8005fca:	af00      	add	r7, sp, #0
 8005fcc:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8005fce:	2300      	movs	r3, #0
 8005fd0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8005fd6:	e005      	b.n	8005fe4 <USBD_GetLen+0x1e>
  {
    len++;
 8005fd8:	7bfb      	ldrb	r3, [r7, #15]
 8005fda:	3301      	adds	r3, #1
 8005fdc:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	3301      	adds	r3, #1
 8005fe2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	781b      	ldrb	r3, [r3, #0]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d1f5      	bne.n	8005fd8 <USBD_GetLen+0x12>
  }

  return len;
 8005fec:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	3714      	adds	r7, #20
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff8:	4770      	bx	lr

08005ffa <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8005ffa:	b580      	push	{r7, lr}
 8005ffc:	b084      	sub	sp, #16
 8005ffe:	af00      	add	r7, sp, #0
 8006000:	60f8      	str	r0, [r7, #12]
 8006002:	60b9      	str	r1, [r7, #8]
 8006004:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	2202      	movs	r2, #2
 800600a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	687a      	ldr	r2, [r7, #4]
 8006012:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	687a      	ldr	r2, [r7, #4]
 8006018:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	68ba      	ldr	r2, [r7, #8]
 800601e:	2100      	movs	r1, #0
 8006020:	68f8      	ldr	r0, [r7, #12]
 8006022:	f000 fc02 	bl	800682a <USBD_LL_Transmit>

  return USBD_OK;
 8006026:	2300      	movs	r3, #0
}
 8006028:	4618      	mov	r0, r3
 800602a:	3710      	adds	r7, #16
 800602c:	46bd      	mov	sp, r7
 800602e:	bd80      	pop	{r7, pc}

08006030 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b084      	sub	sp, #16
 8006034:	af00      	add	r7, sp, #0
 8006036:	60f8      	str	r0, [r7, #12]
 8006038:	60b9      	str	r1, [r7, #8]
 800603a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	68ba      	ldr	r2, [r7, #8]
 8006040:	2100      	movs	r1, #0
 8006042:	68f8      	ldr	r0, [r7, #12]
 8006044:	f000 fbf1 	bl	800682a <USBD_LL_Transmit>

  return USBD_OK;
 8006048:	2300      	movs	r3, #0
}
 800604a:	4618      	mov	r0, r3
 800604c:	3710      	adds	r7, #16
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}

08006052 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006052:	b580      	push	{r7, lr}
 8006054:	b084      	sub	sp, #16
 8006056:	af00      	add	r7, sp, #0
 8006058:	60f8      	str	r0, [r7, #12]
 800605a:	60b9      	str	r1, [r7, #8]
 800605c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	68ba      	ldr	r2, [r7, #8]
 8006062:	2100      	movs	r1, #0
 8006064:	68f8      	ldr	r0, [r7, #12]
 8006066:	f000 fc01 	bl	800686c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800606a:	2300      	movs	r3, #0
}
 800606c:	4618      	mov	r0, r3
 800606e:	3710      	adds	r7, #16
 8006070:	46bd      	mov	sp, r7
 8006072:	bd80      	pop	{r7, pc}

08006074 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b082      	sub	sp, #8
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2204      	movs	r2, #4
 8006080:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006084:	2300      	movs	r3, #0
 8006086:	2200      	movs	r2, #0
 8006088:	2100      	movs	r1, #0
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f000 fbcd 	bl	800682a <USBD_LL_Transmit>

  return USBD_OK;
 8006090:	2300      	movs	r3, #0
}
 8006092:	4618      	mov	r0, r3
 8006094:	3708      	adds	r7, #8
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}

0800609a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800609a:	b580      	push	{r7, lr}
 800609c:	b082      	sub	sp, #8
 800609e:	af00      	add	r7, sp, #0
 80060a0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2205      	movs	r2, #5
 80060a6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80060aa:	2300      	movs	r3, #0
 80060ac:	2200      	movs	r2, #0
 80060ae:	2100      	movs	r1, #0
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	f000 fbdb 	bl	800686c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80060b6:	2300      	movs	r3, #0
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	3708      	adds	r7, #8
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}

080060c0 <Send_Report>:

/*
 * -- Insert your external function declaration here --
 */
/* USER CODE BEGIN 1 */
void Send_Report(uint8_t *report){
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b082      	sub	sp, #8
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
	USBD_HID_SendReport(&hUsbDeviceFS, report, 8);
 80060c8:	2208      	movs	r2, #8
 80060ca:	6879      	ldr	r1, [r7, #4]
 80060cc:	4803      	ldr	r0, [pc, #12]	; (80060dc <Send_Report+0x1c>)
 80060ce:	f7fe fe9b 	bl	8004e08 <USBD_HID_SendReport>
}
 80060d2:	bf00      	nop
 80060d4:	3708      	adds	r7, #8
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}
 80060da:	bf00      	nop
 80060dc:	2000024c 	.word	0x2000024c

080060e0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80060e4:	2200      	movs	r2, #0
 80060e6:	490e      	ldr	r1, [pc, #56]	; (8006120 <MX_USB_DEVICE_Init+0x40>)
 80060e8:	480e      	ldr	r0, [pc, #56]	; (8006124 <MX_USB_DEVICE_Init+0x44>)
 80060ea:	f7fe ff01 	bl	8004ef0 <USBD_Init>
 80060ee:	4603      	mov	r3, r0
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d001      	beq.n	80060f8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80060f4:	f7fa fe6c 	bl	8000dd0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 80060f8:	490b      	ldr	r1, [pc, #44]	; (8006128 <MX_USB_DEVICE_Init+0x48>)
 80060fa:	480a      	ldr	r0, [pc, #40]	; (8006124 <MX_USB_DEVICE_Init+0x44>)
 80060fc:	f7fe ff2e 	bl	8004f5c <USBD_RegisterClass>
 8006100:	4603      	mov	r3, r0
 8006102:	2b00      	cmp	r3, #0
 8006104:	d001      	beq.n	800610a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006106:	f7fa fe63 	bl	8000dd0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800610a:	4806      	ldr	r0, [pc, #24]	; (8006124 <MX_USB_DEVICE_Init+0x44>)
 800610c:	f7fe ff47 	bl	8004f9e <USBD_Start>
 8006110:	4603      	mov	r3, r0
 8006112:	2b00      	cmp	r3, #0
 8006114:	d001      	beq.n	800611a <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8006116:	f7fa fe5b 	bl	8000dd0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800611a:	bf00      	nop
 800611c:	bd80      	pop	{r7, pc}
 800611e:	bf00      	nop
 8006120:	20000114 	.word	0x20000114
 8006124:	2000024c 	.word	0x2000024c
 8006128:	20000014 	.word	0x20000014

0800612c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800612c:	b480      	push	{r7}
 800612e:	b083      	sub	sp, #12
 8006130:	af00      	add	r7, sp, #0
 8006132:	4603      	mov	r3, r0
 8006134:	6039      	str	r1, [r7, #0]
 8006136:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	2212      	movs	r2, #18
 800613c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800613e:	4b03      	ldr	r3, [pc, #12]	; (800614c <USBD_FS_DeviceDescriptor+0x20>)
}
 8006140:	4618      	mov	r0, r3
 8006142:	370c      	adds	r7, #12
 8006144:	46bd      	mov	sp, r7
 8006146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614a:	4770      	bx	lr
 800614c:	20000130 	.word	0x20000130

08006150 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006150:	b480      	push	{r7}
 8006152:	b083      	sub	sp, #12
 8006154:	af00      	add	r7, sp, #0
 8006156:	4603      	mov	r3, r0
 8006158:	6039      	str	r1, [r7, #0]
 800615a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	2204      	movs	r2, #4
 8006160:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006162:	4b03      	ldr	r3, [pc, #12]	; (8006170 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006164:	4618      	mov	r0, r3
 8006166:	370c      	adds	r7, #12
 8006168:	46bd      	mov	sp, r7
 800616a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616e:	4770      	bx	lr
 8006170:	20000144 	.word	0x20000144

08006174 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b082      	sub	sp, #8
 8006178:	af00      	add	r7, sp, #0
 800617a:	4603      	mov	r3, r0
 800617c:	6039      	str	r1, [r7, #0]
 800617e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006180:	79fb      	ldrb	r3, [r7, #7]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d105      	bne.n	8006192 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006186:	683a      	ldr	r2, [r7, #0]
 8006188:	4907      	ldr	r1, [pc, #28]	; (80061a8 <USBD_FS_ProductStrDescriptor+0x34>)
 800618a:	4808      	ldr	r0, [pc, #32]	; (80061ac <USBD_FS_ProductStrDescriptor+0x38>)
 800618c:	f7ff fed5 	bl	8005f3a <USBD_GetString>
 8006190:	e004      	b.n	800619c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006192:	683a      	ldr	r2, [r7, #0]
 8006194:	4904      	ldr	r1, [pc, #16]	; (80061a8 <USBD_FS_ProductStrDescriptor+0x34>)
 8006196:	4805      	ldr	r0, [pc, #20]	; (80061ac <USBD_FS_ProductStrDescriptor+0x38>)
 8006198:	f7ff fecf 	bl	8005f3a <USBD_GetString>
  }
  return USBD_StrDesc;
 800619c:	4b02      	ldr	r3, [pc, #8]	; (80061a8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800619e:	4618      	mov	r0, r3
 80061a0:	3708      	adds	r7, #8
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}
 80061a6:	bf00      	nop
 80061a8:	2000051c 	.word	0x2000051c
 80061ac:	08006b18 	.word	0x08006b18

080061b0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b082      	sub	sp, #8
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	4603      	mov	r3, r0
 80061b8:	6039      	str	r1, [r7, #0]
 80061ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80061bc:	683a      	ldr	r2, [r7, #0]
 80061be:	4904      	ldr	r1, [pc, #16]	; (80061d0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80061c0:	4804      	ldr	r0, [pc, #16]	; (80061d4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80061c2:	f7ff feba 	bl	8005f3a <USBD_GetString>
  return USBD_StrDesc;
 80061c6:	4b02      	ldr	r3, [pc, #8]	; (80061d0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	3708      	adds	r7, #8
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bd80      	pop	{r7, pc}
 80061d0:	2000051c 	.word	0x2000051c
 80061d4:	08006b30 	.word	0x08006b30

080061d8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b082      	sub	sp, #8
 80061dc:	af00      	add	r7, sp, #0
 80061de:	4603      	mov	r3, r0
 80061e0:	6039      	str	r1, [r7, #0]
 80061e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	221a      	movs	r2, #26
 80061e8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80061ea:	f000 f843 	bl	8006274 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80061ee:	4b02      	ldr	r3, [pc, #8]	; (80061f8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	3708      	adds	r7, #8
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bd80      	pop	{r7, pc}
 80061f8:	20000148 	.word	0x20000148

080061fc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b082      	sub	sp, #8
 8006200:	af00      	add	r7, sp, #0
 8006202:	4603      	mov	r3, r0
 8006204:	6039      	str	r1, [r7, #0]
 8006206:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006208:	79fb      	ldrb	r3, [r7, #7]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d105      	bne.n	800621a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800620e:	683a      	ldr	r2, [r7, #0]
 8006210:	4907      	ldr	r1, [pc, #28]	; (8006230 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006212:	4808      	ldr	r0, [pc, #32]	; (8006234 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006214:	f7ff fe91 	bl	8005f3a <USBD_GetString>
 8006218:	e004      	b.n	8006224 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800621a:	683a      	ldr	r2, [r7, #0]
 800621c:	4904      	ldr	r1, [pc, #16]	; (8006230 <USBD_FS_ConfigStrDescriptor+0x34>)
 800621e:	4805      	ldr	r0, [pc, #20]	; (8006234 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006220:	f7ff fe8b 	bl	8005f3a <USBD_GetString>
  }
  return USBD_StrDesc;
 8006224:	4b02      	ldr	r3, [pc, #8]	; (8006230 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006226:	4618      	mov	r0, r3
 8006228:	3708      	adds	r7, #8
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}
 800622e:	bf00      	nop
 8006230:	2000051c 	.word	0x2000051c
 8006234:	08006b44 	.word	0x08006b44

08006238 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b082      	sub	sp, #8
 800623c:	af00      	add	r7, sp, #0
 800623e:	4603      	mov	r3, r0
 8006240:	6039      	str	r1, [r7, #0]
 8006242:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006244:	79fb      	ldrb	r3, [r7, #7]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d105      	bne.n	8006256 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800624a:	683a      	ldr	r2, [r7, #0]
 800624c:	4907      	ldr	r1, [pc, #28]	; (800626c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800624e:	4808      	ldr	r0, [pc, #32]	; (8006270 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006250:	f7ff fe73 	bl	8005f3a <USBD_GetString>
 8006254:	e004      	b.n	8006260 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006256:	683a      	ldr	r2, [r7, #0]
 8006258:	4904      	ldr	r1, [pc, #16]	; (800626c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800625a:	4805      	ldr	r0, [pc, #20]	; (8006270 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800625c:	f7ff fe6d 	bl	8005f3a <USBD_GetString>
  }
  return USBD_StrDesc;
 8006260:	4b02      	ldr	r3, [pc, #8]	; (800626c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006262:	4618      	mov	r0, r3
 8006264:	3708      	adds	r7, #8
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}
 800626a:	bf00      	nop
 800626c:	2000051c 	.word	0x2000051c
 8006270:	08006b50 	.word	0x08006b50

08006274 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b084      	sub	sp, #16
 8006278:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800627a:	4b0f      	ldr	r3, [pc, #60]	; (80062b8 <Get_SerialNum+0x44>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006280:	4b0e      	ldr	r3, [pc, #56]	; (80062bc <Get_SerialNum+0x48>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006286:	4b0e      	ldr	r3, [pc, #56]	; (80062c0 <Get_SerialNum+0x4c>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800628c:	68fa      	ldr	r2, [r7, #12]
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	4413      	add	r3, r2
 8006292:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d009      	beq.n	80062ae <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800629a:	2208      	movs	r2, #8
 800629c:	4909      	ldr	r1, [pc, #36]	; (80062c4 <Get_SerialNum+0x50>)
 800629e:	68f8      	ldr	r0, [r7, #12]
 80062a0:	f000 f814 	bl	80062cc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80062a4:	2204      	movs	r2, #4
 80062a6:	4908      	ldr	r1, [pc, #32]	; (80062c8 <Get_SerialNum+0x54>)
 80062a8:	68b8      	ldr	r0, [r7, #8]
 80062aa:	f000 f80f 	bl	80062cc <IntToUnicode>
  }
}
 80062ae:	bf00      	nop
 80062b0:	3710      	adds	r7, #16
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bd80      	pop	{r7, pc}
 80062b6:	bf00      	nop
 80062b8:	1fff7a10 	.word	0x1fff7a10
 80062bc:	1fff7a14 	.word	0x1fff7a14
 80062c0:	1fff7a18 	.word	0x1fff7a18
 80062c4:	2000014a 	.word	0x2000014a
 80062c8:	2000015a 	.word	0x2000015a

080062cc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80062cc:	b480      	push	{r7}
 80062ce:	b087      	sub	sp, #28
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	60f8      	str	r0, [r7, #12]
 80062d4:	60b9      	str	r1, [r7, #8]
 80062d6:	4613      	mov	r3, r2
 80062d8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80062da:	2300      	movs	r3, #0
 80062dc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80062de:	2300      	movs	r3, #0
 80062e0:	75fb      	strb	r3, [r7, #23]
 80062e2:	e027      	b.n	8006334 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	0f1b      	lsrs	r3, r3, #28
 80062e8:	2b09      	cmp	r3, #9
 80062ea:	d80b      	bhi.n	8006304 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	0f1b      	lsrs	r3, r3, #28
 80062f0:	b2da      	uxtb	r2, r3
 80062f2:	7dfb      	ldrb	r3, [r7, #23]
 80062f4:	005b      	lsls	r3, r3, #1
 80062f6:	4619      	mov	r1, r3
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	440b      	add	r3, r1
 80062fc:	3230      	adds	r2, #48	; 0x30
 80062fe:	b2d2      	uxtb	r2, r2
 8006300:	701a      	strb	r2, [r3, #0]
 8006302:	e00a      	b.n	800631a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	0f1b      	lsrs	r3, r3, #28
 8006308:	b2da      	uxtb	r2, r3
 800630a:	7dfb      	ldrb	r3, [r7, #23]
 800630c:	005b      	lsls	r3, r3, #1
 800630e:	4619      	mov	r1, r3
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	440b      	add	r3, r1
 8006314:	3237      	adds	r2, #55	; 0x37
 8006316:	b2d2      	uxtb	r2, r2
 8006318:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	011b      	lsls	r3, r3, #4
 800631e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006320:	7dfb      	ldrb	r3, [r7, #23]
 8006322:	005b      	lsls	r3, r3, #1
 8006324:	3301      	adds	r3, #1
 8006326:	68ba      	ldr	r2, [r7, #8]
 8006328:	4413      	add	r3, r2
 800632a:	2200      	movs	r2, #0
 800632c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800632e:	7dfb      	ldrb	r3, [r7, #23]
 8006330:	3301      	adds	r3, #1
 8006332:	75fb      	strb	r3, [r7, #23]
 8006334:	7dfa      	ldrb	r2, [r7, #23]
 8006336:	79fb      	ldrb	r3, [r7, #7]
 8006338:	429a      	cmp	r2, r3
 800633a:	d3d3      	bcc.n	80062e4 <IntToUnicode+0x18>
  }
}
 800633c:	bf00      	nop
 800633e:	371c      	adds	r7, #28
 8006340:	46bd      	mov	sp, r7
 8006342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006346:	4770      	bx	lr

08006348 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b08a      	sub	sp, #40	; 0x28
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006350:	f107 0314 	add.w	r3, r7, #20
 8006354:	2200      	movs	r2, #0
 8006356:	601a      	str	r2, [r3, #0]
 8006358:	605a      	str	r2, [r3, #4]
 800635a:	609a      	str	r2, [r3, #8]
 800635c:	60da      	str	r2, [r3, #12]
 800635e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006368:	d13a      	bne.n	80063e0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800636a:	2300      	movs	r3, #0
 800636c:	613b      	str	r3, [r7, #16]
 800636e:	4b1e      	ldr	r3, [pc, #120]	; (80063e8 <HAL_PCD_MspInit+0xa0>)
 8006370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006372:	4a1d      	ldr	r2, [pc, #116]	; (80063e8 <HAL_PCD_MspInit+0xa0>)
 8006374:	f043 0301 	orr.w	r3, r3, #1
 8006378:	6313      	str	r3, [r2, #48]	; 0x30
 800637a:	4b1b      	ldr	r3, [pc, #108]	; (80063e8 <HAL_PCD_MspInit+0xa0>)
 800637c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800637e:	f003 0301 	and.w	r3, r3, #1
 8006382:	613b      	str	r3, [r7, #16]
 8006384:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006386:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800638a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800638c:	2302      	movs	r3, #2
 800638e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006390:	2300      	movs	r3, #0
 8006392:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006394:	2303      	movs	r3, #3
 8006396:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006398:	230a      	movs	r3, #10
 800639a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800639c:	f107 0314 	add.w	r3, r7, #20
 80063a0:	4619      	mov	r1, r3
 80063a2:	4812      	ldr	r0, [pc, #72]	; (80063ec <HAL_PCD_MspInit+0xa4>)
 80063a4:	f7fb f998 	bl	80016d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80063a8:	4b0f      	ldr	r3, [pc, #60]	; (80063e8 <HAL_PCD_MspInit+0xa0>)
 80063aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063ac:	4a0e      	ldr	r2, [pc, #56]	; (80063e8 <HAL_PCD_MspInit+0xa0>)
 80063ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063b2:	6353      	str	r3, [r2, #52]	; 0x34
 80063b4:	2300      	movs	r3, #0
 80063b6:	60fb      	str	r3, [r7, #12]
 80063b8:	4b0b      	ldr	r3, [pc, #44]	; (80063e8 <HAL_PCD_MspInit+0xa0>)
 80063ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063bc:	4a0a      	ldr	r2, [pc, #40]	; (80063e8 <HAL_PCD_MspInit+0xa0>)
 80063be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80063c2:	6453      	str	r3, [r2, #68]	; 0x44
 80063c4:	4b08      	ldr	r3, [pc, #32]	; (80063e8 <HAL_PCD_MspInit+0xa0>)
 80063c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80063cc:	60fb      	str	r3, [r7, #12]
 80063ce:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80063d0:	2200      	movs	r2, #0
 80063d2:	2100      	movs	r1, #0
 80063d4:	2043      	movs	r0, #67	; 0x43
 80063d6:	f7fb f948 	bl	800166a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80063da:	2043      	movs	r0, #67	; 0x43
 80063dc:	f7fb f961 	bl	80016a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80063e0:	bf00      	nop
 80063e2:	3728      	adds	r7, #40	; 0x28
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}
 80063e8:	40023800 	.word	0x40023800
 80063ec:	40020000 	.word	0x40020000

080063f0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b082      	sub	sp, #8
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006404:	4619      	mov	r1, r3
 8006406:	4610      	mov	r0, r2
 8006408:	f7fe fe14 	bl	8005034 <USBD_LL_SetupStage>
}
 800640c:	bf00      	nop
 800640e:	3708      	adds	r7, #8
 8006410:	46bd      	mov	sp, r7
 8006412:	bd80      	pop	{r7, pc}

08006414 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b082      	sub	sp, #8
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
 800641c:	460b      	mov	r3, r1
 800641e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8006426:	78fa      	ldrb	r2, [r7, #3]
 8006428:	6879      	ldr	r1, [r7, #4]
 800642a:	4613      	mov	r3, r2
 800642c:	00db      	lsls	r3, r3, #3
 800642e:	1a9b      	subs	r3, r3, r2
 8006430:	009b      	lsls	r3, r3, #2
 8006432:	440b      	add	r3, r1
 8006434:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006438:	681a      	ldr	r2, [r3, #0]
 800643a:	78fb      	ldrb	r3, [r7, #3]
 800643c:	4619      	mov	r1, r3
 800643e:	f7fe fe4c 	bl	80050da <USBD_LL_DataOutStage>
}
 8006442:	bf00      	nop
 8006444:	3708      	adds	r7, #8
 8006446:	46bd      	mov	sp, r7
 8006448:	bd80      	pop	{r7, pc}

0800644a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800644a:	b580      	push	{r7, lr}
 800644c:	b082      	sub	sp, #8
 800644e:	af00      	add	r7, sp, #0
 8006450:	6078      	str	r0, [r7, #4]
 8006452:	460b      	mov	r3, r1
 8006454:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800645c:	78fa      	ldrb	r2, [r7, #3]
 800645e:	6879      	ldr	r1, [r7, #4]
 8006460:	4613      	mov	r3, r2
 8006462:	00db      	lsls	r3, r3, #3
 8006464:	1a9b      	subs	r3, r3, r2
 8006466:	009b      	lsls	r3, r3, #2
 8006468:	440b      	add	r3, r1
 800646a:	3348      	adds	r3, #72	; 0x48
 800646c:	681a      	ldr	r2, [r3, #0]
 800646e:	78fb      	ldrb	r3, [r7, #3]
 8006470:	4619      	mov	r1, r3
 8006472:	f7fe fe95 	bl	80051a0 <USBD_LL_DataInStage>
}
 8006476:	bf00      	nop
 8006478:	3708      	adds	r7, #8
 800647a:	46bd      	mov	sp, r7
 800647c:	bd80      	pop	{r7, pc}

0800647e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800647e:	b580      	push	{r7, lr}
 8006480:	b082      	sub	sp, #8
 8006482:	af00      	add	r7, sp, #0
 8006484:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800648c:	4618      	mov	r0, r3
 800648e:	f7fe ff99 	bl	80053c4 <USBD_LL_SOF>
}
 8006492:	bf00      	nop
 8006494:	3708      	adds	r7, #8
 8006496:	46bd      	mov	sp, r7
 8006498:	bd80      	pop	{r7, pc}

0800649a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800649a:	b580      	push	{r7, lr}
 800649c:	b084      	sub	sp, #16
 800649e:	af00      	add	r7, sp, #0
 80064a0:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80064a2:	2301      	movs	r3, #1
 80064a4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	68db      	ldr	r3, [r3, #12]
 80064aa:	2b02      	cmp	r3, #2
 80064ac:	d001      	beq.n	80064b2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80064ae:	f7fa fc8f 	bl	8000dd0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80064b8:	7bfa      	ldrb	r2, [r7, #15]
 80064ba:	4611      	mov	r1, r2
 80064bc:	4618      	mov	r0, r3
 80064be:	f7fe ff46 	bl	800534e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80064c8:	4618      	mov	r0, r3
 80064ca:	f7fe feff 	bl	80052cc <USBD_LL_Reset>
}
 80064ce:	bf00      	nop
 80064d0:	3710      	adds	r7, #16
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}
	...

080064d8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b082      	sub	sp, #8
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80064e6:	4618      	mov	r0, r3
 80064e8:	f7fe ff41 	bl	800536e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	687a      	ldr	r2, [r7, #4]
 80064f8:	6812      	ldr	r2, [r2, #0]
 80064fa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80064fe:	f043 0301 	orr.w	r3, r3, #1
 8006502:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6a1b      	ldr	r3, [r3, #32]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d005      	beq.n	8006518 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800650c:	4b04      	ldr	r3, [pc, #16]	; (8006520 <HAL_PCD_SuspendCallback+0x48>)
 800650e:	691b      	ldr	r3, [r3, #16]
 8006510:	4a03      	ldr	r2, [pc, #12]	; (8006520 <HAL_PCD_SuspendCallback+0x48>)
 8006512:	f043 0306 	orr.w	r3, r3, #6
 8006516:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006518:	bf00      	nop
 800651a:	3708      	adds	r7, #8
 800651c:	46bd      	mov	sp, r7
 800651e:	bd80      	pop	{r7, pc}
 8006520:	e000ed00 	.word	0xe000ed00

08006524 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b082      	sub	sp, #8
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006532:	4618      	mov	r0, r3
 8006534:	f7fe ff30 	bl	8005398 <USBD_LL_Resume>
}
 8006538:	bf00      	nop
 800653a:	3708      	adds	r7, #8
 800653c:	46bd      	mov	sp, r7
 800653e:	bd80      	pop	{r7, pc}

08006540 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b082      	sub	sp, #8
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
 8006548:	460b      	mov	r3, r1
 800654a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006552:	78fa      	ldrb	r2, [r7, #3]
 8006554:	4611      	mov	r1, r2
 8006556:	4618      	mov	r0, r3
 8006558:	f7fe ff5b 	bl	8005412 <USBD_LL_IsoOUTIncomplete>
}
 800655c:	bf00      	nop
 800655e:	3708      	adds	r7, #8
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}

08006564 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b082      	sub	sp, #8
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
 800656c:	460b      	mov	r3, r1
 800656e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006576:	78fa      	ldrb	r2, [r7, #3]
 8006578:	4611      	mov	r1, r2
 800657a:	4618      	mov	r0, r3
 800657c:	f7fe ff3c 	bl	80053f8 <USBD_LL_IsoINIncomplete>
}
 8006580:	bf00      	nop
 8006582:	3708      	adds	r7, #8
 8006584:	46bd      	mov	sp, r7
 8006586:	bd80      	pop	{r7, pc}

08006588 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b082      	sub	sp, #8
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006596:	4618      	mov	r0, r3
 8006598:	f7fe ff48 	bl	800542c <USBD_LL_DevConnected>
}
 800659c:	bf00      	nop
 800659e:	3708      	adds	r7, #8
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bd80      	pop	{r7, pc}

080065a4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b082      	sub	sp, #8
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80065b2:	4618      	mov	r0, r3
 80065b4:	f7fe ff45 	bl	8005442 <USBD_LL_DevDisconnected>
}
 80065b8:	bf00      	nop
 80065ba:	3708      	adds	r7, #8
 80065bc:	46bd      	mov	sp, r7
 80065be:	bd80      	pop	{r7, pc}

080065c0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b082      	sub	sp, #8
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	781b      	ldrb	r3, [r3, #0]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d13c      	bne.n	800664a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80065d0:	4a20      	ldr	r2, [pc, #128]	; (8006654 <USBD_LL_Init+0x94>)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	4a1e      	ldr	r2, [pc, #120]	; (8006654 <USBD_LL_Init+0x94>)
 80065dc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80065e0:	4b1c      	ldr	r3, [pc, #112]	; (8006654 <USBD_LL_Init+0x94>)
 80065e2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80065e6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80065e8:	4b1a      	ldr	r3, [pc, #104]	; (8006654 <USBD_LL_Init+0x94>)
 80065ea:	2204      	movs	r2, #4
 80065ec:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80065ee:	4b19      	ldr	r3, [pc, #100]	; (8006654 <USBD_LL_Init+0x94>)
 80065f0:	2202      	movs	r2, #2
 80065f2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80065f4:	4b17      	ldr	r3, [pc, #92]	; (8006654 <USBD_LL_Init+0x94>)
 80065f6:	2200      	movs	r2, #0
 80065f8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80065fa:	4b16      	ldr	r3, [pc, #88]	; (8006654 <USBD_LL_Init+0x94>)
 80065fc:	2202      	movs	r2, #2
 80065fe:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006600:	4b14      	ldr	r3, [pc, #80]	; (8006654 <USBD_LL_Init+0x94>)
 8006602:	2200      	movs	r2, #0
 8006604:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8006606:	4b13      	ldr	r3, [pc, #76]	; (8006654 <USBD_LL_Init+0x94>)
 8006608:	2200      	movs	r2, #0
 800660a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800660c:	4b11      	ldr	r3, [pc, #68]	; (8006654 <USBD_LL_Init+0x94>)
 800660e:	2200      	movs	r2, #0
 8006610:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8006612:	4b10      	ldr	r3, [pc, #64]	; (8006654 <USBD_LL_Init+0x94>)
 8006614:	2200      	movs	r2, #0
 8006616:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006618:	4b0e      	ldr	r3, [pc, #56]	; (8006654 <USBD_LL_Init+0x94>)
 800661a:	2200      	movs	r2, #0
 800661c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800661e:	480d      	ldr	r0, [pc, #52]	; (8006654 <USBD_LL_Init+0x94>)
 8006620:	f7fb fa0d 	bl	8001a3e <HAL_PCD_Init>
 8006624:	4603      	mov	r3, r0
 8006626:	2b00      	cmp	r3, #0
 8006628:	d001      	beq.n	800662e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800662a:	f7fa fbd1 	bl	8000dd0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800662e:	2180      	movs	r1, #128	; 0x80
 8006630:	4808      	ldr	r0, [pc, #32]	; (8006654 <USBD_LL_Init+0x94>)
 8006632:	f7fc fb52 	bl	8002cda <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8006636:	2240      	movs	r2, #64	; 0x40
 8006638:	2100      	movs	r1, #0
 800663a:	4806      	ldr	r0, [pc, #24]	; (8006654 <USBD_LL_Init+0x94>)
 800663c:	f7fc fb06 	bl	8002c4c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006640:	2280      	movs	r2, #128	; 0x80
 8006642:	2101      	movs	r1, #1
 8006644:	4803      	ldr	r0, [pc, #12]	; (8006654 <USBD_LL_Init+0x94>)
 8006646:	f7fc fb01 	bl	8002c4c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800664a:	2300      	movs	r3, #0
}
 800664c:	4618      	mov	r0, r3
 800664e:	3708      	adds	r7, #8
 8006650:	46bd      	mov	sp, r7
 8006652:	bd80      	pop	{r7, pc}
 8006654:	2000071c 	.word	0x2000071c

08006658 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b084      	sub	sp, #16
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006660:	2300      	movs	r3, #0
 8006662:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006664:	2300      	movs	r3, #0
 8006666:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800666e:	4618      	mov	r0, r3
 8006670:	f7fb fb02 	bl	8001c78 <HAL_PCD_Start>
 8006674:	4603      	mov	r3, r0
 8006676:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 8006678:	7bfb      	ldrb	r3, [r7, #15]
 800667a:	4618      	mov	r0, r3
 800667c:	f000 f918 	bl	80068b0 <USBD_Get_USB_Status>
 8006680:	4603      	mov	r3, r0
 8006682:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8006684:	7bbb      	ldrb	r3, [r7, #14]
}
 8006686:	4618      	mov	r0, r3
 8006688:	3710      	adds	r7, #16
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}

0800668e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800668e:	b580      	push	{r7, lr}
 8006690:	b084      	sub	sp, #16
 8006692:	af00      	add	r7, sp, #0
 8006694:	6078      	str	r0, [r7, #4]
 8006696:	4608      	mov	r0, r1
 8006698:	4611      	mov	r1, r2
 800669a:	461a      	mov	r2, r3
 800669c:	4603      	mov	r3, r0
 800669e:	70fb      	strb	r3, [r7, #3]
 80066a0:	460b      	mov	r3, r1
 80066a2:	70bb      	strb	r3, [r7, #2]
 80066a4:	4613      	mov	r3, r2
 80066a6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80066a8:	2300      	movs	r3, #0
 80066aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80066ac:	2300      	movs	r3, #0
 80066ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80066b6:	78bb      	ldrb	r3, [r7, #2]
 80066b8:	883a      	ldrh	r2, [r7, #0]
 80066ba:	78f9      	ldrb	r1, [r7, #3]
 80066bc:	f7fb fee6 	bl	800248c <HAL_PCD_EP_Open>
 80066c0:	4603      	mov	r3, r0
 80066c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80066c4:	7bfb      	ldrb	r3, [r7, #15]
 80066c6:	4618      	mov	r0, r3
 80066c8:	f000 f8f2 	bl	80068b0 <USBD_Get_USB_Status>
 80066cc:	4603      	mov	r3, r0
 80066ce:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80066d0:	7bbb      	ldrb	r3, [r7, #14]
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	3710      	adds	r7, #16
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}

080066da <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80066da:	b580      	push	{r7, lr}
 80066dc:	b084      	sub	sp, #16
 80066de:	af00      	add	r7, sp, #0
 80066e0:	6078      	str	r0, [r7, #4]
 80066e2:	460b      	mov	r3, r1
 80066e4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80066e6:	2300      	movs	r3, #0
 80066e8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80066ea:	2300      	movs	r3, #0
 80066ec:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80066f4:	78fa      	ldrb	r2, [r7, #3]
 80066f6:	4611      	mov	r1, r2
 80066f8:	4618      	mov	r0, r3
 80066fa:	f7fb ff2f 	bl	800255c <HAL_PCD_EP_Close>
 80066fe:	4603      	mov	r3, r0
 8006700:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 8006702:	7bfb      	ldrb	r3, [r7, #15]
 8006704:	4618      	mov	r0, r3
 8006706:	f000 f8d3 	bl	80068b0 <USBD_Get_USB_Status>
 800670a:	4603      	mov	r3, r0
 800670c:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800670e:	7bbb      	ldrb	r3, [r7, #14]
}
 8006710:	4618      	mov	r0, r3
 8006712:	3710      	adds	r7, #16
 8006714:	46bd      	mov	sp, r7
 8006716:	bd80      	pop	{r7, pc}

08006718 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b084      	sub	sp, #16
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
 8006720:	460b      	mov	r3, r1
 8006722:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006724:	2300      	movs	r3, #0
 8006726:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006728:	2300      	movs	r3, #0
 800672a:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006732:	78fa      	ldrb	r2, [r7, #3]
 8006734:	4611      	mov	r1, r2
 8006736:	4618      	mov	r0, r3
 8006738:	f7fb ffef 	bl	800271a <HAL_PCD_EP_SetStall>
 800673c:	4603      	mov	r3, r0
 800673e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006740:	7bfb      	ldrb	r3, [r7, #15]
 8006742:	4618      	mov	r0, r3
 8006744:	f000 f8b4 	bl	80068b0 <USBD_Get_USB_Status>
 8006748:	4603      	mov	r3, r0
 800674a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 800674c:	7bbb      	ldrb	r3, [r7, #14]
}
 800674e:	4618      	mov	r0, r3
 8006750:	3710      	adds	r7, #16
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}

08006756 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006756:	b580      	push	{r7, lr}
 8006758:	b084      	sub	sp, #16
 800675a:	af00      	add	r7, sp, #0
 800675c:	6078      	str	r0, [r7, #4]
 800675e:	460b      	mov	r3, r1
 8006760:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006762:	2300      	movs	r3, #0
 8006764:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006766:	2300      	movs	r3, #0
 8006768:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006770:	78fa      	ldrb	r2, [r7, #3]
 8006772:	4611      	mov	r1, r2
 8006774:	4618      	mov	r0, r3
 8006776:	f7fc f834 	bl	80027e2 <HAL_PCD_EP_ClrStall>
 800677a:	4603      	mov	r3, r0
 800677c:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 800677e:	7bfb      	ldrb	r3, [r7, #15]
 8006780:	4618      	mov	r0, r3
 8006782:	f000 f895 	bl	80068b0 <USBD_Get_USB_Status>
 8006786:	4603      	mov	r3, r0
 8006788:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 800678a:	7bbb      	ldrb	r3, [r7, #14]
}
 800678c:	4618      	mov	r0, r3
 800678e:	3710      	adds	r7, #16
 8006790:	46bd      	mov	sp, r7
 8006792:	bd80      	pop	{r7, pc}

08006794 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006794:	b480      	push	{r7}
 8006796:	b085      	sub	sp, #20
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
 800679c:	460b      	mov	r3, r1
 800679e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80067a6:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 80067a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	da0b      	bge.n	80067c8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 80067b0:	78fb      	ldrb	r3, [r7, #3]
 80067b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80067b6:	68f9      	ldr	r1, [r7, #12]
 80067b8:	4613      	mov	r3, r2
 80067ba:	00db      	lsls	r3, r3, #3
 80067bc:	1a9b      	subs	r3, r3, r2
 80067be:	009b      	lsls	r3, r3, #2
 80067c0:	440b      	add	r3, r1
 80067c2:	333e      	adds	r3, #62	; 0x3e
 80067c4:	781b      	ldrb	r3, [r3, #0]
 80067c6:	e00b      	b.n	80067e0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 80067c8:	78fb      	ldrb	r3, [r7, #3]
 80067ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80067ce:	68f9      	ldr	r1, [r7, #12]
 80067d0:	4613      	mov	r3, r2
 80067d2:	00db      	lsls	r3, r3, #3
 80067d4:	1a9b      	subs	r3, r3, r2
 80067d6:	009b      	lsls	r3, r3, #2
 80067d8:	440b      	add	r3, r1
 80067da:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80067de:	781b      	ldrb	r3, [r3, #0]
  }
}
 80067e0:	4618      	mov	r0, r3
 80067e2:	3714      	adds	r7, #20
 80067e4:	46bd      	mov	sp, r7
 80067e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ea:	4770      	bx	lr

080067ec <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b084      	sub	sp, #16
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
 80067f4:	460b      	mov	r3, r1
 80067f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80067f8:	2300      	movs	r3, #0
 80067fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80067fc:	2300      	movs	r3, #0
 80067fe:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006806:	78fa      	ldrb	r2, [r7, #3]
 8006808:	4611      	mov	r1, r2
 800680a:	4618      	mov	r0, r3
 800680c:	f7fb fe19 	bl	8002442 <HAL_PCD_SetAddress>
 8006810:	4603      	mov	r3, r0
 8006812:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006814:	7bfb      	ldrb	r3, [r7, #15]
 8006816:	4618      	mov	r0, r3
 8006818:	f000 f84a 	bl	80068b0 <USBD_Get_USB_Status>
 800681c:	4603      	mov	r3, r0
 800681e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8006820:	7bbb      	ldrb	r3, [r7, #14]
}
 8006822:	4618      	mov	r0, r3
 8006824:	3710      	adds	r7, #16
 8006826:	46bd      	mov	sp, r7
 8006828:	bd80      	pop	{r7, pc}

0800682a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800682a:	b580      	push	{r7, lr}
 800682c:	b086      	sub	sp, #24
 800682e:	af00      	add	r7, sp, #0
 8006830:	60f8      	str	r0, [r7, #12]
 8006832:	607a      	str	r2, [r7, #4]
 8006834:	603b      	str	r3, [r7, #0]
 8006836:	460b      	mov	r3, r1
 8006838:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800683a:	2300      	movs	r3, #0
 800683c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800683e:	2300      	movs	r3, #0
 8006840:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006848:	7af9      	ldrb	r1, [r7, #11]
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	687a      	ldr	r2, [r7, #4]
 800684e:	f7fb ff1a 	bl	8002686 <HAL_PCD_EP_Transmit>
 8006852:	4603      	mov	r3, r0
 8006854:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 8006856:	7dfb      	ldrb	r3, [r7, #23]
 8006858:	4618      	mov	r0, r3
 800685a:	f000 f829 	bl	80068b0 <USBD_Get_USB_Status>
 800685e:	4603      	mov	r3, r0
 8006860:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8006862:	7dbb      	ldrb	r3, [r7, #22]
}
 8006864:	4618      	mov	r0, r3
 8006866:	3718      	adds	r7, #24
 8006868:	46bd      	mov	sp, r7
 800686a:	bd80      	pop	{r7, pc}

0800686c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b086      	sub	sp, #24
 8006870:	af00      	add	r7, sp, #0
 8006872:	60f8      	str	r0, [r7, #12]
 8006874:	607a      	str	r2, [r7, #4]
 8006876:	603b      	str	r3, [r7, #0]
 8006878:	460b      	mov	r3, r1
 800687a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800687c:	2300      	movs	r3, #0
 800687e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006880:	2300      	movs	r3, #0
 8006882:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800688a:	7af9      	ldrb	r1, [r7, #11]
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	687a      	ldr	r2, [r7, #4]
 8006890:	f7fb feae 	bl	80025f0 <HAL_PCD_EP_Receive>
 8006894:	4603      	mov	r3, r0
 8006896:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 8006898:	7dfb      	ldrb	r3, [r7, #23]
 800689a:	4618      	mov	r0, r3
 800689c:	f000 f808 	bl	80068b0 <USBD_Get_USB_Status>
 80068a0:	4603      	mov	r3, r0
 80068a2:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 80068a4:	7dbb      	ldrb	r3, [r7, #22]
}
 80068a6:	4618      	mov	r0, r3
 80068a8:	3718      	adds	r7, #24
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bd80      	pop	{r7, pc}
	...

080068b0 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80068b0:	b480      	push	{r7}
 80068b2:	b085      	sub	sp, #20
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	4603      	mov	r3, r0
 80068b8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80068ba:	2300      	movs	r3, #0
 80068bc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80068be:	79fb      	ldrb	r3, [r7, #7]
 80068c0:	2b03      	cmp	r3, #3
 80068c2:	d817      	bhi.n	80068f4 <USBD_Get_USB_Status+0x44>
 80068c4:	a201      	add	r2, pc, #4	; (adr r2, 80068cc <USBD_Get_USB_Status+0x1c>)
 80068c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068ca:	bf00      	nop
 80068cc:	080068dd 	.word	0x080068dd
 80068d0:	080068e3 	.word	0x080068e3
 80068d4:	080068e9 	.word	0x080068e9
 80068d8:	080068ef 	.word	0x080068ef
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80068dc:	2300      	movs	r3, #0
 80068de:	73fb      	strb	r3, [r7, #15]
    break;
 80068e0:	e00b      	b.n	80068fa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80068e2:	2303      	movs	r3, #3
 80068e4:	73fb      	strb	r3, [r7, #15]
    break;
 80068e6:	e008      	b.n	80068fa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80068e8:	2301      	movs	r3, #1
 80068ea:	73fb      	strb	r3, [r7, #15]
    break;
 80068ec:	e005      	b.n	80068fa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80068ee:	2303      	movs	r3, #3
 80068f0:	73fb      	strb	r3, [r7, #15]
    break;
 80068f2:	e002      	b.n	80068fa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80068f4:	2303      	movs	r3, #3
 80068f6:	73fb      	strb	r3, [r7, #15]
    break;
 80068f8:	bf00      	nop
  }
  return usb_status;
 80068fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80068fc:	4618      	mov	r0, r3
 80068fe:	3714      	adds	r7, #20
 8006900:	46bd      	mov	sp, r7
 8006902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006906:	4770      	bx	lr

08006908 <__errno>:
 8006908:	4b01      	ldr	r3, [pc, #4]	; (8006910 <__errno+0x8>)
 800690a:	6818      	ldr	r0, [r3, #0]
 800690c:	4770      	bx	lr
 800690e:	bf00      	nop
 8006910:	20000164 	.word	0x20000164

08006914 <__libc_init_array>:
 8006914:	b570      	push	{r4, r5, r6, lr}
 8006916:	4e0d      	ldr	r6, [pc, #52]	; (800694c <__libc_init_array+0x38>)
 8006918:	4c0d      	ldr	r4, [pc, #52]	; (8006950 <__libc_init_array+0x3c>)
 800691a:	1ba4      	subs	r4, r4, r6
 800691c:	10a4      	asrs	r4, r4, #2
 800691e:	2500      	movs	r5, #0
 8006920:	42a5      	cmp	r5, r4
 8006922:	d109      	bne.n	8006938 <__libc_init_array+0x24>
 8006924:	4e0b      	ldr	r6, [pc, #44]	; (8006954 <__libc_init_array+0x40>)
 8006926:	4c0c      	ldr	r4, [pc, #48]	; (8006958 <__libc_init_array+0x44>)
 8006928:	f000 f8ea 	bl	8006b00 <_init>
 800692c:	1ba4      	subs	r4, r4, r6
 800692e:	10a4      	asrs	r4, r4, #2
 8006930:	2500      	movs	r5, #0
 8006932:	42a5      	cmp	r5, r4
 8006934:	d105      	bne.n	8006942 <__libc_init_array+0x2e>
 8006936:	bd70      	pop	{r4, r5, r6, pc}
 8006938:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800693c:	4798      	blx	r3
 800693e:	3501      	adds	r5, #1
 8006940:	e7ee      	b.n	8006920 <__libc_init_array+0xc>
 8006942:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006946:	4798      	blx	r3
 8006948:	3501      	adds	r5, #1
 800694a:	e7f2      	b.n	8006932 <__libc_init_array+0x1e>
 800694c:	08006c44 	.word	0x08006c44
 8006950:	08006c44 	.word	0x08006c44
 8006954:	08006c44 	.word	0x08006c44
 8006958:	08006c48 	.word	0x08006c48

0800695c <malloc>:
 800695c:	4b02      	ldr	r3, [pc, #8]	; (8006968 <malloc+0xc>)
 800695e:	4601      	mov	r1, r0
 8006960:	6818      	ldr	r0, [r3, #0]
 8006962:	f000 b861 	b.w	8006a28 <_malloc_r>
 8006966:	bf00      	nop
 8006968:	20000164 	.word	0x20000164

0800696c <free>:
 800696c:	4b02      	ldr	r3, [pc, #8]	; (8006978 <free+0xc>)
 800696e:	4601      	mov	r1, r0
 8006970:	6818      	ldr	r0, [r3, #0]
 8006972:	f000 b80b 	b.w	800698c <_free_r>
 8006976:	bf00      	nop
 8006978:	20000164 	.word	0x20000164

0800697c <memset>:
 800697c:	4402      	add	r2, r0
 800697e:	4603      	mov	r3, r0
 8006980:	4293      	cmp	r3, r2
 8006982:	d100      	bne.n	8006986 <memset+0xa>
 8006984:	4770      	bx	lr
 8006986:	f803 1b01 	strb.w	r1, [r3], #1
 800698a:	e7f9      	b.n	8006980 <memset+0x4>

0800698c <_free_r>:
 800698c:	b538      	push	{r3, r4, r5, lr}
 800698e:	4605      	mov	r5, r0
 8006990:	2900      	cmp	r1, #0
 8006992:	d045      	beq.n	8006a20 <_free_r+0x94>
 8006994:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006998:	1f0c      	subs	r4, r1, #4
 800699a:	2b00      	cmp	r3, #0
 800699c:	bfb8      	it	lt
 800699e:	18e4      	addlt	r4, r4, r3
 80069a0:	f000 f8ac 	bl	8006afc <__malloc_lock>
 80069a4:	4a1f      	ldr	r2, [pc, #124]	; (8006a24 <_free_r+0x98>)
 80069a6:	6813      	ldr	r3, [r2, #0]
 80069a8:	4610      	mov	r0, r2
 80069aa:	b933      	cbnz	r3, 80069ba <_free_r+0x2e>
 80069ac:	6063      	str	r3, [r4, #4]
 80069ae:	6014      	str	r4, [r2, #0]
 80069b0:	4628      	mov	r0, r5
 80069b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80069b6:	f000 b8a2 	b.w	8006afe <__malloc_unlock>
 80069ba:	42a3      	cmp	r3, r4
 80069bc:	d90c      	bls.n	80069d8 <_free_r+0x4c>
 80069be:	6821      	ldr	r1, [r4, #0]
 80069c0:	1862      	adds	r2, r4, r1
 80069c2:	4293      	cmp	r3, r2
 80069c4:	bf04      	itt	eq
 80069c6:	681a      	ldreq	r2, [r3, #0]
 80069c8:	685b      	ldreq	r3, [r3, #4]
 80069ca:	6063      	str	r3, [r4, #4]
 80069cc:	bf04      	itt	eq
 80069ce:	1852      	addeq	r2, r2, r1
 80069d0:	6022      	streq	r2, [r4, #0]
 80069d2:	6004      	str	r4, [r0, #0]
 80069d4:	e7ec      	b.n	80069b0 <_free_r+0x24>
 80069d6:	4613      	mov	r3, r2
 80069d8:	685a      	ldr	r2, [r3, #4]
 80069da:	b10a      	cbz	r2, 80069e0 <_free_r+0x54>
 80069dc:	42a2      	cmp	r2, r4
 80069de:	d9fa      	bls.n	80069d6 <_free_r+0x4a>
 80069e0:	6819      	ldr	r1, [r3, #0]
 80069e2:	1858      	adds	r0, r3, r1
 80069e4:	42a0      	cmp	r0, r4
 80069e6:	d10b      	bne.n	8006a00 <_free_r+0x74>
 80069e8:	6820      	ldr	r0, [r4, #0]
 80069ea:	4401      	add	r1, r0
 80069ec:	1858      	adds	r0, r3, r1
 80069ee:	4282      	cmp	r2, r0
 80069f0:	6019      	str	r1, [r3, #0]
 80069f2:	d1dd      	bne.n	80069b0 <_free_r+0x24>
 80069f4:	6810      	ldr	r0, [r2, #0]
 80069f6:	6852      	ldr	r2, [r2, #4]
 80069f8:	605a      	str	r2, [r3, #4]
 80069fa:	4401      	add	r1, r0
 80069fc:	6019      	str	r1, [r3, #0]
 80069fe:	e7d7      	b.n	80069b0 <_free_r+0x24>
 8006a00:	d902      	bls.n	8006a08 <_free_r+0x7c>
 8006a02:	230c      	movs	r3, #12
 8006a04:	602b      	str	r3, [r5, #0]
 8006a06:	e7d3      	b.n	80069b0 <_free_r+0x24>
 8006a08:	6820      	ldr	r0, [r4, #0]
 8006a0a:	1821      	adds	r1, r4, r0
 8006a0c:	428a      	cmp	r2, r1
 8006a0e:	bf04      	itt	eq
 8006a10:	6811      	ldreq	r1, [r2, #0]
 8006a12:	6852      	ldreq	r2, [r2, #4]
 8006a14:	6062      	str	r2, [r4, #4]
 8006a16:	bf04      	itt	eq
 8006a18:	1809      	addeq	r1, r1, r0
 8006a1a:	6021      	streq	r1, [r4, #0]
 8006a1c:	605c      	str	r4, [r3, #4]
 8006a1e:	e7c7      	b.n	80069b0 <_free_r+0x24>
 8006a20:	bd38      	pop	{r3, r4, r5, pc}
 8006a22:	bf00      	nop
 8006a24:	20000240 	.word	0x20000240

08006a28 <_malloc_r>:
 8006a28:	b570      	push	{r4, r5, r6, lr}
 8006a2a:	1ccd      	adds	r5, r1, #3
 8006a2c:	f025 0503 	bic.w	r5, r5, #3
 8006a30:	3508      	adds	r5, #8
 8006a32:	2d0c      	cmp	r5, #12
 8006a34:	bf38      	it	cc
 8006a36:	250c      	movcc	r5, #12
 8006a38:	2d00      	cmp	r5, #0
 8006a3a:	4606      	mov	r6, r0
 8006a3c:	db01      	blt.n	8006a42 <_malloc_r+0x1a>
 8006a3e:	42a9      	cmp	r1, r5
 8006a40:	d903      	bls.n	8006a4a <_malloc_r+0x22>
 8006a42:	230c      	movs	r3, #12
 8006a44:	6033      	str	r3, [r6, #0]
 8006a46:	2000      	movs	r0, #0
 8006a48:	bd70      	pop	{r4, r5, r6, pc}
 8006a4a:	f000 f857 	bl	8006afc <__malloc_lock>
 8006a4e:	4a21      	ldr	r2, [pc, #132]	; (8006ad4 <_malloc_r+0xac>)
 8006a50:	6814      	ldr	r4, [r2, #0]
 8006a52:	4621      	mov	r1, r4
 8006a54:	b991      	cbnz	r1, 8006a7c <_malloc_r+0x54>
 8006a56:	4c20      	ldr	r4, [pc, #128]	; (8006ad8 <_malloc_r+0xb0>)
 8006a58:	6823      	ldr	r3, [r4, #0]
 8006a5a:	b91b      	cbnz	r3, 8006a64 <_malloc_r+0x3c>
 8006a5c:	4630      	mov	r0, r6
 8006a5e:	f000 f83d 	bl	8006adc <_sbrk_r>
 8006a62:	6020      	str	r0, [r4, #0]
 8006a64:	4629      	mov	r1, r5
 8006a66:	4630      	mov	r0, r6
 8006a68:	f000 f838 	bl	8006adc <_sbrk_r>
 8006a6c:	1c43      	adds	r3, r0, #1
 8006a6e:	d124      	bne.n	8006aba <_malloc_r+0x92>
 8006a70:	230c      	movs	r3, #12
 8006a72:	6033      	str	r3, [r6, #0]
 8006a74:	4630      	mov	r0, r6
 8006a76:	f000 f842 	bl	8006afe <__malloc_unlock>
 8006a7a:	e7e4      	b.n	8006a46 <_malloc_r+0x1e>
 8006a7c:	680b      	ldr	r3, [r1, #0]
 8006a7e:	1b5b      	subs	r3, r3, r5
 8006a80:	d418      	bmi.n	8006ab4 <_malloc_r+0x8c>
 8006a82:	2b0b      	cmp	r3, #11
 8006a84:	d90f      	bls.n	8006aa6 <_malloc_r+0x7e>
 8006a86:	600b      	str	r3, [r1, #0]
 8006a88:	50cd      	str	r5, [r1, r3]
 8006a8a:	18cc      	adds	r4, r1, r3
 8006a8c:	4630      	mov	r0, r6
 8006a8e:	f000 f836 	bl	8006afe <__malloc_unlock>
 8006a92:	f104 000b 	add.w	r0, r4, #11
 8006a96:	1d23      	adds	r3, r4, #4
 8006a98:	f020 0007 	bic.w	r0, r0, #7
 8006a9c:	1ac3      	subs	r3, r0, r3
 8006a9e:	d0d3      	beq.n	8006a48 <_malloc_r+0x20>
 8006aa0:	425a      	negs	r2, r3
 8006aa2:	50e2      	str	r2, [r4, r3]
 8006aa4:	e7d0      	b.n	8006a48 <_malloc_r+0x20>
 8006aa6:	428c      	cmp	r4, r1
 8006aa8:	684b      	ldr	r3, [r1, #4]
 8006aaa:	bf16      	itet	ne
 8006aac:	6063      	strne	r3, [r4, #4]
 8006aae:	6013      	streq	r3, [r2, #0]
 8006ab0:	460c      	movne	r4, r1
 8006ab2:	e7eb      	b.n	8006a8c <_malloc_r+0x64>
 8006ab4:	460c      	mov	r4, r1
 8006ab6:	6849      	ldr	r1, [r1, #4]
 8006ab8:	e7cc      	b.n	8006a54 <_malloc_r+0x2c>
 8006aba:	1cc4      	adds	r4, r0, #3
 8006abc:	f024 0403 	bic.w	r4, r4, #3
 8006ac0:	42a0      	cmp	r0, r4
 8006ac2:	d005      	beq.n	8006ad0 <_malloc_r+0xa8>
 8006ac4:	1a21      	subs	r1, r4, r0
 8006ac6:	4630      	mov	r0, r6
 8006ac8:	f000 f808 	bl	8006adc <_sbrk_r>
 8006acc:	3001      	adds	r0, #1
 8006ace:	d0cf      	beq.n	8006a70 <_malloc_r+0x48>
 8006ad0:	6025      	str	r5, [r4, #0]
 8006ad2:	e7db      	b.n	8006a8c <_malloc_r+0x64>
 8006ad4:	20000240 	.word	0x20000240
 8006ad8:	20000244 	.word	0x20000244

08006adc <_sbrk_r>:
 8006adc:	b538      	push	{r3, r4, r5, lr}
 8006ade:	4c06      	ldr	r4, [pc, #24]	; (8006af8 <_sbrk_r+0x1c>)
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	4605      	mov	r5, r0
 8006ae4:	4608      	mov	r0, r1
 8006ae6:	6023      	str	r3, [r4, #0]
 8006ae8:	f7fa fbe4 	bl	80012b4 <_sbrk>
 8006aec:	1c43      	adds	r3, r0, #1
 8006aee:	d102      	bne.n	8006af6 <_sbrk_r+0x1a>
 8006af0:	6823      	ldr	r3, [r4, #0]
 8006af2:	b103      	cbz	r3, 8006af6 <_sbrk_r+0x1a>
 8006af4:	602b      	str	r3, [r5, #0]
 8006af6:	bd38      	pop	{r3, r4, r5, pc}
 8006af8:	20000b24 	.word	0x20000b24

08006afc <__malloc_lock>:
 8006afc:	4770      	bx	lr

08006afe <__malloc_unlock>:
 8006afe:	4770      	bx	lr

08006b00 <_init>:
 8006b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b02:	bf00      	nop
 8006b04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b06:	bc08      	pop	{r3}
 8006b08:	469e      	mov	lr, r3
 8006b0a:	4770      	bx	lr

08006b0c <_fini>:
 8006b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b0e:	bf00      	nop
 8006b10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b12:	bc08      	pop	{r3}
 8006b14:	469e      	mov	lr, r3
 8006b16:	4770      	bx	lr

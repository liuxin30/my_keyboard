
my-keyboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000068f0  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08006a88  08006a88  00016a88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b6c  08006b6c  00020210  2**0
                  CONTENTS
  4 .ARM          00000008  08006b6c  08006b6c  00016b6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006b74  08006b74  00020210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b74  08006b74  00016b74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006b78  08006b78  00016b78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  08006b7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000093c  20000210  08006d8c  00020210  2**2
                  ALLOC
 10 ._user_heap_stack 00000804  20000b4c  08006d8c  00020b4c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 12 .debug_info   000138cd  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000030d7  00000000  00000000  00033b0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000bf0  00000000  00000000  00036be8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a68  00000000  00000000  000377d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019495  00000000  00000000  00038240  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e928  00000000  00000000  000516d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00087589  00000000  00000000  0005fffd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e7586  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f40  00000000  00000000  000e7604  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000210 	.word	0x20000210
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08006a70 	.word	0x08006a70

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000214 	.word	0x20000214
 80001d4:	08006a70 	.word	0x08006a70

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <IS_NOEVENT>:

/* Rules for No Event:
 * 1) (time == 0) to handle (keyevent_t){} as empty event
 * 2) Matrix(255, 255) to make TICK event available
 */
static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 && event.key.col == 255); }
 80004d8:	b480      	push	{r7}
 80004da:	b083      	sub	sp, #12
 80004dc:	af00      	add	r7, sp, #0
 80004de:	463b      	mov	r3, r7
 80004e0:	e883 0003 	stmia.w	r3, {r0, r1}
 80004e4:	88bb      	ldrh	r3, [r7, #4]
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d005      	beq.n	80004f6 <IS_NOEVENT+0x1e>
 80004ea:	787b      	ldrb	r3, [r7, #1]
 80004ec:	2bff      	cmp	r3, #255	; 0xff
 80004ee:	d104      	bne.n	80004fa <IS_NOEVENT+0x22>
 80004f0:	783b      	ldrb	r3, [r7, #0]
 80004f2:	2bff      	cmp	r3, #255	; 0xff
 80004f4:	d101      	bne.n	80004fa <IS_NOEVENT+0x22>
 80004f6:	2301      	movs	r3, #1
 80004f8:	e000      	b.n	80004fc <IS_NOEVENT+0x24>
 80004fa:	2300      	movs	r3, #0
 80004fc:	f003 0301 	and.w	r3, r3, #1
 8000500:	b2db      	uxtb	r3, r3
 8000502:	4618      	mov	r0, r3
 8000504:	370c      	adds	r7, #12
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr
	...

08000510 <send_keyboard_report>:
//report_keyboard_t keyboard_report = {};
static report_keyboard_t *keyboard_report = &(report_keyboard_t){};

extern USBD_HandleTypeDef hUsbDeviceFS;

void send_keyboard_report(void) {
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
    USBD_HID_SendReport(&hUsbDeviceFS, keyboard_report, 8);
 8000514:	4b04      	ldr	r3, [pc, #16]	; (8000528 <send_keyboard_report+0x18>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	2208      	movs	r2, #8
 800051a:	4619      	mov	r1, r3
 800051c:	4803      	ldr	r0, [pc, #12]	; (800052c <send_keyboard_report+0x1c>)
 800051e:	f004 fc3b 	bl	8004d98 <USBD_HID_SendReport>
}
 8000522:	bf00      	nop
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	20000000 	.word	0x20000000
 800052c:	20000270 	.word	0x20000270

08000530 <action_exec>:
	}
}


void action_exec(keyevent_t event)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b084      	sub	sp, #16
 8000534:	af00      	add	r7, sp, #0
 8000536:	463b      	mov	r3, r7
 8000538:	e883 0003 	stmia.w	r3, {r0, r1}
    if (IS_NOEVENT(event)) { return; }
 800053c:	463b      	mov	r3, r7
 800053e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000542:	f7ff ffc9 	bl	80004d8 <IS_NOEVENT>
 8000546:	4603      	mov	r3, r0
 8000548:	2b00      	cmp	r3, #0
 800054a:	d115      	bne.n	8000578 <action_exec+0x48>
    uint8_t layer = 0;
 800054c:	2300      	movs	r3, #0
 800054e:	73fb      	strb	r3, [r7, #15]

    action_t action = action_for_key(layer, event.key);
 8000550:	7bfb      	ldrb	r3, [r7, #15]
 8000552:	6839      	ldr	r1, [r7, #0]
 8000554:	4618      	mov	r0, r3
 8000556:	f000 fdcb 	bl	80010f0 <action_for_key>
 800055a:	4603      	mov	r3, r0
 800055c:	81bb      	strh	r3, [r7, #12]
    //dprint("ACTION: "); debug_action(action);

    if (event.pressed) {
 800055e:	78bb      	ldrb	r3, [r7, #2]
 8000560:	2b00      	cmp	r3, #0
 8000562:	d004      	beq.n	800056e <action_exec+0x3e>
        register_code(action.key.code);
 8000564:	7b3b      	ldrb	r3, [r7, #12]
 8000566:	4618      	mov	r0, r3
 8000568:	f000 f80a 	bl	8000580 <register_code>
 800056c:	e005      	b.n	800057a <action_exec+0x4a>
    }
    else {
        unregister_code(action.key.code);
 800056e:	7b3b      	ldrb	r3, [r7, #12]
 8000570:	4618      	mov	r0, r3
 8000572:	f000 f82d 	bl	80005d0 <unregister_code>
 8000576:	e000      	b.n	800057a <action_exec+0x4a>
    if (IS_NOEVENT(event)) { return; }
 8000578:	bf00      	nop
    }
}
 800057a:	3710      	adds	r7, #16
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}

08000580 <register_code>:

/*
 * Utilities for actions.
 */
void register_code(uint8_t code)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
 8000586:	4603      	mov	r3, r0
 8000588:	71fb      	strb	r3, [r7, #7]
    if (code == KC_NO) {
 800058a:	79fb      	ldrb	r3, [r7, #7]
 800058c:	2b00      	cmp	r3, #0
 800058e:	d01b      	beq.n	80005c8 <register_code+0x48>
        return;
    }
    else if IS_KEY(code) {
 8000590:	79fb      	ldrb	r3, [r7, #7]
 8000592:	2b03      	cmp	r3, #3
 8000594:	d907      	bls.n	80005a6 <register_code+0x26>
 8000596:	79fb      	ldrb	r3, [r7, #7]
 8000598:	2ba4      	cmp	r3, #164	; 0xa4
 800059a:	d804      	bhi.n	80005a6 <register_code+0x26>
        add_key(code);
 800059c:	79fb      	ldrb	r3, [r7, #7]
 800059e:	4618      	mov	r0, r3
 80005a0:	f000 f83e 	bl	8000620 <add_key>
 80005a4:	e011      	b.n	80005ca <register_code+0x4a>
    }
    else if IS_MOD(code) {
 80005a6:	79fb      	ldrb	r3, [r7, #7]
 80005a8:	2bdf      	cmp	r3, #223	; 0xdf
 80005aa:	d90e      	bls.n	80005ca <register_code+0x4a>
 80005ac:	79fb      	ldrb	r3, [r7, #7]
 80005ae:	2be7      	cmp	r3, #231	; 0xe7
 80005b0:	d80b      	bhi.n	80005ca <register_code+0x4a>
        add_mods(MOD_BIT(code));
 80005b2:	79fb      	ldrb	r3, [r7, #7]
 80005b4:	f003 0307 	and.w	r3, r3, #7
 80005b8:	2201      	movs	r2, #1
 80005ba:	fa02 f303 	lsl.w	r3, r2, r3
 80005be:	b2db      	uxtb	r3, r3
 80005c0:	4618      	mov	r0, r3
 80005c2:	f000 fa0d 	bl	80009e0 <add_mods>
 80005c6:	e000      	b.n	80005ca <register_code+0x4a>
        return;
 80005c8:	bf00      	nop
    }

//    send_keyboard_report();
}
 80005ca:	3708      	adds	r7, #8
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}

080005d0 <unregister_code>:

void unregister_code(uint8_t code)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	4603      	mov	r3, r0
 80005d8:	71fb      	strb	r3, [r7, #7]
    if (code == KC_NO) {
 80005da:	79fb      	ldrb	r3, [r7, #7]
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d01b      	beq.n	8000618 <unregister_code+0x48>
        return;
    }
    else if IS_KEY(code) {
 80005e0:	79fb      	ldrb	r3, [r7, #7]
 80005e2:	2b03      	cmp	r3, #3
 80005e4:	d907      	bls.n	80005f6 <unregister_code+0x26>
 80005e6:	79fb      	ldrb	r3, [r7, #7]
 80005e8:	2ba4      	cmp	r3, #164	; 0xa4
 80005ea:	d804      	bhi.n	80005f6 <unregister_code+0x26>
        del_key(code);
 80005ec:	79fb      	ldrb	r3, [r7, #7]
 80005ee:	4618      	mov	r0, r3
 80005f0:	f000 f924 	bl	800083c <del_key>
 80005f4:	e011      	b.n	800061a <unregister_code+0x4a>
    }
    else if IS_MOD(code) {
 80005f6:	79fb      	ldrb	r3, [r7, #7]
 80005f8:	2bdf      	cmp	r3, #223	; 0xdf
 80005fa:	d90e      	bls.n	800061a <unregister_code+0x4a>
 80005fc:	79fb      	ldrb	r3, [r7, #7]
 80005fe:	2be7      	cmp	r3, #231	; 0xe7
 8000600:	d80b      	bhi.n	800061a <unregister_code+0x4a>
        del_mods(MOD_BIT(code));
 8000602:	79fb      	ldrb	r3, [r7, #7]
 8000604:	f003 0307 	and.w	r3, r3, #7
 8000608:	2201      	movs	r2, #1
 800060a:	fa02 f303 	lsl.w	r3, r2, r3
 800060e:	b2db      	uxtb	r3, r3
 8000610:	4618      	mov	r0, r3
 8000612:	f000 f9f7 	bl	8000a04 <del_mods>
 8000616:	e000      	b.n	800061a <unregister_code+0x4a>
        return;
 8000618:	bf00      	nop
    }
//    send_keyboard_report();
}
 800061a:	3708      	adds	r7, #8
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}

08000620 <add_key>:

/* local functions */
void add_key(uint8_t code)
{
 8000620:	b480      	push	{r7}
 8000622:	b085      	sub	sp, #20
 8000624:	af00      	add	r7, sp, #0
 8000626:	4603      	mov	r3, r0
 8000628:	71fb      	strb	r3, [r7, #7]
    int8_t i = cb_head;
 800062a:	4b7f      	ldr	r3, [pc, #508]	; (8000828 <add_key+0x208>)
 800062c:	781b      	ldrb	r3, [r3, #0]
 800062e:	73fb      	strb	r3, [r7, #15]
    int8_t empty = -1;
 8000630:	23ff      	movs	r3, #255	; 0xff
 8000632:	73bb      	strb	r3, [r7, #14]
    if (cb_count) {
 8000634:	4b7d      	ldr	r3, [pc, #500]	; (800082c <add_key+0x20c>)
 8000636:	f993 3000 	ldrsb.w	r3, [r3]
 800063a:	2b00      	cmp	r3, #0
 800063c:	f000 80ca 	beq.w	80007d4 <add_key+0x1b4>
        do {
            if (keyboard_report->keys[i] == code) {
 8000640:	4b7b      	ldr	r3, [pc, #492]	; (8000830 <add_key+0x210>)
 8000642:	681a      	ldr	r2, [r3, #0]
 8000644:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000648:	4413      	add	r3, r2
 800064a:	789b      	ldrb	r3, [r3, #2]
 800064c:	79fa      	ldrb	r2, [r7, #7]
 800064e:	429a      	cmp	r2, r3
 8000650:	f000 80e3 	beq.w	800081a <add_key+0x1fa>
                return;
            }
            if (empty == -1 && keyboard_report->keys[i] == 0) {
 8000654:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800065c:	d109      	bne.n	8000672 <add_key+0x52>
 800065e:	4b74      	ldr	r3, [pc, #464]	; (8000830 <add_key+0x210>)
 8000660:	681a      	ldr	r2, [r3, #0]
 8000662:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000666:	4413      	add	r3, r2
 8000668:	789b      	ldrb	r3, [r3, #2]
 800066a:	2b00      	cmp	r3, #0
 800066c:	d101      	bne.n	8000672 <add_key+0x52>
                empty = i;
 800066e:	7bfb      	ldrb	r3, [r7, #15]
 8000670:	73bb      	strb	r3, [r7, #14]
            }
            i = RO_INC(i);
 8000672:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000676:	1c5a      	adds	r2, r3, #1
 8000678:	4b6e      	ldr	r3, [pc, #440]	; (8000834 <add_key+0x214>)
 800067a:	fb83 3102 	smull	r3, r1, r3, r2
 800067e:	17d3      	asrs	r3, r2, #31
 8000680:	1ac9      	subs	r1, r1, r3
 8000682:	460b      	mov	r3, r1
 8000684:	005b      	lsls	r3, r3, #1
 8000686:	440b      	add	r3, r1
 8000688:	005b      	lsls	r3, r3, #1
 800068a:	1ad1      	subs	r1, r2, r3
 800068c:	460b      	mov	r3, r1
 800068e:	73fb      	strb	r3, [r7, #15]
        } while (i != cb_tail);
 8000690:	4b69      	ldr	r3, [pc, #420]	; (8000838 <add_key+0x218>)
 8000692:	f993 3000 	ldrsb.w	r3, [r3]
 8000696:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800069a:	429a      	cmp	r2, r3
 800069c:	d1d0      	bne.n	8000640 <add_key+0x20>
        if (i == cb_tail) {
 800069e:	4b66      	ldr	r3, [pc, #408]	; (8000838 <add_key+0x218>)
 80006a0:	f993 3000 	ldrsb.w	r3, [r3]
 80006a4:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80006a8:	429a      	cmp	r2, r3
 80006aa:	f040 8093 	bne.w	80007d4 <add_key+0x1b4>
            if (cb_tail == cb_head) {
 80006ae:	4b62      	ldr	r3, [pc, #392]	; (8000838 <add_key+0x218>)
 80006b0:	f993 2000 	ldrsb.w	r2, [r3]
 80006b4:	4b5c      	ldr	r3, [pc, #368]	; (8000828 <add_key+0x208>)
 80006b6:	f993 3000 	ldrsb.w	r3, [r3]
 80006ba:	429a      	cmp	r2, r3
 80006bc:	f040 808a 	bne.w	80007d4 <add_key+0x1b4>
                // buffer is full
                if (empty == -1) {
 80006c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80006c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006c8:	d11a      	bne.n	8000700 <add_key+0xe0>
                    // pop head when has no empty space
                    cb_head = RO_INC(cb_head);
 80006ca:	4b57      	ldr	r3, [pc, #348]	; (8000828 <add_key+0x208>)
 80006cc:	f993 3000 	ldrsb.w	r3, [r3]
 80006d0:	1c5a      	adds	r2, r3, #1
 80006d2:	4b58      	ldr	r3, [pc, #352]	; (8000834 <add_key+0x214>)
 80006d4:	fb83 3102 	smull	r3, r1, r3, r2
 80006d8:	17d3      	asrs	r3, r2, #31
 80006da:	1ac9      	subs	r1, r1, r3
 80006dc:	460b      	mov	r3, r1
 80006de:	005b      	lsls	r3, r3, #1
 80006e0:	440b      	add	r3, r1
 80006e2:	005b      	lsls	r3, r3, #1
 80006e4:	1ad1      	subs	r1, r2, r3
 80006e6:	b24a      	sxtb	r2, r1
 80006e8:	4b4f      	ldr	r3, [pc, #316]	; (8000828 <add_key+0x208>)
 80006ea:	701a      	strb	r2, [r3, #0]
                    cb_count--;
 80006ec:	4b4f      	ldr	r3, [pc, #316]	; (800082c <add_key+0x20c>)
 80006ee:	f993 3000 	ldrsb.w	r3, [r3]
 80006f2:	b2db      	uxtb	r3, r3
 80006f4:	3b01      	subs	r3, #1
 80006f6:	b2db      	uxtb	r3, r3
 80006f8:	b25a      	sxtb	r2, r3
 80006fa:	4b4c      	ldr	r3, [pc, #304]	; (800082c <add_key+0x20c>)
 80006fc:	701a      	strb	r2, [r3, #0]
 80006fe:	e069      	b.n	80007d4 <add_key+0x1b4>
                }
                else {
                    // left shift when has empty space
                    uint8_t offset = 1;
 8000700:	2301      	movs	r3, #1
 8000702:	737b      	strb	r3, [r7, #13]
                    i = RO_INC(empty);
 8000704:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000708:	1c5a      	adds	r2, r3, #1
 800070a:	4b4a      	ldr	r3, [pc, #296]	; (8000834 <add_key+0x214>)
 800070c:	fb83 3102 	smull	r3, r1, r3, r2
 8000710:	17d3      	asrs	r3, r2, #31
 8000712:	1ac9      	subs	r1, r1, r3
 8000714:	460b      	mov	r3, r1
 8000716:	005b      	lsls	r3, r3, #1
 8000718:	440b      	add	r3, r1
 800071a:	005b      	lsls	r3, r3, #1
 800071c:	1ad1      	subs	r1, r2, r3
 800071e:	460b      	mov	r3, r1
 8000720:	73fb      	strb	r3, [r7, #15]
                    do {
                        if (keyboard_report->keys[i] != 0) {
 8000722:	4b43      	ldr	r3, [pc, #268]	; (8000830 <add_key+0x210>)
 8000724:	681a      	ldr	r2, [r3, #0]
 8000726:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800072a:	4413      	add	r3, r2
 800072c:	789b      	ldrb	r3, [r3, #2]
 800072e:	2b00      	cmp	r3, #0
 8000730:	d023      	beq.n	800077a <add_key+0x15a>
                            keyboard_report->keys[empty] = keyboard_report->keys[i];
 8000732:	4b3f      	ldr	r3, [pc, #252]	; (8000830 <add_key+0x210>)
 8000734:	6818      	ldr	r0, [r3, #0]
 8000736:	f997 100f 	ldrsb.w	r1, [r7, #15]
 800073a:	4b3d      	ldr	r3, [pc, #244]	; (8000830 <add_key+0x210>)
 800073c:	681a      	ldr	r2, [r3, #0]
 800073e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000742:	4401      	add	r1, r0
 8000744:	7889      	ldrb	r1, [r1, #2]
 8000746:	4413      	add	r3, r2
 8000748:	460a      	mov	r2, r1
 800074a:	709a      	strb	r2, [r3, #2]
                            keyboard_report->keys[i] = 0;
 800074c:	4b38      	ldr	r3, [pc, #224]	; (8000830 <add_key+0x210>)
 800074e:	681a      	ldr	r2, [r3, #0]
 8000750:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000754:	4413      	add	r3, r2
 8000756:	2200      	movs	r2, #0
 8000758:	709a      	strb	r2, [r3, #2]
                            empty = RO_INC(empty);
 800075a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800075e:	1c5a      	adds	r2, r3, #1
 8000760:	4b34      	ldr	r3, [pc, #208]	; (8000834 <add_key+0x214>)
 8000762:	fb83 3102 	smull	r3, r1, r3, r2
 8000766:	17d3      	asrs	r3, r2, #31
 8000768:	1ac9      	subs	r1, r1, r3
 800076a:	460b      	mov	r3, r1
 800076c:	005b      	lsls	r3, r3, #1
 800076e:	440b      	add	r3, r1
 8000770:	005b      	lsls	r3, r3, #1
 8000772:	1ad1      	subs	r1, r2, r3
 8000774:	460b      	mov	r3, r1
 8000776:	73bb      	strb	r3, [r7, #14]
 8000778:	e002      	b.n	8000780 <add_key+0x160>
                        }
                        else {
                            offset++;
 800077a:	7b7b      	ldrb	r3, [r7, #13]
 800077c:	3301      	adds	r3, #1
 800077e:	737b      	strb	r3, [r7, #13]
                        }
                        i = RO_INC(i);
 8000780:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000784:	1c5a      	adds	r2, r3, #1
 8000786:	4b2b      	ldr	r3, [pc, #172]	; (8000834 <add_key+0x214>)
 8000788:	fb83 3102 	smull	r3, r1, r3, r2
 800078c:	17d3      	asrs	r3, r2, #31
 800078e:	1ac9      	subs	r1, r1, r3
 8000790:	460b      	mov	r3, r1
 8000792:	005b      	lsls	r3, r3, #1
 8000794:	440b      	add	r3, r1
 8000796:	005b      	lsls	r3, r3, #1
 8000798:	1ad1      	subs	r1, r2, r3
 800079a:	460b      	mov	r3, r1
 800079c:	73fb      	strb	r3, [r7, #15]
                    } while (i != cb_tail);
 800079e:	4b26      	ldr	r3, [pc, #152]	; (8000838 <add_key+0x218>)
 80007a0:	f993 3000 	ldrsb.w	r3, [r3]
 80007a4:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80007a8:	429a      	cmp	r2, r3
 80007aa:	d1ba      	bne.n	8000722 <add_key+0x102>
                    cb_tail = RO_SUB(cb_tail, offset);
 80007ac:	4b22      	ldr	r3, [pc, #136]	; (8000838 <add_key+0x218>)
 80007ae:	f993 3000 	ldrsb.w	r3, [r3]
 80007b2:	461a      	mov	r2, r3
 80007b4:	7b7b      	ldrb	r3, [r7, #13]
 80007b6:	1ad3      	subs	r3, r2, r3
 80007b8:	1d9a      	adds	r2, r3, #6
 80007ba:	4b1e      	ldr	r3, [pc, #120]	; (8000834 <add_key+0x214>)
 80007bc:	fb83 3102 	smull	r3, r1, r3, r2
 80007c0:	17d3      	asrs	r3, r2, #31
 80007c2:	1ac9      	subs	r1, r1, r3
 80007c4:	460b      	mov	r3, r1
 80007c6:	005b      	lsls	r3, r3, #1
 80007c8:	440b      	add	r3, r1
 80007ca:	005b      	lsls	r3, r3, #1
 80007cc:	1ad1      	subs	r1, r2, r3
 80007ce:	b24a      	sxtb	r2, r1
 80007d0:	4b19      	ldr	r3, [pc, #100]	; (8000838 <add_key+0x218>)
 80007d2:	701a      	strb	r2, [r3, #0]
                }
            }
        }
    }
    // add to tail
    keyboard_report->keys[cb_tail] = code;
 80007d4:	4b16      	ldr	r3, [pc, #88]	; (8000830 <add_key+0x210>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4a17      	ldr	r2, [pc, #92]	; (8000838 <add_key+0x218>)
 80007da:	f992 2000 	ldrsb.w	r2, [r2]
 80007de:	4413      	add	r3, r2
 80007e0:	79fa      	ldrb	r2, [r7, #7]
 80007e2:	709a      	strb	r2, [r3, #2]
    cb_tail = RO_INC(cb_tail);
 80007e4:	4b14      	ldr	r3, [pc, #80]	; (8000838 <add_key+0x218>)
 80007e6:	f993 3000 	ldrsb.w	r3, [r3]
 80007ea:	1c5a      	adds	r2, r3, #1
 80007ec:	4b11      	ldr	r3, [pc, #68]	; (8000834 <add_key+0x214>)
 80007ee:	fb83 3102 	smull	r3, r1, r3, r2
 80007f2:	17d3      	asrs	r3, r2, #31
 80007f4:	1ac9      	subs	r1, r1, r3
 80007f6:	460b      	mov	r3, r1
 80007f8:	005b      	lsls	r3, r3, #1
 80007fa:	440b      	add	r3, r1
 80007fc:	005b      	lsls	r3, r3, #1
 80007fe:	1ad1      	subs	r1, r2, r3
 8000800:	b24a      	sxtb	r2, r1
 8000802:	4b0d      	ldr	r3, [pc, #52]	; (8000838 <add_key+0x218>)
 8000804:	701a      	strb	r2, [r3, #0]
    cb_count++;
 8000806:	4b09      	ldr	r3, [pc, #36]	; (800082c <add_key+0x20c>)
 8000808:	f993 3000 	ldrsb.w	r3, [r3]
 800080c:	b2db      	uxtb	r3, r3
 800080e:	3301      	adds	r3, #1
 8000810:	b2db      	uxtb	r3, r3
 8000812:	b25a      	sxtb	r2, r3
 8000814:	4b05      	ldr	r3, [pc, #20]	; (800082c <add_key+0x20c>)
 8000816:	701a      	strb	r2, [r3, #0]
 8000818:	e000      	b.n	800081c <add_key+0x1fc>
                return;
 800081a:	bf00      	nop
}
 800081c:	3714      	adds	r7, #20
 800081e:	46bd      	mov	sp, r7
 8000820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000824:	4770      	bx	lr
 8000826:	bf00      	nop
 8000828:	2000022c 	.word	0x2000022c
 800082c:	2000022e 	.word	0x2000022e
 8000830:	20000000 	.word	0x20000000
 8000834:	2aaaaaab 	.word	0x2aaaaaab
 8000838:	2000022d 	.word	0x2000022d

0800083c <del_key>:

void del_key(uint8_t code)
{
 800083c:	b480      	push	{r7}
 800083e:	b085      	sub	sp, #20
 8000840:	af00      	add	r7, sp, #0
 8000842:	4603      	mov	r3, r0
 8000844:	71fb      	strb	r3, [r7, #7]
    uint8_t i = cb_head;
 8000846:	4b61      	ldr	r3, [pc, #388]	; (80009cc <del_key+0x190>)
 8000848:	f993 3000 	ldrsb.w	r3, [r3]
 800084c:	73fb      	strb	r3, [r7, #15]
    if (cb_count) {
 800084e:	4b60      	ldr	r3, [pc, #384]	; (80009d0 <del_key+0x194>)
 8000850:	f993 3000 	ldrsb.w	r3, [r3]
 8000854:	2b00      	cmp	r3, #0
 8000856:	f000 80b3 	beq.w	80009c0 <del_key+0x184>
        do {
            if (keyboard_report->keys[i] == code) {
 800085a:	4b5e      	ldr	r3, [pc, #376]	; (80009d4 <del_key+0x198>)
 800085c:	681a      	ldr	r2, [r3, #0]
 800085e:	7bfb      	ldrb	r3, [r7, #15]
 8000860:	4413      	add	r3, r2
 8000862:	789b      	ldrb	r3, [r3, #2]
 8000864:	79fa      	ldrb	r2, [r7, #7]
 8000866:	429a      	cmp	r2, r3
 8000868:	f040 8094 	bne.w	8000994 <del_key+0x158>
                keyboard_report->keys[i] = 0;
 800086c:	4b59      	ldr	r3, [pc, #356]	; (80009d4 <del_key+0x198>)
 800086e:	681a      	ldr	r2, [r3, #0]
 8000870:	7bfb      	ldrb	r3, [r7, #15]
 8000872:	4413      	add	r3, r2
 8000874:	2200      	movs	r2, #0
 8000876:	709a      	strb	r2, [r3, #2]
                cb_count--;
 8000878:	4b55      	ldr	r3, [pc, #340]	; (80009d0 <del_key+0x194>)
 800087a:	f993 3000 	ldrsb.w	r3, [r3]
 800087e:	b2db      	uxtb	r3, r3
 8000880:	3b01      	subs	r3, #1
 8000882:	b2db      	uxtb	r3, r3
 8000884:	b25a      	sxtb	r2, r3
 8000886:	4b52      	ldr	r3, [pc, #328]	; (80009d0 <del_key+0x194>)
 8000888:	701a      	strb	r2, [r3, #0]
                if (cb_count == 0) {
 800088a:	4b51      	ldr	r3, [pc, #324]	; (80009d0 <del_key+0x194>)
 800088c:	f993 3000 	ldrsb.w	r3, [r3]
 8000890:	2b00      	cmp	r3, #0
 8000892:	d108      	bne.n	80008a6 <del_key+0x6a>
                    // reset head and tail
                    cb_tail = cb_head = 0;
 8000894:	4b4d      	ldr	r3, [pc, #308]	; (80009cc <del_key+0x190>)
 8000896:	2200      	movs	r2, #0
 8000898:	701a      	strb	r2, [r3, #0]
 800089a:	4b4c      	ldr	r3, [pc, #304]	; (80009cc <del_key+0x190>)
 800089c:	f993 2000 	ldrsb.w	r2, [r3]
 80008a0:	4b4d      	ldr	r3, [pc, #308]	; (80009d8 <del_key+0x19c>)
 80008a2:	701a      	strb	r2, [r3, #0]
                    break;
 80008a4:	e08c      	b.n	80009c0 <del_key+0x184>
                }
                if (i == cb_head) {
 80008a6:	7bfb      	ldrb	r3, [r7, #15]
 80008a8:	4a48      	ldr	r2, [pc, #288]	; (80009cc <del_key+0x190>)
 80008aa:	f992 2000 	ldrsb.w	r2, [r2]
 80008ae:	4293      	cmp	r3, r2
 80008b0:	d12f      	bne.n	8000912 <del_key+0xd6>
                    // left shift when next to tail
                    do {
                        if (keyboard_report->keys[RO_INC(cb_head)] != 0) {
 80008b2:	4b48      	ldr	r3, [pc, #288]	; (80009d4 <del_key+0x198>)
 80008b4:	6818      	ldr	r0, [r3, #0]
 80008b6:	4b45      	ldr	r3, [pc, #276]	; (80009cc <del_key+0x190>)
 80008b8:	f993 3000 	ldrsb.w	r3, [r3]
 80008bc:	1c59      	adds	r1, r3, #1
 80008be:	4b47      	ldr	r3, [pc, #284]	; (80009dc <del_key+0x1a0>)
 80008c0:	fb83 3201 	smull	r3, r2, r3, r1
 80008c4:	17cb      	asrs	r3, r1, #31
 80008c6:	1ad2      	subs	r2, r2, r3
 80008c8:	4613      	mov	r3, r2
 80008ca:	005b      	lsls	r3, r3, #1
 80008cc:	4413      	add	r3, r2
 80008ce:	005b      	lsls	r3, r3, #1
 80008d0:	1aca      	subs	r2, r1, r3
 80008d2:	1883      	adds	r3, r0, r2
 80008d4:	789b      	ldrb	r3, [r3, #2]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d119      	bne.n	800090e <del_key+0xd2>
                            break;
                        }
                        cb_head = RO_INC(cb_head);
 80008da:	4b3c      	ldr	r3, [pc, #240]	; (80009cc <del_key+0x190>)
 80008dc:	f993 3000 	ldrsb.w	r3, [r3]
 80008e0:	1c5a      	adds	r2, r3, #1
 80008e2:	4b3e      	ldr	r3, [pc, #248]	; (80009dc <del_key+0x1a0>)
 80008e4:	fb83 3102 	smull	r3, r1, r3, r2
 80008e8:	17d3      	asrs	r3, r2, #31
 80008ea:	1ac9      	subs	r1, r1, r3
 80008ec:	460b      	mov	r3, r1
 80008ee:	005b      	lsls	r3, r3, #1
 80008f0:	440b      	add	r3, r1
 80008f2:	005b      	lsls	r3, r3, #1
 80008f4:	1ad1      	subs	r1, r2, r3
 80008f6:	b24a      	sxtb	r2, r1
 80008f8:	4b34      	ldr	r3, [pc, #208]	; (80009cc <del_key+0x190>)
 80008fa:	701a      	strb	r2, [r3, #0]
                    } while (cb_tail != cb_head);
 80008fc:	4b36      	ldr	r3, [pc, #216]	; (80009d8 <del_key+0x19c>)
 80008fe:	f993 2000 	ldrsb.w	r2, [r3]
 8000902:	4b32      	ldr	r3, [pc, #200]	; (80009cc <del_key+0x190>)
 8000904:	f993 3000 	ldrsb.w	r3, [r3]
 8000908:	429a      	cmp	r2, r3
 800090a:	d1d2      	bne.n	80008b2 <del_key+0x76>
                    break;
 800090c:	e058      	b.n	80009c0 <del_key+0x184>
                            break;
 800090e:	bf00      	nop
                    break;
 8000910:	e056      	b.n	80009c0 <del_key+0x184>
                }
                if (i == RO_DEC(cb_tail)) {
 8000912:	7bf8      	ldrb	r0, [r7, #15]
 8000914:	4b30      	ldr	r3, [pc, #192]	; (80009d8 <del_key+0x19c>)
 8000916:	f993 3000 	ldrsb.w	r3, [r3]
 800091a:	1d59      	adds	r1, r3, #5
 800091c:	4b2f      	ldr	r3, [pc, #188]	; (80009dc <del_key+0x1a0>)
 800091e:	fb83 3201 	smull	r3, r2, r3, r1
 8000922:	17cb      	asrs	r3, r1, #31
 8000924:	1ad2      	subs	r2, r2, r3
 8000926:	4613      	mov	r3, r2
 8000928:	005b      	lsls	r3, r3, #1
 800092a:	4413      	add	r3, r2
 800092c:	005b      	lsls	r3, r3, #1
 800092e:	1aca      	subs	r2, r1, r3
 8000930:	4290      	cmp	r0, r2
 8000932:	d12f      	bne.n	8000994 <del_key+0x158>
                    // left shift when next to tail
                    do {
                        cb_tail = RO_DEC(cb_tail);
 8000934:	4b28      	ldr	r3, [pc, #160]	; (80009d8 <del_key+0x19c>)
 8000936:	f993 3000 	ldrsb.w	r3, [r3]
 800093a:	1d5a      	adds	r2, r3, #5
 800093c:	4b27      	ldr	r3, [pc, #156]	; (80009dc <del_key+0x1a0>)
 800093e:	fb83 3102 	smull	r3, r1, r3, r2
 8000942:	17d3      	asrs	r3, r2, #31
 8000944:	1ac9      	subs	r1, r1, r3
 8000946:	460b      	mov	r3, r1
 8000948:	005b      	lsls	r3, r3, #1
 800094a:	440b      	add	r3, r1
 800094c:	005b      	lsls	r3, r3, #1
 800094e:	1ad1      	subs	r1, r2, r3
 8000950:	b24a      	sxtb	r2, r1
 8000952:	4b21      	ldr	r3, [pc, #132]	; (80009d8 <del_key+0x19c>)
 8000954:	701a      	strb	r2, [r3, #0]
                        if (keyboard_report->keys[RO_DEC(cb_tail)] != 0) {
 8000956:	4b1f      	ldr	r3, [pc, #124]	; (80009d4 <del_key+0x198>)
 8000958:	6818      	ldr	r0, [r3, #0]
 800095a:	4b1f      	ldr	r3, [pc, #124]	; (80009d8 <del_key+0x19c>)
 800095c:	f993 3000 	ldrsb.w	r3, [r3]
 8000960:	1d59      	adds	r1, r3, #5
 8000962:	4b1e      	ldr	r3, [pc, #120]	; (80009dc <del_key+0x1a0>)
 8000964:	fb83 3201 	smull	r3, r2, r3, r1
 8000968:	17cb      	asrs	r3, r1, #31
 800096a:	1ad2      	subs	r2, r2, r3
 800096c:	4613      	mov	r3, r2
 800096e:	005b      	lsls	r3, r3, #1
 8000970:	4413      	add	r3, r2
 8000972:	005b      	lsls	r3, r3, #1
 8000974:	1aca      	subs	r2, r1, r3
 8000976:	1883      	adds	r3, r0, r2
 8000978:	789b      	ldrb	r3, [r3, #2]
 800097a:	2b00      	cmp	r3, #0
 800097c:	d108      	bne.n	8000990 <del_key+0x154>
                            break;
                        }
                    } while (cb_tail != cb_head);
 800097e:	4b16      	ldr	r3, [pc, #88]	; (80009d8 <del_key+0x19c>)
 8000980:	f993 2000 	ldrsb.w	r2, [r3]
 8000984:	4b11      	ldr	r3, [pc, #68]	; (80009cc <del_key+0x190>)
 8000986:	f993 3000 	ldrsb.w	r3, [r3]
 800098a:	429a      	cmp	r2, r3
 800098c:	d1d2      	bne.n	8000934 <del_key+0xf8>
                    break;
 800098e:	e017      	b.n	80009c0 <del_key+0x184>
                            break;
 8000990:	bf00      	nop
                    break;
 8000992:	e015      	b.n	80009c0 <del_key+0x184>
                }
            }
            i = RO_INC(i);
 8000994:	7bfb      	ldrb	r3, [r7, #15]
 8000996:	1c5a      	adds	r2, r3, #1
 8000998:	4b10      	ldr	r3, [pc, #64]	; (80009dc <del_key+0x1a0>)
 800099a:	fb83 3102 	smull	r3, r1, r3, r2
 800099e:	17d3      	asrs	r3, r2, #31
 80009a0:	1ac9      	subs	r1, r1, r3
 80009a2:	460b      	mov	r3, r1
 80009a4:	005b      	lsls	r3, r3, #1
 80009a6:	440b      	add	r3, r1
 80009a8:	005b      	lsls	r3, r3, #1
 80009aa:	1ad1      	subs	r1, r2, r3
 80009ac:	460b      	mov	r3, r1
 80009ae:	73fb      	strb	r3, [r7, #15]
        } while (i != cb_tail);
 80009b0:	7bfb      	ldrb	r3, [r7, #15]
 80009b2:	4a09      	ldr	r2, [pc, #36]	; (80009d8 <del_key+0x19c>)
 80009b4:	f992 2000 	ldrsb.w	r2, [r2]
 80009b8:	4293      	cmp	r3, r2
 80009ba:	f47f af4e 	bne.w	800085a <del_key+0x1e>
    }
}
 80009be:	e7ff      	b.n	80009c0 <del_key+0x184>
 80009c0:	bf00      	nop
 80009c2:	3714      	adds	r7, #20
 80009c4:	46bd      	mov	sp, r7
 80009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ca:	4770      	bx	lr
 80009cc:	2000022c 	.word	0x2000022c
 80009d0:	2000022e 	.word	0x2000022e
 80009d4:	20000000 	.word	0x20000000
 80009d8:	2000022d 	.word	0x2000022d
 80009dc:	2aaaaaab 	.word	0x2aaaaaab

080009e0 <add_mods>:

/* modifier */
void add_mods(uint8_t mods) {
 80009e0:	b480      	push	{r7}
 80009e2:	b083      	sub	sp, #12
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	4603      	mov	r3, r0
 80009e8:	71fb      	strb	r3, [r7, #7]
	keyboard_report->mods  = mods;
 80009ea:	4b05      	ldr	r3, [pc, #20]	; (8000a00 <add_mods+0x20>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	79fa      	ldrb	r2, [r7, #7]
 80009f0:	701a      	strb	r2, [r3, #0]
}
 80009f2:	bf00      	nop
 80009f4:	370c      	adds	r7, #12
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop
 8000a00:	20000000 	.word	0x20000000

08000a04 <del_mods>:
void del_mods(uint8_t mods) {
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	71fb      	strb	r3, [r7, #7]
	keyboard_report->mods  ^= mods;
 8000a0e:	4b07      	ldr	r3, [pc, #28]	; (8000a2c <del_mods+0x28>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	7819      	ldrb	r1, [r3, #0]
 8000a14:	4b05      	ldr	r3, [pc, #20]	; (8000a2c <del_mods+0x28>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	79fa      	ldrb	r2, [r7, #7]
 8000a1a:	404a      	eors	r2, r1
 8000a1c:	b2d2      	uxtb	r2, r2
 8000a1e:	701a      	strb	r2, [r3, #0]
}
 8000a20:	bf00      	nop
 8000a22:	370c      	adds	r7, #12
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr
 8000a2c:	20000000 	.word	0x20000000

08000a30 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b08a      	sub	sp, #40	; 0x28
 8000a34:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a36:	f107 0314 	add.w	r3, r7, #20
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	601a      	str	r2, [r3, #0]
 8000a3e:	605a      	str	r2, [r3, #4]
 8000a40:	609a      	str	r2, [r3, #8]
 8000a42:	60da      	str	r2, [r3, #12]
 8000a44:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a46:	2300      	movs	r3, #0
 8000a48:	613b      	str	r3, [r7, #16]
 8000a4a:	4b51      	ldr	r3, [pc, #324]	; (8000b90 <MX_GPIO_Init+0x160>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	4a50      	ldr	r2, [pc, #320]	; (8000b90 <MX_GPIO_Init+0x160>)
 8000a50:	f043 0304 	orr.w	r3, r3, #4
 8000a54:	6313      	str	r3, [r2, #48]	; 0x30
 8000a56:	4b4e      	ldr	r3, [pc, #312]	; (8000b90 <MX_GPIO_Init+0x160>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5a:	f003 0304 	and.w	r3, r3, #4
 8000a5e:	613b      	str	r3, [r7, #16]
 8000a60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a62:	2300      	movs	r3, #0
 8000a64:	60fb      	str	r3, [r7, #12]
 8000a66:	4b4a      	ldr	r3, [pc, #296]	; (8000b90 <MX_GPIO_Init+0x160>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	4a49      	ldr	r2, [pc, #292]	; (8000b90 <MX_GPIO_Init+0x160>)
 8000a6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a70:	6313      	str	r3, [r2, #48]	; 0x30
 8000a72:	4b47      	ldr	r3, [pc, #284]	; (8000b90 <MX_GPIO_Init+0x160>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a7a:	60fb      	str	r3, [r7, #12]
 8000a7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a7e:	2300      	movs	r3, #0
 8000a80:	60bb      	str	r3, [r7, #8]
 8000a82:	4b43      	ldr	r3, [pc, #268]	; (8000b90 <MX_GPIO_Init+0x160>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	4a42      	ldr	r2, [pc, #264]	; (8000b90 <MX_GPIO_Init+0x160>)
 8000a88:	f043 0301 	orr.w	r3, r3, #1
 8000a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8e:	4b40      	ldr	r3, [pc, #256]	; (8000b90 <MX_GPIO_Init+0x160>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	f003 0301 	and.w	r3, r3, #1
 8000a96:	60bb      	str	r3, [r7, #8]
 8000a98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	607b      	str	r3, [r7, #4]
 8000a9e:	4b3c      	ldr	r3, [pc, #240]	; (8000b90 <MX_GPIO_Init+0x160>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	4a3b      	ldr	r2, [pc, #236]	; (8000b90 <MX_GPIO_Init+0x160>)
 8000aa4:	f043 0302 	orr.w	r3, r3, #2
 8000aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aaa:	4b39      	ldr	r3, [pc, #228]	; (8000b90 <MX_GPIO_Init+0x160>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	f003 0302 	and.w	r3, r3, #2
 8000ab2:	607b      	str	r3, [r7, #4]
 8000ab4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ROW4_Pin|ROW3_Pin|ROW2_Pin|ROW1_Pin 
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	211f      	movs	r1, #31
 8000aba:	4836      	ldr	r0, [pc, #216]	; (8000b94 <MX_GPIO_Init+0x164>)
 8000abc:	f000 ff6e 	bl	800199c <HAL_GPIO_WritePin>
                          |ROW0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAPLED_GPIO_Port, CAPLED_Pin, GPIO_PIN_RESET);
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ac6:	4834      	ldr	r0, [pc, #208]	; (8000b98 <MX_GPIO_Init+0x168>)
 8000ac8:	f000 ff68 	bl	800199c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000acc:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000ad0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ad2:	2303      	movs	r3, #3
 8000ad4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ada:	f107 0314 	add.w	r3, r7, #20
 8000ade:	4619      	mov	r1, r3
 8000ae0:	482e      	ldr	r0, [pc, #184]	; (8000b9c <MX_GPIO_Init+0x16c>)
 8000ae2:	f000 fdc1 	bl	8001668 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin 
                           PAPin */
  GPIO_InitStruct.Pin = ROW4_Pin|ROW3_Pin|ROW2_Pin|ROW1_Pin 
 8000ae6:	231f      	movs	r3, #31
 8000ae8:	617b      	str	r3, [r7, #20]
                          |ROW0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aea:	2301      	movs	r3, #1
 8000aec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000aee:	2302      	movs	r3, #2
 8000af0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af2:	2300      	movs	r3, #0
 8000af4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af6:	f107 0314 	add.w	r3, r7, #20
 8000afa:	4619      	mov	r1, r3
 8000afc:	4825      	ldr	r0, [pc, #148]	; (8000b94 <MX_GPIO_Init+0x164>)
 8000afe:	f000 fdb3 	bl	8001668 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = COL0_Pin|COL1_Pin|COL2_Pin;
 8000b02:	23e0      	movs	r3, #224	; 0xe0
 8000b04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b06:	2300      	movs	r3, #0
 8000b08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b0a:	2302      	movs	r3, #2
 8000b0c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b0e:	f107 0314 	add.w	r3, r7, #20
 8000b12:	4619      	mov	r1, r3
 8000b14:	481f      	ldr	r0, [pc, #124]	; (8000b94 <MX_GPIO_Init+0x164>)
 8000b16:	f000 fda7 	bl	8001668 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin 
                           PBPin PBPin PBPin PBPin 
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = COL3_Pin|COL4_Pin|COL5_Pin|COL6_Pin 
 8000b1a:	f248 53ff 	movw	r3, #34303	; 0x85ff
 8000b1e:	617b      	str	r3, [r7, #20]
                          |COL7_Pin|COL8_Pin|COL9_Pin|COL10_Pin 
                          |COL11_Pin|COL12_Pin|COL13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b20:	2300      	movs	r3, #0
 8000b22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b24:	2302      	movs	r3, #2
 8000b26:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b28:	f107 0314 	add.w	r3, r7, #20
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	481a      	ldr	r0, [pc, #104]	; (8000b98 <MX_GPIO_Init+0x168>)
 8000b30:	f000 fd9a 	bl	8001668 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8000b34:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000b38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b3a:	2303      	movs	r3, #3
 8000b3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b42:	f107 0314 	add.w	r3, r7, #20
 8000b46:	4619      	mov	r1, r3
 8000b48:	4813      	ldr	r0, [pc, #76]	; (8000b98 <MX_GPIO_Init+0x168>)
 8000b4a:	f000 fd8d 	bl	8001668 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15;
 8000b4e:	f44f 4307 	mov.w	r3, #34560	; 0x8700
 8000b52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b54:	2303      	movs	r3, #3
 8000b56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b5c:	f107 0314 	add.w	r3, r7, #20
 8000b60:	4619      	mov	r1, r3
 8000b62:	480c      	ldr	r0, [pc, #48]	; (8000b94 <MX_GPIO_Init+0x164>)
 8000b64:	f000 fd80 	bl	8001668 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CAPLED_Pin;
 8000b68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b72:	2302      	movs	r3, #2
 8000b74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b76:	2300      	movs	r3, #0
 8000b78:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CAPLED_GPIO_Port, &GPIO_InitStruct);
 8000b7a:	f107 0314 	add.w	r3, r7, #20
 8000b7e:	4619      	mov	r1, r3
 8000b80:	4805      	ldr	r0, [pc, #20]	; (8000b98 <MX_GPIO_Init+0x168>)
 8000b82:	f000 fd71 	bl	8001668 <HAL_GPIO_Init>

}
 8000b86:	bf00      	nop
 8000b88:	3728      	adds	r7, #40	; 0x28
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	40023800 	.word	0x40023800
 8000b94:	40020000 	.word	0x40020000
 8000b98:	40020400 	.word	0x40020400
 8000b9c:	40020800 	.word	0x40020800

08000ba0 <keyboard_init>:
{
    matrix_setup();
}

void keyboard_init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
    matrix_init();
 8000ba4:	f000 f8ec 	bl	8000d80 <matrix_init>
}
 8000ba8:	bf00      	nop
 8000baa:	bd80      	pop	{r7, pc}

08000bac <keyboard_task>:
/*
 * Do keyboard routine jobs: scan matrix, light LEDs, ...
 * This is repeatedly called as fast as possible.
 */
void keyboard_task(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b084      	sub	sp, #16
 8000bb0:	af00      	add	r7, sp, #0
	static matrix_row_t matrix_prev[MATRIX_ROWS];
	static uint8_t is_change = 0;
    matrix_row_t matrix_row = 0;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	813b      	strh	r3, [r7, #8]
    matrix_row_t matrix_change = 0;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	80fb      	strh	r3, [r7, #6]
//    uint8_t is_null = 0;

    matrix_scan();
 8000bba:	f000 f901 	bl	8000dc0 <matrix_scan>
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	73fb      	strb	r3, [r7, #15]
 8000bc2:	e049      	b.n	8000c58 <keyboard_task+0xac>

        matrix_row = matrix_get_row(r);
 8000bc4:	7bfb      	ldrb	r3, [r7, #15]
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f000 f952 	bl	8000e70 <matrix_get_row>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	813b      	strh	r3, [r7, #8]

        matrix_change = matrix_row ^ matrix_prev[r];
 8000bd0:	7bfb      	ldrb	r3, [r7, #15]
 8000bd2:	4a29      	ldr	r2, [pc, #164]	; (8000c78 <keyboard_task+0xcc>)
 8000bd4:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000bd8:	893b      	ldrh	r3, [r7, #8]
 8000bda:	4053      	eors	r3, r2
 8000bdc:	80fb      	strh	r3, [r7, #6]
        if (matrix_change) {
 8000bde:	88fb      	ldrh	r3, [r7, #6]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d036      	beq.n	8000c52 <keyboard_task+0xa6>
        	is_change = 1;
 8000be4:	4b25      	ldr	r3, [pc, #148]	; (8000c7c <keyboard_task+0xd0>)
 8000be6:	2201      	movs	r2, #1
 8000be8:	701a      	strb	r2, [r3, #0]
//        	matrix_prev[r] = matrix_row;
            matrix_row_t col_mask = 1;
 8000bea:	2301      	movs	r3, #1
 8000bec:	81bb      	strh	r3, [r7, #12]
            for (uint8_t c = 0; c < MATRIX_COLS; c++, col_mask <<= 1 ) {
 8000bee:	2300      	movs	r3, #0
 8000bf0:	72fb      	strb	r3, [r7, #11]
 8000bf2:	e02b      	b.n	8000c4c <keyboard_task+0xa0>
                if (matrix_change & col_mask) {
 8000bf4:	88fa      	ldrh	r2, [r7, #6]
 8000bf6:	89bb      	ldrh	r3, [r7, #12]
 8000bf8:	4013      	ands	r3, r2
 8000bfa:	b29b      	uxth	r3, r3
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d01f      	beq.n	8000c40 <keyboard_task+0x94>
                    keyevent_t e = (keyevent_t){
 8000c00:	7afb      	ldrb	r3, [r7, #11]
 8000c02:	703b      	strb	r3, [r7, #0]
 8000c04:	7bfb      	ldrb	r3, [r7, #15]
 8000c06:	707b      	strb	r3, [r7, #1]
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & col_mask),
 8000c08:	893a      	ldrh	r2, [r7, #8]
 8000c0a:	89bb      	ldrh	r3, [r7, #12]
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	b29b      	uxth	r3, r3
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	bf14      	ite	ne
 8000c14:	2301      	movne	r3, #1
 8000c16:	2300      	moveq	r3, #0
 8000c18:	b2db      	uxtb	r3, r3
                    keyevent_t e = (keyevent_t){
 8000c1a:	70bb      	strb	r3, [r7, #2]
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	80bb      	strh	r3, [r7, #4]
                        .time = 1/* time should not be 0 */
                    };
                    action_exec(e);
 8000c20:	463b      	mov	r3, r7
 8000c22:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000c26:	f7ff fc83 	bl	8000530 <action_exec>

                    // record a processed key
                    matrix_prev[r] ^= col_mask;
 8000c2a:	7bfb      	ldrb	r3, [r7, #15]
 8000c2c:	4a12      	ldr	r2, [pc, #72]	; (8000c78 <keyboard_task+0xcc>)
 8000c2e:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000c32:	7bfb      	ldrb	r3, [r7, #15]
 8000c34:	89ba      	ldrh	r2, [r7, #12]
 8000c36:	404a      	eors	r2, r1
 8000c38:	b291      	uxth	r1, r2
 8000c3a:	4a0f      	ldr	r2, [pc, #60]	; (8000c78 <keyboard_task+0xcc>)
 8000c3c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            for (uint8_t c = 0; c < MATRIX_COLS; c++, col_mask <<= 1 ) {
 8000c40:	7afb      	ldrb	r3, [r7, #11]
 8000c42:	3301      	adds	r3, #1
 8000c44:	72fb      	strb	r3, [r7, #11]
 8000c46:	89bb      	ldrh	r3, [r7, #12]
 8000c48:	005b      	lsls	r3, r3, #1
 8000c4a:	81bb      	strh	r3, [r7, #12]
 8000c4c:	7afb      	ldrb	r3, [r7, #11]
 8000c4e:	2b0d      	cmp	r3, #13
 8000c50:	d9d0      	bls.n	8000bf4 <keyboard_task+0x48>
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
 8000c52:	7bfb      	ldrb	r3, [r7, #15]
 8000c54:	3301      	adds	r3, #1
 8000c56:	73fb      	strb	r3, [r7, #15]
 8000c58:	7bfb      	ldrb	r3, [r7, #15]
 8000c5a:	2b04      	cmp	r3, #4
 8000c5c:	d9b2      	bls.n	8000bc4 <keyboard_task+0x18>
        }
//        if(matrix_row == 0){
//        	is_null++;
//        }
    }
    if (is_change == 1){
 8000c5e:	4b07      	ldr	r3, [pc, #28]	; (8000c7c <keyboard_task+0xd0>)
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	2b01      	cmp	r3, #1
 8000c64:	d104      	bne.n	8000c70 <keyboard_task+0xc4>
    	send_keyboard_report();
 8000c66:	f7ff fc53 	bl	8000510 <send_keyboard_report>
    	is_change = 0;
 8000c6a:	4b04      	ldr	r3, [pc, #16]	; (8000c7c <keyboard_task+0xd0>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	701a      	strb	r2, [r3, #0]
    }

//    if(is_null == 5){
//    	clear();
//    }
}
 8000c70:	bf00      	nop
 8000c72:	3710      	adds	r7, #16
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	20000238 	.word	0x20000238
 8000c7c:	20000242 	.word	0x20000242

08000c80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c84:	f000 fb4a 	bl	800131c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c88:	f000 f80a 	bl	8000ca0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c8c:	f7ff fed0 	bl	8000a30 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000c90:	f005 f9de 	bl	8006050 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  keyboard_init();
 8000c94:	f7ff ff84 	bl	8000ba0 <keyboard_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  keyboard_task();
 8000c98:	f7ff ff88 	bl	8000bac <keyboard_task>
 8000c9c:	e7fc      	b.n	8000c98 <main+0x18>
	...

08000ca0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b094      	sub	sp, #80	; 0x50
 8000ca4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ca6:	f107 0320 	add.w	r3, r7, #32
 8000caa:	2230      	movs	r2, #48	; 0x30
 8000cac:	2100      	movs	r1, #0
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f005 fe1c 	bl	80068ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cb4:	f107 030c 	add.w	r3, r7, #12
 8000cb8:	2200      	movs	r2, #0
 8000cba:	601a      	str	r2, [r3, #0]
 8000cbc:	605a      	str	r2, [r3, #4]
 8000cbe:	609a      	str	r2, [r3, #8]
 8000cc0:	60da      	str	r2, [r3, #12]
 8000cc2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	60bb      	str	r3, [r7, #8]
 8000cc8:	4b27      	ldr	r3, [pc, #156]	; (8000d68 <SystemClock_Config+0xc8>)
 8000cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ccc:	4a26      	ldr	r2, [pc, #152]	; (8000d68 <SystemClock_Config+0xc8>)
 8000cce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cd2:	6413      	str	r3, [r2, #64]	; 0x40
 8000cd4:	4b24      	ldr	r3, [pc, #144]	; (8000d68 <SystemClock_Config+0xc8>)
 8000cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cdc:	60bb      	str	r3, [r7, #8]
 8000cde:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	607b      	str	r3, [r7, #4]
 8000ce4:	4b21      	ldr	r3, [pc, #132]	; (8000d6c <SystemClock_Config+0xcc>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a20      	ldr	r2, [pc, #128]	; (8000d6c <SystemClock_Config+0xcc>)
 8000cea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000cee:	6013      	str	r3, [r2, #0]
 8000cf0:	4b1e      	ldr	r3, [pc, #120]	; (8000d6c <SystemClock_Config+0xcc>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000cf8:	607b      	str	r3, [r7, #4]
 8000cfa:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d00:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d04:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d06:	2302      	movs	r3, #2
 8000d08:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d0a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000d10:	2319      	movs	r3, #25
 8000d12:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000d14:	23c0      	movs	r3, #192	; 0xc0
 8000d16:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d18:	2302      	movs	r3, #2
 8000d1a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d1c:	2304      	movs	r3, #4
 8000d1e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d20:	f107 0320 	add.w	r3, r7, #32
 8000d24:	4618      	mov	r0, r3
 8000d26:	f001 ffbd 	bl	8002ca4 <HAL_RCC_OscConfig>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000d30:	f000 f81e 	bl	8000d70 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d34:	230f      	movs	r3, #15
 8000d36:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d38:	2302      	movs	r3, #2
 8000d3a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d44:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d46:	2300      	movs	r3, #0
 8000d48:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000d4a:	f107 030c 	add.w	r3, r7, #12
 8000d4e:	2103      	movs	r1, #3
 8000d50:	4618      	mov	r0, r3
 8000d52:	f002 fa17 	bl	8003184 <HAL_RCC_ClockConfig>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000d5c:	f000 f808 	bl	8000d70 <Error_Handler>
  }
}
 8000d60:	bf00      	nop
 8000d62:	3750      	adds	r7, #80	; 0x50
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	40023800 	.word	0x40023800
 8000d6c:	40007000 	.word	0x40007000

08000d70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000d74:	bf00      	nop
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
	...

08000d80 <matrix_init>:
#define LED_OFF()   do { palClearPad(GPIOB, 1); } while (0)
#define LED_TGL()   do { palTogglePad(GPIOB, 1); } while (0)
#endif

void matrix_init(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b083      	sub	sp, #12
 8000d84:	af00      	add	r7, sp, #0
    // initialize row and col
//    init_rows();
//    init_cols();

    // initialize matrix state: all keys off
    for (uint8_t i=0; i < MATRIX_ROWS; i++) {
 8000d86:	2300      	movs	r3, #0
 8000d88:	71fb      	strb	r3, [r7, #7]
 8000d8a:	e00c      	b.n	8000da6 <matrix_init+0x26>
        matrix[i] = 0;
 8000d8c:	79fb      	ldrb	r3, [r7, #7]
 8000d8e:	4a0a      	ldr	r2, [pc, #40]	; (8000db8 <matrix_init+0x38>)
 8000d90:	2100      	movs	r1, #0
 8000d92:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        matrix_debouncing[i] = 0;
 8000d96:	79fb      	ldrb	r3, [r7, #7]
 8000d98:	4a08      	ldr	r2, [pc, #32]	; (8000dbc <matrix_init+0x3c>)
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (uint8_t i=0; i < MATRIX_ROWS; i++) {
 8000da0:	79fb      	ldrb	r3, [r7, #7]
 8000da2:	3301      	adds	r3, #1
 8000da4:	71fb      	strb	r3, [r7, #7]
 8000da6:	79fb      	ldrb	r3, [r7, #7]
 8000da8:	2b04      	cmp	r3, #4
 8000daa:	d9ef      	bls.n	8000d8c <matrix_init+0xc>
    }


}
 8000dac:	bf00      	nop
 8000dae:	370c      	adds	r7, #12
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr
 8000db8:	20000244 	.word	0x20000244
 8000dbc:	20000250 	.word	0x20000250

08000dc0 <matrix_scan>:

uint8_t matrix_scan(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0

    for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	71fb      	strb	r3, [r7, #7]
 8000dca:	e020      	b.n	8000e0e <matrix_scan+0x4e>
    	select_row(i);
 8000dcc:	79fb      	ldrb	r3, [r7, #7]
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f000 f954 	bl	800107c <select_row>
    	HAL_Delay(1); // without this wait read unstable value.
 8000dd4:	2001      	movs	r0, #1
 8000dd6:	f000 fb13 	bl	8001400 <HAL_Delay>
        matrix_row_t cols = read_cols();
 8000dda:	f000 f85b 	bl	8000e94 <read_cols>
 8000dde:	4603      	mov	r3, r0
 8000de0:	80bb      	strh	r3, [r7, #4]
        if (matrix_debouncing[i] != cols) {
 8000de2:	79fb      	ldrb	r3, [r7, #7]
 8000de4:	4a1f      	ldr	r2, [pc, #124]	; (8000e64 <matrix_scan+0xa4>)
 8000de6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000dea:	88ba      	ldrh	r2, [r7, #4]
 8000dec:	429a      	cmp	r2, r3
 8000dee:	d007      	beq.n	8000e00 <matrix_scan+0x40>
            matrix_debouncing[i] = cols;
 8000df0:	79fb      	ldrb	r3, [r7, #7]
 8000df2:	491c      	ldr	r1, [pc, #112]	; (8000e64 <matrix_scan+0xa4>)
 8000df4:	88ba      	ldrh	r2, [r7, #4]
 8000df6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
//            matrix[i] = matrix_debouncing[i];

            debouncing = DEBOUNCE;
 8000dfa:	4b1b      	ldr	r3, [pc, #108]	; (8000e68 <matrix_scan+0xa8>)
 8000dfc:	2203      	movs	r2, #3
 8000dfe:	701a      	strb	r2, [r3, #0]
        }
        unselect_rows(i);
 8000e00:	79fb      	ldrb	r3, [r7, #7]
 8000e02:	4618      	mov	r0, r3
 8000e04:	f000 f900 	bl	8001008 <unselect_rows>
    for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
 8000e08:	79fb      	ldrb	r3, [r7, #7]
 8000e0a:	3301      	adds	r3, #1
 8000e0c:	71fb      	strb	r3, [r7, #7]
 8000e0e:	79fb      	ldrb	r3, [r7, #7]
 8000e10:	2b04      	cmp	r3, #4
 8000e12:	d9db      	bls.n	8000dcc <matrix_scan+0xc>
    }

    if (debouncing) {
 8000e14:	4b14      	ldr	r3, [pc, #80]	; (8000e68 <matrix_scan+0xa8>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d01e      	beq.n	8000e5a <matrix_scan+0x9a>
        if (--debouncing) {
 8000e1c:	4b12      	ldr	r3, [pc, #72]	; (8000e68 <matrix_scan+0xa8>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	3b01      	subs	r3, #1
 8000e22:	b2da      	uxtb	r2, r3
 8000e24:	4b10      	ldr	r3, [pc, #64]	; (8000e68 <matrix_scan+0xa8>)
 8000e26:	701a      	strb	r2, [r3, #0]
 8000e28:	4b0f      	ldr	r3, [pc, #60]	; (8000e68 <matrix_scan+0xa8>)
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d003      	beq.n	8000e38 <matrix_scan+0x78>
        	HAL_Delay(1);
 8000e30:	2001      	movs	r0, #1
 8000e32:	f000 fae5 	bl	8001400 <HAL_Delay>
 8000e36:	e010      	b.n	8000e5a <matrix_scan+0x9a>
        } else {
            for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
 8000e38:	2300      	movs	r3, #0
 8000e3a:	71bb      	strb	r3, [r7, #6]
 8000e3c:	e00a      	b.n	8000e54 <matrix_scan+0x94>
                matrix[i] = matrix_debouncing[i];
 8000e3e:	79ba      	ldrb	r2, [r7, #6]
 8000e40:	79bb      	ldrb	r3, [r7, #6]
 8000e42:	4908      	ldr	r1, [pc, #32]	; (8000e64 <matrix_scan+0xa4>)
 8000e44:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8000e48:	4a08      	ldr	r2, [pc, #32]	; (8000e6c <matrix_scan+0xac>)
 8000e4a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
 8000e4e:	79bb      	ldrb	r3, [r7, #6]
 8000e50:	3301      	adds	r3, #1
 8000e52:	71bb      	strb	r3, [r7, #6]
 8000e54:	79bb      	ldrb	r3, [r7, #6]
 8000e56:	2b04      	cmp	r3, #4
 8000e58:	d9f1      	bls.n	8000e3e <matrix_scan+0x7e>
            }
        }
    }

    return 1;
 8000e5a:	2301      	movs	r3, #1
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	3708      	adds	r7, #8
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	20000250 	.word	0x20000250
 8000e68:	20000004 	.word	0x20000004
 8000e6c:	20000244 	.word	0x20000244

08000e70 <matrix_get_row>:
    return (matrix[row] & ((matrix_row_t)1<<col));
}


inline matrix_row_t matrix_get_row(uint8_t row)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b083      	sub	sp, #12
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	4603      	mov	r3, r0
 8000e78:	71fb      	strb	r3, [r7, #7]
//    matrix_row_t matrix_row = 0;
//    select_row(row);
//    HAL_Delay(1); // without this wait read unstable value.
//    matrix_row = read_cols();
//    unselect_rows(row);
    return matrix[row];
 8000e7a:	79fb      	ldrb	r3, [r7, #7]
 8000e7c:	4a04      	ldr	r2, [pc, #16]	; (8000e90 <matrix_get_row+0x20>)
 8000e7e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	370c      	adds	r7, #12
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	20000244 	.word	0x20000244

08000e94 <read_cols>:
//
/* Returns status of switches(1:on, 0:off)
    读取每列的电平，如果检测到高电平，则视为该列的键被按下
*/
matrix_row_t read_cols(void)
{
 8000e94:	b598      	push	{r3, r4, r7, lr}
 8000e96:	af00      	add	r7, sp, #0
    return ((HAL_GPIO_ReadPin(COL0_GPIO_Port, COL0_Pin)==1) ? (1<<0):0) |
 8000e98:	2120      	movs	r1, #32
 8000e9a:	4859      	ldr	r0, [pc, #356]	; (8001000 <read_cols+0x16c>)
 8000e9c:	f000 fd66 	bl	800196c <HAL_GPIO_ReadPin>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b01      	cmp	r3, #1
 8000ea4:	bf0c      	ite	eq
 8000ea6:	2301      	moveq	r3, #1
 8000ea8:	2300      	movne	r3, #0
 8000eaa:	b2db      	uxtb	r3, r3
 8000eac:	b21c      	sxth	r4, r3
           ((HAL_GPIO_ReadPin(COL1_GPIO_Port, COL1_Pin)==1) ? (1<<1):0) |
 8000eae:	2140      	movs	r1, #64	; 0x40
 8000eb0:	4853      	ldr	r0, [pc, #332]	; (8001000 <read_cols+0x16c>)
 8000eb2:	f000 fd5b 	bl	800196c <HAL_GPIO_ReadPin>
 8000eb6:	4603      	mov	r3, r0
    return ((HAL_GPIO_ReadPin(COL0_GPIO_Port, COL0_Pin)==1) ? (1<<0):0) |
 8000eb8:	2b01      	cmp	r3, #1
 8000eba:	d101      	bne.n	8000ec0 <read_cols+0x2c>
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	e000      	b.n	8000ec2 <read_cols+0x2e>
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	4323      	orrs	r3, r4
 8000ec4:	b21c      	sxth	r4, r3
           ((HAL_GPIO_ReadPin(COL2_GPIO_Port, COL2_Pin)==1) ? (1<<2):0) |
 8000ec6:	2180      	movs	r1, #128	; 0x80
 8000ec8:	484d      	ldr	r0, [pc, #308]	; (8001000 <read_cols+0x16c>)
 8000eca:	f000 fd4f 	bl	800196c <HAL_GPIO_ReadPin>
 8000ece:	4603      	mov	r3, r0
           ((HAL_GPIO_ReadPin(COL1_GPIO_Port, COL1_Pin)==1) ? (1<<1):0) |
 8000ed0:	2b01      	cmp	r3, #1
 8000ed2:	d101      	bne.n	8000ed8 <read_cols+0x44>
 8000ed4:	2304      	movs	r3, #4
 8000ed6:	e000      	b.n	8000eda <read_cols+0x46>
 8000ed8:	2300      	movs	r3, #0
 8000eda:	4323      	orrs	r3, r4
 8000edc:	b21c      	sxth	r4, r3
           ((HAL_GPIO_ReadPin(COL3_GPIO_Port, COL3_Pin)==1) ? (1<<3):0) |
 8000ede:	2101      	movs	r1, #1
 8000ee0:	4848      	ldr	r0, [pc, #288]	; (8001004 <read_cols+0x170>)
 8000ee2:	f000 fd43 	bl	800196c <HAL_GPIO_ReadPin>
 8000ee6:	4603      	mov	r3, r0
           ((HAL_GPIO_ReadPin(COL2_GPIO_Port, COL2_Pin)==1) ? (1<<2):0) |
 8000ee8:	2b01      	cmp	r3, #1
 8000eea:	d101      	bne.n	8000ef0 <read_cols+0x5c>
 8000eec:	2308      	movs	r3, #8
 8000eee:	e000      	b.n	8000ef2 <read_cols+0x5e>
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	4323      	orrs	r3, r4
 8000ef4:	b21c      	sxth	r4, r3
           ((HAL_GPIO_ReadPin(COL4_GPIO_Port, COL4_Pin)==1) ? (1<<4):0) |
 8000ef6:	2102      	movs	r1, #2
 8000ef8:	4842      	ldr	r0, [pc, #264]	; (8001004 <read_cols+0x170>)
 8000efa:	f000 fd37 	bl	800196c <HAL_GPIO_ReadPin>
 8000efe:	4603      	mov	r3, r0
           ((HAL_GPIO_ReadPin(COL3_GPIO_Port, COL3_Pin)==1) ? (1<<3):0) |
 8000f00:	2b01      	cmp	r3, #1
 8000f02:	d101      	bne.n	8000f08 <read_cols+0x74>
 8000f04:	2310      	movs	r3, #16
 8000f06:	e000      	b.n	8000f0a <read_cols+0x76>
 8000f08:	2300      	movs	r3, #0
 8000f0a:	4323      	orrs	r3, r4
 8000f0c:	b21c      	sxth	r4, r3
           ((HAL_GPIO_ReadPin(COL5_GPIO_Port, COL5_Pin)==1) ? (1<<5):0) |
 8000f0e:	2104      	movs	r1, #4
 8000f10:	483c      	ldr	r0, [pc, #240]	; (8001004 <read_cols+0x170>)
 8000f12:	f000 fd2b 	bl	800196c <HAL_GPIO_ReadPin>
 8000f16:	4603      	mov	r3, r0
           ((HAL_GPIO_ReadPin(COL4_GPIO_Port, COL4_Pin)==1) ? (1<<4):0) |
 8000f18:	2b01      	cmp	r3, #1
 8000f1a:	d101      	bne.n	8000f20 <read_cols+0x8c>
 8000f1c:	2320      	movs	r3, #32
 8000f1e:	e000      	b.n	8000f22 <read_cols+0x8e>
 8000f20:	2300      	movs	r3, #0
 8000f22:	4323      	orrs	r3, r4
 8000f24:	b21c      	sxth	r4, r3
           ((HAL_GPIO_ReadPin(COL6_GPIO_Port, COL6_Pin)==1) ? (1<<6):0) |
 8000f26:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f2a:	4836      	ldr	r0, [pc, #216]	; (8001004 <read_cols+0x170>)
 8000f2c:	f000 fd1e 	bl	800196c <HAL_GPIO_ReadPin>
 8000f30:	4603      	mov	r3, r0
           ((HAL_GPIO_ReadPin(COL5_GPIO_Port, COL5_Pin)==1) ? (1<<5):0) |
 8000f32:	2b01      	cmp	r3, #1
 8000f34:	d101      	bne.n	8000f3a <read_cols+0xa6>
 8000f36:	2340      	movs	r3, #64	; 0x40
 8000f38:	e000      	b.n	8000f3c <read_cols+0xa8>
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	4323      	orrs	r3, r4
 8000f3e:	b21c      	sxth	r4, r3
           ((HAL_GPIO_ReadPin(COL7_GPIO_Port, COL7_Pin)==1) ? (1<<7):0) |
 8000f40:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f44:	482f      	ldr	r0, [pc, #188]	; (8001004 <read_cols+0x170>)
 8000f46:	f000 fd11 	bl	800196c <HAL_GPIO_ReadPin>
 8000f4a:	4603      	mov	r3, r0
           ((HAL_GPIO_ReadPin(COL6_GPIO_Port, COL6_Pin)==1) ? (1<<6):0) |
 8000f4c:	2b01      	cmp	r3, #1
 8000f4e:	d101      	bne.n	8000f54 <read_cols+0xc0>
 8000f50:	2380      	movs	r3, #128	; 0x80
 8000f52:	e000      	b.n	8000f56 <read_cols+0xc2>
 8000f54:	2300      	movs	r3, #0
 8000f56:	4323      	orrs	r3, r4
 8000f58:	b21c      	sxth	r4, r3
           ((HAL_GPIO_ReadPin(COL8_GPIO_Port, COL8_Pin)==1) ? (1<<8):0) |
 8000f5a:	2108      	movs	r1, #8
 8000f5c:	4829      	ldr	r0, [pc, #164]	; (8001004 <read_cols+0x170>)
 8000f5e:	f000 fd05 	bl	800196c <HAL_GPIO_ReadPin>
 8000f62:	4603      	mov	r3, r0
           ((HAL_GPIO_ReadPin(COL7_GPIO_Port, COL7_Pin)==1) ? (1<<7):0) |
 8000f64:	2b01      	cmp	r3, #1
 8000f66:	d102      	bne.n	8000f6e <read_cols+0xda>
 8000f68:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f6c:	e000      	b.n	8000f70 <read_cols+0xdc>
 8000f6e:	2300      	movs	r3, #0
 8000f70:	4323      	orrs	r3, r4
 8000f72:	b21c      	sxth	r4, r3
           ((HAL_GPIO_ReadPin(COL9_GPIO_Port, COL9_Pin)==1) ? (1<<9):0) |
 8000f74:	2110      	movs	r1, #16
 8000f76:	4823      	ldr	r0, [pc, #140]	; (8001004 <read_cols+0x170>)
 8000f78:	f000 fcf8 	bl	800196c <HAL_GPIO_ReadPin>
 8000f7c:	4603      	mov	r3, r0
           ((HAL_GPIO_ReadPin(COL8_GPIO_Port, COL8_Pin)==1) ? (1<<8):0) |
 8000f7e:	2b01      	cmp	r3, #1
 8000f80:	d102      	bne.n	8000f88 <read_cols+0xf4>
 8000f82:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f86:	e000      	b.n	8000f8a <read_cols+0xf6>
 8000f88:	2300      	movs	r3, #0
 8000f8a:	4323      	orrs	r3, r4
 8000f8c:	b21c      	sxth	r4, r3
           ((HAL_GPIO_ReadPin(COL10_GPIO_Port, COL10_Pin)==1) ? (1<<10):0) |
 8000f8e:	2120      	movs	r1, #32
 8000f90:	481c      	ldr	r0, [pc, #112]	; (8001004 <read_cols+0x170>)
 8000f92:	f000 fceb 	bl	800196c <HAL_GPIO_ReadPin>
 8000f96:	4603      	mov	r3, r0
           ((HAL_GPIO_ReadPin(COL9_GPIO_Port, COL9_Pin)==1) ? (1<<9):0) |
 8000f98:	2b01      	cmp	r3, #1
 8000f9a:	d102      	bne.n	8000fa2 <read_cols+0x10e>
 8000f9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fa0:	e000      	b.n	8000fa4 <read_cols+0x110>
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	4323      	orrs	r3, r4
 8000fa6:	b21c      	sxth	r4, r3
           ((HAL_GPIO_ReadPin(COL11_GPIO_Port, COL11_Pin)==1) ? (1<<11):0) |
 8000fa8:	2140      	movs	r1, #64	; 0x40
 8000faa:	4816      	ldr	r0, [pc, #88]	; (8001004 <read_cols+0x170>)
 8000fac:	f000 fcde 	bl	800196c <HAL_GPIO_ReadPin>
 8000fb0:	4603      	mov	r3, r0
           ((HAL_GPIO_ReadPin(COL10_GPIO_Port, COL10_Pin)==1) ? (1<<10):0) |
 8000fb2:	2b01      	cmp	r3, #1
 8000fb4:	d102      	bne.n	8000fbc <read_cols+0x128>
 8000fb6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000fba:	e000      	b.n	8000fbe <read_cols+0x12a>
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	4323      	orrs	r3, r4
 8000fc0:	b21c      	sxth	r4, r3
           ((HAL_GPIO_ReadPin(COL12_GPIO_Port, COL12_Pin)==1) ? (1<<12):0) |
 8000fc2:	2180      	movs	r1, #128	; 0x80
 8000fc4:	480f      	ldr	r0, [pc, #60]	; (8001004 <read_cols+0x170>)
 8000fc6:	f000 fcd1 	bl	800196c <HAL_GPIO_ReadPin>
 8000fca:	4603      	mov	r3, r0
           ((HAL_GPIO_ReadPin(COL11_GPIO_Port, COL11_Pin)==1) ? (1<<11):0) |
 8000fcc:	2b01      	cmp	r3, #1
 8000fce:	d102      	bne.n	8000fd6 <read_cols+0x142>
 8000fd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fd4:	e000      	b.n	8000fd8 <read_cols+0x144>
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	4323      	orrs	r3, r4
 8000fda:	b21c      	sxth	r4, r3
           ((HAL_GPIO_ReadPin(COL13_GPIO_Port, COL13_Pin)==1) ? (1<<13):0);
 8000fdc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fe0:	4808      	ldr	r0, [pc, #32]	; (8001004 <read_cols+0x170>)
 8000fe2:	f000 fcc3 	bl	800196c <HAL_GPIO_ReadPin>
 8000fe6:	4603      	mov	r3, r0
           ((HAL_GPIO_ReadPin(COL12_GPIO_Port, COL12_Pin)==1) ? (1<<12):0) |
 8000fe8:	2b01      	cmp	r3, #1
 8000fea:	d102      	bne.n	8000ff2 <read_cols+0x15e>
 8000fec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ff0:	e000      	b.n	8000ff4 <read_cols+0x160>
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	4323      	orrs	r3, r4
 8000ff6:	b21b      	sxth	r3, r3
 8000ff8:	b29b      	uxth	r3, r3
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	bd98      	pop	{r3, r4, r7, pc}
 8000ffe:	bf00      	nop
 8001000:	40020000 	.word	0x40020000
 8001004:	40020400 	.word	0x40020400

08001008 <unselect_rows>:

/* 复位每行的电平为低电平 */
void unselect_rows(uint8_t row)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	4603      	mov	r3, r0
 8001010:	71fb      	strb	r3, [r7, #7]
	switch (row) {
 8001012:	79fb      	ldrb	r3, [r7, #7]
 8001014:	2b04      	cmp	r3, #4
 8001016:	d82b      	bhi.n	8001070 <unselect_rows+0x68>
 8001018:	a201      	add	r2, pc, #4	; (adr r2, 8001020 <unselect_rows+0x18>)
 800101a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800101e:	bf00      	nop
 8001020:	08001035 	.word	0x08001035
 8001024:	08001041 	.word	0x08001041
 8001028:	0800104d 	.word	0x0800104d
 800102c:	08001059 	.word	0x08001059
 8001030:	08001065 	.word	0x08001065
		case 0:
			HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, GPIO_PIN_RESET);
 8001034:	2200      	movs	r2, #0
 8001036:	2110      	movs	r1, #16
 8001038:	480f      	ldr	r0, [pc, #60]	; (8001078 <unselect_rows+0x70>)
 800103a:	f000 fcaf 	bl	800199c <HAL_GPIO_WritePin>
			break;
 800103e:	e017      	b.n	8001070 <unselect_rows+0x68>
		case 1:
			HAL_GPIO_WritePin(ROW1_GPIO_Port, ROW1_Pin, GPIO_PIN_RESET);
 8001040:	2200      	movs	r2, #0
 8001042:	2108      	movs	r1, #8
 8001044:	480c      	ldr	r0, [pc, #48]	; (8001078 <unselect_rows+0x70>)
 8001046:	f000 fca9 	bl	800199c <HAL_GPIO_WritePin>
			break;
 800104a:	e011      	b.n	8001070 <unselect_rows+0x68>
		case 2:
			HAL_GPIO_WritePin(ROW2_GPIO_Port, ROW2_Pin, GPIO_PIN_RESET);
 800104c:	2200      	movs	r2, #0
 800104e:	2104      	movs	r1, #4
 8001050:	4809      	ldr	r0, [pc, #36]	; (8001078 <unselect_rows+0x70>)
 8001052:	f000 fca3 	bl	800199c <HAL_GPIO_WritePin>
			break;
 8001056:	e00b      	b.n	8001070 <unselect_rows+0x68>
		case 3:
			HAL_GPIO_WritePin(ROW3_GPIO_Port, ROW3_Pin, GPIO_PIN_RESET);
 8001058:	2200      	movs	r2, #0
 800105a:	2102      	movs	r1, #2
 800105c:	4806      	ldr	r0, [pc, #24]	; (8001078 <unselect_rows+0x70>)
 800105e:	f000 fc9d 	bl	800199c <HAL_GPIO_WritePin>
			break;
 8001062:	e005      	b.n	8001070 <unselect_rows+0x68>
		case 4:
			HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW4_Pin, GPIO_PIN_RESET);
 8001064:	2200      	movs	r2, #0
 8001066:	2101      	movs	r1, #1
 8001068:	4803      	ldr	r0, [pc, #12]	; (8001078 <unselect_rows+0x70>)
 800106a:	f000 fc97 	bl	800199c <HAL_GPIO_WritePin>
			break;
 800106e:	bf00      	nop
	}
}
 8001070:	bf00      	nop
 8001072:	3708      	adds	r7, #8
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	40020000 	.word	0x40020000

0800107c <select_row>:

/* 设置每行的输出电平为高电平 */
void select_row(uint8_t row)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	4603      	mov	r3, r0
 8001084:	71fb      	strb	r3, [r7, #7]
    switch (row) {
 8001086:	79fb      	ldrb	r3, [r7, #7]
 8001088:	2b04      	cmp	r3, #4
 800108a:	d82b      	bhi.n	80010e4 <select_row+0x68>
 800108c:	a201      	add	r2, pc, #4	; (adr r2, 8001094 <select_row+0x18>)
 800108e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001092:	bf00      	nop
 8001094:	080010a9 	.word	0x080010a9
 8001098:	080010b5 	.word	0x080010b5
 800109c:	080010c1 	.word	0x080010c1
 80010a0:	080010cd 	.word	0x080010cd
 80010a4:	080010d9 	.word	0x080010d9
        case 0:
        	HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, GPIO_PIN_SET);
 80010a8:	2201      	movs	r2, #1
 80010aa:	2110      	movs	r1, #16
 80010ac:	480f      	ldr	r0, [pc, #60]	; (80010ec <select_row+0x70>)
 80010ae:	f000 fc75 	bl	800199c <HAL_GPIO_WritePin>
            break;
 80010b2:	e017      	b.n	80010e4 <select_row+0x68>
        case 1:
        	HAL_GPIO_WritePin(ROW1_GPIO_Port, ROW1_Pin, GPIO_PIN_SET);
 80010b4:	2201      	movs	r2, #1
 80010b6:	2108      	movs	r1, #8
 80010b8:	480c      	ldr	r0, [pc, #48]	; (80010ec <select_row+0x70>)
 80010ba:	f000 fc6f 	bl	800199c <HAL_GPIO_WritePin>
            break;
 80010be:	e011      	b.n	80010e4 <select_row+0x68>
        case 2:
        	HAL_GPIO_WritePin(ROW2_GPIO_Port, ROW2_Pin, GPIO_PIN_SET);
 80010c0:	2201      	movs	r2, #1
 80010c2:	2104      	movs	r1, #4
 80010c4:	4809      	ldr	r0, [pc, #36]	; (80010ec <select_row+0x70>)
 80010c6:	f000 fc69 	bl	800199c <HAL_GPIO_WritePin>
            break;
 80010ca:	e00b      	b.n	80010e4 <select_row+0x68>
        case 3:
        	HAL_GPIO_WritePin(ROW3_GPIO_Port, ROW3_Pin, GPIO_PIN_SET);
 80010cc:	2201      	movs	r2, #1
 80010ce:	2102      	movs	r1, #2
 80010d0:	4806      	ldr	r0, [pc, #24]	; (80010ec <select_row+0x70>)
 80010d2:	f000 fc63 	bl	800199c <HAL_GPIO_WritePin>
            break;
 80010d6:	e005      	b.n	80010e4 <select_row+0x68>
        case 4:
        	HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW4_Pin, GPIO_PIN_SET);
 80010d8:	2201      	movs	r2, #1
 80010da:	2101      	movs	r1, #1
 80010dc:	4803      	ldr	r0, [pc, #12]	; (80010ec <select_row+0x70>)
 80010de:	f000 fc5d 	bl	800199c <HAL_GPIO_WritePin>
            break;
 80010e2:	bf00      	nop
    }
}
 80010e4:	bf00      	nop
 80010e6:	3708      	adds	r7, #8
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	40020000 	.word	0x40020000

080010f0 <action_for_key>:
};


/* converts key to action */
action_t action_for_key(uint8_t layer, keypos_t key)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	4603      	mov	r3, r0
 80010f8:	8039      	strh	r1, [r7, #0]
 80010fa:	71fb      	strb	r3, [r7, #7]
    uint8_t keycode = keymap_key_to_keycode(layer, key);
 80010fc:	79fb      	ldrb	r3, [r7, #7]
 80010fe:	6839      	ldr	r1, [r7, #0]
 8001100:	4618      	mov	r0, r3
 8001102:	f000 f80b 	bl	800111c <keymap_key_to_keycode>
 8001106:	4603      	mov	r3, r0
 8001108:	73fb      	strb	r3, [r7, #15]

    return keycode_to_action(keycode);
 800110a:	7bfb      	ldrb	r3, [r7, #15]
 800110c:	4618      	mov	r0, r3
 800110e:	f000 f823 	bl	8001158 <keycode_to_action>
 8001112:	4603      	mov	r3, r0
}
 8001114:	4618      	mov	r0, r3
 8001116:	3710      	adds	r7, #16
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}

0800111c <keymap_key_to_keycode>:

/* translates key to keycode */
uint8_t keymap_key_to_keycode(uint8_t layer, keypos_t key)
{
 800111c:	b490      	push	{r4, r7}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	4603      	mov	r3, r0
 8001124:	8039      	strh	r1, [r7, #0]
 8001126:	71fb      	strb	r3, [r7, #7]
    return keymaps[(layer)][(key.row)][(key.col)];
 8001128:	79fa      	ldrb	r2, [r7, #7]
 800112a:	787b      	ldrb	r3, [r7, #1]
 800112c:	4618      	mov	r0, r3
 800112e:	783b      	ldrb	r3, [r7, #0]
 8001130:	461c      	mov	r4, r3
 8001132:	4908      	ldr	r1, [pc, #32]	; (8001154 <keymap_key_to_keycode+0x38>)
 8001134:	4603      	mov	r3, r0
 8001136:	00db      	lsls	r3, r3, #3
 8001138:	1a1b      	subs	r3, r3, r0
 800113a:	005b      	lsls	r3, r3, #1
 800113c:	2046      	movs	r0, #70	; 0x46
 800113e:	fb00 f202 	mul.w	r2, r0, r2
 8001142:	4413      	add	r3, r2
 8001144:	440b      	add	r3, r1
 8001146:	4423      	add	r3, r4
 8001148:	781b      	ldrb	r3, [r3, #0]
}
 800114a:	4618      	mov	r0, r3
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bc90      	pop	{r4, r7}
 8001152:	4770      	bx	lr
 8001154:	08006ad0 	.word	0x08006ad0

08001158 <keycode_to_action>:

/* translates keycode to action */
action_t keycode_to_action(uint8_t keycode)
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	4603      	mov	r3, r0
 8001160:	71fb      	strb	r3, [r7, #7]
    if(KC_A <= keycode && keycode <= KC_RGUI){
 8001162:	79fb      	ldrb	r3, [r7, #7]
 8001164:	2b03      	cmp	r3, #3
 8001166:	d905      	bls.n	8001174 <keycode_to_action+0x1c>
 8001168:	79fb      	ldrb	r3, [r7, #7]
 800116a:	2be7      	cmp	r3, #231	; 0xe7
 800116c:	d802      	bhi.n	8001174 <keycode_to_action+0x1c>
        return (action_t)ACTION_KEY(keycode);
 800116e:	79fb      	ldrb	r3, [r7, #7]
 8001170:	b29b      	uxth	r3, r3
 8001172:	e000      	b.n	8001176 <keycode_to_action+0x1e>
    }
    else{
        return (action_t)ACTION_NO;
 8001174:	2300      	movs	r3, #0
    }
}
 8001176:	4618      	mov	r0, r3
 8001178:	370c      	adds	r7, #12
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
	...

08001184 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800118a:	2300      	movs	r3, #0
 800118c:	607b      	str	r3, [r7, #4]
 800118e:	4b10      	ldr	r3, [pc, #64]	; (80011d0 <HAL_MspInit+0x4c>)
 8001190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001192:	4a0f      	ldr	r2, [pc, #60]	; (80011d0 <HAL_MspInit+0x4c>)
 8001194:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001198:	6453      	str	r3, [r2, #68]	; 0x44
 800119a:	4b0d      	ldr	r3, [pc, #52]	; (80011d0 <HAL_MspInit+0x4c>)
 800119c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800119e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011a2:	607b      	str	r3, [r7, #4]
 80011a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011a6:	2300      	movs	r3, #0
 80011a8:	603b      	str	r3, [r7, #0]
 80011aa:	4b09      	ldr	r3, [pc, #36]	; (80011d0 <HAL_MspInit+0x4c>)
 80011ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ae:	4a08      	ldr	r2, [pc, #32]	; (80011d0 <HAL_MspInit+0x4c>)
 80011b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011b4:	6413      	str	r3, [r2, #64]	; 0x40
 80011b6:	4b06      	ldr	r3, [pc, #24]	; (80011d0 <HAL_MspInit+0x4c>)
 80011b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011be:	603b      	str	r3, [r7, #0]
 80011c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011c2:	bf00      	nop
 80011c4:	370c      	adds	r7, #12
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	40023800 	.word	0x40023800

080011d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80011d8:	bf00      	nop
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr

080011e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011e2:	b480      	push	{r7}
 80011e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011e6:	e7fe      	b.n	80011e6 <HardFault_Handler+0x4>

080011e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011ec:	e7fe      	b.n	80011ec <MemManage_Handler+0x4>

080011ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011ee:	b480      	push	{r7}
 80011f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011f2:	e7fe      	b.n	80011f2 <BusFault_Handler+0x4>

080011f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011f8:	e7fe      	b.n	80011f8 <UsageFault_Handler+0x4>

080011fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011fa:	b480      	push	{r7}
 80011fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011fe:	bf00      	nop
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr

08001208 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800120c:	bf00      	nop
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr

08001216 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001216:	b480      	push	{r7}
 8001218:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800121a:	bf00      	nop
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr

08001224 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001228:	f000 f8ca 	bl	80013c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800122c:	bf00      	nop
 800122e:	bd80      	pop	{r7, pc}

08001230 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001234:	4802      	ldr	r0, [pc, #8]	; (8001240 <OTG_FS_IRQHandler+0x10>)
 8001236:	f000 fd1a 	bl	8001c6e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800123a:	bf00      	nop
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	20000740 	.word	0x20000740

08001244 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800124c:	4b11      	ldr	r3, [pc, #68]	; (8001294 <_sbrk+0x50>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d102      	bne.n	800125a <_sbrk+0x16>
		heap_end = &end;
 8001254:	4b0f      	ldr	r3, [pc, #60]	; (8001294 <_sbrk+0x50>)
 8001256:	4a10      	ldr	r2, [pc, #64]	; (8001298 <_sbrk+0x54>)
 8001258:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800125a:	4b0e      	ldr	r3, [pc, #56]	; (8001294 <_sbrk+0x50>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001260:	4b0c      	ldr	r3, [pc, #48]	; (8001294 <_sbrk+0x50>)
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	4413      	add	r3, r2
 8001268:	466a      	mov	r2, sp
 800126a:	4293      	cmp	r3, r2
 800126c:	d907      	bls.n	800127e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800126e:	f005 fb03 	bl	8006878 <__errno>
 8001272:	4602      	mov	r2, r0
 8001274:	230c      	movs	r3, #12
 8001276:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001278:	f04f 33ff 	mov.w	r3, #4294967295
 800127c:	e006      	b.n	800128c <_sbrk+0x48>
	}

	heap_end += incr;
 800127e:	4b05      	ldr	r3, [pc, #20]	; (8001294 <_sbrk+0x50>)
 8001280:	681a      	ldr	r2, [r3, #0]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	4413      	add	r3, r2
 8001286:	4a03      	ldr	r2, [pc, #12]	; (8001294 <_sbrk+0x50>)
 8001288:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800128a:	68fb      	ldr	r3, [r7, #12]
}
 800128c:	4618      	mov	r0, r3
 800128e:	3710      	adds	r7, #16
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	2000025c 	.word	0x2000025c
 8001298:	20000b50 	.word	0x20000b50

0800129c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012a0:	4b08      	ldr	r3, [pc, #32]	; (80012c4 <SystemInit+0x28>)
 80012a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012a6:	4a07      	ldr	r2, [pc, #28]	; (80012c4 <SystemInit+0x28>)
 80012a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80012b0:	4b04      	ldr	r3, [pc, #16]	; (80012c4 <SystemInit+0x28>)
 80012b2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80012b6:	609a      	str	r2, [r3, #8]
#endif
}
 80012b8:	bf00      	nop
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	e000ed00 	.word	0xe000ed00

080012c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80012c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001300 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80012cc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80012ce:	e003      	b.n	80012d8 <LoopCopyDataInit>

080012d0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80012d0:	4b0c      	ldr	r3, [pc, #48]	; (8001304 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80012d2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80012d4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80012d6:	3104      	adds	r1, #4

080012d8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80012d8:	480b      	ldr	r0, [pc, #44]	; (8001308 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80012da:	4b0c      	ldr	r3, [pc, #48]	; (800130c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80012dc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80012de:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80012e0:	d3f6      	bcc.n	80012d0 <CopyDataInit>
  ldr  r2, =_sbss
 80012e2:	4a0b      	ldr	r2, [pc, #44]	; (8001310 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80012e4:	e002      	b.n	80012ec <LoopFillZerobss>

080012e6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80012e6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80012e8:	f842 3b04 	str.w	r3, [r2], #4

080012ec <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80012ec:	4b09      	ldr	r3, [pc, #36]	; (8001314 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80012ee:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80012f0:	d3f9      	bcc.n	80012e6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80012f2:	f7ff ffd3 	bl	800129c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012f6:	f005 fac5 	bl	8006884 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012fa:	f7ff fcc1 	bl	8000c80 <main>
  bx  lr    
 80012fe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001300:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001304:	08006b7c 	.word	0x08006b7c
  ldr  r0, =_sdata
 8001308:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800130c:	20000210 	.word	0x20000210
  ldr  r2, =_sbss
 8001310:	20000210 	.word	0x20000210
  ldr  r3, = _ebss
 8001314:	20000b4c 	.word	0x20000b4c

08001318 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001318:	e7fe      	b.n	8001318 <ADC_IRQHandler>
	...

0800131c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001320:	4b0e      	ldr	r3, [pc, #56]	; (800135c <HAL_Init+0x40>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a0d      	ldr	r2, [pc, #52]	; (800135c <HAL_Init+0x40>)
 8001326:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800132a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800132c:	4b0b      	ldr	r3, [pc, #44]	; (800135c <HAL_Init+0x40>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a0a      	ldr	r2, [pc, #40]	; (800135c <HAL_Init+0x40>)
 8001332:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001336:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001338:	4b08      	ldr	r3, [pc, #32]	; (800135c <HAL_Init+0x40>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a07      	ldr	r2, [pc, #28]	; (800135c <HAL_Init+0x40>)
 800133e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001342:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001344:	2003      	movs	r0, #3
 8001346:	f000 f94d 	bl	80015e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800134a:	2000      	movs	r0, #0
 800134c:	f000 f808 	bl	8001360 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001350:	f7ff ff18 	bl	8001184 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001354:	2300      	movs	r3, #0
}
 8001356:	4618      	mov	r0, r3
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	40023c00 	.word	0x40023c00

08001360 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001368:	4b12      	ldr	r3, [pc, #72]	; (80013b4 <HAL_InitTick+0x54>)
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	4b12      	ldr	r3, [pc, #72]	; (80013b8 <HAL_InitTick+0x58>)
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	4619      	mov	r1, r3
 8001372:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001376:	fbb3 f3f1 	udiv	r3, r3, r1
 800137a:	fbb2 f3f3 	udiv	r3, r2, r3
 800137e:	4618      	mov	r0, r3
 8001380:	f000 f965 	bl	800164e <HAL_SYSTICK_Config>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800138a:	2301      	movs	r3, #1
 800138c:	e00e      	b.n	80013ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2b0f      	cmp	r3, #15
 8001392:	d80a      	bhi.n	80013aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001394:	2200      	movs	r2, #0
 8001396:	6879      	ldr	r1, [r7, #4]
 8001398:	f04f 30ff 	mov.w	r0, #4294967295
 800139c:	f000 f92d 	bl	80015fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013a0:	4a06      	ldr	r2, [pc, #24]	; (80013bc <HAL_InitTick+0x5c>)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013a6:	2300      	movs	r3, #0
 80013a8:	e000      	b.n	80013ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013aa:	2301      	movs	r3, #1
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	3708      	adds	r7, #8
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	20000008 	.word	0x20000008
 80013b8:	20000010 	.word	0x20000010
 80013bc:	2000000c 	.word	0x2000000c

080013c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013c4:	4b06      	ldr	r3, [pc, #24]	; (80013e0 <HAL_IncTick+0x20>)
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	461a      	mov	r2, r3
 80013ca:	4b06      	ldr	r3, [pc, #24]	; (80013e4 <HAL_IncTick+0x24>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4413      	add	r3, r2
 80013d0:	4a04      	ldr	r2, [pc, #16]	; (80013e4 <HAL_IncTick+0x24>)
 80013d2:	6013      	str	r3, [r2, #0]
}
 80013d4:	bf00      	nop
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	20000010 	.word	0x20000010
 80013e4:	2000026c 	.word	0x2000026c

080013e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  return uwTick;
 80013ec:	4b03      	ldr	r3, [pc, #12]	; (80013fc <HAL_GetTick+0x14>)
 80013ee:	681b      	ldr	r3, [r3, #0]
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	2000026c 	.word	0x2000026c

08001400 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001408:	f7ff ffee 	bl	80013e8 <HAL_GetTick>
 800140c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001418:	d005      	beq.n	8001426 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800141a:	4b09      	ldr	r3, [pc, #36]	; (8001440 <HAL_Delay+0x40>)
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	461a      	mov	r2, r3
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	4413      	add	r3, r2
 8001424:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001426:	bf00      	nop
 8001428:	f7ff ffde 	bl	80013e8 <HAL_GetTick>
 800142c:	4602      	mov	r2, r0
 800142e:	68bb      	ldr	r3, [r7, #8]
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	68fa      	ldr	r2, [r7, #12]
 8001434:	429a      	cmp	r2, r3
 8001436:	d8f7      	bhi.n	8001428 <HAL_Delay+0x28>
  {
  }
}
 8001438:	bf00      	nop
 800143a:	3710      	adds	r7, #16
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	20000010 	.word	0x20000010

08001444 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001444:	b480      	push	{r7}
 8001446:	b085      	sub	sp, #20
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	f003 0307 	and.w	r3, r3, #7
 8001452:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001454:	4b0c      	ldr	r3, [pc, #48]	; (8001488 <__NVIC_SetPriorityGrouping+0x44>)
 8001456:	68db      	ldr	r3, [r3, #12]
 8001458:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800145a:	68ba      	ldr	r2, [r7, #8]
 800145c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001460:	4013      	ands	r3, r2
 8001462:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800146c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001470:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001474:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001476:	4a04      	ldr	r2, [pc, #16]	; (8001488 <__NVIC_SetPriorityGrouping+0x44>)
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	60d3      	str	r3, [r2, #12]
}
 800147c:	bf00      	nop
 800147e:	3714      	adds	r7, #20
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr
 8001488:	e000ed00 	.word	0xe000ed00

0800148c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001490:	4b04      	ldr	r3, [pc, #16]	; (80014a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	0a1b      	lsrs	r3, r3, #8
 8001496:	f003 0307 	and.w	r3, r3, #7
}
 800149a:	4618      	mov	r0, r3
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr
 80014a4:	e000ed00 	.word	0xe000ed00

080014a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	4603      	mov	r3, r0
 80014b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	db0b      	blt.n	80014d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014ba:	79fb      	ldrb	r3, [r7, #7]
 80014bc:	f003 021f 	and.w	r2, r3, #31
 80014c0:	4907      	ldr	r1, [pc, #28]	; (80014e0 <__NVIC_EnableIRQ+0x38>)
 80014c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c6:	095b      	lsrs	r3, r3, #5
 80014c8:	2001      	movs	r0, #1
 80014ca:	fa00 f202 	lsl.w	r2, r0, r2
 80014ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014d2:	bf00      	nop
 80014d4:	370c      	adds	r7, #12
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	e000e100 	.word	0xe000e100

080014e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	4603      	mov	r3, r0
 80014ec:	6039      	str	r1, [r7, #0]
 80014ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	db0a      	blt.n	800150e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	b2da      	uxtb	r2, r3
 80014fc:	490c      	ldr	r1, [pc, #48]	; (8001530 <__NVIC_SetPriority+0x4c>)
 80014fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001502:	0112      	lsls	r2, r2, #4
 8001504:	b2d2      	uxtb	r2, r2
 8001506:	440b      	add	r3, r1
 8001508:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800150c:	e00a      	b.n	8001524 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	b2da      	uxtb	r2, r3
 8001512:	4908      	ldr	r1, [pc, #32]	; (8001534 <__NVIC_SetPriority+0x50>)
 8001514:	79fb      	ldrb	r3, [r7, #7]
 8001516:	f003 030f 	and.w	r3, r3, #15
 800151a:	3b04      	subs	r3, #4
 800151c:	0112      	lsls	r2, r2, #4
 800151e:	b2d2      	uxtb	r2, r2
 8001520:	440b      	add	r3, r1
 8001522:	761a      	strb	r2, [r3, #24]
}
 8001524:	bf00      	nop
 8001526:	370c      	adds	r7, #12
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr
 8001530:	e000e100 	.word	0xe000e100
 8001534:	e000ed00 	.word	0xe000ed00

08001538 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001538:	b480      	push	{r7}
 800153a:	b089      	sub	sp, #36	; 0x24
 800153c:	af00      	add	r7, sp, #0
 800153e:	60f8      	str	r0, [r7, #12]
 8001540:	60b9      	str	r1, [r7, #8]
 8001542:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	f003 0307 	and.w	r3, r3, #7
 800154a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800154c:	69fb      	ldr	r3, [r7, #28]
 800154e:	f1c3 0307 	rsb	r3, r3, #7
 8001552:	2b04      	cmp	r3, #4
 8001554:	bf28      	it	cs
 8001556:	2304      	movcs	r3, #4
 8001558:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	3304      	adds	r3, #4
 800155e:	2b06      	cmp	r3, #6
 8001560:	d902      	bls.n	8001568 <NVIC_EncodePriority+0x30>
 8001562:	69fb      	ldr	r3, [r7, #28]
 8001564:	3b03      	subs	r3, #3
 8001566:	e000      	b.n	800156a <NVIC_EncodePriority+0x32>
 8001568:	2300      	movs	r3, #0
 800156a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800156c:	f04f 32ff 	mov.w	r2, #4294967295
 8001570:	69bb      	ldr	r3, [r7, #24]
 8001572:	fa02 f303 	lsl.w	r3, r2, r3
 8001576:	43da      	mvns	r2, r3
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	401a      	ands	r2, r3
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001580:	f04f 31ff 	mov.w	r1, #4294967295
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	fa01 f303 	lsl.w	r3, r1, r3
 800158a:	43d9      	mvns	r1, r3
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001590:	4313      	orrs	r3, r2
         );
}
 8001592:	4618      	mov	r0, r3
 8001594:	3724      	adds	r7, #36	; 0x24
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
	...

080015a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	3b01      	subs	r3, #1
 80015ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015b0:	d301      	bcc.n	80015b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015b2:	2301      	movs	r3, #1
 80015b4:	e00f      	b.n	80015d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015b6:	4a0a      	ldr	r2, [pc, #40]	; (80015e0 <SysTick_Config+0x40>)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	3b01      	subs	r3, #1
 80015bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015be:	210f      	movs	r1, #15
 80015c0:	f04f 30ff 	mov.w	r0, #4294967295
 80015c4:	f7ff ff8e 	bl	80014e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015c8:	4b05      	ldr	r3, [pc, #20]	; (80015e0 <SysTick_Config+0x40>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015ce:	4b04      	ldr	r3, [pc, #16]	; (80015e0 <SysTick_Config+0x40>)
 80015d0:	2207      	movs	r2, #7
 80015d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015d4:	2300      	movs	r3, #0
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3708      	adds	r7, #8
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	e000e010 	.word	0xe000e010

080015e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015ec:	6878      	ldr	r0, [r7, #4]
 80015ee:	f7ff ff29 	bl	8001444 <__NVIC_SetPriorityGrouping>
}
 80015f2:	bf00      	nop
 80015f4:	3708      	adds	r7, #8
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}

080015fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015fa:	b580      	push	{r7, lr}
 80015fc:	b086      	sub	sp, #24
 80015fe:	af00      	add	r7, sp, #0
 8001600:	4603      	mov	r3, r0
 8001602:	60b9      	str	r1, [r7, #8]
 8001604:	607a      	str	r2, [r7, #4]
 8001606:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001608:	2300      	movs	r3, #0
 800160a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800160c:	f7ff ff3e 	bl	800148c <__NVIC_GetPriorityGrouping>
 8001610:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001612:	687a      	ldr	r2, [r7, #4]
 8001614:	68b9      	ldr	r1, [r7, #8]
 8001616:	6978      	ldr	r0, [r7, #20]
 8001618:	f7ff ff8e 	bl	8001538 <NVIC_EncodePriority>
 800161c:	4602      	mov	r2, r0
 800161e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001622:	4611      	mov	r1, r2
 8001624:	4618      	mov	r0, r3
 8001626:	f7ff ff5d 	bl	80014e4 <__NVIC_SetPriority>
}
 800162a:	bf00      	nop
 800162c:	3718      	adds	r7, #24
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}

08001632 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001632:	b580      	push	{r7, lr}
 8001634:	b082      	sub	sp, #8
 8001636:	af00      	add	r7, sp, #0
 8001638:	4603      	mov	r3, r0
 800163a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800163c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001640:	4618      	mov	r0, r3
 8001642:	f7ff ff31 	bl	80014a8 <__NVIC_EnableIRQ>
}
 8001646:	bf00      	nop
 8001648:	3708      	adds	r7, #8
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}

0800164e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800164e:	b580      	push	{r7, lr}
 8001650:	b082      	sub	sp, #8
 8001652:	af00      	add	r7, sp, #0
 8001654:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001656:	6878      	ldr	r0, [r7, #4]
 8001658:	f7ff ffa2 	bl	80015a0 <SysTick_Config>
 800165c:	4603      	mov	r3, r0
}
 800165e:	4618      	mov	r0, r3
 8001660:	3708      	adds	r7, #8
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
	...

08001668 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001668:	b480      	push	{r7}
 800166a:	b089      	sub	sp, #36	; 0x24
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
 8001670:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001672:	2300      	movs	r3, #0
 8001674:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001676:	2300      	movs	r3, #0
 8001678:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800167a:	2300      	movs	r3, #0
 800167c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800167e:	2300      	movs	r3, #0
 8001680:	61fb      	str	r3, [r7, #28]
 8001682:	e159      	b.n	8001938 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001684:	2201      	movs	r2, #1
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	fa02 f303 	lsl.w	r3, r2, r3
 800168c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	697a      	ldr	r2, [r7, #20]
 8001694:	4013      	ands	r3, r2
 8001696:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001698:	693a      	ldr	r2, [r7, #16]
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	429a      	cmp	r2, r3
 800169e:	f040 8148 	bne.w	8001932 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	d00b      	beq.n	80016c2 <HAL_GPIO_Init+0x5a>
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	2b02      	cmp	r3, #2
 80016b0:	d007      	beq.n	80016c2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016b6:	2b11      	cmp	r3, #17
 80016b8:	d003      	beq.n	80016c2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	2b12      	cmp	r3, #18
 80016c0:	d130      	bne.n	8001724 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	005b      	lsls	r3, r3, #1
 80016cc:	2203      	movs	r2, #3
 80016ce:	fa02 f303 	lsl.w	r3, r2, r3
 80016d2:	43db      	mvns	r3, r3
 80016d4:	69ba      	ldr	r2, [r7, #24]
 80016d6:	4013      	ands	r3, r2
 80016d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	68da      	ldr	r2, [r3, #12]
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	005b      	lsls	r3, r3, #1
 80016e2:	fa02 f303 	lsl.w	r3, r2, r3
 80016e6:	69ba      	ldr	r2, [r7, #24]
 80016e8:	4313      	orrs	r3, r2
 80016ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	69ba      	ldr	r2, [r7, #24]
 80016f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016f8:	2201      	movs	r2, #1
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001700:	43db      	mvns	r3, r3
 8001702:	69ba      	ldr	r2, [r7, #24]
 8001704:	4013      	ands	r3, r2
 8001706:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	091b      	lsrs	r3, r3, #4
 800170e:	f003 0201 	and.w	r2, r3, #1
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	fa02 f303 	lsl.w	r3, r2, r3
 8001718:	69ba      	ldr	r2, [r7, #24]
 800171a:	4313      	orrs	r3, r2
 800171c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	69ba      	ldr	r2, [r7, #24]
 8001722:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	005b      	lsls	r3, r3, #1
 800172e:	2203      	movs	r2, #3
 8001730:	fa02 f303 	lsl.w	r3, r2, r3
 8001734:	43db      	mvns	r3, r3
 8001736:	69ba      	ldr	r2, [r7, #24]
 8001738:	4013      	ands	r3, r2
 800173a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	689a      	ldr	r2, [r3, #8]
 8001740:	69fb      	ldr	r3, [r7, #28]
 8001742:	005b      	lsls	r3, r3, #1
 8001744:	fa02 f303 	lsl.w	r3, r2, r3
 8001748:	69ba      	ldr	r2, [r7, #24]
 800174a:	4313      	orrs	r3, r2
 800174c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	69ba      	ldr	r2, [r7, #24]
 8001752:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	2b02      	cmp	r3, #2
 800175a:	d003      	beq.n	8001764 <HAL_GPIO_Init+0xfc>
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	2b12      	cmp	r3, #18
 8001762:	d123      	bne.n	80017ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001764:	69fb      	ldr	r3, [r7, #28]
 8001766:	08da      	lsrs	r2, r3, #3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	3208      	adds	r2, #8
 800176c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001770:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	f003 0307 	and.w	r3, r3, #7
 8001778:	009b      	lsls	r3, r3, #2
 800177a:	220f      	movs	r2, #15
 800177c:	fa02 f303 	lsl.w	r3, r2, r3
 8001780:	43db      	mvns	r3, r3
 8001782:	69ba      	ldr	r2, [r7, #24]
 8001784:	4013      	ands	r3, r2
 8001786:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	691a      	ldr	r2, [r3, #16]
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	f003 0307 	and.w	r3, r3, #7
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	fa02 f303 	lsl.w	r3, r2, r3
 8001798:	69ba      	ldr	r2, [r7, #24]
 800179a:	4313      	orrs	r3, r2
 800179c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	08da      	lsrs	r2, r3, #3
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	3208      	adds	r2, #8
 80017a6:	69b9      	ldr	r1, [r7, #24]
 80017a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	005b      	lsls	r3, r3, #1
 80017b6:	2203      	movs	r2, #3
 80017b8:	fa02 f303 	lsl.w	r3, r2, r3
 80017bc:	43db      	mvns	r3, r3
 80017be:	69ba      	ldr	r2, [r7, #24]
 80017c0:	4013      	ands	r3, r2
 80017c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	f003 0203 	and.w	r2, r3, #3
 80017cc:	69fb      	ldr	r3, [r7, #28]
 80017ce:	005b      	lsls	r3, r3, #1
 80017d0:	fa02 f303 	lsl.w	r3, r2, r3
 80017d4:	69ba      	ldr	r2, [r7, #24]
 80017d6:	4313      	orrs	r3, r2
 80017d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	69ba      	ldr	r2, [r7, #24]
 80017de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	f000 80a2 	beq.w	8001932 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017ee:	2300      	movs	r3, #0
 80017f0:	60fb      	str	r3, [r7, #12]
 80017f2:	4b56      	ldr	r3, [pc, #344]	; (800194c <HAL_GPIO_Init+0x2e4>)
 80017f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f6:	4a55      	ldr	r2, [pc, #340]	; (800194c <HAL_GPIO_Init+0x2e4>)
 80017f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017fc:	6453      	str	r3, [r2, #68]	; 0x44
 80017fe:	4b53      	ldr	r3, [pc, #332]	; (800194c <HAL_GPIO_Init+0x2e4>)
 8001800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001802:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001806:	60fb      	str	r3, [r7, #12]
 8001808:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800180a:	4a51      	ldr	r2, [pc, #324]	; (8001950 <HAL_GPIO_Init+0x2e8>)
 800180c:	69fb      	ldr	r3, [r7, #28]
 800180e:	089b      	lsrs	r3, r3, #2
 8001810:	3302      	adds	r3, #2
 8001812:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001816:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001818:	69fb      	ldr	r3, [r7, #28]
 800181a:	f003 0303 	and.w	r3, r3, #3
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	220f      	movs	r2, #15
 8001822:	fa02 f303 	lsl.w	r3, r2, r3
 8001826:	43db      	mvns	r3, r3
 8001828:	69ba      	ldr	r2, [r7, #24]
 800182a:	4013      	ands	r3, r2
 800182c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	4a48      	ldr	r2, [pc, #288]	; (8001954 <HAL_GPIO_Init+0x2ec>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d019      	beq.n	800186a <HAL_GPIO_Init+0x202>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4a47      	ldr	r2, [pc, #284]	; (8001958 <HAL_GPIO_Init+0x2f0>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d013      	beq.n	8001866 <HAL_GPIO_Init+0x1fe>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4a46      	ldr	r2, [pc, #280]	; (800195c <HAL_GPIO_Init+0x2f4>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d00d      	beq.n	8001862 <HAL_GPIO_Init+0x1fa>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4a45      	ldr	r2, [pc, #276]	; (8001960 <HAL_GPIO_Init+0x2f8>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d007      	beq.n	800185e <HAL_GPIO_Init+0x1f6>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	4a44      	ldr	r2, [pc, #272]	; (8001964 <HAL_GPIO_Init+0x2fc>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d101      	bne.n	800185a <HAL_GPIO_Init+0x1f2>
 8001856:	2304      	movs	r3, #4
 8001858:	e008      	b.n	800186c <HAL_GPIO_Init+0x204>
 800185a:	2307      	movs	r3, #7
 800185c:	e006      	b.n	800186c <HAL_GPIO_Init+0x204>
 800185e:	2303      	movs	r3, #3
 8001860:	e004      	b.n	800186c <HAL_GPIO_Init+0x204>
 8001862:	2302      	movs	r3, #2
 8001864:	e002      	b.n	800186c <HAL_GPIO_Init+0x204>
 8001866:	2301      	movs	r3, #1
 8001868:	e000      	b.n	800186c <HAL_GPIO_Init+0x204>
 800186a:	2300      	movs	r3, #0
 800186c:	69fa      	ldr	r2, [r7, #28]
 800186e:	f002 0203 	and.w	r2, r2, #3
 8001872:	0092      	lsls	r2, r2, #2
 8001874:	4093      	lsls	r3, r2
 8001876:	69ba      	ldr	r2, [r7, #24]
 8001878:	4313      	orrs	r3, r2
 800187a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800187c:	4934      	ldr	r1, [pc, #208]	; (8001950 <HAL_GPIO_Init+0x2e8>)
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	089b      	lsrs	r3, r3, #2
 8001882:	3302      	adds	r3, #2
 8001884:	69ba      	ldr	r2, [r7, #24]
 8001886:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800188a:	4b37      	ldr	r3, [pc, #220]	; (8001968 <HAL_GPIO_Init+0x300>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	43db      	mvns	r3, r3
 8001894:	69ba      	ldr	r2, [r7, #24]
 8001896:	4013      	ands	r3, r2
 8001898:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d003      	beq.n	80018ae <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80018a6:	69ba      	ldr	r2, [r7, #24]
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	4313      	orrs	r3, r2
 80018ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80018ae:	4a2e      	ldr	r2, [pc, #184]	; (8001968 <HAL_GPIO_Init+0x300>)
 80018b0:	69bb      	ldr	r3, [r7, #24]
 80018b2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80018b4:	4b2c      	ldr	r3, [pc, #176]	; (8001968 <HAL_GPIO_Init+0x300>)
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	43db      	mvns	r3, r3
 80018be:	69ba      	ldr	r2, [r7, #24]
 80018c0:	4013      	ands	r3, r2
 80018c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d003      	beq.n	80018d8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80018d0:	69ba      	ldr	r2, [r7, #24]
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	4313      	orrs	r3, r2
 80018d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80018d8:	4a23      	ldr	r2, [pc, #140]	; (8001968 <HAL_GPIO_Init+0x300>)
 80018da:	69bb      	ldr	r3, [r7, #24]
 80018dc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018de:	4b22      	ldr	r3, [pc, #136]	; (8001968 <HAL_GPIO_Init+0x300>)
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	43db      	mvns	r3, r3
 80018e8:	69ba      	ldr	r2, [r7, #24]
 80018ea:	4013      	ands	r3, r2
 80018ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d003      	beq.n	8001902 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80018fa:	69ba      	ldr	r2, [r7, #24]
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	4313      	orrs	r3, r2
 8001900:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001902:	4a19      	ldr	r2, [pc, #100]	; (8001968 <HAL_GPIO_Init+0x300>)
 8001904:	69bb      	ldr	r3, [r7, #24]
 8001906:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001908:	4b17      	ldr	r3, [pc, #92]	; (8001968 <HAL_GPIO_Init+0x300>)
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	43db      	mvns	r3, r3
 8001912:	69ba      	ldr	r2, [r7, #24]
 8001914:	4013      	ands	r3, r2
 8001916:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001920:	2b00      	cmp	r3, #0
 8001922:	d003      	beq.n	800192c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001924:	69ba      	ldr	r2, [r7, #24]
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	4313      	orrs	r3, r2
 800192a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800192c:	4a0e      	ldr	r2, [pc, #56]	; (8001968 <HAL_GPIO_Init+0x300>)
 800192e:	69bb      	ldr	r3, [r7, #24]
 8001930:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	3301      	adds	r3, #1
 8001936:	61fb      	str	r3, [r7, #28]
 8001938:	69fb      	ldr	r3, [r7, #28]
 800193a:	2b0f      	cmp	r3, #15
 800193c:	f67f aea2 	bls.w	8001684 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001940:	bf00      	nop
 8001942:	3724      	adds	r7, #36	; 0x24
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr
 800194c:	40023800 	.word	0x40023800
 8001950:	40013800 	.word	0x40013800
 8001954:	40020000 	.word	0x40020000
 8001958:	40020400 	.word	0x40020400
 800195c:	40020800 	.word	0x40020800
 8001960:	40020c00 	.word	0x40020c00
 8001964:	40021000 	.word	0x40021000
 8001968:	40013c00 	.word	0x40013c00

0800196c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800196c:	b480      	push	{r7}
 800196e:	b085      	sub	sp, #20
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
 8001974:	460b      	mov	r3, r1
 8001976:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	691a      	ldr	r2, [r3, #16]
 800197c:	887b      	ldrh	r3, [r7, #2]
 800197e:	4013      	ands	r3, r2
 8001980:	2b00      	cmp	r3, #0
 8001982:	d002      	beq.n	800198a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001984:	2301      	movs	r3, #1
 8001986:	73fb      	strb	r3, [r7, #15]
 8001988:	e001      	b.n	800198e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800198a:	2300      	movs	r3, #0
 800198c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800198e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001990:	4618      	mov	r0, r3
 8001992:	3714      	adds	r7, #20
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr

0800199c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
 80019a4:	460b      	mov	r3, r1
 80019a6:	807b      	strh	r3, [r7, #2]
 80019a8:	4613      	mov	r3, r2
 80019aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019ac:	787b      	ldrb	r3, [r7, #1]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d003      	beq.n	80019ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019b2:	887a      	ldrh	r2, [r7, #2]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80019b8:	e003      	b.n	80019c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80019ba:	887b      	ldrh	r3, [r7, #2]
 80019bc:	041a      	lsls	r2, r3, #16
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	619a      	str	r2, [r3, #24]
}
 80019c2:	bf00      	nop
 80019c4:	370c      	adds	r7, #12
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr

080019ce <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80019ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019d0:	b08f      	sub	sp, #60	; 0x3c
 80019d2:	af0a      	add	r7, sp, #40	; 0x28
 80019d4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d101      	bne.n	80019e0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	e10f      	b.n	8001c00 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d106      	bne.n	8001a00 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2200      	movs	r2, #0
 80019f6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f004 fc5c 	bl	80062b8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2203      	movs	r2, #3
 8001a04:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d102      	bne.n	8001a1a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2200      	movs	r2, #0
 8001a18:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f001 fe69 	bl	80036f6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	603b      	str	r3, [r7, #0]
 8001a2a:	687e      	ldr	r6, [r7, #4]
 8001a2c:	466d      	mov	r5, sp
 8001a2e:	f106 0410 	add.w	r4, r6, #16
 8001a32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a3a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001a3e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001a42:	1d33      	adds	r3, r6, #4
 8001a44:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a46:	6838      	ldr	r0, [r7, #0]
 8001a48:	f001 fd40 	bl	80034cc <USB_CoreInit>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d005      	beq.n	8001a5e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2202      	movs	r2, #2
 8001a56:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e0d0      	b.n	8001c00 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	2100      	movs	r1, #0
 8001a64:	4618      	mov	r0, r3
 8001a66:	f001 fe57 	bl	8003718 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	73fb      	strb	r3, [r7, #15]
 8001a6e:	e04a      	b.n	8001b06 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001a70:	7bfa      	ldrb	r2, [r7, #15]
 8001a72:	6879      	ldr	r1, [r7, #4]
 8001a74:	4613      	mov	r3, r2
 8001a76:	00db      	lsls	r3, r3, #3
 8001a78:	1a9b      	subs	r3, r3, r2
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	440b      	add	r3, r1
 8001a7e:	333d      	adds	r3, #61	; 0x3d
 8001a80:	2201      	movs	r2, #1
 8001a82:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001a84:	7bfa      	ldrb	r2, [r7, #15]
 8001a86:	6879      	ldr	r1, [r7, #4]
 8001a88:	4613      	mov	r3, r2
 8001a8a:	00db      	lsls	r3, r3, #3
 8001a8c:	1a9b      	subs	r3, r3, r2
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	440b      	add	r3, r1
 8001a92:	333c      	adds	r3, #60	; 0x3c
 8001a94:	7bfa      	ldrb	r2, [r7, #15]
 8001a96:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001a98:	7bfa      	ldrb	r2, [r7, #15]
 8001a9a:	7bfb      	ldrb	r3, [r7, #15]
 8001a9c:	b298      	uxth	r0, r3
 8001a9e:	6879      	ldr	r1, [r7, #4]
 8001aa0:	4613      	mov	r3, r2
 8001aa2:	00db      	lsls	r3, r3, #3
 8001aa4:	1a9b      	subs	r3, r3, r2
 8001aa6:	009b      	lsls	r3, r3, #2
 8001aa8:	440b      	add	r3, r1
 8001aaa:	3342      	adds	r3, #66	; 0x42
 8001aac:	4602      	mov	r2, r0
 8001aae:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001ab0:	7bfa      	ldrb	r2, [r7, #15]
 8001ab2:	6879      	ldr	r1, [r7, #4]
 8001ab4:	4613      	mov	r3, r2
 8001ab6:	00db      	lsls	r3, r3, #3
 8001ab8:	1a9b      	subs	r3, r3, r2
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	440b      	add	r3, r1
 8001abe:	333f      	adds	r3, #63	; 0x3f
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001ac4:	7bfa      	ldrb	r2, [r7, #15]
 8001ac6:	6879      	ldr	r1, [r7, #4]
 8001ac8:	4613      	mov	r3, r2
 8001aca:	00db      	lsls	r3, r3, #3
 8001acc:	1a9b      	subs	r3, r3, r2
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	440b      	add	r3, r1
 8001ad2:	3344      	adds	r3, #68	; 0x44
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001ad8:	7bfa      	ldrb	r2, [r7, #15]
 8001ada:	6879      	ldr	r1, [r7, #4]
 8001adc:	4613      	mov	r3, r2
 8001ade:	00db      	lsls	r3, r3, #3
 8001ae0:	1a9b      	subs	r3, r3, r2
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	440b      	add	r3, r1
 8001ae6:	3348      	adds	r3, #72	; 0x48
 8001ae8:	2200      	movs	r2, #0
 8001aea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001aec:	7bfa      	ldrb	r2, [r7, #15]
 8001aee:	6879      	ldr	r1, [r7, #4]
 8001af0:	4613      	mov	r3, r2
 8001af2:	00db      	lsls	r3, r3, #3
 8001af4:	1a9b      	subs	r3, r3, r2
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	440b      	add	r3, r1
 8001afa:	3350      	adds	r3, #80	; 0x50
 8001afc:	2200      	movs	r2, #0
 8001afe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b00:	7bfb      	ldrb	r3, [r7, #15]
 8001b02:	3301      	adds	r3, #1
 8001b04:	73fb      	strb	r3, [r7, #15]
 8001b06:	7bfa      	ldrb	r2, [r7, #15]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	d3af      	bcc.n	8001a70 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b10:	2300      	movs	r3, #0
 8001b12:	73fb      	strb	r3, [r7, #15]
 8001b14:	e044      	b.n	8001ba0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001b16:	7bfa      	ldrb	r2, [r7, #15]
 8001b18:	6879      	ldr	r1, [r7, #4]
 8001b1a:	4613      	mov	r3, r2
 8001b1c:	00db      	lsls	r3, r3, #3
 8001b1e:	1a9b      	subs	r3, r3, r2
 8001b20:	009b      	lsls	r3, r3, #2
 8001b22:	440b      	add	r3, r1
 8001b24:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001b28:	2200      	movs	r2, #0
 8001b2a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001b2c:	7bfa      	ldrb	r2, [r7, #15]
 8001b2e:	6879      	ldr	r1, [r7, #4]
 8001b30:	4613      	mov	r3, r2
 8001b32:	00db      	lsls	r3, r3, #3
 8001b34:	1a9b      	subs	r3, r3, r2
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	440b      	add	r3, r1
 8001b3a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001b3e:	7bfa      	ldrb	r2, [r7, #15]
 8001b40:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001b42:	7bfa      	ldrb	r2, [r7, #15]
 8001b44:	6879      	ldr	r1, [r7, #4]
 8001b46:	4613      	mov	r3, r2
 8001b48:	00db      	lsls	r3, r3, #3
 8001b4a:	1a9b      	subs	r3, r3, r2
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	440b      	add	r3, r1
 8001b50:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001b54:	2200      	movs	r2, #0
 8001b56:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001b58:	7bfa      	ldrb	r2, [r7, #15]
 8001b5a:	6879      	ldr	r1, [r7, #4]
 8001b5c:	4613      	mov	r3, r2
 8001b5e:	00db      	lsls	r3, r3, #3
 8001b60:	1a9b      	subs	r3, r3, r2
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	440b      	add	r3, r1
 8001b66:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001b6e:	7bfa      	ldrb	r2, [r7, #15]
 8001b70:	6879      	ldr	r1, [r7, #4]
 8001b72:	4613      	mov	r3, r2
 8001b74:	00db      	lsls	r3, r3, #3
 8001b76:	1a9b      	subs	r3, r3, r2
 8001b78:	009b      	lsls	r3, r3, #2
 8001b7a:	440b      	add	r3, r1
 8001b7c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001b80:	2200      	movs	r2, #0
 8001b82:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001b84:	7bfa      	ldrb	r2, [r7, #15]
 8001b86:	6879      	ldr	r1, [r7, #4]
 8001b88:	4613      	mov	r3, r2
 8001b8a:	00db      	lsls	r3, r3, #3
 8001b8c:	1a9b      	subs	r3, r3, r2
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	440b      	add	r3, r1
 8001b92:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001b96:	2200      	movs	r2, #0
 8001b98:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b9a:	7bfb      	ldrb	r3, [r7, #15]
 8001b9c:	3301      	adds	r3, #1
 8001b9e:	73fb      	strb	r3, [r7, #15]
 8001ba0:	7bfa      	ldrb	r2, [r7, #15]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	d3b5      	bcc.n	8001b16 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	603b      	str	r3, [r7, #0]
 8001bb0:	687e      	ldr	r6, [r7, #4]
 8001bb2:	466d      	mov	r5, sp
 8001bb4:	f106 0410 	add.w	r4, r6, #16
 8001bb8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bbc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bbe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bc0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001bc4:	e885 0003 	stmia.w	r5, {r0, r1}
 8001bc8:	1d33      	adds	r3, r6, #4
 8001bca:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001bcc:	6838      	ldr	r0, [r7, #0]
 8001bce:	f001 fdcd 	bl	800376c <USB_DevInit>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d005      	beq.n	8001be4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2202      	movs	r2, #2
 8001bdc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001be0:	2301      	movs	r3, #1
 8001be2:	e00d      	b.n	8001c00 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2200      	movs	r2, #0
 8001be8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2201      	movs	r2, #1
 8001bf0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f002 fe0c 	bl	8004816 <USB_DevDisconnect>

  return HAL_OK;
 8001bfe:	2300      	movs	r3, #0
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	3714      	adds	r7, #20
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001c08 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b084      	sub	sp, #16
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	d101      	bne.n	8001c24 <HAL_PCD_Start+0x1c>
 8001c20:	2302      	movs	r3, #2
 8001c22:	e020      	b.n	8001c66 <HAL_PCD_Start+0x5e>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2201      	movs	r2, #1
 8001c28:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c30:	2b01      	cmp	r3, #1
 8001c32:	d109      	bne.n	8001c48 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d005      	beq.n	8001c48 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c40:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f002 fdca 	bl	80047e6 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4618      	mov	r0, r3
 8001c58:	f001 fd3c 	bl	80036d4 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001c64:	2300      	movs	r3, #0
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3710      	adds	r7, #16
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}

08001c6e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001c6e:	b590      	push	{r4, r7, lr}
 8001c70:	b08d      	sub	sp, #52	; 0x34
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001c7c:	6a3b      	ldr	r3, [r7, #32]
 8001c7e:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4618      	mov	r0, r3
 8001c86:	f002 fe71 	bl	800496c <USB_GetMode>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	f040 839d 	bne.w	80023cc <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4618      	mov	r0, r3
 8001c98:	f002 fdd5 	bl	8004846 <USB_ReadInterrupts>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	f000 8393 	beq.w	80023ca <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f002 fdcc 	bl	8004846 <USB_ReadInterrupts>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	f003 0302 	and.w	r3, r3, #2
 8001cb4:	2b02      	cmp	r3, #2
 8001cb6:	d107      	bne.n	8001cc8 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	695a      	ldr	r2, [r3, #20]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f002 0202 	and.w	r2, r2, #2
 8001cc6:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f002 fdba 	bl	8004846 <USB_ReadInterrupts>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	f003 0310 	and.w	r3, r3, #16
 8001cd8:	2b10      	cmp	r3, #16
 8001cda:	d161      	bne.n	8001da0 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	699a      	ldr	r2, [r3, #24]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f022 0210 	bic.w	r2, r2, #16
 8001cea:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001cec:	6a3b      	ldr	r3, [r7, #32]
 8001cee:	6a1b      	ldr	r3, [r3, #32]
 8001cf0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001cf2:	69bb      	ldr	r3, [r7, #24]
 8001cf4:	f003 020f 	and.w	r2, r3, #15
 8001cf8:	4613      	mov	r3, r2
 8001cfa:	00db      	lsls	r3, r3, #3
 8001cfc:	1a9b      	subs	r3, r3, r2
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001d04:	687a      	ldr	r2, [r7, #4]
 8001d06:	4413      	add	r3, r2
 8001d08:	3304      	adds	r3, #4
 8001d0a:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001d0c:	69bb      	ldr	r3, [r7, #24]
 8001d0e:	0c5b      	lsrs	r3, r3, #17
 8001d10:	f003 030f 	and.w	r3, r3, #15
 8001d14:	2b02      	cmp	r3, #2
 8001d16:	d124      	bne.n	8001d62 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001d18:	69ba      	ldr	r2, [r7, #24]
 8001d1a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001d1e:	4013      	ands	r3, r2
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d035      	beq.n	8001d90 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001d28:	69bb      	ldr	r3, [r7, #24]
 8001d2a:	091b      	lsrs	r3, r3, #4
 8001d2c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001d2e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001d32:	b29b      	uxth	r3, r3
 8001d34:	461a      	mov	r2, r3
 8001d36:	6a38      	ldr	r0, [r7, #32]
 8001d38:	f002 fc32 	bl	80045a0 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	68da      	ldr	r2, [r3, #12]
 8001d40:	69bb      	ldr	r3, [r7, #24]
 8001d42:	091b      	lsrs	r3, r3, #4
 8001d44:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001d48:	441a      	add	r2, r3
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	699a      	ldr	r2, [r3, #24]
 8001d52:	69bb      	ldr	r3, [r7, #24]
 8001d54:	091b      	lsrs	r3, r3, #4
 8001d56:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001d5a:	441a      	add	r2, r3
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	619a      	str	r2, [r3, #24]
 8001d60:	e016      	b.n	8001d90 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001d62:	69bb      	ldr	r3, [r7, #24]
 8001d64:	0c5b      	lsrs	r3, r3, #17
 8001d66:	f003 030f 	and.w	r3, r3, #15
 8001d6a:	2b06      	cmp	r3, #6
 8001d6c:	d110      	bne.n	8001d90 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001d74:	2208      	movs	r2, #8
 8001d76:	4619      	mov	r1, r3
 8001d78:	6a38      	ldr	r0, [r7, #32]
 8001d7a:	f002 fc11 	bl	80045a0 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	699a      	ldr	r2, [r3, #24]
 8001d82:	69bb      	ldr	r3, [r7, #24]
 8001d84:	091b      	lsrs	r3, r3, #4
 8001d86:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001d8a:	441a      	add	r2, r3
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	699a      	ldr	r2, [r3, #24]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f042 0210 	orr.w	r2, r2, #16
 8001d9e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4618      	mov	r0, r3
 8001da6:	f002 fd4e 	bl	8004846 <USB_ReadInterrupts>
 8001daa:	4603      	mov	r3, r0
 8001dac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001db0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001db4:	d16e      	bne.n	8001e94 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8001db6:	2300      	movs	r3, #0
 8001db8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f002 fd54 	bl	800486c <USB_ReadDevAllOutEpInterrupt>
 8001dc4:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001dc6:	e062      	b.n	8001e8e <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dca:	f003 0301 	and.w	r3, r3, #1
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d057      	beq.n	8001e82 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dd8:	b2d2      	uxtb	r2, r2
 8001dda:	4611      	mov	r1, r2
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f002 fd79 	bl	80048d4 <USB_ReadDevOutEPInterrupt>
 8001de2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	f003 0301 	and.w	r3, r3, #1
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d00c      	beq.n	8001e08 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df0:	015a      	lsls	r2, r3, #5
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	4413      	add	r3, r2
 8001df6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001dfa:	461a      	mov	r2, r3
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001e00:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f000 fd98 	bl	8002938 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	f003 0308 	and.w	r3, r3, #8
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d00c      	beq.n	8001e2c <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e14:	015a      	lsls	r2, r3, #5
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	4413      	add	r3, r2
 8001e1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e1e:	461a      	mov	r2, r3
 8001e20:	2308      	movs	r3, #8
 8001e22:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001e24:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f000 fe92 	bl	8002b50 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	f003 0310 	and.w	r3, r3, #16
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d008      	beq.n	8001e48 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e38:	015a      	lsls	r2, r3, #5
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	4413      	add	r3, r2
 8001e3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e42:	461a      	mov	r2, r3
 8001e44:	2310      	movs	r3, #16
 8001e46:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	f003 0320 	and.w	r3, r3, #32
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d008      	beq.n	8001e64 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e54:	015a      	lsls	r2, r3, #5
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	4413      	add	r3, r2
 8001e5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e5e:	461a      	mov	r2, r3
 8001e60:	2320      	movs	r3, #32
 8001e62:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d009      	beq.n	8001e82 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e70:	015a      	lsls	r2, r3, #5
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	4413      	add	r3, r2
 8001e76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e80:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e84:	3301      	adds	r3, #1
 8001e86:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e8a:	085b      	lsrs	r3, r3, #1
 8001e8c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d199      	bne.n	8001dc8 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f002 fcd4 	bl	8004846 <USB_ReadInterrupts>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ea4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001ea8:	f040 80c0 	bne.w	800202c <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f002 fcf5 	bl	80048a0 <USB_ReadDevAllInEpInterrupt>
 8001eb6:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001ebc:	e0b2      	b.n	8002024 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ec0:	f003 0301 	and.w	r3, r3, #1
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	f000 80a7 	beq.w	8002018 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ed0:	b2d2      	uxtb	r2, r2
 8001ed2:	4611      	mov	r1, r2
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f002 fd1b 	bl	8004910 <USB_ReadDevInEPInterrupt>
 8001eda:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	f003 0301 	and.w	r3, r3, #1
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d057      	beq.n	8001f96 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee8:	f003 030f 	and.w	r3, r3, #15
 8001eec:	2201      	movs	r2, #1
 8001eee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001ef4:	69fb      	ldr	r3, [r7, #28]
 8001ef6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001efa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	43db      	mvns	r3, r3
 8001f00:	69f9      	ldr	r1, [r7, #28]
 8001f02:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001f06:	4013      	ands	r3, r2
 8001f08:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0c:	015a      	lsls	r2, r3, #5
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	4413      	add	r3, r2
 8001f12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f16:	461a      	mov	r2, r3
 8001f18:	2301      	movs	r3, #1
 8001f1a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	691b      	ldr	r3, [r3, #16]
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d132      	bne.n	8001f8a <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001f24:	6879      	ldr	r1, [r7, #4]
 8001f26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f28:	4613      	mov	r3, r2
 8001f2a:	00db      	lsls	r3, r3, #3
 8001f2c:	1a9b      	subs	r3, r3, r2
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	440b      	add	r3, r1
 8001f32:	3348      	adds	r3, #72	; 0x48
 8001f34:	6819      	ldr	r1, [r3, #0]
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f3a:	4613      	mov	r3, r2
 8001f3c:	00db      	lsls	r3, r3, #3
 8001f3e:	1a9b      	subs	r3, r3, r2
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	4403      	add	r3, r0
 8001f44:	3344      	adds	r3, #68	; 0x44
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4419      	add	r1, r3
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f4e:	4613      	mov	r3, r2
 8001f50:	00db      	lsls	r3, r3, #3
 8001f52:	1a9b      	subs	r3, r3, r2
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	4403      	add	r3, r0
 8001f58:	3348      	adds	r3, #72	; 0x48
 8001f5a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d113      	bne.n	8001f8a <HAL_PCD_IRQHandler+0x31c>
 8001f62:	6879      	ldr	r1, [r7, #4]
 8001f64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f66:	4613      	mov	r3, r2
 8001f68:	00db      	lsls	r3, r3, #3
 8001f6a:	1a9b      	subs	r3, r3, r2
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	440b      	add	r3, r1
 8001f70:	3350      	adds	r3, #80	; 0x50
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d108      	bne.n	8001f8a <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6818      	ldr	r0, [r3, #0]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001f82:	461a      	mov	r2, r3
 8001f84:	2101      	movs	r1, #1
 8001f86:	f002 fd23 	bl	80049d0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	4619      	mov	r1, r3
 8001f90:	6878      	ldr	r0, [r7, #4]
 8001f92:	f004 fa12 	bl	80063ba <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	f003 0308 	and.w	r3, r3, #8
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d008      	beq.n	8001fb2 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa2:	015a      	lsls	r2, r3, #5
 8001fa4:	69fb      	ldr	r3, [r7, #28]
 8001fa6:	4413      	add	r3, r2
 8001fa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001fac:	461a      	mov	r2, r3
 8001fae:	2308      	movs	r3, #8
 8001fb0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	f003 0310 	and.w	r3, r3, #16
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d008      	beq.n	8001fce <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fbe:	015a      	lsls	r2, r3, #5
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	4413      	add	r3, r2
 8001fc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001fc8:	461a      	mov	r2, r3
 8001fca:	2310      	movs	r3, #16
 8001fcc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d008      	beq.n	8001fea <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fda:	015a      	lsls	r2, r3, #5
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	4413      	add	r3, r2
 8001fe0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001fe4:	461a      	mov	r2, r3
 8001fe6:	2340      	movs	r3, #64	; 0x40
 8001fe8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	f003 0302 	and.w	r3, r3, #2
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d008      	beq.n	8002006 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff6:	015a      	lsls	r2, r3, #5
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	4413      	add	r3, r2
 8001ffc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002000:	461a      	mov	r2, r3
 8002002:	2302      	movs	r3, #2
 8002004:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800200c:	2b00      	cmp	r3, #0
 800200e:	d003      	beq.n	8002018 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002010:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f000 fc03 	bl	800281e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201a:	3301      	adds	r3, #1
 800201c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800201e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002020:	085b      	lsrs	r3, r3, #1
 8002022:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002026:	2b00      	cmp	r3, #0
 8002028:	f47f af49 	bne.w	8001ebe <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4618      	mov	r0, r3
 8002032:	f002 fc08 	bl	8004846 <USB_ReadInterrupts>
 8002036:	4603      	mov	r3, r0
 8002038:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800203c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002040:	d122      	bne.n	8002088 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	69fa      	ldr	r2, [r7, #28]
 800204c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002050:	f023 0301 	bic.w	r3, r3, #1
 8002054:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800205c:	2b01      	cmp	r3, #1
 800205e:	d108      	bne.n	8002072 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2200      	movs	r2, #0
 8002064:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002068:	2100      	movs	r1, #0
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f000 fe0e 	bl	8002c8c <HAL_PCDEx_LPM_Callback>
 8002070:	e002      	b.n	8002078 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f004 fa0e 	bl	8006494 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	695a      	ldr	r2, [r3, #20]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002086:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4618      	mov	r0, r3
 800208e:	f002 fbda 	bl	8004846 <USB_ReadInterrupts>
 8002092:	4603      	mov	r3, r0
 8002094:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002098:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800209c:	d112      	bne.n	80020c4 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	f003 0301 	and.w	r3, r3, #1
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d102      	bne.n	80020b4 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f004 f9ca 	bl	8006448 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	695a      	ldr	r2, [r3, #20]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80020c2:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4618      	mov	r0, r3
 80020ca:	f002 fbbc 	bl	8004846 <USB_ReadInterrupts>
 80020ce:	4603      	mov	r3, r0
 80020d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020d8:	f040 80c7 	bne.w	800226a <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80020dc:	69fb      	ldr	r3, [r7, #28]
 80020de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	69fa      	ldr	r2, [r7, #28]
 80020e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80020ea:	f023 0301 	bic.w	r3, r3, #1
 80020ee:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	2110      	movs	r1, #16
 80020f6:	4618      	mov	r0, r3
 80020f8:	f001 fc9c 	bl	8003a34 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020fc:	2300      	movs	r3, #0
 80020fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002100:	e056      	b.n	80021b0 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002104:	015a      	lsls	r2, r3, #5
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	4413      	add	r3, r2
 800210a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800210e:	461a      	mov	r2, r3
 8002110:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002114:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002118:	015a      	lsls	r2, r3, #5
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	4413      	add	r3, r2
 800211e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002126:	0151      	lsls	r1, r2, #5
 8002128:	69fa      	ldr	r2, [r7, #28]
 800212a:	440a      	add	r2, r1
 800212c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002130:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002134:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002138:	015a      	lsls	r2, r3, #5
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	4413      	add	r3, r2
 800213e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002146:	0151      	lsls	r1, r2, #5
 8002148:	69fa      	ldr	r2, [r7, #28]
 800214a:	440a      	add	r2, r1
 800214c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002150:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002154:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002158:	015a      	lsls	r2, r3, #5
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	4413      	add	r3, r2
 800215e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002162:	461a      	mov	r2, r3
 8002164:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002168:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800216a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800216c:	015a      	lsls	r2, r3, #5
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	4413      	add	r3, r2
 8002172:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800217a:	0151      	lsls	r1, r2, #5
 800217c:	69fa      	ldr	r2, [r7, #28]
 800217e:	440a      	add	r2, r1
 8002180:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002184:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002188:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800218a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800218c:	015a      	lsls	r2, r3, #5
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	4413      	add	r3, r2
 8002192:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800219a:	0151      	lsls	r1, r2, #5
 800219c:	69fa      	ldr	r2, [r7, #28]
 800219e:	440a      	add	r2, r1
 80021a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80021a4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80021a8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021ac:	3301      	adds	r3, #1
 80021ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d3a3      	bcc.n	8002102 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021c0:	69db      	ldr	r3, [r3, #28]
 80021c2:	69fa      	ldr	r2, [r7, #28]
 80021c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80021c8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80021cc:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d016      	beq.n	8002204 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80021e0:	69fa      	ldr	r2, [r7, #28]
 80021e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80021e6:	f043 030b 	orr.w	r3, r3, #11
 80021ea:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021f6:	69fa      	ldr	r2, [r7, #28]
 80021f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80021fc:	f043 030b 	orr.w	r3, r3, #11
 8002200:	6453      	str	r3, [r2, #68]	; 0x44
 8002202:	e015      	b.n	8002230 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800220a:	695b      	ldr	r3, [r3, #20]
 800220c:	69fa      	ldr	r2, [r7, #28]
 800220e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002212:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002216:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800221a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002222:	691b      	ldr	r3, [r3, #16]
 8002224:	69fa      	ldr	r2, [r7, #28]
 8002226:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800222a:	f043 030b 	orr.w	r3, r3, #11
 800222e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002230:	69fb      	ldr	r3, [r7, #28]
 8002232:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	69fa      	ldr	r2, [r7, #28]
 800223a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800223e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002242:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6818      	ldr	r0, [r3, #0]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	691b      	ldr	r3, [r3, #16]
 800224c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002254:	461a      	mov	r2, r3
 8002256:	f002 fbbb 	bl	80049d0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	695a      	ldr	r2, [r3, #20]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002268:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4618      	mov	r0, r3
 8002270:	f002 fae9 	bl	8004846 <USB_ReadInterrupts>
 8002274:	4603      	mov	r3, r0
 8002276:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800227a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800227e:	d124      	bne.n	80022ca <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4618      	mov	r0, r3
 8002286:	f002 fb7f 	bl	8004988 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4618      	mov	r0, r3
 8002290:	f001 fc31 	bl	8003af6 <USB_GetDevSpeed>
 8002294:	4603      	mov	r3, r0
 8002296:	461a      	mov	r2, r3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681c      	ldr	r4, [r3, #0]
 80022a0:	f001 f908 	bl	80034b4 <HAL_RCC_GetHCLKFreq>
 80022a4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	461a      	mov	r2, r3
 80022ae:	4620      	mov	r0, r4
 80022b0:	f001 f96e 	bl	8003590 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	f004 f8a8 	bl	800640a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	695a      	ldr	r2, [r3, #20]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80022c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4618      	mov	r0, r3
 80022d0:	f002 fab9 	bl	8004846 <USB_ReadInterrupts>
 80022d4:	4603      	mov	r3, r0
 80022d6:	f003 0308 	and.w	r3, r3, #8
 80022da:	2b08      	cmp	r3, #8
 80022dc:	d10a      	bne.n	80022f4 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f004 f885 	bl	80063ee <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	695a      	ldr	r2, [r3, #20]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f002 0208 	and.w	r2, r2, #8
 80022f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4618      	mov	r0, r3
 80022fa:	f002 faa4 	bl	8004846 <USB_ReadInterrupts>
 80022fe:	4603      	mov	r3, r0
 8002300:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002304:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002308:	d10f      	bne.n	800232a <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800230a:	2300      	movs	r3, #0
 800230c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800230e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002310:	b2db      	uxtb	r3, r3
 8002312:	4619      	mov	r1, r3
 8002314:	6878      	ldr	r0, [r7, #4]
 8002316:	f004 f8dd 	bl	80064d4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	695a      	ldr	r2, [r3, #20]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002328:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4618      	mov	r0, r3
 8002330:	f002 fa89 	bl	8004846 <USB_ReadInterrupts>
 8002334:	4603      	mov	r3, r0
 8002336:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800233a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800233e:	d10f      	bne.n	8002360 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002340:	2300      	movs	r3, #0
 8002342:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002346:	b2db      	uxtb	r3, r3
 8002348:	4619      	mov	r1, r3
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f004 f8b0 	bl	80064b0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	695a      	ldr	r2, [r3, #20]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800235e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4618      	mov	r0, r3
 8002366:	f002 fa6e 	bl	8004846 <USB_ReadInterrupts>
 800236a:	4603      	mov	r3, r0
 800236c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002370:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002374:	d10a      	bne.n	800238c <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f004 f8be 	bl	80064f8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	695a      	ldr	r2, [r3, #20]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800238a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4618      	mov	r0, r3
 8002392:	f002 fa58 	bl	8004846 <USB_ReadInterrupts>
 8002396:	4603      	mov	r3, r0
 8002398:	f003 0304 	and.w	r3, r3, #4
 800239c:	2b04      	cmp	r3, #4
 800239e:	d115      	bne.n	80023cc <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80023a8:	69bb      	ldr	r3, [r7, #24]
 80023aa:	f003 0304 	and.w	r3, r3, #4
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d002      	beq.n	80023b8 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f004 f8ae 	bl	8006514 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	6859      	ldr	r1, [r3, #4]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	69ba      	ldr	r2, [r7, #24]
 80023c4:	430a      	orrs	r2, r1
 80023c6:	605a      	str	r2, [r3, #4]
 80023c8:	e000      	b.n	80023cc <HAL_PCD_IRQHandler+0x75e>
      return;
 80023ca:	bf00      	nop
    }
  }
}
 80023cc:	3734      	adds	r7, #52	; 0x34
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd90      	pop	{r4, r7, pc}

080023d2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80023d2:	b580      	push	{r7, lr}
 80023d4:	b082      	sub	sp, #8
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	6078      	str	r0, [r7, #4]
 80023da:	460b      	mov	r3, r1
 80023dc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d101      	bne.n	80023ec <HAL_PCD_SetAddress+0x1a>
 80023e8:	2302      	movs	r3, #2
 80023ea:	e013      	b.n	8002414 <HAL_PCD_SetAddress+0x42>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2201      	movs	r2, #1
 80023f0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	78fa      	ldrb	r2, [r7, #3]
 80023f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	78fa      	ldrb	r2, [r7, #3]
 8002402:	4611      	mov	r1, r2
 8002404:	4618      	mov	r0, r3
 8002406:	f002 f9c8 	bl	800479a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2200      	movs	r2, #0
 800240e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002412:	2300      	movs	r3, #0
}
 8002414:	4618      	mov	r0, r3
 8002416:	3708      	adds	r7, #8
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}

0800241c <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b084      	sub	sp, #16
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
 8002424:	4608      	mov	r0, r1
 8002426:	4611      	mov	r1, r2
 8002428:	461a      	mov	r2, r3
 800242a:	4603      	mov	r3, r0
 800242c:	70fb      	strb	r3, [r7, #3]
 800242e:	460b      	mov	r3, r1
 8002430:	803b      	strh	r3, [r7, #0]
 8002432:	4613      	mov	r3, r2
 8002434:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002436:	2300      	movs	r3, #0
 8002438:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800243a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800243e:	2b00      	cmp	r3, #0
 8002440:	da0f      	bge.n	8002462 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002442:	78fb      	ldrb	r3, [r7, #3]
 8002444:	f003 020f 	and.w	r2, r3, #15
 8002448:	4613      	mov	r3, r2
 800244a:	00db      	lsls	r3, r3, #3
 800244c:	1a9b      	subs	r3, r3, r2
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	3338      	adds	r3, #56	; 0x38
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	4413      	add	r3, r2
 8002456:	3304      	adds	r3, #4
 8002458:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2201      	movs	r2, #1
 800245e:	705a      	strb	r2, [r3, #1]
 8002460:	e00f      	b.n	8002482 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002462:	78fb      	ldrb	r3, [r7, #3]
 8002464:	f003 020f 	and.w	r2, r3, #15
 8002468:	4613      	mov	r3, r2
 800246a:	00db      	lsls	r3, r3, #3
 800246c:	1a9b      	subs	r3, r3, r2
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002474:	687a      	ldr	r2, [r7, #4]
 8002476:	4413      	add	r3, r2
 8002478:	3304      	adds	r3, #4
 800247a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2200      	movs	r2, #0
 8002480:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002482:	78fb      	ldrb	r3, [r7, #3]
 8002484:	f003 030f 	and.w	r3, r3, #15
 8002488:	b2da      	uxtb	r2, r3
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800248e:	883a      	ldrh	r2, [r7, #0]
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	78ba      	ldrb	r2, [r7, #2]
 8002498:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	785b      	ldrb	r3, [r3, #1]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d004      	beq.n	80024ac <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	781b      	ldrb	r3, [r3, #0]
 80024a6:	b29a      	uxth	r2, r3
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80024ac:	78bb      	ldrb	r3, [r7, #2]
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d102      	bne.n	80024b8 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2200      	movs	r2, #0
 80024b6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d101      	bne.n	80024c6 <HAL_PCD_EP_Open+0xaa>
 80024c2:	2302      	movs	r3, #2
 80024c4:	e00e      	b.n	80024e4 <HAL_PCD_EP_Open+0xc8>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2201      	movs	r2, #1
 80024ca:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	68f9      	ldr	r1, [r7, #12]
 80024d4:	4618      	mov	r0, r3
 80024d6:	f001 fb33 	bl	8003b40 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2200      	movs	r2, #0
 80024de:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80024e2:	7afb      	ldrb	r3, [r7, #11]
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3710      	adds	r7, #16
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}

080024ec <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	460b      	mov	r3, r1
 80024f6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80024f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	da0f      	bge.n	8002520 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002500:	78fb      	ldrb	r3, [r7, #3]
 8002502:	f003 020f 	and.w	r2, r3, #15
 8002506:	4613      	mov	r3, r2
 8002508:	00db      	lsls	r3, r3, #3
 800250a:	1a9b      	subs	r3, r3, r2
 800250c:	009b      	lsls	r3, r3, #2
 800250e:	3338      	adds	r3, #56	; 0x38
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	4413      	add	r3, r2
 8002514:	3304      	adds	r3, #4
 8002516:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	2201      	movs	r2, #1
 800251c:	705a      	strb	r2, [r3, #1]
 800251e:	e00f      	b.n	8002540 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002520:	78fb      	ldrb	r3, [r7, #3]
 8002522:	f003 020f 	and.w	r2, r3, #15
 8002526:	4613      	mov	r3, r2
 8002528:	00db      	lsls	r3, r3, #3
 800252a:	1a9b      	subs	r3, r3, r2
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	4413      	add	r3, r2
 8002536:	3304      	adds	r3, #4
 8002538:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2200      	movs	r2, #0
 800253e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002540:	78fb      	ldrb	r3, [r7, #3]
 8002542:	f003 030f 	and.w	r3, r3, #15
 8002546:	b2da      	uxtb	r2, r3
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002552:	2b01      	cmp	r3, #1
 8002554:	d101      	bne.n	800255a <HAL_PCD_EP_Close+0x6e>
 8002556:	2302      	movs	r3, #2
 8002558:	e00e      	b.n	8002578 <HAL_PCD_EP_Close+0x8c>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2201      	movs	r2, #1
 800255e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	68f9      	ldr	r1, [r7, #12]
 8002568:	4618      	mov	r0, r3
 800256a:	f001 fb71 	bl	8003c50 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2200      	movs	r2, #0
 8002572:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002576:	2300      	movs	r3, #0
}
 8002578:	4618      	mov	r0, r3
 800257a:	3710      	adds	r7, #16
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}

08002580 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b086      	sub	sp, #24
 8002584:	af00      	add	r7, sp, #0
 8002586:	60f8      	str	r0, [r7, #12]
 8002588:	607a      	str	r2, [r7, #4]
 800258a:	603b      	str	r3, [r7, #0]
 800258c:	460b      	mov	r3, r1
 800258e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002590:	7afb      	ldrb	r3, [r7, #11]
 8002592:	f003 020f 	and.w	r2, r3, #15
 8002596:	4613      	mov	r3, r2
 8002598:	00db      	lsls	r3, r3, #3
 800259a:	1a9b      	subs	r3, r3, r2
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80025a2:	68fa      	ldr	r2, [r7, #12]
 80025a4:	4413      	add	r3, r2
 80025a6:	3304      	adds	r3, #4
 80025a8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	687a      	ldr	r2, [r7, #4]
 80025ae:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	683a      	ldr	r2, [r7, #0]
 80025b4:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	2200      	movs	r2, #0
 80025ba:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	2200      	movs	r2, #0
 80025c0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80025c2:	7afb      	ldrb	r3, [r7, #11]
 80025c4:	f003 030f 	and.w	r3, r3, #15
 80025c8:	b2da      	uxtb	r2, r3
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	691b      	ldr	r3, [r3, #16]
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d102      	bne.n	80025dc <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80025dc:	7afb      	ldrb	r3, [r7, #11]
 80025de:	f003 030f 	and.w	r3, r3, #15
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d109      	bne.n	80025fa <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	6818      	ldr	r0, [r3, #0]
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	691b      	ldr	r3, [r3, #16]
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	461a      	mov	r2, r3
 80025f2:	6979      	ldr	r1, [r7, #20]
 80025f4:	f001 fe4c 	bl	8004290 <USB_EP0StartXfer>
 80025f8:	e008      	b.n	800260c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	6818      	ldr	r0, [r3, #0]
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	691b      	ldr	r3, [r3, #16]
 8002602:	b2db      	uxtb	r3, r3
 8002604:	461a      	mov	r2, r3
 8002606:	6979      	ldr	r1, [r7, #20]
 8002608:	f001 fbfe 	bl	8003e08 <USB_EPStartXfer>
  }

  return HAL_OK;
 800260c:	2300      	movs	r3, #0
}
 800260e:	4618      	mov	r0, r3
 8002610:	3718      	adds	r7, #24
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}

08002616 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002616:	b580      	push	{r7, lr}
 8002618:	b086      	sub	sp, #24
 800261a:	af00      	add	r7, sp, #0
 800261c:	60f8      	str	r0, [r7, #12]
 800261e:	607a      	str	r2, [r7, #4]
 8002620:	603b      	str	r3, [r7, #0]
 8002622:	460b      	mov	r3, r1
 8002624:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002626:	7afb      	ldrb	r3, [r7, #11]
 8002628:	f003 020f 	and.w	r2, r3, #15
 800262c:	4613      	mov	r3, r2
 800262e:	00db      	lsls	r3, r3, #3
 8002630:	1a9b      	subs	r3, r3, r2
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	3338      	adds	r3, #56	; 0x38
 8002636:	68fa      	ldr	r2, [r7, #12]
 8002638:	4413      	add	r3, r2
 800263a:	3304      	adds	r3, #4
 800263c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	687a      	ldr	r2, [r7, #4]
 8002642:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	683a      	ldr	r2, [r7, #0]
 8002648:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	2200      	movs	r2, #0
 800264e:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	2201      	movs	r2, #1
 8002654:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002656:	7afb      	ldrb	r3, [r7, #11]
 8002658:	f003 030f 	and.w	r3, r3, #15
 800265c:	b2da      	uxtb	r2, r3
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	691b      	ldr	r3, [r3, #16]
 8002666:	2b01      	cmp	r3, #1
 8002668:	d102      	bne.n	8002670 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800266a:	687a      	ldr	r2, [r7, #4]
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002670:	7afb      	ldrb	r3, [r7, #11]
 8002672:	f003 030f 	and.w	r3, r3, #15
 8002676:	2b00      	cmp	r3, #0
 8002678:	d109      	bne.n	800268e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	6818      	ldr	r0, [r3, #0]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	691b      	ldr	r3, [r3, #16]
 8002682:	b2db      	uxtb	r3, r3
 8002684:	461a      	mov	r2, r3
 8002686:	6979      	ldr	r1, [r7, #20]
 8002688:	f001 fe02 	bl	8004290 <USB_EP0StartXfer>
 800268c:	e008      	b.n	80026a0 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	6818      	ldr	r0, [r3, #0]
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	691b      	ldr	r3, [r3, #16]
 8002696:	b2db      	uxtb	r3, r3
 8002698:	461a      	mov	r2, r3
 800269a:	6979      	ldr	r1, [r7, #20]
 800269c:	f001 fbb4 	bl	8003e08 <USB_EPStartXfer>
  }

  return HAL_OK;
 80026a0:	2300      	movs	r3, #0
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3718      	adds	r7, #24
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}

080026aa <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80026aa:	b580      	push	{r7, lr}
 80026ac:	b084      	sub	sp, #16
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	6078      	str	r0, [r7, #4]
 80026b2:	460b      	mov	r3, r1
 80026b4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80026b6:	78fb      	ldrb	r3, [r7, #3]
 80026b8:	f003 020f 	and.w	r2, r3, #15
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d901      	bls.n	80026c8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e050      	b.n	800276a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80026c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	da0f      	bge.n	80026f0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026d0:	78fb      	ldrb	r3, [r7, #3]
 80026d2:	f003 020f 	and.w	r2, r3, #15
 80026d6:	4613      	mov	r3, r2
 80026d8:	00db      	lsls	r3, r3, #3
 80026da:	1a9b      	subs	r3, r3, r2
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	3338      	adds	r3, #56	; 0x38
 80026e0:	687a      	ldr	r2, [r7, #4]
 80026e2:	4413      	add	r3, r2
 80026e4:	3304      	adds	r3, #4
 80026e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2201      	movs	r2, #1
 80026ec:	705a      	strb	r2, [r3, #1]
 80026ee:	e00d      	b.n	800270c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80026f0:	78fa      	ldrb	r2, [r7, #3]
 80026f2:	4613      	mov	r3, r2
 80026f4:	00db      	lsls	r3, r3, #3
 80026f6:	1a9b      	subs	r3, r3, r2
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80026fe:	687a      	ldr	r2, [r7, #4]
 8002700:	4413      	add	r3, r2
 8002702:	3304      	adds	r3, #4
 8002704:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2200      	movs	r2, #0
 800270a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2201      	movs	r2, #1
 8002710:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002712:	78fb      	ldrb	r3, [r7, #3]
 8002714:	f003 030f 	and.w	r3, r3, #15
 8002718:	b2da      	uxtb	r2, r3
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002724:	2b01      	cmp	r3, #1
 8002726:	d101      	bne.n	800272c <HAL_PCD_EP_SetStall+0x82>
 8002728:	2302      	movs	r3, #2
 800272a:	e01e      	b.n	800276a <HAL_PCD_EP_SetStall+0xc0>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2201      	movs	r2, #1
 8002730:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	68f9      	ldr	r1, [r7, #12]
 800273a:	4618      	mov	r0, r3
 800273c:	f001 ff59 	bl	80045f2 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002740:	78fb      	ldrb	r3, [r7, #3]
 8002742:	f003 030f 	and.w	r3, r3, #15
 8002746:	2b00      	cmp	r3, #0
 8002748:	d10a      	bne.n	8002760 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6818      	ldr	r0, [r3, #0]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	691b      	ldr	r3, [r3, #16]
 8002752:	b2d9      	uxtb	r1, r3
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800275a:	461a      	mov	r2, r3
 800275c:	f002 f938 	bl	80049d0 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2200      	movs	r2, #0
 8002764:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002768:	2300      	movs	r3, #0
}
 800276a:	4618      	mov	r0, r3
 800276c:	3710      	adds	r7, #16
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}

08002772 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002772:	b580      	push	{r7, lr}
 8002774:	b084      	sub	sp, #16
 8002776:	af00      	add	r7, sp, #0
 8002778:	6078      	str	r0, [r7, #4]
 800277a:	460b      	mov	r3, r1
 800277c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800277e:	78fb      	ldrb	r3, [r7, #3]
 8002780:	f003 020f 	and.w	r2, r3, #15
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	429a      	cmp	r2, r3
 800278a:	d901      	bls.n	8002790 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	e042      	b.n	8002816 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002790:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002794:	2b00      	cmp	r3, #0
 8002796:	da0f      	bge.n	80027b8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002798:	78fb      	ldrb	r3, [r7, #3]
 800279a:	f003 020f 	and.w	r2, r3, #15
 800279e:	4613      	mov	r3, r2
 80027a0:	00db      	lsls	r3, r3, #3
 80027a2:	1a9b      	subs	r3, r3, r2
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	3338      	adds	r3, #56	; 0x38
 80027a8:	687a      	ldr	r2, [r7, #4]
 80027aa:	4413      	add	r3, r2
 80027ac:	3304      	adds	r3, #4
 80027ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2201      	movs	r2, #1
 80027b4:	705a      	strb	r2, [r3, #1]
 80027b6:	e00f      	b.n	80027d8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80027b8:	78fb      	ldrb	r3, [r7, #3]
 80027ba:	f003 020f 	and.w	r2, r3, #15
 80027be:	4613      	mov	r3, r2
 80027c0:	00db      	lsls	r3, r3, #3
 80027c2:	1a9b      	subs	r3, r3, r2
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80027ca:	687a      	ldr	r2, [r7, #4]
 80027cc:	4413      	add	r3, r2
 80027ce:	3304      	adds	r3, #4
 80027d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2200      	movs	r2, #0
 80027d6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2200      	movs	r2, #0
 80027dc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80027de:	78fb      	ldrb	r3, [r7, #3]
 80027e0:	f003 030f 	and.w	r3, r3, #15
 80027e4:	b2da      	uxtb	r2, r3
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d101      	bne.n	80027f8 <HAL_PCD_EP_ClrStall+0x86>
 80027f4:	2302      	movs	r3, #2
 80027f6:	e00e      	b.n	8002816 <HAL_PCD_EP_ClrStall+0xa4>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2201      	movs	r2, #1
 80027fc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	68f9      	ldr	r1, [r7, #12]
 8002806:	4618      	mov	r0, r3
 8002808:	f001 ff61 	bl	80046ce <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2200      	movs	r2, #0
 8002810:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002814:	2300      	movs	r3, #0
}
 8002816:	4618      	mov	r0, r3
 8002818:	3710      	adds	r7, #16
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}

0800281e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800281e:	b580      	push	{r7, lr}
 8002820:	b08a      	sub	sp, #40	; 0x28
 8002822:	af02      	add	r7, sp, #8
 8002824:	6078      	str	r0, [r7, #4]
 8002826:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002832:	683a      	ldr	r2, [r7, #0]
 8002834:	4613      	mov	r3, r2
 8002836:	00db      	lsls	r3, r3, #3
 8002838:	1a9b      	subs	r3, r3, r2
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	3338      	adds	r3, #56	; 0x38
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	4413      	add	r3, r2
 8002842:	3304      	adds	r3, #4
 8002844:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	699a      	ldr	r2, [r3, #24]
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	695b      	ldr	r3, [r3, #20]
 800284e:	429a      	cmp	r2, r3
 8002850:	d901      	bls.n	8002856 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e06c      	b.n	8002930 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	695a      	ldr	r2, [r3, #20]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	699b      	ldr	r3, [r3, #24]
 800285e:	1ad3      	subs	r3, r2, r3
 8002860:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	69fa      	ldr	r2, [r7, #28]
 8002868:	429a      	cmp	r2, r3
 800286a:	d902      	bls.n	8002872 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	3303      	adds	r3, #3
 8002876:	089b      	lsrs	r3, r3, #2
 8002878:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800287a:	e02b      	b.n	80028d4 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	695a      	ldr	r2, [r3, #20]
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	699b      	ldr	r3, [r3, #24]
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	69fa      	ldr	r2, [r7, #28]
 800288e:	429a      	cmp	r2, r3
 8002890:	d902      	bls.n	8002898 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002898:	69fb      	ldr	r3, [r7, #28]
 800289a:	3303      	adds	r3, #3
 800289c:	089b      	lsrs	r3, r3, #2
 800289e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	68d9      	ldr	r1, [r3, #12]
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	b2da      	uxtb	r2, r3
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	9300      	str	r3, [sp, #0]
 80028b4:	4603      	mov	r3, r0
 80028b6:	6978      	ldr	r0, [r7, #20]
 80028b8:	f001 fe3d 	bl	8004536 <USB_WritePacket>

    ep->xfer_buff  += len;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	68da      	ldr	r2, [r3, #12]
 80028c0:	69fb      	ldr	r3, [r7, #28]
 80028c2:	441a      	add	r2, r3
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	699a      	ldr	r2, [r3, #24]
 80028cc:	69fb      	ldr	r3, [r7, #28]
 80028ce:	441a      	add	r2, r3
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	015a      	lsls	r2, r3, #5
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	4413      	add	r3, r2
 80028dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028e0:	699b      	ldr	r3, [r3, #24]
 80028e2:	b29b      	uxth	r3, r3
 80028e4:	69ba      	ldr	r2, [r7, #24]
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d809      	bhi.n	80028fe <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	699a      	ldr	r2, [r3, #24]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d203      	bcs.n	80028fe <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	695b      	ldr	r3, [r3, #20]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d1be      	bne.n	800287c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	695a      	ldr	r2, [r3, #20]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	699b      	ldr	r3, [r3, #24]
 8002906:	429a      	cmp	r2, r3
 8002908:	d811      	bhi.n	800292e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	f003 030f 	and.w	r3, r3, #15
 8002910:	2201      	movs	r2, #1
 8002912:	fa02 f303 	lsl.w	r3, r2, r3
 8002916:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800291e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	43db      	mvns	r3, r3
 8002924:	6939      	ldr	r1, [r7, #16]
 8002926:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800292a:	4013      	ands	r3, r2
 800292c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800292e:	2300      	movs	r3, #0
}
 8002930:	4618      	mov	r0, r3
 8002932:	3720      	adds	r7, #32
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}

08002938 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b086      	sub	sp, #24
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	333c      	adds	r3, #60	; 0x3c
 8002950:	3304      	adds	r3, #4
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	015a      	lsls	r2, r3, #5
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	4413      	add	r3, r2
 800295e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	691b      	ldr	r3, [r3, #16]
 800296a:	2b01      	cmp	r3, #1
 800296c:	f040 80a0 	bne.w	8002ab0 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	f003 0308 	and.w	r3, r3, #8
 8002976:	2b00      	cmp	r3, #0
 8002978:	d015      	beq.n	80029a6 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	4a72      	ldr	r2, [pc, #456]	; (8002b48 <PCD_EP_OutXfrComplete_int+0x210>)
 800297e:	4293      	cmp	r3, r2
 8002980:	f240 80dd 	bls.w	8002b3e <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800298a:	2b00      	cmp	r3, #0
 800298c:	f000 80d7 	beq.w	8002b3e <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	015a      	lsls	r2, r3, #5
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	4413      	add	r3, r2
 8002998:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800299c:	461a      	mov	r2, r3
 800299e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029a2:	6093      	str	r3, [r2, #8]
 80029a4:	e0cb      	b.n	8002b3e <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	f003 0320 	and.w	r3, r3, #32
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d009      	beq.n	80029c4 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	015a      	lsls	r2, r3, #5
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	4413      	add	r3, r2
 80029b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029bc:	461a      	mov	r2, r3
 80029be:	2320      	movs	r3, #32
 80029c0:	6093      	str	r3, [r2, #8]
 80029c2:	e0bc      	b.n	8002b3e <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	f040 80b7 	bne.w	8002b3e <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	4a5d      	ldr	r2, [pc, #372]	; (8002b48 <PCD_EP_OutXfrComplete_int+0x210>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d90f      	bls.n	80029f8 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d00a      	beq.n	80029f8 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	015a      	lsls	r2, r3, #5
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	4413      	add	r3, r2
 80029ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029ee:	461a      	mov	r2, r3
 80029f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029f4:	6093      	str	r3, [r2, #8]
 80029f6:	e0a2      	b.n	8002b3e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80029f8:	6879      	ldr	r1, [r7, #4]
 80029fa:	683a      	ldr	r2, [r7, #0]
 80029fc:	4613      	mov	r3, r2
 80029fe:	00db      	lsls	r3, r3, #3
 8002a00:	1a9b      	subs	r3, r3, r2
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	440b      	add	r3, r1
 8002a06:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002a0a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	0159      	lsls	r1, r3, #5
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	440b      	add	r3, r1
 8002a14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a18:	691b      	ldr	r3, [r3, #16]
 8002a1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8002a1e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	683a      	ldr	r2, [r7, #0]
 8002a24:	4613      	mov	r3, r2
 8002a26:	00db      	lsls	r3, r3, #3
 8002a28:	1a9b      	subs	r3, r3, r2
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	4403      	add	r3, r0
 8002a2e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002a32:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002a34:	6879      	ldr	r1, [r7, #4]
 8002a36:	683a      	ldr	r2, [r7, #0]
 8002a38:	4613      	mov	r3, r2
 8002a3a:	00db      	lsls	r3, r3, #3
 8002a3c:	1a9b      	subs	r3, r3, r2
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	440b      	add	r3, r1
 8002a42:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002a46:	6819      	ldr	r1, [r3, #0]
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	683a      	ldr	r2, [r7, #0]
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	00db      	lsls	r3, r3, #3
 8002a50:	1a9b      	subs	r3, r3, r2
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	4403      	add	r3, r0
 8002a56:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4419      	add	r1, r3
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	683a      	ldr	r2, [r7, #0]
 8002a62:	4613      	mov	r3, r2
 8002a64:	00db      	lsls	r3, r3, #3
 8002a66:	1a9b      	subs	r3, r3, r2
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	4403      	add	r3, r0
 8002a6c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002a70:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d114      	bne.n	8002aa2 <PCD_EP_OutXfrComplete_int+0x16a>
 8002a78:	6879      	ldr	r1, [r7, #4]
 8002a7a:	683a      	ldr	r2, [r7, #0]
 8002a7c:	4613      	mov	r3, r2
 8002a7e:	00db      	lsls	r3, r3, #3
 8002a80:	1a9b      	subs	r3, r3, r2
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	440b      	add	r3, r1
 8002a86:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d108      	bne.n	8002aa2 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6818      	ldr	r0, [r3, #0]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	2101      	movs	r1, #1
 8002a9e:	f001 ff97 	bl	80049d0 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	f003 fc6b 	bl	8006384 <HAL_PCD_DataOutStageCallback>
 8002aae:	e046      	b.n	8002b3e <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	4a26      	ldr	r2, [pc, #152]	; (8002b4c <PCD_EP_OutXfrComplete_int+0x214>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d124      	bne.n	8002b02 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d00a      	beq.n	8002ad8 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	015a      	lsls	r2, r3, #5
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	4413      	add	r3, r2
 8002aca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ace:	461a      	mov	r2, r3
 8002ad0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ad4:	6093      	str	r3, [r2, #8]
 8002ad6:	e032      	b.n	8002b3e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	f003 0320 	and.w	r3, r3, #32
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d008      	beq.n	8002af4 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	015a      	lsls	r2, r3, #5
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	4413      	add	r3, r2
 8002aea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002aee:	461a      	mov	r2, r3
 8002af0:	2320      	movs	r3, #32
 8002af2:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	4619      	mov	r1, r3
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f003 fc42 	bl	8006384 <HAL_PCD_DataOutStageCallback>
 8002b00:	e01d      	b.n	8002b3e <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d114      	bne.n	8002b32 <PCD_EP_OutXfrComplete_int+0x1fa>
 8002b08:	6879      	ldr	r1, [r7, #4]
 8002b0a:	683a      	ldr	r2, [r7, #0]
 8002b0c:	4613      	mov	r3, r2
 8002b0e:	00db      	lsls	r3, r3, #3
 8002b10:	1a9b      	subs	r3, r3, r2
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	440b      	add	r3, r1
 8002b16:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d108      	bne.n	8002b32 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6818      	ldr	r0, [r3, #0]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	2100      	movs	r1, #0
 8002b2e:	f001 ff4f 	bl	80049d0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	4619      	mov	r1, r3
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	f003 fc23 	bl	8006384 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002b3e:	2300      	movs	r3, #0
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3718      	adds	r7, #24
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	4f54300a 	.word	0x4f54300a
 8002b4c:	4f54310a 	.word	0x4f54310a

08002b50 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b086      	sub	sp, #24
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	333c      	adds	r3, #60	; 0x3c
 8002b68:	3304      	adds	r3, #4
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	015a      	lsls	r2, r3, #5
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	4413      	add	r3, r2
 8002b76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	4a15      	ldr	r2, [pc, #84]	; (8002bd8 <PCD_EP_OutSetupPacket_int+0x88>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d90e      	bls.n	8002ba4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d009      	beq.n	8002ba4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	015a      	lsls	r2, r3, #5
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	4413      	add	r3, r2
 8002b98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b9c:	461a      	mov	r2, r3
 8002b9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ba2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	f003 fbdb 	bl	8006360 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	4a0a      	ldr	r2, [pc, #40]	; (8002bd8 <PCD_EP_OutSetupPacket_int+0x88>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d90c      	bls.n	8002bcc <PCD_EP_OutSetupPacket_int+0x7c>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	691b      	ldr	r3, [r3, #16]
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d108      	bne.n	8002bcc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6818      	ldr	r0, [r3, #0]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	2101      	movs	r1, #1
 8002bc8:	f001 ff02 	bl	80049d0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002bcc:	2300      	movs	r3, #0
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3718      	adds	r7, #24
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	4f54300a 	.word	0x4f54300a

08002bdc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b085      	sub	sp, #20
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
 8002be4:	460b      	mov	r3, r1
 8002be6:	70fb      	strb	r3, [r7, #3]
 8002be8:	4613      	mov	r3, r2
 8002bea:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002bf4:	78fb      	ldrb	r3, [r7, #3]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d107      	bne.n	8002c0a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002bfa:	883b      	ldrh	r3, [r7, #0]
 8002bfc:	0419      	lsls	r1, r3, #16
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	68ba      	ldr	r2, [r7, #8]
 8002c04:	430a      	orrs	r2, r1
 8002c06:	629a      	str	r2, [r3, #40]	; 0x28
 8002c08:	e028      	b.n	8002c5c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c10:	0c1b      	lsrs	r3, r3, #16
 8002c12:	68ba      	ldr	r2, [r7, #8]
 8002c14:	4413      	add	r3, r2
 8002c16:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002c18:	2300      	movs	r3, #0
 8002c1a:	73fb      	strb	r3, [r7, #15]
 8002c1c:	e00d      	b.n	8002c3a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	7bfb      	ldrb	r3, [r7, #15]
 8002c24:	3340      	adds	r3, #64	; 0x40
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	4413      	add	r3, r2
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	0c1b      	lsrs	r3, r3, #16
 8002c2e:	68ba      	ldr	r2, [r7, #8]
 8002c30:	4413      	add	r3, r2
 8002c32:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002c34:	7bfb      	ldrb	r3, [r7, #15]
 8002c36:	3301      	adds	r3, #1
 8002c38:	73fb      	strb	r3, [r7, #15]
 8002c3a:	7bfa      	ldrb	r2, [r7, #15]
 8002c3c:	78fb      	ldrb	r3, [r7, #3]
 8002c3e:	3b01      	subs	r3, #1
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d3ec      	bcc.n	8002c1e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002c44:	883b      	ldrh	r3, [r7, #0]
 8002c46:	0418      	lsls	r0, r3, #16
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6819      	ldr	r1, [r3, #0]
 8002c4c:	78fb      	ldrb	r3, [r7, #3]
 8002c4e:	3b01      	subs	r3, #1
 8002c50:	68ba      	ldr	r2, [r7, #8]
 8002c52:	4302      	orrs	r2, r0
 8002c54:	3340      	adds	r3, #64	; 0x40
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	440b      	add	r3, r1
 8002c5a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002c5c:	2300      	movs	r3, #0
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3714      	adds	r7, #20
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr

08002c6a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002c6a:	b480      	push	{r7}
 8002c6c:	b083      	sub	sp, #12
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	6078      	str	r0, [r7, #4]
 8002c72:	460b      	mov	r3, r1
 8002c74:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	887a      	ldrh	r2, [r7, #2]
 8002c7c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002c7e:	2300      	movs	r3, #0
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	370c      	adds	r7, #12
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr

08002c8c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b083      	sub	sp, #12
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	460b      	mov	r3, r1
 8002c96:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002c98:	bf00      	nop
 8002c9a:	370c      	adds	r7, #12
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr

08002ca4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b086      	sub	sp, #24
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d101      	bne.n	8002cb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e25b      	b.n	800316e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 0301 	and.w	r3, r3, #1
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d075      	beq.n	8002dae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002cc2:	4ba3      	ldr	r3, [pc, #652]	; (8002f50 <HAL_RCC_OscConfig+0x2ac>)
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	f003 030c 	and.w	r3, r3, #12
 8002cca:	2b04      	cmp	r3, #4
 8002ccc:	d00c      	beq.n	8002ce8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cce:	4ba0      	ldr	r3, [pc, #640]	; (8002f50 <HAL_RCC_OscConfig+0x2ac>)
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002cd6:	2b08      	cmp	r3, #8
 8002cd8:	d112      	bne.n	8002d00 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cda:	4b9d      	ldr	r3, [pc, #628]	; (8002f50 <HAL_RCC_OscConfig+0x2ac>)
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ce2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ce6:	d10b      	bne.n	8002d00 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ce8:	4b99      	ldr	r3, [pc, #612]	; (8002f50 <HAL_RCC_OscConfig+0x2ac>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d05b      	beq.n	8002dac <HAL_RCC_OscConfig+0x108>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d157      	bne.n	8002dac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e236      	b.n	800316e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d08:	d106      	bne.n	8002d18 <HAL_RCC_OscConfig+0x74>
 8002d0a:	4b91      	ldr	r3, [pc, #580]	; (8002f50 <HAL_RCC_OscConfig+0x2ac>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a90      	ldr	r2, [pc, #576]	; (8002f50 <HAL_RCC_OscConfig+0x2ac>)
 8002d10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d14:	6013      	str	r3, [r2, #0]
 8002d16:	e01d      	b.n	8002d54 <HAL_RCC_OscConfig+0xb0>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d20:	d10c      	bne.n	8002d3c <HAL_RCC_OscConfig+0x98>
 8002d22:	4b8b      	ldr	r3, [pc, #556]	; (8002f50 <HAL_RCC_OscConfig+0x2ac>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a8a      	ldr	r2, [pc, #552]	; (8002f50 <HAL_RCC_OscConfig+0x2ac>)
 8002d28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d2c:	6013      	str	r3, [r2, #0]
 8002d2e:	4b88      	ldr	r3, [pc, #544]	; (8002f50 <HAL_RCC_OscConfig+0x2ac>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a87      	ldr	r2, [pc, #540]	; (8002f50 <HAL_RCC_OscConfig+0x2ac>)
 8002d34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d38:	6013      	str	r3, [r2, #0]
 8002d3a:	e00b      	b.n	8002d54 <HAL_RCC_OscConfig+0xb0>
 8002d3c:	4b84      	ldr	r3, [pc, #528]	; (8002f50 <HAL_RCC_OscConfig+0x2ac>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a83      	ldr	r2, [pc, #524]	; (8002f50 <HAL_RCC_OscConfig+0x2ac>)
 8002d42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d46:	6013      	str	r3, [r2, #0]
 8002d48:	4b81      	ldr	r3, [pc, #516]	; (8002f50 <HAL_RCC_OscConfig+0x2ac>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a80      	ldr	r2, [pc, #512]	; (8002f50 <HAL_RCC_OscConfig+0x2ac>)
 8002d4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d013      	beq.n	8002d84 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d5c:	f7fe fb44 	bl	80013e8 <HAL_GetTick>
 8002d60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d62:	e008      	b.n	8002d76 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d64:	f7fe fb40 	bl	80013e8 <HAL_GetTick>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	2b64      	cmp	r3, #100	; 0x64
 8002d70:	d901      	bls.n	8002d76 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d72:	2303      	movs	r3, #3
 8002d74:	e1fb      	b.n	800316e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d76:	4b76      	ldr	r3, [pc, #472]	; (8002f50 <HAL_RCC_OscConfig+0x2ac>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d0f0      	beq.n	8002d64 <HAL_RCC_OscConfig+0xc0>
 8002d82:	e014      	b.n	8002dae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d84:	f7fe fb30 	bl	80013e8 <HAL_GetTick>
 8002d88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d8a:	e008      	b.n	8002d9e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d8c:	f7fe fb2c 	bl	80013e8 <HAL_GetTick>
 8002d90:	4602      	mov	r2, r0
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	2b64      	cmp	r3, #100	; 0x64
 8002d98:	d901      	bls.n	8002d9e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	e1e7      	b.n	800316e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d9e:	4b6c      	ldr	r3, [pc, #432]	; (8002f50 <HAL_RCC_OscConfig+0x2ac>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d1f0      	bne.n	8002d8c <HAL_RCC_OscConfig+0xe8>
 8002daa:	e000      	b.n	8002dae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0302 	and.w	r3, r3, #2
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d063      	beq.n	8002e82 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002dba:	4b65      	ldr	r3, [pc, #404]	; (8002f50 <HAL_RCC_OscConfig+0x2ac>)
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	f003 030c 	and.w	r3, r3, #12
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d00b      	beq.n	8002dde <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dc6:	4b62      	ldr	r3, [pc, #392]	; (8002f50 <HAL_RCC_OscConfig+0x2ac>)
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002dce:	2b08      	cmp	r3, #8
 8002dd0:	d11c      	bne.n	8002e0c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dd2:	4b5f      	ldr	r3, [pc, #380]	; (8002f50 <HAL_RCC_OscConfig+0x2ac>)
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d116      	bne.n	8002e0c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dde:	4b5c      	ldr	r3, [pc, #368]	; (8002f50 <HAL_RCC_OscConfig+0x2ac>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0302 	and.w	r3, r3, #2
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d005      	beq.n	8002df6 <HAL_RCC_OscConfig+0x152>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	68db      	ldr	r3, [r3, #12]
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d001      	beq.n	8002df6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e1bb      	b.n	800316e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002df6:	4b56      	ldr	r3, [pc, #344]	; (8002f50 <HAL_RCC_OscConfig+0x2ac>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	691b      	ldr	r3, [r3, #16]
 8002e02:	00db      	lsls	r3, r3, #3
 8002e04:	4952      	ldr	r1, [pc, #328]	; (8002f50 <HAL_RCC_OscConfig+0x2ac>)
 8002e06:	4313      	orrs	r3, r2
 8002e08:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e0a:	e03a      	b.n	8002e82 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d020      	beq.n	8002e56 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e14:	4b4f      	ldr	r3, [pc, #316]	; (8002f54 <HAL_RCC_OscConfig+0x2b0>)
 8002e16:	2201      	movs	r2, #1
 8002e18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e1a:	f7fe fae5 	bl	80013e8 <HAL_GetTick>
 8002e1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e20:	e008      	b.n	8002e34 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e22:	f7fe fae1 	bl	80013e8 <HAL_GetTick>
 8002e26:	4602      	mov	r2, r0
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	1ad3      	subs	r3, r2, r3
 8002e2c:	2b02      	cmp	r3, #2
 8002e2e:	d901      	bls.n	8002e34 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e30:	2303      	movs	r3, #3
 8002e32:	e19c      	b.n	800316e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e34:	4b46      	ldr	r3, [pc, #280]	; (8002f50 <HAL_RCC_OscConfig+0x2ac>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 0302 	and.w	r3, r3, #2
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d0f0      	beq.n	8002e22 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e40:	4b43      	ldr	r3, [pc, #268]	; (8002f50 <HAL_RCC_OscConfig+0x2ac>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	691b      	ldr	r3, [r3, #16]
 8002e4c:	00db      	lsls	r3, r3, #3
 8002e4e:	4940      	ldr	r1, [pc, #256]	; (8002f50 <HAL_RCC_OscConfig+0x2ac>)
 8002e50:	4313      	orrs	r3, r2
 8002e52:	600b      	str	r3, [r1, #0]
 8002e54:	e015      	b.n	8002e82 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e56:	4b3f      	ldr	r3, [pc, #252]	; (8002f54 <HAL_RCC_OscConfig+0x2b0>)
 8002e58:	2200      	movs	r2, #0
 8002e5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e5c:	f7fe fac4 	bl	80013e8 <HAL_GetTick>
 8002e60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e62:	e008      	b.n	8002e76 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e64:	f7fe fac0 	bl	80013e8 <HAL_GetTick>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	2b02      	cmp	r3, #2
 8002e70:	d901      	bls.n	8002e76 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002e72:	2303      	movs	r3, #3
 8002e74:	e17b      	b.n	800316e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e76:	4b36      	ldr	r3, [pc, #216]	; (8002f50 <HAL_RCC_OscConfig+0x2ac>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 0302 	and.w	r3, r3, #2
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d1f0      	bne.n	8002e64 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0308 	and.w	r3, r3, #8
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d030      	beq.n	8002ef0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	695b      	ldr	r3, [r3, #20]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d016      	beq.n	8002ec4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e96:	4b30      	ldr	r3, [pc, #192]	; (8002f58 <HAL_RCC_OscConfig+0x2b4>)
 8002e98:	2201      	movs	r2, #1
 8002e9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e9c:	f7fe faa4 	bl	80013e8 <HAL_GetTick>
 8002ea0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ea2:	e008      	b.n	8002eb6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ea4:	f7fe faa0 	bl	80013e8 <HAL_GetTick>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	1ad3      	subs	r3, r2, r3
 8002eae:	2b02      	cmp	r3, #2
 8002eb0:	d901      	bls.n	8002eb6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	e15b      	b.n	800316e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eb6:	4b26      	ldr	r3, [pc, #152]	; (8002f50 <HAL_RCC_OscConfig+0x2ac>)
 8002eb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002eba:	f003 0302 	and.w	r3, r3, #2
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d0f0      	beq.n	8002ea4 <HAL_RCC_OscConfig+0x200>
 8002ec2:	e015      	b.n	8002ef0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ec4:	4b24      	ldr	r3, [pc, #144]	; (8002f58 <HAL_RCC_OscConfig+0x2b4>)
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eca:	f7fe fa8d 	bl	80013e8 <HAL_GetTick>
 8002ece:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ed0:	e008      	b.n	8002ee4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ed2:	f7fe fa89 	bl	80013e8 <HAL_GetTick>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	1ad3      	subs	r3, r2, r3
 8002edc:	2b02      	cmp	r3, #2
 8002ede:	d901      	bls.n	8002ee4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002ee0:	2303      	movs	r3, #3
 8002ee2:	e144      	b.n	800316e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ee4:	4b1a      	ldr	r3, [pc, #104]	; (8002f50 <HAL_RCC_OscConfig+0x2ac>)
 8002ee6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ee8:	f003 0302 	and.w	r3, r3, #2
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d1f0      	bne.n	8002ed2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 0304 	and.w	r3, r3, #4
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	f000 80a0 	beq.w	800303e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002efe:	2300      	movs	r3, #0
 8002f00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f02:	4b13      	ldr	r3, [pc, #76]	; (8002f50 <HAL_RCC_OscConfig+0x2ac>)
 8002f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d10f      	bne.n	8002f2e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f0e:	2300      	movs	r3, #0
 8002f10:	60bb      	str	r3, [r7, #8]
 8002f12:	4b0f      	ldr	r3, [pc, #60]	; (8002f50 <HAL_RCC_OscConfig+0x2ac>)
 8002f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f16:	4a0e      	ldr	r2, [pc, #56]	; (8002f50 <HAL_RCC_OscConfig+0x2ac>)
 8002f18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f1c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f1e:	4b0c      	ldr	r3, [pc, #48]	; (8002f50 <HAL_RCC_OscConfig+0x2ac>)
 8002f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f26:	60bb      	str	r3, [r7, #8]
 8002f28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f2e:	4b0b      	ldr	r3, [pc, #44]	; (8002f5c <HAL_RCC_OscConfig+0x2b8>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d121      	bne.n	8002f7e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f3a:	4b08      	ldr	r3, [pc, #32]	; (8002f5c <HAL_RCC_OscConfig+0x2b8>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a07      	ldr	r2, [pc, #28]	; (8002f5c <HAL_RCC_OscConfig+0x2b8>)
 8002f40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f46:	f7fe fa4f 	bl	80013e8 <HAL_GetTick>
 8002f4a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f4c:	e011      	b.n	8002f72 <HAL_RCC_OscConfig+0x2ce>
 8002f4e:	bf00      	nop
 8002f50:	40023800 	.word	0x40023800
 8002f54:	42470000 	.word	0x42470000
 8002f58:	42470e80 	.word	0x42470e80
 8002f5c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f60:	f7fe fa42 	bl	80013e8 <HAL_GetTick>
 8002f64:	4602      	mov	r2, r0
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d901      	bls.n	8002f72 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	e0fd      	b.n	800316e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f72:	4b81      	ldr	r3, [pc, #516]	; (8003178 <HAL_RCC_OscConfig+0x4d4>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d0f0      	beq.n	8002f60 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d106      	bne.n	8002f94 <HAL_RCC_OscConfig+0x2f0>
 8002f86:	4b7d      	ldr	r3, [pc, #500]	; (800317c <HAL_RCC_OscConfig+0x4d8>)
 8002f88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f8a:	4a7c      	ldr	r2, [pc, #496]	; (800317c <HAL_RCC_OscConfig+0x4d8>)
 8002f8c:	f043 0301 	orr.w	r3, r3, #1
 8002f90:	6713      	str	r3, [r2, #112]	; 0x70
 8002f92:	e01c      	b.n	8002fce <HAL_RCC_OscConfig+0x32a>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	2b05      	cmp	r3, #5
 8002f9a:	d10c      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x312>
 8002f9c:	4b77      	ldr	r3, [pc, #476]	; (800317c <HAL_RCC_OscConfig+0x4d8>)
 8002f9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fa0:	4a76      	ldr	r2, [pc, #472]	; (800317c <HAL_RCC_OscConfig+0x4d8>)
 8002fa2:	f043 0304 	orr.w	r3, r3, #4
 8002fa6:	6713      	str	r3, [r2, #112]	; 0x70
 8002fa8:	4b74      	ldr	r3, [pc, #464]	; (800317c <HAL_RCC_OscConfig+0x4d8>)
 8002faa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fac:	4a73      	ldr	r2, [pc, #460]	; (800317c <HAL_RCC_OscConfig+0x4d8>)
 8002fae:	f043 0301 	orr.w	r3, r3, #1
 8002fb2:	6713      	str	r3, [r2, #112]	; 0x70
 8002fb4:	e00b      	b.n	8002fce <HAL_RCC_OscConfig+0x32a>
 8002fb6:	4b71      	ldr	r3, [pc, #452]	; (800317c <HAL_RCC_OscConfig+0x4d8>)
 8002fb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fba:	4a70      	ldr	r2, [pc, #448]	; (800317c <HAL_RCC_OscConfig+0x4d8>)
 8002fbc:	f023 0301 	bic.w	r3, r3, #1
 8002fc0:	6713      	str	r3, [r2, #112]	; 0x70
 8002fc2:	4b6e      	ldr	r3, [pc, #440]	; (800317c <HAL_RCC_OscConfig+0x4d8>)
 8002fc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fc6:	4a6d      	ldr	r2, [pc, #436]	; (800317c <HAL_RCC_OscConfig+0x4d8>)
 8002fc8:	f023 0304 	bic.w	r3, r3, #4
 8002fcc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d015      	beq.n	8003002 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fd6:	f7fe fa07 	bl	80013e8 <HAL_GetTick>
 8002fda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fdc:	e00a      	b.n	8002ff4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fde:	f7fe fa03 	bl	80013e8 <HAL_GetTick>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	1ad3      	subs	r3, r2, r3
 8002fe8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d901      	bls.n	8002ff4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002ff0:	2303      	movs	r3, #3
 8002ff2:	e0bc      	b.n	800316e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ff4:	4b61      	ldr	r3, [pc, #388]	; (800317c <HAL_RCC_OscConfig+0x4d8>)
 8002ff6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ff8:	f003 0302 	and.w	r3, r3, #2
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d0ee      	beq.n	8002fde <HAL_RCC_OscConfig+0x33a>
 8003000:	e014      	b.n	800302c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003002:	f7fe f9f1 	bl	80013e8 <HAL_GetTick>
 8003006:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003008:	e00a      	b.n	8003020 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800300a:	f7fe f9ed 	bl	80013e8 <HAL_GetTick>
 800300e:	4602      	mov	r2, r0
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	1ad3      	subs	r3, r2, r3
 8003014:	f241 3288 	movw	r2, #5000	; 0x1388
 8003018:	4293      	cmp	r3, r2
 800301a:	d901      	bls.n	8003020 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800301c:	2303      	movs	r3, #3
 800301e:	e0a6      	b.n	800316e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003020:	4b56      	ldr	r3, [pc, #344]	; (800317c <HAL_RCC_OscConfig+0x4d8>)
 8003022:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003024:	f003 0302 	and.w	r3, r3, #2
 8003028:	2b00      	cmp	r3, #0
 800302a:	d1ee      	bne.n	800300a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800302c:	7dfb      	ldrb	r3, [r7, #23]
 800302e:	2b01      	cmp	r3, #1
 8003030:	d105      	bne.n	800303e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003032:	4b52      	ldr	r3, [pc, #328]	; (800317c <HAL_RCC_OscConfig+0x4d8>)
 8003034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003036:	4a51      	ldr	r2, [pc, #324]	; (800317c <HAL_RCC_OscConfig+0x4d8>)
 8003038:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800303c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	699b      	ldr	r3, [r3, #24]
 8003042:	2b00      	cmp	r3, #0
 8003044:	f000 8092 	beq.w	800316c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003048:	4b4c      	ldr	r3, [pc, #304]	; (800317c <HAL_RCC_OscConfig+0x4d8>)
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	f003 030c 	and.w	r3, r3, #12
 8003050:	2b08      	cmp	r3, #8
 8003052:	d05c      	beq.n	800310e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	699b      	ldr	r3, [r3, #24]
 8003058:	2b02      	cmp	r3, #2
 800305a:	d141      	bne.n	80030e0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800305c:	4b48      	ldr	r3, [pc, #288]	; (8003180 <HAL_RCC_OscConfig+0x4dc>)
 800305e:	2200      	movs	r2, #0
 8003060:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003062:	f7fe f9c1 	bl	80013e8 <HAL_GetTick>
 8003066:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003068:	e008      	b.n	800307c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800306a:	f7fe f9bd 	bl	80013e8 <HAL_GetTick>
 800306e:	4602      	mov	r2, r0
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	1ad3      	subs	r3, r2, r3
 8003074:	2b02      	cmp	r3, #2
 8003076:	d901      	bls.n	800307c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003078:	2303      	movs	r3, #3
 800307a:	e078      	b.n	800316e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800307c:	4b3f      	ldr	r3, [pc, #252]	; (800317c <HAL_RCC_OscConfig+0x4d8>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003084:	2b00      	cmp	r3, #0
 8003086:	d1f0      	bne.n	800306a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	69da      	ldr	r2, [r3, #28]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6a1b      	ldr	r3, [r3, #32]
 8003090:	431a      	orrs	r2, r3
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003096:	019b      	lsls	r3, r3, #6
 8003098:	431a      	orrs	r2, r3
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800309e:	085b      	lsrs	r3, r3, #1
 80030a0:	3b01      	subs	r3, #1
 80030a2:	041b      	lsls	r3, r3, #16
 80030a4:	431a      	orrs	r2, r3
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030aa:	061b      	lsls	r3, r3, #24
 80030ac:	4933      	ldr	r1, [pc, #204]	; (800317c <HAL_RCC_OscConfig+0x4d8>)
 80030ae:	4313      	orrs	r3, r2
 80030b0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030b2:	4b33      	ldr	r3, [pc, #204]	; (8003180 <HAL_RCC_OscConfig+0x4dc>)
 80030b4:	2201      	movs	r2, #1
 80030b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030b8:	f7fe f996 	bl	80013e8 <HAL_GetTick>
 80030bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030be:	e008      	b.n	80030d2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030c0:	f7fe f992 	bl	80013e8 <HAL_GetTick>
 80030c4:	4602      	mov	r2, r0
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	2b02      	cmp	r3, #2
 80030cc:	d901      	bls.n	80030d2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80030ce:	2303      	movs	r3, #3
 80030d0:	e04d      	b.n	800316e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030d2:	4b2a      	ldr	r3, [pc, #168]	; (800317c <HAL_RCC_OscConfig+0x4d8>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d0f0      	beq.n	80030c0 <HAL_RCC_OscConfig+0x41c>
 80030de:	e045      	b.n	800316c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030e0:	4b27      	ldr	r3, [pc, #156]	; (8003180 <HAL_RCC_OscConfig+0x4dc>)
 80030e2:	2200      	movs	r2, #0
 80030e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030e6:	f7fe f97f 	bl	80013e8 <HAL_GetTick>
 80030ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030ec:	e008      	b.n	8003100 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030ee:	f7fe f97b 	bl	80013e8 <HAL_GetTick>
 80030f2:	4602      	mov	r2, r0
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	1ad3      	subs	r3, r2, r3
 80030f8:	2b02      	cmp	r3, #2
 80030fa:	d901      	bls.n	8003100 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80030fc:	2303      	movs	r3, #3
 80030fe:	e036      	b.n	800316e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003100:	4b1e      	ldr	r3, [pc, #120]	; (800317c <HAL_RCC_OscConfig+0x4d8>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003108:	2b00      	cmp	r3, #0
 800310a:	d1f0      	bne.n	80030ee <HAL_RCC_OscConfig+0x44a>
 800310c:	e02e      	b.n	800316c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	699b      	ldr	r3, [r3, #24]
 8003112:	2b01      	cmp	r3, #1
 8003114:	d101      	bne.n	800311a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e029      	b.n	800316e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800311a:	4b18      	ldr	r3, [pc, #96]	; (800317c <HAL_RCC_OscConfig+0x4d8>)
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	69db      	ldr	r3, [r3, #28]
 800312a:	429a      	cmp	r2, r3
 800312c:	d11c      	bne.n	8003168 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003138:	429a      	cmp	r2, r3
 800313a:	d115      	bne.n	8003168 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800313c:	68fa      	ldr	r2, [r7, #12]
 800313e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003142:	4013      	ands	r3, r2
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003148:	4293      	cmp	r3, r2
 800314a:	d10d      	bne.n	8003168 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003156:	429a      	cmp	r2, r3
 8003158:	d106      	bne.n	8003168 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003164:	429a      	cmp	r2, r3
 8003166:	d001      	beq.n	800316c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	e000      	b.n	800316e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800316c:	2300      	movs	r3, #0
}
 800316e:	4618      	mov	r0, r3
 8003170:	3718      	adds	r7, #24
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}
 8003176:	bf00      	nop
 8003178:	40007000 	.word	0x40007000
 800317c:	40023800 	.word	0x40023800
 8003180:	42470060 	.word	0x42470060

08003184 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b084      	sub	sp, #16
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
 800318c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d101      	bne.n	8003198 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	e0cc      	b.n	8003332 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003198:	4b68      	ldr	r3, [pc, #416]	; (800333c <HAL_RCC_ClockConfig+0x1b8>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 030f 	and.w	r3, r3, #15
 80031a0:	683a      	ldr	r2, [r7, #0]
 80031a2:	429a      	cmp	r2, r3
 80031a4:	d90c      	bls.n	80031c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031a6:	4b65      	ldr	r3, [pc, #404]	; (800333c <HAL_RCC_ClockConfig+0x1b8>)
 80031a8:	683a      	ldr	r2, [r7, #0]
 80031aa:	b2d2      	uxtb	r2, r2
 80031ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031ae:	4b63      	ldr	r3, [pc, #396]	; (800333c <HAL_RCC_ClockConfig+0x1b8>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 030f 	and.w	r3, r3, #15
 80031b6:	683a      	ldr	r2, [r7, #0]
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d001      	beq.n	80031c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	e0b8      	b.n	8003332 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 0302 	and.w	r3, r3, #2
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d020      	beq.n	800320e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 0304 	and.w	r3, r3, #4
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d005      	beq.n	80031e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031d8:	4b59      	ldr	r3, [pc, #356]	; (8003340 <HAL_RCC_ClockConfig+0x1bc>)
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	4a58      	ldr	r2, [pc, #352]	; (8003340 <HAL_RCC_ClockConfig+0x1bc>)
 80031de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80031e2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 0308 	and.w	r3, r3, #8
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d005      	beq.n	80031fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031f0:	4b53      	ldr	r3, [pc, #332]	; (8003340 <HAL_RCC_ClockConfig+0x1bc>)
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	4a52      	ldr	r2, [pc, #328]	; (8003340 <HAL_RCC_ClockConfig+0x1bc>)
 80031f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80031fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031fc:	4b50      	ldr	r3, [pc, #320]	; (8003340 <HAL_RCC_ClockConfig+0x1bc>)
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	494d      	ldr	r1, [pc, #308]	; (8003340 <HAL_RCC_ClockConfig+0x1bc>)
 800320a:	4313      	orrs	r3, r2
 800320c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 0301 	and.w	r3, r3, #1
 8003216:	2b00      	cmp	r3, #0
 8003218:	d044      	beq.n	80032a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	2b01      	cmp	r3, #1
 8003220:	d107      	bne.n	8003232 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003222:	4b47      	ldr	r3, [pc, #284]	; (8003340 <HAL_RCC_ClockConfig+0x1bc>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800322a:	2b00      	cmp	r3, #0
 800322c:	d119      	bne.n	8003262 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e07f      	b.n	8003332 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	2b02      	cmp	r3, #2
 8003238:	d003      	beq.n	8003242 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800323e:	2b03      	cmp	r3, #3
 8003240:	d107      	bne.n	8003252 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003242:	4b3f      	ldr	r3, [pc, #252]	; (8003340 <HAL_RCC_ClockConfig+0x1bc>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800324a:	2b00      	cmp	r3, #0
 800324c:	d109      	bne.n	8003262 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e06f      	b.n	8003332 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003252:	4b3b      	ldr	r3, [pc, #236]	; (8003340 <HAL_RCC_ClockConfig+0x1bc>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 0302 	and.w	r3, r3, #2
 800325a:	2b00      	cmp	r3, #0
 800325c:	d101      	bne.n	8003262 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e067      	b.n	8003332 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003262:	4b37      	ldr	r3, [pc, #220]	; (8003340 <HAL_RCC_ClockConfig+0x1bc>)
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	f023 0203 	bic.w	r2, r3, #3
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	4934      	ldr	r1, [pc, #208]	; (8003340 <HAL_RCC_ClockConfig+0x1bc>)
 8003270:	4313      	orrs	r3, r2
 8003272:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003274:	f7fe f8b8 	bl	80013e8 <HAL_GetTick>
 8003278:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800327a:	e00a      	b.n	8003292 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800327c:	f7fe f8b4 	bl	80013e8 <HAL_GetTick>
 8003280:	4602      	mov	r2, r0
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	f241 3288 	movw	r2, #5000	; 0x1388
 800328a:	4293      	cmp	r3, r2
 800328c:	d901      	bls.n	8003292 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800328e:	2303      	movs	r3, #3
 8003290:	e04f      	b.n	8003332 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003292:	4b2b      	ldr	r3, [pc, #172]	; (8003340 <HAL_RCC_ClockConfig+0x1bc>)
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	f003 020c 	and.w	r2, r3, #12
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d1eb      	bne.n	800327c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032a4:	4b25      	ldr	r3, [pc, #148]	; (800333c <HAL_RCC_ClockConfig+0x1b8>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 030f 	and.w	r3, r3, #15
 80032ac:	683a      	ldr	r2, [r7, #0]
 80032ae:	429a      	cmp	r2, r3
 80032b0:	d20c      	bcs.n	80032cc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032b2:	4b22      	ldr	r3, [pc, #136]	; (800333c <HAL_RCC_ClockConfig+0x1b8>)
 80032b4:	683a      	ldr	r2, [r7, #0]
 80032b6:	b2d2      	uxtb	r2, r2
 80032b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032ba:	4b20      	ldr	r3, [pc, #128]	; (800333c <HAL_RCC_ClockConfig+0x1b8>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 030f 	and.w	r3, r3, #15
 80032c2:	683a      	ldr	r2, [r7, #0]
 80032c4:	429a      	cmp	r2, r3
 80032c6:	d001      	beq.n	80032cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	e032      	b.n	8003332 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 0304 	and.w	r3, r3, #4
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d008      	beq.n	80032ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032d8:	4b19      	ldr	r3, [pc, #100]	; (8003340 <HAL_RCC_ClockConfig+0x1bc>)
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	4916      	ldr	r1, [pc, #88]	; (8003340 <HAL_RCC_ClockConfig+0x1bc>)
 80032e6:	4313      	orrs	r3, r2
 80032e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0308 	and.w	r3, r3, #8
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d009      	beq.n	800330a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032f6:	4b12      	ldr	r3, [pc, #72]	; (8003340 <HAL_RCC_ClockConfig+0x1bc>)
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	691b      	ldr	r3, [r3, #16]
 8003302:	00db      	lsls	r3, r3, #3
 8003304:	490e      	ldr	r1, [pc, #56]	; (8003340 <HAL_RCC_ClockConfig+0x1bc>)
 8003306:	4313      	orrs	r3, r2
 8003308:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800330a:	f000 f821 	bl	8003350 <HAL_RCC_GetSysClockFreq>
 800330e:	4601      	mov	r1, r0
 8003310:	4b0b      	ldr	r3, [pc, #44]	; (8003340 <HAL_RCC_ClockConfig+0x1bc>)
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	091b      	lsrs	r3, r3, #4
 8003316:	f003 030f 	and.w	r3, r3, #15
 800331a:	4a0a      	ldr	r2, [pc, #40]	; (8003344 <HAL_RCC_ClockConfig+0x1c0>)
 800331c:	5cd3      	ldrb	r3, [r2, r3]
 800331e:	fa21 f303 	lsr.w	r3, r1, r3
 8003322:	4a09      	ldr	r2, [pc, #36]	; (8003348 <HAL_RCC_ClockConfig+0x1c4>)
 8003324:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003326:	4b09      	ldr	r3, [pc, #36]	; (800334c <HAL_RCC_ClockConfig+0x1c8>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4618      	mov	r0, r3
 800332c:	f7fe f818 	bl	8001360 <HAL_InitTick>

  return HAL_OK;
 8003330:	2300      	movs	r3, #0
}
 8003332:	4618      	mov	r0, r3
 8003334:	3710      	adds	r7, #16
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
 800333a:	bf00      	nop
 800333c:	40023c00 	.word	0x40023c00
 8003340:	40023800 	.word	0x40023800
 8003344:	08006b5c 	.word	0x08006b5c
 8003348:	20000008 	.word	0x20000008
 800334c:	2000000c 	.word	0x2000000c

08003350 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003350:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003352:	b085      	sub	sp, #20
 8003354:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003356:	2300      	movs	r3, #0
 8003358:	607b      	str	r3, [r7, #4]
 800335a:	2300      	movs	r3, #0
 800335c:	60fb      	str	r3, [r7, #12]
 800335e:	2300      	movs	r3, #0
 8003360:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003362:	2300      	movs	r3, #0
 8003364:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003366:	4b50      	ldr	r3, [pc, #320]	; (80034a8 <HAL_RCC_GetSysClockFreq+0x158>)
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	f003 030c 	and.w	r3, r3, #12
 800336e:	2b04      	cmp	r3, #4
 8003370:	d007      	beq.n	8003382 <HAL_RCC_GetSysClockFreq+0x32>
 8003372:	2b08      	cmp	r3, #8
 8003374:	d008      	beq.n	8003388 <HAL_RCC_GetSysClockFreq+0x38>
 8003376:	2b00      	cmp	r3, #0
 8003378:	f040 808d 	bne.w	8003496 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800337c:	4b4b      	ldr	r3, [pc, #300]	; (80034ac <HAL_RCC_GetSysClockFreq+0x15c>)
 800337e:	60bb      	str	r3, [r7, #8]
       break;
 8003380:	e08c      	b.n	800349c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003382:	4b4b      	ldr	r3, [pc, #300]	; (80034b0 <HAL_RCC_GetSysClockFreq+0x160>)
 8003384:	60bb      	str	r3, [r7, #8]
      break;
 8003386:	e089      	b.n	800349c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003388:	4b47      	ldr	r3, [pc, #284]	; (80034a8 <HAL_RCC_GetSysClockFreq+0x158>)
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003390:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003392:	4b45      	ldr	r3, [pc, #276]	; (80034a8 <HAL_RCC_GetSysClockFreq+0x158>)
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d023      	beq.n	80033e6 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800339e:	4b42      	ldr	r3, [pc, #264]	; (80034a8 <HAL_RCC_GetSysClockFreq+0x158>)
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	099b      	lsrs	r3, r3, #6
 80033a4:	f04f 0400 	mov.w	r4, #0
 80033a8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80033ac:	f04f 0200 	mov.w	r2, #0
 80033b0:	ea03 0501 	and.w	r5, r3, r1
 80033b4:	ea04 0602 	and.w	r6, r4, r2
 80033b8:	4a3d      	ldr	r2, [pc, #244]	; (80034b0 <HAL_RCC_GetSysClockFreq+0x160>)
 80033ba:	fb02 f106 	mul.w	r1, r2, r6
 80033be:	2200      	movs	r2, #0
 80033c0:	fb02 f205 	mul.w	r2, r2, r5
 80033c4:	440a      	add	r2, r1
 80033c6:	493a      	ldr	r1, [pc, #232]	; (80034b0 <HAL_RCC_GetSysClockFreq+0x160>)
 80033c8:	fba5 0101 	umull	r0, r1, r5, r1
 80033cc:	1853      	adds	r3, r2, r1
 80033ce:	4619      	mov	r1, r3
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	f04f 0400 	mov.w	r4, #0
 80033d6:	461a      	mov	r2, r3
 80033d8:	4623      	mov	r3, r4
 80033da:	f7fc fefd 	bl	80001d8 <__aeabi_uldivmod>
 80033de:	4603      	mov	r3, r0
 80033e0:	460c      	mov	r4, r1
 80033e2:	60fb      	str	r3, [r7, #12]
 80033e4:	e049      	b.n	800347a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033e6:	4b30      	ldr	r3, [pc, #192]	; (80034a8 <HAL_RCC_GetSysClockFreq+0x158>)
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	099b      	lsrs	r3, r3, #6
 80033ec:	f04f 0400 	mov.w	r4, #0
 80033f0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80033f4:	f04f 0200 	mov.w	r2, #0
 80033f8:	ea03 0501 	and.w	r5, r3, r1
 80033fc:	ea04 0602 	and.w	r6, r4, r2
 8003400:	4629      	mov	r1, r5
 8003402:	4632      	mov	r2, r6
 8003404:	f04f 0300 	mov.w	r3, #0
 8003408:	f04f 0400 	mov.w	r4, #0
 800340c:	0154      	lsls	r4, r2, #5
 800340e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003412:	014b      	lsls	r3, r1, #5
 8003414:	4619      	mov	r1, r3
 8003416:	4622      	mov	r2, r4
 8003418:	1b49      	subs	r1, r1, r5
 800341a:	eb62 0206 	sbc.w	r2, r2, r6
 800341e:	f04f 0300 	mov.w	r3, #0
 8003422:	f04f 0400 	mov.w	r4, #0
 8003426:	0194      	lsls	r4, r2, #6
 8003428:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800342c:	018b      	lsls	r3, r1, #6
 800342e:	1a5b      	subs	r3, r3, r1
 8003430:	eb64 0402 	sbc.w	r4, r4, r2
 8003434:	f04f 0100 	mov.w	r1, #0
 8003438:	f04f 0200 	mov.w	r2, #0
 800343c:	00e2      	lsls	r2, r4, #3
 800343e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003442:	00d9      	lsls	r1, r3, #3
 8003444:	460b      	mov	r3, r1
 8003446:	4614      	mov	r4, r2
 8003448:	195b      	adds	r3, r3, r5
 800344a:	eb44 0406 	adc.w	r4, r4, r6
 800344e:	f04f 0100 	mov.w	r1, #0
 8003452:	f04f 0200 	mov.w	r2, #0
 8003456:	02a2      	lsls	r2, r4, #10
 8003458:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800345c:	0299      	lsls	r1, r3, #10
 800345e:	460b      	mov	r3, r1
 8003460:	4614      	mov	r4, r2
 8003462:	4618      	mov	r0, r3
 8003464:	4621      	mov	r1, r4
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	f04f 0400 	mov.w	r4, #0
 800346c:	461a      	mov	r2, r3
 800346e:	4623      	mov	r3, r4
 8003470:	f7fc feb2 	bl	80001d8 <__aeabi_uldivmod>
 8003474:	4603      	mov	r3, r0
 8003476:	460c      	mov	r4, r1
 8003478:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800347a:	4b0b      	ldr	r3, [pc, #44]	; (80034a8 <HAL_RCC_GetSysClockFreq+0x158>)
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	0c1b      	lsrs	r3, r3, #16
 8003480:	f003 0303 	and.w	r3, r3, #3
 8003484:	3301      	adds	r3, #1
 8003486:	005b      	lsls	r3, r3, #1
 8003488:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800348a:	68fa      	ldr	r2, [r7, #12]
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003492:	60bb      	str	r3, [r7, #8]
      break;
 8003494:	e002      	b.n	800349c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003496:	4b05      	ldr	r3, [pc, #20]	; (80034ac <HAL_RCC_GetSysClockFreq+0x15c>)
 8003498:	60bb      	str	r3, [r7, #8]
      break;
 800349a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800349c:	68bb      	ldr	r3, [r7, #8]
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3714      	adds	r7, #20
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034a6:	bf00      	nop
 80034a8:	40023800 	.word	0x40023800
 80034ac:	00f42400 	.word	0x00f42400
 80034b0:	017d7840 	.word	0x017d7840

080034b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034b4:	b480      	push	{r7}
 80034b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034b8:	4b03      	ldr	r3, [pc, #12]	; (80034c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80034ba:	681b      	ldr	r3, [r3, #0]
}
 80034bc:	4618      	mov	r0, r3
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr
 80034c6:	bf00      	nop
 80034c8:	20000008 	.word	0x20000008

080034cc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80034cc:	b084      	sub	sp, #16
 80034ce:	b580      	push	{r7, lr}
 80034d0:	b084      	sub	sp, #16
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	6078      	str	r0, [r7, #4]
 80034d6:	f107 001c 	add.w	r0, r7, #28
 80034da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80034de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d122      	bne.n	800352a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034e8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80034f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034fc:	687a      	ldr	r2, [r7, #4]
 80034fe:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800350c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800350e:	2b01      	cmp	r3, #1
 8003510:	d105      	bne.n	800351e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	68db      	ldr	r3, [r3, #12]
 8003516:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f001 fab4 	bl	8004a8c <USB_CoreReset>
 8003524:	4603      	mov	r3, r0
 8003526:	73fb      	strb	r3, [r7, #15]
 8003528:	e01a      	b.n	8003560 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	68db      	ldr	r3, [r3, #12]
 800352e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f001 faa8 	bl	8004a8c <USB_CoreReset>
 800353c:	4603      	mov	r3, r0
 800353e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003540:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003542:	2b00      	cmp	r3, #0
 8003544:	d106      	bne.n	8003554 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800354a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	639a      	str	r2, [r3, #56]	; 0x38
 8003552:	e005      	b.n	8003560 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003558:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003562:	2b01      	cmp	r3, #1
 8003564:	d10b      	bne.n	800357e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	f043 0206 	orr.w	r2, r3, #6
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	f043 0220 	orr.w	r2, r3, #32
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800357e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003580:	4618      	mov	r0, r3
 8003582:	3710      	adds	r7, #16
 8003584:	46bd      	mov	sp, r7
 8003586:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800358a:	b004      	add	sp, #16
 800358c:	4770      	bx	lr
	...

08003590 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003590:	b480      	push	{r7}
 8003592:	b087      	sub	sp, #28
 8003594:	af00      	add	r7, sp, #0
 8003596:	60f8      	str	r0, [r7, #12]
 8003598:	60b9      	str	r1, [r7, #8]
 800359a:	4613      	mov	r3, r2
 800359c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800359e:	79fb      	ldrb	r3, [r7, #7]
 80035a0:	2b02      	cmp	r3, #2
 80035a2:	d165      	bne.n	8003670 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	4a41      	ldr	r2, [pc, #260]	; (80036ac <USB_SetTurnaroundTime+0x11c>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d906      	bls.n	80035ba <USB_SetTurnaroundTime+0x2a>
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	4a40      	ldr	r2, [pc, #256]	; (80036b0 <USB_SetTurnaroundTime+0x120>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d802      	bhi.n	80035ba <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80035b4:	230f      	movs	r3, #15
 80035b6:	617b      	str	r3, [r7, #20]
 80035b8:	e062      	b.n	8003680 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	4a3c      	ldr	r2, [pc, #240]	; (80036b0 <USB_SetTurnaroundTime+0x120>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d906      	bls.n	80035d0 <USB_SetTurnaroundTime+0x40>
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	4a3b      	ldr	r2, [pc, #236]	; (80036b4 <USB_SetTurnaroundTime+0x124>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d802      	bhi.n	80035d0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80035ca:	230e      	movs	r3, #14
 80035cc:	617b      	str	r3, [r7, #20]
 80035ce:	e057      	b.n	8003680 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	4a38      	ldr	r2, [pc, #224]	; (80036b4 <USB_SetTurnaroundTime+0x124>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d906      	bls.n	80035e6 <USB_SetTurnaroundTime+0x56>
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	4a37      	ldr	r2, [pc, #220]	; (80036b8 <USB_SetTurnaroundTime+0x128>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d802      	bhi.n	80035e6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80035e0:	230d      	movs	r3, #13
 80035e2:	617b      	str	r3, [r7, #20]
 80035e4:	e04c      	b.n	8003680 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	4a33      	ldr	r2, [pc, #204]	; (80036b8 <USB_SetTurnaroundTime+0x128>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d906      	bls.n	80035fc <USB_SetTurnaroundTime+0x6c>
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	4a32      	ldr	r2, [pc, #200]	; (80036bc <USB_SetTurnaroundTime+0x12c>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d802      	bhi.n	80035fc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80035f6:	230c      	movs	r3, #12
 80035f8:	617b      	str	r3, [r7, #20]
 80035fa:	e041      	b.n	8003680 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	4a2f      	ldr	r2, [pc, #188]	; (80036bc <USB_SetTurnaroundTime+0x12c>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d906      	bls.n	8003612 <USB_SetTurnaroundTime+0x82>
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	4a2e      	ldr	r2, [pc, #184]	; (80036c0 <USB_SetTurnaroundTime+0x130>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d802      	bhi.n	8003612 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800360c:	230b      	movs	r3, #11
 800360e:	617b      	str	r3, [r7, #20]
 8003610:	e036      	b.n	8003680 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	4a2a      	ldr	r2, [pc, #168]	; (80036c0 <USB_SetTurnaroundTime+0x130>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d906      	bls.n	8003628 <USB_SetTurnaroundTime+0x98>
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	4a29      	ldr	r2, [pc, #164]	; (80036c4 <USB_SetTurnaroundTime+0x134>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d802      	bhi.n	8003628 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003622:	230a      	movs	r3, #10
 8003624:	617b      	str	r3, [r7, #20]
 8003626:	e02b      	b.n	8003680 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	4a26      	ldr	r2, [pc, #152]	; (80036c4 <USB_SetTurnaroundTime+0x134>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d906      	bls.n	800363e <USB_SetTurnaroundTime+0xae>
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	4a25      	ldr	r2, [pc, #148]	; (80036c8 <USB_SetTurnaroundTime+0x138>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d802      	bhi.n	800363e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003638:	2309      	movs	r3, #9
 800363a:	617b      	str	r3, [r7, #20]
 800363c:	e020      	b.n	8003680 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	4a21      	ldr	r2, [pc, #132]	; (80036c8 <USB_SetTurnaroundTime+0x138>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d906      	bls.n	8003654 <USB_SetTurnaroundTime+0xc4>
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	4a20      	ldr	r2, [pc, #128]	; (80036cc <USB_SetTurnaroundTime+0x13c>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d802      	bhi.n	8003654 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800364e:	2308      	movs	r3, #8
 8003650:	617b      	str	r3, [r7, #20]
 8003652:	e015      	b.n	8003680 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	4a1d      	ldr	r2, [pc, #116]	; (80036cc <USB_SetTurnaroundTime+0x13c>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d906      	bls.n	800366a <USB_SetTurnaroundTime+0xda>
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	4a1c      	ldr	r2, [pc, #112]	; (80036d0 <USB_SetTurnaroundTime+0x140>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d802      	bhi.n	800366a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003664:	2307      	movs	r3, #7
 8003666:	617b      	str	r3, [r7, #20]
 8003668:	e00a      	b.n	8003680 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800366a:	2306      	movs	r3, #6
 800366c:	617b      	str	r3, [r7, #20]
 800366e:	e007      	b.n	8003680 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003670:	79fb      	ldrb	r3, [r7, #7]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d102      	bne.n	800367c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003676:	2309      	movs	r3, #9
 8003678:	617b      	str	r3, [r7, #20]
 800367a:	e001      	b.n	8003680 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800367c:	2309      	movs	r3, #9
 800367e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	68db      	ldr	r3, [r3, #12]
 8003684:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	68da      	ldr	r2, [r3, #12]
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	029b      	lsls	r3, r3, #10
 8003694:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003698:	431a      	orrs	r2, r3
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800369e:	2300      	movs	r3, #0
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	371c      	adds	r7, #28
 80036a4:	46bd      	mov	sp, r7
 80036a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036aa:	4770      	bx	lr
 80036ac:	00d8acbf 	.word	0x00d8acbf
 80036b0:	00e4e1bf 	.word	0x00e4e1bf
 80036b4:	00f423ff 	.word	0x00f423ff
 80036b8:	0106737f 	.word	0x0106737f
 80036bc:	011a499f 	.word	0x011a499f
 80036c0:	01312cff 	.word	0x01312cff
 80036c4:	014ca43f 	.word	0x014ca43f
 80036c8:	016e35ff 	.word	0x016e35ff
 80036cc:	01a6ab1f 	.word	0x01a6ab1f
 80036d0:	01e847ff 	.word	0x01e847ff

080036d4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b083      	sub	sp, #12
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	f043 0201 	orr.w	r2, r3, #1
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80036e8:	2300      	movs	r3, #0
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	370c      	adds	r7, #12
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr

080036f6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80036f6:	b480      	push	{r7}
 80036f8:	b083      	sub	sp, #12
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	f023 0201 	bic.w	r2, r3, #1
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800370a:	2300      	movs	r3, #0
}
 800370c:	4618      	mov	r0, r3
 800370e:	370c      	adds	r7, #12
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr

08003718 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b082      	sub	sp, #8
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	460b      	mov	r3, r1
 8003722:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	68db      	ldr	r3, [r3, #12]
 8003728:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003730:	78fb      	ldrb	r3, [r7, #3]
 8003732:	2b01      	cmp	r3, #1
 8003734:	d106      	bne.n	8003744 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	68db      	ldr	r3, [r3, #12]
 800373a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	60da      	str	r2, [r3, #12]
 8003742:	e00b      	b.n	800375c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8003744:	78fb      	ldrb	r3, [r7, #3]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d106      	bne.n	8003758 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	68db      	ldr	r3, [r3, #12]
 800374e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	60da      	str	r2, [r3, #12]
 8003756:	e001      	b.n	800375c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	e003      	b.n	8003764 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800375c:	2032      	movs	r0, #50	; 0x32
 800375e:	f7fd fe4f 	bl	8001400 <HAL_Delay>

  return HAL_OK;
 8003762:	2300      	movs	r3, #0
}
 8003764:	4618      	mov	r0, r3
 8003766:	3708      	adds	r7, #8
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}

0800376c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800376c:	b084      	sub	sp, #16
 800376e:	b580      	push	{r7, lr}
 8003770:	b086      	sub	sp, #24
 8003772:	af00      	add	r7, sp, #0
 8003774:	6078      	str	r0, [r7, #4]
 8003776:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800377a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800377e:	2300      	movs	r3, #0
 8003780:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003786:	2300      	movs	r3, #0
 8003788:	613b      	str	r3, [r7, #16]
 800378a:	e009      	b.n	80037a0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800378c:	687a      	ldr	r2, [r7, #4]
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	3340      	adds	r3, #64	; 0x40
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	4413      	add	r3, r2
 8003796:	2200      	movs	r2, #0
 8003798:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	3301      	adds	r3, #1
 800379e:	613b      	str	r3, [r7, #16]
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	2b0e      	cmp	r3, #14
 80037a4:	d9f2      	bls.n	800378c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80037a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d11c      	bne.n	80037e6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	68fa      	ldr	r2, [r7, #12]
 80037b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037ba:	f043 0302 	orr.w	r3, r3, #2
 80037be:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037c4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037d0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037dc:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	639a      	str	r2, [r3, #56]	; 0x38
 80037e4:	e00b      	b.n	80037fe <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ea:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037f6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003804:	461a      	mov	r2, r3
 8003806:	2300      	movs	r3, #0
 8003808:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003810:	4619      	mov	r1, r3
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003818:	461a      	mov	r2, r3
 800381a:	680b      	ldr	r3, [r1, #0]
 800381c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800381e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003820:	2b01      	cmp	r3, #1
 8003822:	d10c      	bne.n	800383e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003826:	2b00      	cmp	r3, #0
 8003828:	d104      	bne.n	8003834 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800382a:	2100      	movs	r1, #0
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	f000 f949 	bl	8003ac4 <USB_SetDevSpeed>
 8003832:	e008      	b.n	8003846 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003834:	2101      	movs	r1, #1
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f000 f944 	bl	8003ac4 <USB_SetDevSpeed>
 800383c:	e003      	b.n	8003846 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800383e:	2103      	movs	r1, #3
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	f000 f93f 	bl	8003ac4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003846:	2110      	movs	r1, #16
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	f000 f8f3 	bl	8003a34 <USB_FlushTxFifo>
 800384e:	4603      	mov	r3, r0
 8003850:	2b00      	cmp	r3, #0
 8003852:	d001      	beq.n	8003858 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f000 f911 	bl	8003a80 <USB_FlushRxFifo>
 800385e:	4603      	mov	r3, r0
 8003860:	2b00      	cmp	r3, #0
 8003862:	d001      	beq.n	8003868 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800386e:	461a      	mov	r2, r3
 8003870:	2300      	movs	r3, #0
 8003872:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800387a:	461a      	mov	r2, r3
 800387c:	2300      	movs	r3, #0
 800387e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003886:	461a      	mov	r2, r3
 8003888:	2300      	movs	r3, #0
 800388a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800388c:	2300      	movs	r3, #0
 800388e:	613b      	str	r3, [r7, #16]
 8003890:	e043      	b.n	800391a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	015a      	lsls	r2, r3, #5
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	4413      	add	r3, r2
 800389a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80038a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80038a8:	d118      	bne.n	80038dc <USB_DevInit+0x170>
    {
      if (i == 0U)
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d10a      	bne.n	80038c6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	015a      	lsls	r2, r3, #5
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	4413      	add	r3, r2
 80038b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038bc:	461a      	mov	r2, r3
 80038be:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80038c2:	6013      	str	r3, [r2, #0]
 80038c4:	e013      	b.n	80038ee <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	015a      	lsls	r2, r3, #5
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	4413      	add	r3, r2
 80038ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038d2:	461a      	mov	r2, r3
 80038d4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80038d8:	6013      	str	r3, [r2, #0]
 80038da:	e008      	b.n	80038ee <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	015a      	lsls	r2, r3, #5
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	4413      	add	r3, r2
 80038e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038e8:	461a      	mov	r2, r3
 80038ea:	2300      	movs	r3, #0
 80038ec:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	015a      	lsls	r2, r3, #5
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	4413      	add	r3, r2
 80038f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038fa:	461a      	mov	r2, r3
 80038fc:	2300      	movs	r3, #0
 80038fe:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	015a      	lsls	r2, r3, #5
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	4413      	add	r3, r2
 8003908:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800390c:	461a      	mov	r2, r3
 800390e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003912:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	3301      	adds	r3, #1
 8003918:	613b      	str	r3, [r7, #16]
 800391a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800391c:	693a      	ldr	r2, [r7, #16]
 800391e:	429a      	cmp	r2, r3
 8003920:	d3b7      	bcc.n	8003892 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003922:	2300      	movs	r3, #0
 8003924:	613b      	str	r3, [r7, #16]
 8003926:	e043      	b.n	80039b0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	015a      	lsls	r2, r3, #5
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	4413      	add	r3, r2
 8003930:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800393a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800393e:	d118      	bne.n	8003972 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d10a      	bne.n	800395c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	015a      	lsls	r2, r3, #5
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	4413      	add	r3, r2
 800394e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003952:	461a      	mov	r2, r3
 8003954:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003958:	6013      	str	r3, [r2, #0]
 800395a:	e013      	b.n	8003984 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	015a      	lsls	r2, r3, #5
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	4413      	add	r3, r2
 8003964:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003968:	461a      	mov	r2, r3
 800396a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800396e:	6013      	str	r3, [r2, #0]
 8003970:	e008      	b.n	8003984 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	015a      	lsls	r2, r3, #5
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	4413      	add	r3, r2
 800397a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800397e:	461a      	mov	r2, r3
 8003980:	2300      	movs	r3, #0
 8003982:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	015a      	lsls	r2, r3, #5
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	4413      	add	r3, r2
 800398c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003990:	461a      	mov	r2, r3
 8003992:	2300      	movs	r3, #0
 8003994:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	015a      	lsls	r2, r3, #5
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	4413      	add	r3, r2
 800399e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039a2:	461a      	mov	r2, r3
 80039a4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80039a8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	3301      	adds	r3, #1
 80039ae:	613b      	str	r3, [r7, #16]
 80039b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b2:	693a      	ldr	r2, [r7, #16]
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d3b7      	bcc.n	8003928 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039be:	691b      	ldr	r3, [r3, #16]
 80039c0:	68fa      	ldr	r2, [r7, #12]
 80039c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80039c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80039ca:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2200      	movs	r2, #0
 80039d0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80039d8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80039da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d105      	bne.n	80039ec <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	699b      	ldr	r3, [r3, #24]
 80039e4:	f043 0210 	orr.w	r2, r3, #16
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	699a      	ldr	r2, [r3, #24]
 80039f0:	4b0f      	ldr	r3, [pc, #60]	; (8003a30 <USB_DevInit+0x2c4>)
 80039f2:	4313      	orrs	r3, r2
 80039f4:	687a      	ldr	r2, [r7, #4]
 80039f6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80039f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d005      	beq.n	8003a0a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	699b      	ldr	r3, [r3, #24]
 8003a02:	f043 0208 	orr.w	r2, r3, #8
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003a0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d107      	bne.n	8003a20 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	699b      	ldr	r3, [r3, #24]
 8003a14:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003a18:	f043 0304 	orr.w	r3, r3, #4
 8003a1c:	687a      	ldr	r2, [r7, #4]
 8003a1e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003a20:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3718      	adds	r7, #24
 8003a26:	46bd      	mov	sp, r7
 8003a28:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003a2c:	b004      	add	sp, #16
 8003a2e:	4770      	bx	lr
 8003a30:	803c3800 	.word	0x803c3800

08003a34 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b085      	sub	sp, #20
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	019b      	lsls	r3, r3, #6
 8003a46:	f043 0220 	orr.w	r2, r3, #32
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	3301      	adds	r3, #1
 8003a52:	60fb      	str	r3, [r7, #12]
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	4a09      	ldr	r2, [pc, #36]	; (8003a7c <USB_FlushTxFifo+0x48>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d901      	bls.n	8003a60 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8003a5c:	2303      	movs	r3, #3
 8003a5e:	e006      	b.n	8003a6e <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	691b      	ldr	r3, [r3, #16]
 8003a64:	f003 0320 	and.w	r3, r3, #32
 8003a68:	2b20      	cmp	r3, #32
 8003a6a:	d0f0      	beq.n	8003a4e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8003a6c:	2300      	movs	r3, #0
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3714      	adds	r7, #20
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr
 8003a7a:	bf00      	nop
 8003a7c:	00030d40 	.word	0x00030d40

08003a80 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b085      	sub	sp, #20
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2210      	movs	r2, #16
 8003a90:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	3301      	adds	r3, #1
 8003a96:	60fb      	str	r3, [r7, #12]
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	4a09      	ldr	r2, [pc, #36]	; (8003ac0 <USB_FlushRxFifo+0x40>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d901      	bls.n	8003aa4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8003aa0:	2303      	movs	r3, #3
 8003aa2:	e006      	b.n	8003ab2 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	691b      	ldr	r3, [r3, #16]
 8003aa8:	f003 0310 	and.w	r3, r3, #16
 8003aac:	2b10      	cmp	r3, #16
 8003aae:	d0f0      	beq.n	8003a92 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8003ab0:	2300      	movs	r3, #0
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3714      	adds	r7, #20
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr
 8003abe:	bf00      	nop
 8003ac0:	00030d40 	.word	0x00030d40

08003ac4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b085      	sub	sp, #20
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	460b      	mov	r3, r1
 8003ace:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	78fb      	ldrb	r3, [r7, #3]
 8003ade:	68f9      	ldr	r1, [r7, #12]
 8003ae0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003ae8:	2300      	movs	r3, #0
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3714      	adds	r7, #20
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr

08003af6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003af6:	b480      	push	{r7}
 8003af8:	b087      	sub	sp, #28
 8003afa:	af00      	add	r7, sp, #0
 8003afc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	f003 0306 	and.w	r3, r3, #6
 8003b0e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d102      	bne.n	8003b1c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003b16:	2300      	movs	r3, #0
 8003b18:	75fb      	strb	r3, [r7, #23]
 8003b1a:	e00a      	b.n	8003b32 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2b02      	cmp	r3, #2
 8003b20:	d002      	beq.n	8003b28 <USB_GetDevSpeed+0x32>
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2b06      	cmp	r3, #6
 8003b26:	d102      	bne.n	8003b2e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003b28:	2302      	movs	r3, #2
 8003b2a:	75fb      	strb	r3, [r7, #23]
 8003b2c:	e001      	b.n	8003b32 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003b2e:	230f      	movs	r3, #15
 8003b30:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003b32:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	371c      	adds	r7, #28
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr

08003b40 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b085      	sub	sp, #20
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
 8003b48:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	781b      	ldrb	r3, [r3, #0]
 8003b52:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	785b      	ldrb	r3, [r3, #1]
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d13a      	bne.n	8003bd2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b62:	69da      	ldr	r2, [r3, #28]
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	781b      	ldrb	r3, [r3, #0]
 8003b68:	f003 030f 	and.w	r3, r3, #15
 8003b6c:	2101      	movs	r1, #1
 8003b6e:	fa01 f303 	lsl.w	r3, r1, r3
 8003b72:	b29b      	uxth	r3, r3
 8003b74:	68f9      	ldr	r1, [r7, #12]
 8003b76:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	015a      	lsls	r2, r3, #5
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	4413      	add	r3, r2
 8003b86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d155      	bne.n	8003c40 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	015a      	lsls	r2, r3, #5
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	4413      	add	r3, r2
 8003b9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	78db      	ldrb	r3, [r3, #3]
 8003bae:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003bb0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	059b      	lsls	r3, r3, #22
 8003bb6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	68ba      	ldr	r2, [r7, #8]
 8003bbc:	0151      	lsls	r1, r2, #5
 8003bbe:	68fa      	ldr	r2, [r7, #12]
 8003bc0:	440a      	add	r2, r1
 8003bc2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003bc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003bce:	6013      	str	r3, [r2, #0]
 8003bd0:	e036      	b.n	8003c40 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bd8:	69da      	ldr	r2, [r3, #28]
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	781b      	ldrb	r3, [r3, #0]
 8003bde:	f003 030f 	and.w	r3, r3, #15
 8003be2:	2101      	movs	r1, #1
 8003be4:	fa01 f303 	lsl.w	r3, r1, r3
 8003be8:	041b      	lsls	r3, r3, #16
 8003bea:	68f9      	ldr	r1, [r7, #12]
 8003bec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	015a      	lsls	r2, r3, #5
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	4413      	add	r3, r2
 8003bfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d11a      	bne.n	8003c40 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	015a      	lsls	r2, r3, #5
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	4413      	add	r3, r2
 8003c12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	78db      	ldrb	r3, [r3, #3]
 8003c24:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003c26:	430b      	orrs	r3, r1
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	68ba      	ldr	r2, [r7, #8]
 8003c2c:	0151      	lsls	r1, r2, #5
 8003c2e:	68fa      	ldr	r2, [r7, #12]
 8003c30:	440a      	add	r2, r1
 8003c32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c3e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003c40:	2300      	movs	r3, #0
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3714      	adds	r7, #20
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr
	...

08003c50 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b085      	sub	sp, #20
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
 8003c58:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	781b      	ldrb	r3, [r3, #0]
 8003c62:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	785b      	ldrb	r3, [r3, #1]
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d161      	bne.n	8003d30 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	015a      	lsls	r2, r3, #5
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	4413      	add	r3, r2
 8003c74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003c7e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c82:	d11f      	bne.n	8003cc4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	015a      	lsls	r2, r3, #5
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	4413      	add	r3, r2
 8003c8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	68ba      	ldr	r2, [r7, #8]
 8003c94:	0151      	lsls	r1, r2, #5
 8003c96:	68fa      	ldr	r2, [r7, #12]
 8003c98:	440a      	add	r2, r1
 8003c9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c9e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003ca2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	015a      	lsls	r2, r3, #5
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	4413      	add	r3, r2
 8003cac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	68ba      	ldr	r2, [r7, #8]
 8003cb4:	0151      	lsls	r1, r2, #5
 8003cb6:	68fa      	ldr	r2, [r7, #12]
 8003cb8:	440a      	add	r2, r1
 8003cba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003cbe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003cc2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	781b      	ldrb	r3, [r3, #0]
 8003cd0:	f003 030f 	and.w	r3, r3, #15
 8003cd4:	2101      	movs	r1, #1
 8003cd6:	fa01 f303 	lsl.w	r3, r1, r3
 8003cda:	b29b      	uxth	r3, r3
 8003cdc:	43db      	mvns	r3, r3
 8003cde:	68f9      	ldr	r1, [r7, #12]
 8003ce0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cee:	69da      	ldr	r2, [r3, #28]
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	781b      	ldrb	r3, [r3, #0]
 8003cf4:	f003 030f 	and.w	r3, r3, #15
 8003cf8:	2101      	movs	r1, #1
 8003cfa:	fa01 f303 	lsl.w	r3, r1, r3
 8003cfe:	b29b      	uxth	r3, r3
 8003d00:	43db      	mvns	r3, r3
 8003d02:	68f9      	ldr	r1, [r7, #12]
 8003d04:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d08:	4013      	ands	r3, r2
 8003d0a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	015a      	lsls	r2, r3, #5
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	4413      	add	r3, r2
 8003d14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	0159      	lsls	r1, r3, #5
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	440b      	add	r3, r1
 8003d22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d26:	4619      	mov	r1, r3
 8003d28:	4b35      	ldr	r3, [pc, #212]	; (8003e00 <USB_DeactivateEndpoint+0x1b0>)
 8003d2a:	4013      	ands	r3, r2
 8003d2c:	600b      	str	r3, [r1, #0]
 8003d2e:	e060      	b.n	8003df2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	015a      	lsls	r2, r3, #5
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	4413      	add	r3, r2
 8003d38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003d42:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d46:	d11f      	bne.n	8003d88 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	015a      	lsls	r2, r3, #5
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	4413      	add	r3, r2
 8003d50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	68ba      	ldr	r2, [r7, #8]
 8003d58:	0151      	lsls	r1, r2, #5
 8003d5a:	68fa      	ldr	r2, [r7, #12]
 8003d5c:	440a      	add	r2, r1
 8003d5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d62:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003d66:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	015a      	lsls	r2, r3, #5
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	4413      	add	r3, r2
 8003d70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	68ba      	ldr	r2, [r7, #8]
 8003d78:	0151      	lsls	r1, r2, #5
 8003d7a:	68fa      	ldr	r2, [r7, #12]
 8003d7c:	440a      	add	r2, r1
 8003d7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d82:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003d86:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	781b      	ldrb	r3, [r3, #0]
 8003d94:	f003 030f 	and.w	r3, r3, #15
 8003d98:	2101      	movs	r1, #1
 8003d9a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d9e:	041b      	lsls	r3, r3, #16
 8003da0:	43db      	mvns	r3, r3
 8003da2:	68f9      	ldr	r1, [r7, #12]
 8003da4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003da8:	4013      	ands	r3, r2
 8003daa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003db2:	69da      	ldr	r2, [r3, #28]
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	781b      	ldrb	r3, [r3, #0]
 8003db8:	f003 030f 	and.w	r3, r3, #15
 8003dbc:	2101      	movs	r1, #1
 8003dbe:	fa01 f303 	lsl.w	r3, r1, r3
 8003dc2:	041b      	lsls	r3, r3, #16
 8003dc4:	43db      	mvns	r3, r3
 8003dc6:	68f9      	ldr	r1, [r7, #12]
 8003dc8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003dcc:	4013      	ands	r3, r2
 8003dce:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	015a      	lsls	r2, r3, #5
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	4413      	add	r3, r2
 8003dd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	0159      	lsls	r1, r3, #5
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	440b      	add	r3, r1
 8003de6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dea:	4619      	mov	r1, r3
 8003dec:	4b05      	ldr	r3, [pc, #20]	; (8003e04 <USB_DeactivateEndpoint+0x1b4>)
 8003dee:	4013      	ands	r3, r2
 8003df0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003df2:	2300      	movs	r3, #0
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	3714      	adds	r7, #20
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr
 8003e00:	ec337800 	.word	0xec337800
 8003e04:	eff37800 	.word	0xeff37800

08003e08 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b08a      	sub	sp, #40	; 0x28
 8003e0c:	af02      	add	r7, sp, #8
 8003e0e:	60f8      	str	r0, [r7, #12]
 8003e10:	60b9      	str	r1, [r7, #8]
 8003e12:	4613      	mov	r3, r2
 8003e14:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	781b      	ldrb	r3, [r3, #0]
 8003e1e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	785b      	ldrb	r3, [r3, #1]
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	f040 815c 	bne.w	80040e2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	695b      	ldr	r3, [r3, #20]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d132      	bne.n	8003e98 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003e32:	69bb      	ldr	r3, [r7, #24]
 8003e34:	015a      	lsls	r2, r3, #5
 8003e36:	69fb      	ldr	r3, [r7, #28]
 8003e38:	4413      	add	r3, r2
 8003e3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e3e:	691b      	ldr	r3, [r3, #16]
 8003e40:	69ba      	ldr	r2, [r7, #24]
 8003e42:	0151      	lsls	r1, r2, #5
 8003e44:	69fa      	ldr	r2, [r7, #28]
 8003e46:	440a      	add	r2, r1
 8003e48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e4c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003e50:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003e54:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003e56:	69bb      	ldr	r3, [r7, #24]
 8003e58:	015a      	lsls	r2, r3, #5
 8003e5a:	69fb      	ldr	r3, [r7, #28]
 8003e5c:	4413      	add	r3, r2
 8003e5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e62:	691b      	ldr	r3, [r3, #16]
 8003e64:	69ba      	ldr	r2, [r7, #24]
 8003e66:	0151      	lsls	r1, r2, #5
 8003e68:	69fa      	ldr	r2, [r7, #28]
 8003e6a:	440a      	add	r2, r1
 8003e6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e70:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003e74:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003e76:	69bb      	ldr	r3, [r7, #24]
 8003e78:	015a      	lsls	r2, r3, #5
 8003e7a:	69fb      	ldr	r3, [r7, #28]
 8003e7c:	4413      	add	r3, r2
 8003e7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e82:	691b      	ldr	r3, [r3, #16]
 8003e84:	69ba      	ldr	r2, [r7, #24]
 8003e86:	0151      	lsls	r1, r2, #5
 8003e88:	69fa      	ldr	r2, [r7, #28]
 8003e8a:	440a      	add	r2, r1
 8003e8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e90:	0cdb      	lsrs	r3, r3, #19
 8003e92:	04db      	lsls	r3, r3, #19
 8003e94:	6113      	str	r3, [r2, #16]
 8003e96:	e074      	b.n	8003f82 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003e98:	69bb      	ldr	r3, [r7, #24]
 8003e9a:	015a      	lsls	r2, r3, #5
 8003e9c:	69fb      	ldr	r3, [r7, #28]
 8003e9e:	4413      	add	r3, r2
 8003ea0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ea4:	691b      	ldr	r3, [r3, #16]
 8003ea6:	69ba      	ldr	r2, [r7, #24]
 8003ea8:	0151      	lsls	r1, r2, #5
 8003eaa:	69fa      	ldr	r2, [r7, #28]
 8003eac:	440a      	add	r2, r1
 8003eae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003eb2:	0cdb      	lsrs	r3, r3, #19
 8003eb4:	04db      	lsls	r3, r3, #19
 8003eb6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003eb8:	69bb      	ldr	r3, [r7, #24]
 8003eba:	015a      	lsls	r2, r3, #5
 8003ebc:	69fb      	ldr	r3, [r7, #28]
 8003ebe:	4413      	add	r3, r2
 8003ec0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ec4:	691b      	ldr	r3, [r3, #16]
 8003ec6:	69ba      	ldr	r2, [r7, #24]
 8003ec8:	0151      	lsls	r1, r2, #5
 8003eca:	69fa      	ldr	r2, [r7, #28]
 8003ecc:	440a      	add	r2, r1
 8003ece:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ed2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003ed6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003eda:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003edc:	69bb      	ldr	r3, [r7, #24]
 8003ede:	015a      	lsls	r2, r3, #5
 8003ee0:	69fb      	ldr	r3, [r7, #28]
 8003ee2:	4413      	add	r3, r2
 8003ee4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ee8:	691a      	ldr	r2, [r3, #16]
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	6959      	ldr	r1, [r3, #20]
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	440b      	add	r3, r1
 8003ef4:	1e59      	subs	r1, r3, #1
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	fbb1 f3f3 	udiv	r3, r1, r3
 8003efe:	04d9      	lsls	r1, r3, #19
 8003f00:	4b9d      	ldr	r3, [pc, #628]	; (8004178 <USB_EPStartXfer+0x370>)
 8003f02:	400b      	ands	r3, r1
 8003f04:	69b9      	ldr	r1, [r7, #24]
 8003f06:	0148      	lsls	r0, r1, #5
 8003f08:	69f9      	ldr	r1, [r7, #28]
 8003f0a:	4401      	add	r1, r0
 8003f0c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003f10:	4313      	orrs	r3, r2
 8003f12:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003f14:	69bb      	ldr	r3, [r7, #24]
 8003f16:	015a      	lsls	r2, r3, #5
 8003f18:	69fb      	ldr	r3, [r7, #28]
 8003f1a:	4413      	add	r3, r2
 8003f1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f20:	691a      	ldr	r2, [r3, #16]
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	695b      	ldr	r3, [r3, #20]
 8003f26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f2a:	69b9      	ldr	r1, [r7, #24]
 8003f2c:	0148      	lsls	r0, r1, #5
 8003f2e:	69f9      	ldr	r1, [r7, #28]
 8003f30:	4401      	add	r1, r0
 8003f32:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003f36:	4313      	orrs	r3, r2
 8003f38:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	78db      	ldrb	r3, [r3, #3]
 8003f3e:	2b01      	cmp	r3, #1
 8003f40:	d11f      	bne.n	8003f82 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003f42:	69bb      	ldr	r3, [r7, #24]
 8003f44:	015a      	lsls	r2, r3, #5
 8003f46:	69fb      	ldr	r3, [r7, #28]
 8003f48:	4413      	add	r3, r2
 8003f4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f4e:	691b      	ldr	r3, [r3, #16]
 8003f50:	69ba      	ldr	r2, [r7, #24]
 8003f52:	0151      	lsls	r1, r2, #5
 8003f54:	69fa      	ldr	r2, [r7, #28]
 8003f56:	440a      	add	r2, r1
 8003f58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f5c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003f60:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003f62:	69bb      	ldr	r3, [r7, #24]
 8003f64:	015a      	lsls	r2, r3, #5
 8003f66:	69fb      	ldr	r3, [r7, #28]
 8003f68:	4413      	add	r3, r2
 8003f6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f6e:	691b      	ldr	r3, [r3, #16]
 8003f70:	69ba      	ldr	r2, [r7, #24]
 8003f72:	0151      	lsls	r1, r2, #5
 8003f74:	69fa      	ldr	r2, [r7, #28]
 8003f76:	440a      	add	r2, r1
 8003f78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f7c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003f80:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8003f82:	79fb      	ldrb	r3, [r7, #7]
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d14b      	bne.n	8004020 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	691b      	ldr	r3, [r3, #16]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d009      	beq.n	8003fa4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003f90:	69bb      	ldr	r3, [r7, #24]
 8003f92:	015a      	lsls	r2, r3, #5
 8003f94:	69fb      	ldr	r3, [r7, #28]
 8003f96:	4413      	add	r3, r2
 8003f98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f9c:	461a      	mov	r2, r3
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	691b      	ldr	r3, [r3, #16]
 8003fa2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	78db      	ldrb	r3, [r3, #3]
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d128      	bne.n	8003ffe <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003fac:	69fb      	ldr	r3, [r7, #28]
 8003fae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d110      	bne.n	8003fde <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003fbc:	69bb      	ldr	r3, [r7, #24]
 8003fbe:	015a      	lsls	r2, r3, #5
 8003fc0:	69fb      	ldr	r3, [r7, #28]
 8003fc2:	4413      	add	r3, r2
 8003fc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	69ba      	ldr	r2, [r7, #24]
 8003fcc:	0151      	lsls	r1, r2, #5
 8003fce:	69fa      	ldr	r2, [r7, #28]
 8003fd0:	440a      	add	r2, r1
 8003fd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fd6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003fda:	6013      	str	r3, [r2, #0]
 8003fdc:	e00f      	b.n	8003ffe <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003fde:	69bb      	ldr	r3, [r7, #24]
 8003fe0:	015a      	lsls	r2, r3, #5
 8003fe2:	69fb      	ldr	r3, [r7, #28]
 8003fe4:	4413      	add	r3, r2
 8003fe6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	69ba      	ldr	r2, [r7, #24]
 8003fee:	0151      	lsls	r1, r2, #5
 8003ff0:	69fa      	ldr	r2, [r7, #28]
 8003ff2:	440a      	add	r2, r1
 8003ff4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ff8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ffc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003ffe:	69bb      	ldr	r3, [r7, #24]
 8004000:	015a      	lsls	r2, r3, #5
 8004002:	69fb      	ldr	r3, [r7, #28]
 8004004:	4413      	add	r3, r2
 8004006:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	69ba      	ldr	r2, [r7, #24]
 800400e:	0151      	lsls	r1, r2, #5
 8004010:	69fa      	ldr	r2, [r7, #28]
 8004012:	440a      	add	r2, r1
 8004014:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004018:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800401c:	6013      	str	r3, [r2, #0]
 800401e:	e12f      	b.n	8004280 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004020:	69bb      	ldr	r3, [r7, #24]
 8004022:	015a      	lsls	r2, r3, #5
 8004024:	69fb      	ldr	r3, [r7, #28]
 8004026:	4413      	add	r3, r2
 8004028:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	69ba      	ldr	r2, [r7, #24]
 8004030:	0151      	lsls	r1, r2, #5
 8004032:	69fa      	ldr	r2, [r7, #28]
 8004034:	440a      	add	r2, r1
 8004036:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800403a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800403e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	78db      	ldrb	r3, [r3, #3]
 8004044:	2b01      	cmp	r3, #1
 8004046:	d015      	beq.n	8004074 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	695b      	ldr	r3, [r3, #20]
 800404c:	2b00      	cmp	r3, #0
 800404e:	f000 8117 	beq.w	8004280 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004052:	69fb      	ldr	r3, [r7, #28]
 8004054:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004058:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	781b      	ldrb	r3, [r3, #0]
 800405e:	f003 030f 	and.w	r3, r3, #15
 8004062:	2101      	movs	r1, #1
 8004064:	fa01 f303 	lsl.w	r3, r1, r3
 8004068:	69f9      	ldr	r1, [r7, #28]
 800406a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800406e:	4313      	orrs	r3, r2
 8004070:	634b      	str	r3, [r1, #52]	; 0x34
 8004072:	e105      	b.n	8004280 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004074:	69fb      	ldr	r3, [r7, #28]
 8004076:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004080:	2b00      	cmp	r3, #0
 8004082:	d110      	bne.n	80040a6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004084:	69bb      	ldr	r3, [r7, #24]
 8004086:	015a      	lsls	r2, r3, #5
 8004088:	69fb      	ldr	r3, [r7, #28]
 800408a:	4413      	add	r3, r2
 800408c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	69ba      	ldr	r2, [r7, #24]
 8004094:	0151      	lsls	r1, r2, #5
 8004096:	69fa      	ldr	r2, [r7, #28]
 8004098:	440a      	add	r2, r1
 800409a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800409e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80040a2:	6013      	str	r3, [r2, #0]
 80040a4:	e00f      	b.n	80040c6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80040a6:	69bb      	ldr	r3, [r7, #24]
 80040a8:	015a      	lsls	r2, r3, #5
 80040aa:	69fb      	ldr	r3, [r7, #28]
 80040ac:	4413      	add	r3, r2
 80040ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	69ba      	ldr	r2, [r7, #24]
 80040b6:	0151      	lsls	r1, r2, #5
 80040b8:	69fa      	ldr	r2, [r7, #28]
 80040ba:	440a      	add	r2, r1
 80040bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040c4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	68d9      	ldr	r1, [r3, #12]
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	781a      	ldrb	r2, [r3, #0]
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	695b      	ldr	r3, [r3, #20]
 80040d2:	b298      	uxth	r0, r3
 80040d4:	79fb      	ldrb	r3, [r7, #7]
 80040d6:	9300      	str	r3, [sp, #0]
 80040d8:	4603      	mov	r3, r0
 80040da:	68f8      	ldr	r0, [r7, #12]
 80040dc:	f000 fa2b 	bl	8004536 <USB_WritePacket>
 80040e0:	e0ce      	b.n	8004280 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80040e2:	69bb      	ldr	r3, [r7, #24]
 80040e4:	015a      	lsls	r2, r3, #5
 80040e6:	69fb      	ldr	r3, [r7, #28]
 80040e8:	4413      	add	r3, r2
 80040ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040ee:	691b      	ldr	r3, [r3, #16]
 80040f0:	69ba      	ldr	r2, [r7, #24]
 80040f2:	0151      	lsls	r1, r2, #5
 80040f4:	69fa      	ldr	r2, [r7, #28]
 80040f6:	440a      	add	r2, r1
 80040f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80040fc:	0cdb      	lsrs	r3, r3, #19
 80040fe:	04db      	lsls	r3, r3, #19
 8004100:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004102:	69bb      	ldr	r3, [r7, #24]
 8004104:	015a      	lsls	r2, r3, #5
 8004106:	69fb      	ldr	r3, [r7, #28]
 8004108:	4413      	add	r3, r2
 800410a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800410e:	691b      	ldr	r3, [r3, #16]
 8004110:	69ba      	ldr	r2, [r7, #24]
 8004112:	0151      	lsls	r1, r2, #5
 8004114:	69fa      	ldr	r2, [r7, #28]
 8004116:	440a      	add	r2, r1
 8004118:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800411c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004120:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004124:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	695b      	ldr	r3, [r3, #20]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d126      	bne.n	800417c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800412e:	69bb      	ldr	r3, [r7, #24]
 8004130:	015a      	lsls	r2, r3, #5
 8004132:	69fb      	ldr	r3, [r7, #28]
 8004134:	4413      	add	r3, r2
 8004136:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800413a:	691a      	ldr	r2, [r3, #16]
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004144:	69b9      	ldr	r1, [r7, #24]
 8004146:	0148      	lsls	r0, r1, #5
 8004148:	69f9      	ldr	r1, [r7, #28]
 800414a:	4401      	add	r1, r0
 800414c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004150:	4313      	orrs	r3, r2
 8004152:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004154:	69bb      	ldr	r3, [r7, #24]
 8004156:	015a      	lsls	r2, r3, #5
 8004158:	69fb      	ldr	r3, [r7, #28]
 800415a:	4413      	add	r3, r2
 800415c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004160:	691b      	ldr	r3, [r3, #16]
 8004162:	69ba      	ldr	r2, [r7, #24]
 8004164:	0151      	lsls	r1, r2, #5
 8004166:	69fa      	ldr	r2, [r7, #28]
 8004168:	440a      	add	r2, r1
 800416a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800416e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004172:	6113      	str	r3, [r2, #16]
 8004174:	e036      	b.n	80041e4 <USB_EPStartXfer+0x3dc>
 8004176:	bf00      	nop
 8004178:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	695a      	ldr	r2, [r3, #20]
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	4413      	add	r3, r2
 8004186:	1e5a      	subs	r2, r3, #1
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004190:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004192:	69bb      	ldr	r3, [r7, #24]
 8004194:	015a      	lsls	r2, r3, #5
 8004196:	69fb      	ldr	r3, [r7, #28]
 8004198:	4413      	add	r3, r2
 800419a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800419e:	691a      	ldr	r2, [r3, #16]
 80041a0:	8afb      	ldrh	r3, [r7, #22]
 80041a2:	04d9      	lsls	r1, r3, #19
 80041a4:	4b39      	ldr	r3, [pc, #228]	; (800428c <USB_EPStartXfer+0x484>)
 80041a6:	400b      	ands	r3, r1
 80041a8:	69b9      	ldr	r1, [r7, #24]
 80041aa:	0148      	lsls	r0, r1, #5
 80041ac:	69f9      	ldr	r1, [r7, #28]
 80041ae:	4401      	add	r1, r0
 80041b0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80041b4:	4313      	orrs	r3, r2
 80041b6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80041b8:	69bb      	ldr	r3, [r7, #24]
 80041ba:	015a      	lsls	r2, r3, #5
 80041bc:	69fb      	ldr	r3, [r7, #28]
 80041be:	4413      	add	r3, r2
 80041c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041c4:	691a      	ldr	r2, [r3, #16]
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	8af9      	ldrh	r1, [r7, #22]
 80041cc:	fb01 f303 	mul.w	r3, r1, r3
 80041d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041d4:	69b9      	ldr	r1, [r7, #24]
 80041d6:	0148      	lsls	r0, r1, #5
 80041d8:	69f9      	ldr	r1, [r7, #28]
 80041da:	4401      	add	r1, r0
 80041dc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80041e0:	4313      	orrs	r3, r2
 80041e2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80041e4:	79fb      	ldrb	r3, [r7, #7]
 80041e6:	2b01      	cmp	r3, #1
 80041e8:	d10d      	bne.n	8004206 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	68db      	ldr	r3, [r3, #12]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d009      	beq.n	8004206 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	68d9      	ldr	r1, [r3, #12]
 80041f6:	69bb      	ldr	r3, [r7, #24]
 80041f8:	015a      	lsls	r2, r3, #5
 80041fa:	69fb      	ldr	r3, [r7, #28]
 80041fc:	4413      	add	r3, r2
 80041fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004202:	460a      	mov	r2, r1
 8004204:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	78db      	ldrb	r3, [r3, #3]
 800420a:	2b01      	cmp	r3, #1
 800420c:	d128      	bne.n	8004260 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800420e:	69fb      	ldr	r3, [r7, #28]
 8004210:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800421a:	2b00      	cmp	r3, #0
 800421c:	d110      	bne.n	8004240 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800421e:	69bb      	ldr	r3, [r7, #24]
 8004220:	015a      	lsls	r2, r3, #5
 8004222:	69fb      	ldr	r3, [r7, #28]
 8004224:	4413      	add	r3, r2
 8004226:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	69ba      	ldr	r2, [r7, #24]
 800422e:	0151      	lsls	r1, r2, #5
 8004230:	69fa      	ldr	r2, [r7, #28]
 8004232:	440a      	add	r2, r1
 8004234:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004238:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800423c:	6013      	str	r3, [r2, #0]
 800423e:	e00f      	b.n	8004260 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004240:	69bb      	ldr	r3, [r7, #24]
 8004242:	015a      	lsls	r2, r3, #5
 8004244:	69fb      	ldr	r3, [r7, #28]
 8004246:	4413      	add	r3, r2
 8004248:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	69ba      	ldr	r2, [r7, #24]
 8004250:	0151      	lsls	r1, r2, #5
 8004252:	69fa      	ldr	r2, [r7, #28]
 8004254:	440a      	add	r2, r1
 8004256:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800425a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800425e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004260:	69bb      	ldr	r3, [r7, #24]
 8004262:	015a      	lsls	r2, r3, #5
 8004264:	69fb      	ldr	r3, [r7, #28]
 8004266:	4413      	add	r3, r2
 8004268:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	69ba      	ldr	r2, [r7, #24]
 8004270:	0151      	lsls	r1, r2, #5
 8004272:	69fa      	ldr	r2, [r7, #28]
 8004274:	440a      	add	r2, r1
 8004276:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800427a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800427e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004280:	2300      	movs	r3, #0
}
 8004282:	4618      	mov	r0, r3
 8004284:	3720      	adds	r7, #32
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}
 800428a:	bf00      	nop
 800428c:	1ff80000 	.word	0x1ff80000

08004290 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004290:	b480      	push	{r7}
 8004292:	b087      	sub	sp, #28
 8004294:	af00      	add	r7, sp, #0
 8004296:	60f8      	str	r0, [r7, #12]
 8004298:	60b9      	str	r1, [r7, #8]
 800429a:	4613      	mov	r3, r2
 800429c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	781b      	ldrb	r3, [r3, #0]
 80042a6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	785b      	ldrb	r3, [r3, #1]
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	f040 80cd 	bne.w	800444c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	695b      	ldr	r3, [r3, #20]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d132      	bne.n	8004320 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	015a      	lsls	r2, r3, #5
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	4413      	add	r3, r2
 80042c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042c6:	691b      	ldr	r3, [r3, #16]
 80042c8:	693a      	ldr	r2, [r7, #16]
 80042ca:	0151      	lsls	r1, r2, #5
 80042cc:	697a      	ldr	r2, [r7, #20]
 80042ce:	440a      	add	r2, r1
 80042d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042d4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80042d8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80042dc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	015a      	lsls	r2, r3, #5
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	4413      	add	r3, r2
 80042e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042ea:	691b      	ldr	r3, [r3, #16]
 80042ec:	693a      	ldr	r2, [r7, #16]
 80042ee:	0151      	lsls	r1, r2, #5
 80042f0:	697a      	ldr	r2, [r7, #20]
 80042f2:	440a      	add	r2, r1
 80042f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042f8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80042fc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	015a      	lsls	r2, r3, #5
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	4413      	add	r3, r2
 8004306:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800430a:	691b      	ldr	r3, [r3, #16]
 800430c:	693a      	ldr	r2, [r7, #16]
 800430e:	0151      	lsls	r1, r2, #5
 8004310:	697a      	ldr	r2, [r7, #20]
 8004312:	440a      	add	r2, r1
 8004314:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004318:	0cdb      	lsrs	r3, r3, #19
 800431a:	04db      	lsls	r3, r3, #19
 800431c:	6113      	str	r3, [r2, #16]
 800431e:	e04e      	b.n	80043be <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	015a      	lsls	r2, r3, #5
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	4413      	add	r3, r2
 8004328:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800432c:	691b      	ldr	r3, [r3, #16]
 800432e:	693a      	ldr	r2, [r7, #16]
 8004330:	0151      	lsls	r1, r2, #5
 8004332:	697a      	ldr	r2, [r7, #20]
 8004334:	440a      	add	r2, r1
 8004336:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800433a:	0cdb      	lsrs	r3, r3, #19
 800433c:	04db      	lsls	r3, r3, #19
 800433e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	015a      	lsls	r2, r3, #5
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	4413      	add	r3, r2
 8004348:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800434c:	691b      	ldr	r3, [r3, #16]
 800434e:	693a      	ldr	r2, [r7, #16]
 8004350:	0151      	lsls	r1, r2, #5
 8004352:	697a      	ldr	r2, [r7, #20]
 8004354:	440a      	add	r2, r1
 8004356:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800435a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800435e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004362:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	695a      	ldr	r2, [r3, #20]
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	429a      	cmp	r2, r3
 800436e:	d903      	bls.n	8004378 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	689a      	ldr	r2, [r3, #8]
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	015a      	lsls	r2, r3, #5
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	4413      	add	r3, r2
 8004380:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004384:	691b      	ldr	r3, [r3, #16]
 8004386:	693a      	ldr	r2, [r7, #16]
 8004388:	0151      	lsls	r1, r2, #5
 800438a:	697a      	ldr	r2, [r7, #20]
 800438c:	440a      	add	r2, r1
 800438e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004392:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004396:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	015a      	lsls	r2, r3, #5
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	4413      	add	r3, r2
 80043a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043a4:	691a      	ldr	r2, [r3, #16]
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	695b      	ldr	r3, [r3, #20]
 80043aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043ae:	6939      	ldr	r1, [r7, #16]
 80043b0:	0148      	lsls	r0, r1, #5
 80043b2:	6979      	ldr	r1, [r7, #20]
 80043b4:	4401      	add	r1, r0
 80043b6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80043ba:	4313      	orrs	r3, r2
 80043bc:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80043be:	79fb      	ldrb	r3, [r7, #7]
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	d11e      	bne.n	8004402 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	691b      	ldr	r3, [r3, #16]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d009      	beq.n	80043e0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	015a      	lsls	r2, r3, #5
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	4413      	add	r3, r2
 80043d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043d8:	461a      	mov	r2, r3
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	691b      	ldr	r3, [r3, #16]
 80043de:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	015a      	lsls	r2, r3, #5
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	4413      	add	r3, r2
 80043e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	693a      	ldr	r2, [r7, #16]
 80043f0:	0151      	lsls	r1, r2, #5
 80043f2:	697a      	ldr	r2, [r7, #20]
 80043f4:	440a      	add	r2, r1
 80043f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043fa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80043fe:	6013      	str	r3, [r2, #0]
 8004400:	e092      	b.n	8004528 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	015a      	lsls	r2, r3, #5
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	4413      	add	r3, r2
 800440a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	693a      	ldr	r2, [r7, #16]
 8004412:	0151      	lsls	r1, r2, #5
 8004414:	697a      	ldr	r2, [r7, #20]
 8004416:	440a      	add	r2, r1
 8004418:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800441c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004420:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	695b      	ldr	r3, [r3, #20]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d07e      	beq.n	8004528 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004430:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	781b      	ldrb	r3, [r3, #0]
 8004436:	f003 030f 	and.w	r3, r3, #15
 800443a:	2101      	movs	r1, #1
 800443c:	fa01 f303 	lsl.w	r3, r1, r3
 8004440:	6979      	ldr	r1, [r7, #20]
 8004442:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004446:	4313      	orrs	r3, r2
 8004448:	634b      	str	r3, [r1, #52]	; 0x34
 800444a:	e06d      	b.n	8004528 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	015a      	lsls	r2, r3, #5
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	4413      	add	r3, r2
 8004454:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004458:	691b      	ldr	r3, [r3, #16]
 800445a:	693a      	ldr	r2, [r7, #16]
 800445c:	0151      	lsls	r1, r2, #5
 800445e:	697a      	ldr	r2, [r7, #20]
 8004460:	440a      	add	r2, r1
 8004462:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004466:	0cdb      	lsrs	r3, r3, #19
 8004468:	04db      	lsls	r3, r3, #19
 800446a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	015a      	lsls	r2, r3, #5
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	4413      	add	r3, r2
 8004474:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004478:	691b      	ldr	r3, [r3, #16]
 800447a:	693a      	ldr	r2, [r7, #16]
 800447c:	0151      	lsls	r1, r2, #5
 800447e:	697a      	ldr	r2, [r7, #20]
 8004480:	440a      	add	r2, r1
 8004482:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004486:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800448a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800448e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	695b      	ldr	r3, [r3, #20]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d003      	beq.n	80044a0 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	689a      	ldr	r2, [r3, #8]
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	015a      	lsls	r2, r3, #5
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	4413      	add	r3, r2
 80044a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044ac:	691b      	ldr	r3, [r3, #16]
 80044ae:	693a      	ldr	r2, [r7, #16]
 80044b0:	0151      	lsls	r1, r2, #5
 80044b2:	697a      	ldr	r2, [r7, #20]
 80044b4:	440a      	add	r2, r1
 80044b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044ba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80044be:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	015a      	lsls	r2, r3, #5
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	4413      	add	r3, r2
 80044c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044cc:	691a      	ldr	r2, [r3, #16]
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044d6:	6939      	ldr	r1, [r7, #16]
 80044d8:	0148      	lsls	r0, r1, #5
 80044da:	6979      	ldr	r1, [r7, #20]
 80044dc:	4401      	add	r1, r0
 80044de:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80044e2:	4313      	orrs	r3, r2
 80044e4:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80044e6:	79fb      	ldrb	r3, [r7, #7]
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d10d      	bne.n	8004508 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	68db      	ldr	r3, [r3, #12]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d009      	beq.n	8004508 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	68d9      	ldr	r1, [r3, #12]
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	015a      	lsls	r2, r3, #5
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	4413      	add	r3, r2
 8004500:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004504:	460a      	mov	r2, r1
 8004506:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	015a      	lsls	r2, r3, #5
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	4413      	add	r3, r2
 8004510:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	693a      	ldr	r2, [r7, #16]
 8004518:	0151      	lsls	r1, r2, #5
 800451a:	697a      	ldr	r2, [r7, #20]
 800451c:	440a      	add	r2, r1
 800451e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004522:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004526:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004528:	2300      	movs	r3, #0
}
 800452a:	4618      	mov	r0, r3
 800452c:	371c      	adds	r7, #28
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr

08004536 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004536:	b480      	push	{r7}
 8004538:	b089      	sub	sp, #36	; 0x24
 800453a:	af00      	add	r7, sp, #0
 800453c:	60f8      	str	r0, [r7, #12]
 800453e:	60b9      	str	r1, [r7, #8]
 8004540:	4611      	mov	r1, r2
 8004542:	461a      	mov	r2, r3
 8004544:	460b      	mov	r3, r1
 8004546:	71fb      	strb	r3, [r7, #7]
 8004548:	4613      	mov	r3, r2
 800454a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8004554:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004558:	2b00      	cmp	r3, #0
 800455a:	d11a      	bne.n	8004592 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800455c:	88bb      	ldrh	r3, [r7, #4]
 800455e:	3303      	adds	r3, #3
 8004560:	089b      	lsrs	r3, r3, #2
 8004562:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004564:	2300      	movs	r3, #0
 8004566:	61bb      	str	r3, [r7, #24]
 8004568:	e00f      	b.n	800458a <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800456a:	79fb      	ldrb	r3, [r7, #7]
 800456c:	031a      	lsls	r2, r3, #12
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	4413      	add	r3, r2
 8004572:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004576:	461a      	mov	r2, r3
 8004578:	69fb      	ldr	r3, [r7, #28]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	6013      	str	r3, [r2, #0]
      pSrc++;
 800457e:	69fb      	ldr	r3, [r7, #28]
 8004580:	3304      	adds	r3, #4
 8004582:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004584:	69bb      	ldr	r3, [r7, #24]
 8004586:	3301      	adds	r3, #1
 8004588:	61bb      	str	r3, [r7, #24]
 800458a:	69ba      	ldr	r2, [r7, #24]
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	429a      	cmp	r2, r3
 8004590:	d3eb      	bcc.n	800456a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004592:	2300      	movs	r3, #0
}
 8004594:	4618      	mov	r0, r3
 8004596:	3724      	adds	r7, #36	; 0x24
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr

080045a0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b089      	sub	sp, #36	; 0x24
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	60f8      	str	r0, [r7, #12]
 80045a8:	60b9      	str	r1, [r7, #8]
 80045aa:	4613      	mov	r3, r2
 80045ac:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80045b6:	88fb      	ldrh	r3, [r7, #6]
 80045b8:	3303      	adds	r3, #3
 80045ba:	089b      	lsrs	r3, r3, #2
 80045bc:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80045be:	2300      	movs	r3, #0
 80045c0:	61bb      	str	r3, [r7, #24]
 80045c2:	e00b      	b.n	80045dc <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	69fb      	ldr	r3, [r7, #28]
 80045ce:	601a      	str	r2, [r3, #0]
    pDest++;
 80045d0:	69fb      	ldr	r3, [r7, #28]
 80045d2:	3304      	adds	r3, #4
 80045d4:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80045d6:	69bb      	ldr	r3, [r7, #24]
 80045d8:	3301      	adds	r3, #1
 80045da:	61bb      	str	r3, [r7, #24]
 80045dc:	69ba      	ldr	r2, [r7, #24]
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d3ef      	bcc.n	80045c4 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80045e4:	69fb      	ldr	r3, [r7, #28]
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3724      	adds	r7, #36	; 0x24
 80045ea:	46bd      	mov	sp, r7
 80045ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f0:	4770      	bx	lr

080045f2 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80045f2:	b480      	push	{r7}
 80045f4:	b085      	sub	sp, #20
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	6078      	str	r0, [r7, #4]
 80045fa:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	781b      	ldrb	r3, [r3, #0]
 8004604:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	785b      	ldrb	r3, [r3, #1]
 800460a:	2b01      	cmp	r3, #1
 800460c:	d12c      	bne.n	8004668 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	015a      	lsls	r2, r3, #5
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	4413      	add	r3, r2
 8004616:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	2b00      	cmp	r3, #0
 800461e:	db12      	blt.n	8004646 <USB_EPSetStall+0x54>
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d00f      	beq.n	8004646 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	015a      	lsls	r2, r3, #5
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	4413      	add	r3, r2
 800462e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	68ba      	ldr	r2, [r7, #8]
 8004636:	0151      	lsls	r1, r2, #5
 8004638:	68fa      	ldr	r2, [r7, #12]
 800463a:	440a      	add	r2, r1
 800463c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004640:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004644:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	015a      	lsls	r2, r3, #5
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	4413      	add	r3, r2
 800464e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	68ba      	ldr	r2, [r7, #8]
 8004656:	0151      	lsls	r1, r2, #5
 8004658:	68fa      	ldr	r2, [r7, #12]
 800465a:	440a      	add	r2, r1
 800465c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004660:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004664:	6013      	str	r3, [r2, #0]
 8004666:	e02b      	b.n	80046c0 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	015a      	lsls	r2, r3, #5
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	4413      	add	r3, r2
 8004670:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	2b00      	cmp	r3, #0
 8004678:	db12      	blt.n	80046a0 <USB_EPSetStall+0xae>
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d00f      	beq.n	80046a0 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	015a      	lsls	r2, r3, #5
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	4413      	add	r3, r2
 8004688:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	68ba      	ldr	r2, [r7, #8]
 8004690:	0151      	lsls	r1, r2, #5
 8004692:	68fa      	ldr	r2, [r7, #12]
 8004694:	440a      	add	r2, r1
 8004696:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800469a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800469e:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	015a      	lsls	r2, r3, #5
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	4413      	add	r3, r2
 80046a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	68ba      	ldr	r2, [r7, #8]
 80046b0:	0151      	lsls	r1, r2, #5
 80046b2:	68fa      	ldr	r2, [r7, #12]
 80046b4:	440a      	add	r2, r1
 80046b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046ba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80046be:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80046c0:	2300      	movs	r3, #0
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3714      	adds	r7, #20
 80046c6:	46bd      	mov	sp, r7
 80046c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046cc:	4770      	bx	lr

080046ce <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80046ce:	b480      	push	{r7}
 80046d0:	b085      	sub	sp, #20
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	6078      	str	r0, [r7, #4]
 80046d6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	781b      	ldrb	r3, [r3, #0]
 80046e0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	785b      	ldrb	r3, [r3, #1]
 80046e6:	2b01      	cmp	r3, #1
 80046e8:	d128      	bne.n	800473c <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	015a      	lsls	r2, r3, #5
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	4413      	add	r3, r2
 80046f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	68ba      	ldr	r2, [r7, #8]
 80046fa:	0151      	lsls	r1, r2, #5
 80046fc:	68fa      	ldr	r2, [r7, #12]
 80046fe:	440a      	add	r2, r1
 8004700:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004704:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004708:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	78db      	ldrb	r3, [r3, #3]
 800470e:	2b03      	cmp	r3, #3
 8004710:	d003      	beq.n	800471a <USB_EPClearStall+0x4c>
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	78db      	ldrb	r3, [r3, #3]
 8004716:	2b02      	cmp	r3, #2
 8004718:	d138      	bne.n	800478c <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	015a      	lsls	r2, r3, #5
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	4413      	add	r3, r2
 8004722:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	68ba      	ldr	r2, [r7, #8]
 800472a:	0151      	lsls	r1, r2, #5
 800472c:	68fa      	ldr	r2, [r7, #12]
 800472e:	440a      	add	r2, r1
 8004730:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004734:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004738:	6013      	str	r3, [r2, #0]
 800473a:	e027      	b.n	800478c <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	015a      	lsls	r2, r3, #5
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	4413      	add	r3, r2
 8004744:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	68ba      	ldr	r2, [r7, #8]
 800474c:	0151      	lsls	r1, r2, #5
 800474e:	68fa      	ldr	r2, [r7, #12]
 8004750:	440a      	add	r2, r1
 8004752:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004756:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800475a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	78db      	ldrb	r3, [r3, #3]
 8004760:	2b03      	cmp	r3, #3
 8004762:	d003      	beq.n	800476c <USB_EPClearStall+0x9e>
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	78db      	ldrb	r3, [r3, #3]
 8004768:	2b02      	cmp	r3, #2
 800476a:	d10f      	bne.n	800478c <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	015a      	lsls	r2, r3, #5
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	4413      	add	r3, r2
 8004774:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	68ba      	ldr	r2, [r7, #8]
 800477c:	0151      	lsls	r1, r2, #5
 800477e:	68fa      	ldr	r2, [r7, #12]
 8004780:	440a      	add	r2, r1
 8004782:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004786:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800478a:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800478c:	2300      	movs	r3, #0
}
 800478e:	4618      	mov	r0, r3
 8004790:	3714      	adds	r7, #20
 8004792:	46bd      	mov	sp, r7
 8004794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004798:	4770      	bx	lr

0800479a <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800479a:	b480      	push	{r7}
 800479c:	b085      	sub	sp, #20
 800479e:	af00      	add	r7, sp, #0
 80047a0:	6078      	str	r0, [r7, #4]
 80047a2:	460b      	mov	r3, r1
 80047a4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	68fa      	ldr	r2, [r7, #12]
 80047b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80047b8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80047bc:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047c4:	681a      	ldr	r2, [r3, #0]
 80047c6:	78fb      	ldrb	r3, [r7, #3]
 80047c8:	011b      	lsls	r3, r3, #4
 80047ca:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80047ce:	68f9      	ldr	r1, [r7, #12]
 80047d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80047d4:	4313      	orrs	r3, r2
 80047d6:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80047d8:	2300      	movs	r3, #0
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3714      	adds	r7, #20
 80047de:	46bd      	mov	sp, r7
 80047e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e4:	4770      	bx	lr

080047e6 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80047e6:	b580      	push	{r7, lr}
 80047e8:	b084      	sub	sp, #16
 80047ea:	af00      	add	r7, sp, #0
 80047ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	68fa      	ldr	r2, [r7, #12]
 80047fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004800:	f023 0302 	bic.w	r3, r3, #2
 8004804:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8004806:	2003      	movs	r0, #3
 8004808:	f7fc fdfa 	bl	8001400 <HAL_Delay>

  return HAL_OK;
 800480c:	2300      	movs	r3, #0
}
 800480e:	4618      	mov	r0, r3
 8004810:	3710      	adds	r7, #16
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}

08004816 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004816:	b580      	push	{r7, lr}
 8004818:	b084      	sub	sp, #16
 800481a:	af00      	add	r7, sp, #0
 800481c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	68fa      	ldr	r2, [r7, #12]
 800482c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004830:	f043 0302 	orr.w	r3, r3, #2
 8004834:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8004836:	2003      	movs	r0, #3
 8004838:	f7fc fde2 	bl	8001400 <HAL_Delay>

  return HAL_OK;
 800483c:	2300      	movs	r3, #0
}
 800483e:	4618      	mov	r0, r3
 8004840:	3710      	adds	r7, #16
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}

08004846 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004846:	b480      	push	{r7}
 8004848:	b085      	sub	sp, #20
 800484a:	af00      	add	r7, sp, #0
 800484c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	695b      	ldr	r3, [r3, #20]
 8004852:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	699b      	ldr	r3, [r3, #24]
 8004858:	68fa      	ldr	r2, [r7, #12]
 800485a:	4013      	ands	r3, r2
 800485c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800485e:	68fb      	ldr	r3, [r7, #12]
}
 8004860:	4618      	mov	r0, r3
 8004862:	3714      	adds	r7, #20
 8004864:	46bd      	mov	sp, r7
 8004866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486a:	4770      	bx	lr

0800486c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800486c:	b480      	push	{r7}
 800486e:	b085      	sub	sp, #20
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800487e:	699b      	ldr	r3, [r3, #24]
 8004880:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004888:	69db      	ldr	r3, [r3, #28]
 800488a:	68ba      	ldr	r2, [r7, #8]
 800488c:	4013      	ands	r3, r2
 800488e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	0c1b      	lsrs	r3, r3, #16
}
 8004894:	4618      	mov	r0, r3
 8004896:	3714      	adds	r7, #20
 8004898:	46bd      	mov	sp, r7
 800489a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489e:	4770      	bx	lr

080048a0 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b085      	sub	sp, #20
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048b2:	699b      	ldr	r3, [r3, #24]
 80048b4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048bc:	69db      	ldr	r3, [r3, #28]
 80048be:	68ba      	ldr	r2, [r7, #8]
 80048c0:	4013      	ands	r3, r2
 80048c2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	b29b      	uxth	r3, r3
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	3714      	adds	r7, #20
 80048cc:	46bd      	mov	sp, r7
 80048ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d2:	4770      	bx	lr

080048d4 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b085      	sub	sp, #20
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
 80048dc:	460b      	mov	r3, r1
 80048de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80048e4:	78fb      	ldrb	r3, [r7, #3]
 80048e6:	015a      	lsls	r2, r3, #5
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	4413      	add	r3, r2
 80048ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048fa:	695b      	ldr	r3, [r3, #20]
 80048fc:	68ba      	ldr	r2, [r7, #8]
 80048fe:	4013      	ands	r3, r2
 8004900:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004902:	68bb      	ldr	r3, [r7, #8]
}
 8004904:	4618      	mov	r0, r3
 8004906:	3714      	adds	r7, #20
 8004908:	46bd      	mov	sp, r7
 800490a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490e:	4770      	bx	lr

08004910 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004910:	b480      	push	{r7}
 8004912:	b087      	sub	sp, #28
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
 8004918:	460b      	mov	r3, r1
 800491a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004926:	691b      	ldr	r3, [r3, #16]
 8004928:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004930:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004932:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004934:	78fb      	ldrb	r3, [r7, #3]
 8004936:	f003 030f 	and.w	r3, r3, #15
 800493a:	68fa      	ldr	r2, [r7, #12]
 800493c:	fa22 f303 	lsr.w	r3, r2, r3
 8004940:	01db      	lsls	r3, r3, #7
 8004942:	b2db      	uxtb	r3, r3
 8004944:	693a      	ldr	r2, [r7, #16]
 8004946:	4313      	orrs	r3, r2
 8004948:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800494a:	78fb      	ldrb	r3, [r7, #3]
 800494c:	015a      	lsls	r2, r3, #5
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	4413      	add	r3, r2
 8004952:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	693a      	ldr	r2, [r7, #16]
 800495a:	4013      	ands	r3, r2
 800495c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800495e:	68bb      	ldr	r3, [r7, #8]
}
 8004960:	4618      	mov	r0, r3
 8004962:	371c      	adds	r7, #28
 8004964:	46bd      	mov	sp, r7
 8004966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496a:	4770      	bx	lr

0800496c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800496c:	b480      	push	{r7}
 800496e:	b083      	sub	sp, #12
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	695b      	ldr	r3, [r3, #20]
 8004978:	f003 0301 	and.w	r3, r3, #1
}
 800497c:	4618      	mov	r0, r3
 800497e:	370c      	adds	r7, #12
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr

08004988 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004988:	b480      	push	{r7}
 800498a:	b085      	sub	sp, #20
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	68fa      	ldr	r2, [r7, #12]
 800499e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049a2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80049a6:	f023 0307 	bic.w	r3, r3, #7
 80049aa:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	68fa      	ldr	r2, [r7, #12]
 80049b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80049ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049be:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80049c0:	2300      	movs	r3, #0
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	3714      	adds	r7, #20
 80049c6:	46bd      	mov	sp, r7
 80049c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049cc:	4770      	bx	lr
	...

080049d0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b087      	sub	sp, #28
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	60f8      	str	r0, [r7, #12]
 80049d8:	460b      	mov	r3, r1
 80049da:	607a      	str	r2, [r7, #4]
 80049dc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	333c      	adds	r3, #60	; 0x3c
 80049e6:	3304      	adds	r3, #4
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80049ec:	693b      	ldr	r3, [r7, #16]
 80049ee:	4a26      	ldr	r2, [pc, #152]	; (8004a88 <USB_EP0_OutStart+0xb8>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d90a      	bls.n	8004a0a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a00:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a04:	d101      	bne.n	8004a0a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004a06:	2300      	movs	r3, #0
 8004a08:	e037      	b.n	8004a7a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a10:	461a      	mov	r2, r3
 8004a12:	2300      	movs	r3, #0
 8004a14:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a1c:	691b      	ldr	r3, [r3, #16]
 8004a1e:	697a      	ldr	r2, [r7, #20]
 8004a20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a24:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004a28:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a30:	691b      	ldr	r3, [r3, #16]
 8004a32:	697a      	ldr	r2, [r7, #20]
 8004a34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a38:	f043 0318 	orr.w	r3, r3, #24
 8004a3c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a44:	691b      	ldr	r3, [r3, #16]
 8004a46:	697a      	ldr	r2, [r7, #20]
 8004a48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a4c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004a50:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004a52:	7afb      	ldrb	r3, [r7, #11]
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	d10f      	bne.n	8004a78 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a5e:	461a      	mov	r2, r3
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	697a      	ldr	r2, [r7, #20]
 8004a6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a72:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004a76:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004a78:	2300      	movs	r3, #0
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	371c      	adds	r7, #28
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a84:	4770      	bx	lr
 8004a86:	bf00      	nop
 8004a88:	4f54300a 	.word	0x4f54300a

08004a8c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b085      	sub	sp, #20
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004a94:	2300      	movs	r3, #0
 8004a96:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	3301      	adds	r3, #1
 8004a9c:	60fb      	str	r3, [r7, #12]
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	4a13      	ldr	r2, [pc, #76]	; (8004af0 <USB_CoreReset+0x64>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d901      	bls.n	8004aaa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004aa6:	2303      	movs	r3, #3
 8004aa8:	e01b      	b.n	8004ae2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	691b      	ldr	r3, [r3, #16]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	daf2      	bge.n	8004a98 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	691b      	ldr	r3, [r3, #16]
 8004aba:	f043 0201 	orr.w	r2, r3, #1
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	3301      	adds	r3, #1
 8004ac6:	60fb      	str	r3, [r7, #12]
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	4a09      	ldr	r2, [pc, #36]	; (8004af0 <USB_CoreReset+0x64>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d901      	bls.n	8004ad4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004ad0:	2303      	movs	r3, #3
 8004ad2:	e006      	b.n	8004ae2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	691b      	ldr	r3, [r3, #16]
 8004ad8:	f003 0301 	and.w	r3, r3, #1
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	d0f0      	beq.n	8004ac2 <USB_CoreReset+0x36>

  return HAL_OK;
 8004ae0:	2300      	movs	r3, #0
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	3714      	adds	r7, #20
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aec:	4770      	bx	lr
 8004aee:	bf00      	nop
 8004af0:	00030d40 	.word	0x00030d40

08004af4 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b084      	sub	sp, #16
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
 8004afc:	460b      	mov	r3, r1
 8004afe:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8004b00:	2010      	movs	r0, #16
 8004b02:	f001 fee3 	bl	80068cc <malloc>
 8004b06:	4603      	mov	r3, r0
 8004b08:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d105      	bne.n	8004b1c <USBD_HID_Init+0x28>
  {
    pdev->pClassData = NULL;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2200      	movs	r2, #0
 8004b14:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8004b18:	2302      	movs	r3, #2
 8004b1a:	e01b      	b.n	8004b54 <USBD_HID_Init+0x60>
  }

  pdev->pClassData = (void *)hhid;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	68fa      	ldr	r2, [r7, #12]
 8004b20:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	7c1b      	ldrb	r3, [r3, #16]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d103      	bne.n	8004b34 <USBD_HID_Init+0x40>
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2207      	movs	r2, #7
 8004b30:	875a      	strh	r2, [r3, #58]	; 0x3a
 8004b32:	e002      	b.n	8004b3a <USBD_HID_Init+0x46>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	220a      	movs	r2, #10
 8004b38:	875a      	strh	r2, [r3, #58]	; 0x3a
  }

    /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8004b3a:	2310      	movs	r3, #16
 8004b3c:	2203      	movs	r2, #3
 8004b3e:	2181      	movs	r1, #129	; 0x81
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	f001 fd5c 	bl	80065fe <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2201      	movs	r2, #1
 8004b4a:	871a      	strh	r2, [r3, #56]	; 0x38

  hhid->state = HID_IDLE;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8004b52:	2300      	movs	r3, #0
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	3710      	adds	r7, #16
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}

08004b5c <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b082      	sub	sp, #8
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
 8004b64:	460b      	mov	r3, r1
 8004b66:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8004b68:	2181      	movs	r1, #129	; 0x81
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f001 fd6d 	bl	800664a <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2200      	movs	r2, #0
 8004b74:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d009      	beq.n	8004b9a <USBD_HID_DeInit+0x3e>
  {
    (void)USBD_free(pdev->pClassData);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	f001 fea5 	bl	80068dc <free>
    pdev->pClassData = NULL;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2200      	movs	r2, #0
 8004b96:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004b9a:	2300      	movs	r3, #0
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	3708      	adds	r7, #8
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}

08004ba4 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b086      	sub	sp, #24
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
 8004bac:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004bb4:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	817b      	strh	r3, [r7, #10]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	781b      	ldrb	r3, [r3, #0]
 8004bc2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d045      	beq.n	8004c56 <USBD_HID_Setup+0xb2>
 8004bca:	2b20      	cmp	r3, #32
 8004bcc:	f040 80d4 	bne.w	8004d78 <USBD_HID_Setup+0x1d4>
  {
  case USB_REQ_TYPE_CLASS :
    switch (req->bRequest)
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	785b      	ldrb	r3, [r3, #1]
 8004bd4:	3b02      	subs	r3, #2
 8004bd6:	2b09      	cmp	r3, #9
 8004bd8:	d835      	bhi.n	8004c46 <USBD_HID_Setup+0xa2>
 8004bda:	a201      	add	r2, pc, #4	; (adr r2, 8004be0 <USBD_HID_Setup+0x3c>)
 8004bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004be0:	08004c37 	.word	0x08004c37
 8004be4:	08004c17 	.word	0x08004c17
 8004be8:	08004c47 	.word	0x08004c47
 8004bec:	08004c47 	.word	0x08004c47
 8004bf0:	08004c47 	.word	0x08004c47
 8004bf4:	08004c47 	.word	0x08004c47
 8004bf8:	08004c47 	.word	0x08004c47
 8004bfc:	08004c47 	.word	0x08004c47
 8004c00:	08004c25 	.word	0x08004c25
 8004c04:	08004c09 	.word	0x08004c09
    {
    case HID_REQ_SET_PROTOCOL:
      hhid->Protocol = (uint8_t)(req->wValue);
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	885b      	ldrh	r3, [r3, #2]
 8004c0c:	b2db      	uxtb	r3, r3
 8004c0e:	461a      	mov	r2, r3
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	601a      	str	r2, [r3, #0]
      break;
 8004c14:	e01e      	b.n	8004c54 <USBD_HID_Setup+0xb0>

    case HID_REQ_GET_PROTOCOL:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2201      	movs	r2, #1
 8004c1a:	4619      	mov	r1, r3
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	f001 f9b4 	bl	8005f8a <USBD_CtlSendData>
      break;
 8004c22:	e017      	b.n	8004c54 <USBD_HID_Setup+0xb0>

    case HID_REQ_SET_IDLE:
      hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	885b      	ldrh	r3, [r3, #2]
 8004c28:	0a1b      	lsrs	r3, r3, #8
 8004c2a:	b29b      	uxth	r3, r3
 8004c2c:	b2db      	uxtb	r3, r3
 8004c2e:	461a      	mov	r2, r3
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	605a      	str	r2, [r3, #4]
      break;
 8004c34:	e00e      	b.n	8004c54 <USBD_HID_Setup+0xb0>

    case HID_REQ_GET_IDLE:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	3304      	adds	r3, #4
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	4619      	mov	r1, r3
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f001 f9a3 	bl	8005f8a <USBD_CtlSendData>
      break;
 8004c44:	e006      	b.n	8004c54 <USBD_HID_Setup+0xb0>

    default:
      USBD_CtlError(pdev, req);
 8004c46:	6839      	ldr	r1, [r7, #0]
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f001 f92d 	bl	8005ea8 <USBD_CtlError>
      ret = USBD_FAIL;
 8004c4e:	2303      	movs	r3, #3
 8004c50:	75fb      	strb	r3, [r7, #23]
      break;
 8004c52:	bf00      	nop
    }
    break;
 8004c54:	e097      	b.n	8004d86 <USBD_HID_Setup+0x1e2>
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	785b      	ldrb	r3, [r3, #1]
 8004c5a:	2b0b      	cmp	r3, #11
 8004c5c:	f200 8083 	bhi.w	8004d66 <USBD_HID_Setup+0x1c2>
 8004c60:	a201      	add	r2, pc, #4	; (adr r2, 8004c68 <USBD_HID_Setup+0xc4>)
 8004c62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c66:	bf00      	nop
 8004c68:	08004c99 	.word	0x08004c99
 8004c6c:	08004d75 	.word	0x08004d75
 8004c70:	08004d67 	.word	0x08004d67
 8004c74:	08004d67 	.word	0x08004d67
 8004c78:	08004d67 	.word	0x08004d67
 8004c7c:	08004d67 	.word	0x08004d67
 8004c80:	08004cc1 	.word	0x08004cc1
 8004c84:	08004d67 	.word	0x08004d67
 8004c88:	08004d67 	.word	0x08004d67
 8004c8c:	08004d67 	.word	0x08004d67
 8004c90:	08004d19 	.word	0x08004d19
 8004c94:	08004d41 	.word	0x08004d41
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004c9e:	2b03      	cmp	r3, #3
 8004ca0:	d107      	bne.n	8004cb2 <USBD_HID_Setup+0x10e>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004ca2:	f107 030a 	add.w	r3, r7, #10
 8004ca6:	2202      	movs	r2, #2
 8004ca8:	4619      	mov	r1, r3
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f001 f96d 	bl	8005f8a <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8004cb0:	e061      	b.n	8004d76 <USBD_HID_Setup+0x1d2>
        USBD_CtlError(pdev, req);
 8004cb2:	6839      	ldr	r1, [r7, #0]
 8004cb4:	6878      	ldr	r0, [r7, #4]
 8004cb6:	f001 f8f7 	bl	8005ea8 <USBD_CtlError>
        ret = USBD_FAIL;
 8004cba:	2303      	movs	r3, #3
 8004cbc:	75fb      	strb	r3, [r7, #23]
      break;
 8004cbe:	e05a      	b.n	8004d76 <USBD_HID_Setup+0x1d2>

    case USB_REQ_GET_DESCRIPTOR:
      if ((req->wValue >> 8) == HID_REPORT_DESC)
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	885b      	ldrh	r3, [r3, #2]
 8004cc4:	0a1b      	lsrs	r3, r3, #8
 8004cc6:	b29b      	uxth	r3, r3
 8004cc8:	2b22      	cmp	r3, #34	; 0x22
 8004cca:	d108      	bne.n	8004cde <USBD_HID_Setup+0x13a>
      {
        len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	88db      	ldrh	r3, [r3, #6]
 8004cd0:	2b43      	cmp	r3, #67	; 0x43
 8004cd2:	bf28      	it	cs
 8004cd4:	2343      	movcs	r3, #67	; 0x43
 8004cd6:	82bb      	strh	r3, [r7, #20]
        pbuf = HID_MOUSE_ReportDesc;
 8004cd8:	4b2d      	ldr	r3, [pc, #180]	; (8004d90 <USBD_HID_Setup+0x1ec>)
 8004cda:	613b      	str	r3, [r7, #16]
 8004cdc:	e015      	b.n	8004d0a <USBD_HID_Setup+0x166>
      }
      else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	885b      	ldrh	r3, [r3, #2]
 8004ce2:	0a1b      	lsrs	r3, r3, #8
 8004ce4:	b29b      	uxth	r3, r3
 8004ce6:	2b21      	cmp	r3, #33	; 0x21
 8004ce8:	d108      	bne.n	8004cfc <USBD_HID_Setup+0x158>
      {
        pbuf = USBD_HID_Desc;
 8004cea:	4b2a      	ldr	r3, [pc, #168]	; (8004d94 <USBD_HID_Setup+0x1f0>)
 8004cec:	613b      	str	r3, [r7, #16]
        len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	88db      	ldrh	r3, [r3, #6]
 8004cf2:	2b09      	cmp	r3, #9
 8004cf4:	bf28      	it	cs
 8004cf6:	2309      	movcs	r3, #9
 8004cf8:	82bb      	strh	r3, [r7, #20]
 8004cfa:	e006      	b.n	8004d0a <USBD_HID_Setup+0x166>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8004cfc:	6839      	ldr	r1, [r7, #0]
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f001 f8d2 	bl	8005ea8 <USBD_CtlError>
        ret = USBD_FAIL;
 8004d04:	2303      	movs	r3, #3
 8004d06:	75fb      	strb	r3, [r7, #23]
        break;
 8004d08:	e035      	b.n	8004d76 <USBD_HID_Setup+0x1d2>
      }
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8004d0a:	8abb      	ldrh	r3, [r7, #20]
 8004d0c:	461a      	mov	r2, r3
 8004d0e:	6939      	ldr	r1, [r7, #16]
 8004d10:	6878      	ldr	r0, [r7, #4]
 8004d12:	f001 f93a 	bl	8005f8a <USBD_CtlSendData>
      break;
 8004d16:	e02e      	b.n	8004d76 <USBD_HID_Setup+0x1d2>

    case USB_REQ_GET_INTERFACE :
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004d1e:	2b03      	cmp	r3, #3
 8004d20:	d107      	bne.n	8004d32 <USBD_HID_Setup+0x18e>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	3308      	adds	r3, #8
 8004d26:	2201      	movs	r2, #1
 8004d28:	4619      	mov	r1, r3
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f001 f92d 	bl	8005f8a <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8004d30:	e021      	b.n	8004d76 <USBD_HID_Setup+0x1d2>
        USBD_CtlError(pdev, req);
 8004d32:	6839      	ldr	r1, [r7, #0]
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	f001 f8b7 	bl	8005ea8 <USBD_CtlError>
        ret = USBD_FAIL;
 8004d3a:	2303      	movs	r3, #3
 8004d3c:	75fb      	strb	r3, [r7, #23]
      break;
 8004d3e:	e01a      	b.n	8004d76 <USBD_HID_Setup+0x1d2>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004d46:	2b03      	cmp	r3, #3
 8004d48:	d106      	bne.n	8004d58 <USBD_HID_Setup+0x1b4>
      {
        hhid->AltSetting = (uint8_t)(req->wValue);
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	885b      	ldrh	r3, [r3, #2]
 8004d4e:	b2db      	uxtb	r3, r3
 8004d50:	461a      	mov	r2, r3
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	609a      	str	r2, [r3, #8]
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8004d56:	e00e      	b.n	8004d76 <USBD_HID_Setup+0x1d2>
        USBD_CtlError(pdev, req);
 8004d58:	6839      	ldr	r1, [r7, #0]
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f001 f8a4 	bl	8005ea8 <USBD_CtlError>
        ret = USBD_FAIL;
 8004d60:	2303      	movs	r3, #3
 8004d62:	75fb      	strb	r3, [r7, #23]
      break;
 8004d64:	e007      	b.n	8004d76 <USBD_HID_Setup+0x1d2>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8004d66:	6839      	ldr	r1, [r7, #0]
 8004d68:	6878      	ldr	r0, [r7, #4]
 8004d6a:	f001 f89d 	bl	8005ea8 <USBD_CtlError>
      ret = USBD_FAIL;
 8004d6e:	2303      	movs	r3, #3
 8004d70:	75fb      	strb	r3, [r7, #23]
      break;
 8004d72:	e000      	b.n	8004d76 <USBD_HID_Setup+0x1d2>
      break;
 8004d74:	bf00      	nop
    }
    break;
 8004d76:	e006      	b.n	8004d86 <USBD_HID_Setup+0x1e2>

  default:
    USBD_CtlError(pdev, req);
 8004d78:	6839      	ldr	r1, [r7, #0]
 8004d7a:	6878      	ldr	r0, [r7, #4]
 8004d7c:	f001 f894 	bl	8005ea8 <USBD_CtlError>
    ret = USBD_FAIL;
 8004d80:	2303      	movs	r3, #3
 8004d82:	75fb      	strb	r3, [r7, #23]
    break;
 8004d84:	bf00      	nop
  }

  return (uint8_t)ret;
 8004d86:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d88:	4618      	mov	r0, r3
 8004d8a:	3718      	adds	r7, #24
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bd80      	pop	{r7, pc}
 8004d90:	20000118 	.word	0x20000118
 8004d94:	20000100 	.word	0x20000100

08004d98 <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b086      	sub	sp, #24
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	60f8      	str	r0, [r7, #12]
 8004da0:	60b9      	str	r1, [r7, #8]
 8004da2:	4613      	mov	r3, r2
 8004da4:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004dac:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004db4:	2b03      	cmp	r3, #3
 8004db6:	d10c      	bne.n	8004dd2 <USBD_HID_SendReport+0x3a>
  {
    if (hhid->state == HID_IDLE)
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	7b1b      	ldrb	r3, [r3, #12]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d108      	bne.n	8004dd2 <USBD_HID_SendReport+0x3a>
    {
      hhid->state = HID_BUSY;
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HID_EPIN_ADDR, report, len);
 8004dc6:	88fb      	ldrh	r3, [r7, #6]
 8004dc8:	68ba      	ldr	r2, [r7, #8]
 8004dca:	2181      	movs	r1, #129	; 0x81
 8004dcc:	68f8      	ldr	r0, [r7, #12]
 8004dce:	f001 fce4 	bl	800679a <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 8004dd2:	2300      	movs	r3, #0
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	3718      	adds	r7, #24
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}

08004ddc <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b083      	sub	sp, #12
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgFSDesc);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	223b      	movs	r2, #59	; 0x3b
 8004de8:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgFSDesc;
 8004dea:	4b03      	ldr	r3, [pc, #12]	; (8004df8 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	370c      	adds	r7, #12
 8004df0:	46bd      	mov	sp, r7
 8004df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df6:	4770      	bx	lr
 8004df8:	2000004c 	.word	0x2000004c

08004dfc <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b083      	sub	sp, #12
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgHSDesc);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	223b      	movs	r2, #59	; 0x3b
 8004e08:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgHSDesc;
 8004e0a:	4b03      	ldr	r3, [pc, #12]	; (8004e18 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	370c      	adds	r7, #12
 8004e10:	46bd      	mov	sp, r7
 8004e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e16:	4770      	bx	lr
 8004e18:	20000088 	.word	0x20000088

08004e1c <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b083      	sub	sp, #12
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_OtherSpeedCfgDesc);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	223b      	movs	r2, #59	; 0x3b
 8004e28:	801a      	strh	r2, [r3, #0]

  return USBD_HID_OtherSpeedCfgDesc;
 8004e2a:	4b03      	ldr	r3, [pc, #12]	; (8004e38 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	370c      	adds	r7, #12
 8004e30:	46bd      	mov	sp, r7
 8004e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e36:	4770      	bx	lr
 8004e38:	200000c4 	.word	0x200000c4

08004e3c <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b083      	sub	sp, #12
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
 8004e44:	460b      	mov	r3, r1
 8004e46:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004e4e:	2200      	movs	r2, #0
 8004e50:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8004e52:	2300      	movs	r3, #0
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	370c      	adds	r7, #12
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5e:	4770      	bx	lr

08004e60 <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b083      	sub	sp, #12
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	220a      	movs	r2, #10
 8004e6c:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 8004e6e:	4b03      	ldr	r3, [pc, #12]	; (8004e7c <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	370c      	adds	r7, #12
 8004e74:	46bd      	mov	sp, r7
 8004e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7a:	4770      	bx	lr
 8004e7c:	2000010c 	.word	0x2000010c

08004e80 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b086      	sub	sp, #24
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	60f8      	str	r0, [r7, #12]
 8004e88:	60b9      	str	r1, [r7, #8]
 8004e8a:	4613      	mov	r3, r2
 8004e8c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d101      	bne.n	8004e98 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8004e94:	2303      	movs	r3, #3
 8004e96:	e025      	b.n	8004ee4 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d003      	beq.n	8004eaa <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d003      	beq.n	8004ebc <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d003      	beq.n	8004eca <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	68ba      	ldr	r2, [r7, #8]
 8004ec6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	2201      	movs	r2, #1
 8004ece:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	79fa      	ldrb	r2, [r7, #7]
 8004ed6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8004ed8:	68f8      	ldr	r0, [r7, #12]
 8004eda:	f001 fb29 	bl	8006530 <USBD_LL_Init>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	75fb      	strb	r3, [r7, #23]

  return ret;
 8004ee2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	3718      	adds	r7, #24
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bd80      	pop	{r7, pc}

08004eec <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b084      	sub	sp, #16
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
 8004ef4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d101      	bne.n	8004f04 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8004f00:	2303      	movs	r3, #3
 8004f02:	e010      	b.n	8004f26 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	683a      	ldr	r2, [r7, #0]
 8004f08:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f14:	f107 020e 	add.w	r2, r7, #14
 8004f18:	4610      	mov	r0, r2
 8004f1a:	4798      	blx	r3
 8004f1c:	4602      	mov	r2, r0
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8004f24:	2300      	movs	r3, #0
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	3710      	adds	r7, #16
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bd80      	pop	{r7, pc}

08004f2e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004f2e:	b580      	push	{r7, lr}
 8004f30:	b082      	sub	sp, #8
 8004f32:	af00      	add	r7, sp, #0
 8004f34:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	f001 fb46 	bl	80065c8 <USBD_LL_Start>
 8004f3c:	4603      	mov	r3, r0
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3708      	adds	r7, #8
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}

08004f46 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8004f46:	b480      	push	{r7}
 8004f48:	b083      	sub	sp, #12
 8004f4a:	af00      	add	r7, sp, #0
 8004f4c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004f4e:	2300      	movs	r3, #0
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	370c      	adds	r7, #12
 8004f54:	46bd      	mov	sp, r7
 8004f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5a:	4770      	bx	lr

08004f5c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b084      	sub	sp, #16
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
 8004f64:	460b      	mov	r3, r1
 8004f66:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8004f68:	2303      	movs	r3, #3
 8004f6a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d009      	beq.n	8004f8a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	78fa      	ldrb	r2, [r7, #3]
 8004f80:	4611      	mov	r1, r2
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	4798      	blx	r3
 8004f86:	4603      	mov	r3, r0
 8004f88:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8004f8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	3710      	adds	r7, #16
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}

08004f94 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b082      	sub	sp, #8
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
 8004f9c:	460b      	mov	r3, r1
 8004f9e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d007      	beq.n	8004fba <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	78fa      	ldrb	r2, [r7, #3]
 8004fb4:	4611      	mov	r1, r2
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	4798      	blx	r3
  }

  return USBD_OK;
 8004fba:	2300      	movs	r3, #0
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	3708      	adds	r7, #8
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd80      	pop	{r7, pc}

08004fc4 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b084      	sub	sp, #16
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
 8004fcc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004fd4:	6839      	ldr	r1, [r7, #0]
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f000 ff2c 	bl	8005e34 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8004fea:	461a      	mov	r2, r3
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8004ff8:	f003 031f 	and.w	r3, r3, #31
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	d00e      	beq.n	800501e <USBD_LL_SetupStage+0x5a>
 8005000:	2b01      	cmp	r3, #1
 8005002:	d302      	bcc.n	800500a <USBD_LL_SetupStage+0x46>
 8005004:	2b02      	cmp	r3, #2
 8005006:	d014      	beq.n	8005032 <USBD_LL_SetupStage+0x6e>
 8005008:	e01d      	b.n	8005046 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005010:	4619      	mov	r1, r3
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f000 fa18 	bl	8005448 <USBD_StdDevReq>
 8005018:	4603      	mov	r3, r0
 800501a:	73fb      	strb	r3, [r7, #15]
      break;
 800501c:	e020      	b.n	8005060 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005024:	4619      	mov	r1, r3
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f000 fa7c 	bl	8005524 <USBD_StdItfReq>
 800502c:	4603      	mov	r3, r0
 800502e:	73fb      	strb	r3, [r7, #15]
      break;
 8005030:	e016      	b.n	8005060 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005038:	4619      	mov	r1, r3
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f000 fab8 	bl	80055b0 <USBD_StdEPReq>
 8005040:	4603      	mov	r3, r0
 8005042:	73fb      	strb	r3, [r7, #15]
      break;
 8005044:	e00c      	b.n	8005060 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800504c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005050:	b2db      	uxtb	r3, r3
 8005052:	4619      	mov	r1, r3
 8005054:	6878      	ldr	r0, [r7, #4]
 8005056:	f001 fb17 	bl	8006688 <USBD_LL_StallEP>
 800505a:	4603      	mov	r3, r0
 800505c:	73fb      	strb	r3, [r7, #15]
      break;
 800505e:	bf00      	nop
  }

  return ret;
 8005060:	7bfb      	ldrb	r3, [r7, #15]
}
 8005062:	4618      	mov	r0, r3
 8005064:	3710      	adds	r7, #16
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}

0800506a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800506a:	b580      	push	{r7, lr}
 800506c:	b086      	sub	sp, #24
 800506e:	af00      	add	r7, sp, #0
 8005070:	60f8      	str	r0, [r7, #12]
 8005072:	460b      	mov	r3, r1
 8005074:	607a      	str	r2, [r7, #4]
 8005076:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005078:	7afb      	ldrb	r3, [r7, #11]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d137      	bne.n	80050ee <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005084:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800508c:	2b03      	cmp	r3, #3
 800508e:	d14a      	bne.n	8005126 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	689a      	ldr	r2, [r3, #8]
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	68db      	ldr	r3, [r3, #12]
 8005098:	429a      	cmp	r2, r3
 800509a:	d913      	bls.n	80050c4 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	689a      	ldr	r2, [r3, #8]
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	68db      	ldr	r3, [r3, #12]
 80050a4:	1ad2      	subs	r2, r2, r3
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	68da      	ldr	r2, [r3, #12]
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	4293      	cmp	r3, r2
 80050b4:	bf28      	it	cs
 80050b6:	4613      	movcs	r3, r2
 80050b8:	461a      	mov	r2, r3
 80050ba:	6879      	ldr	r1, [r7, #4]
 80050bc:	68f8      	ldr	r0, [r7, #12]
 80050be:	f000 ff90 	bl	8005fe2 <USBD_CtlContinueRx>
 80050c2:	e030      	b.n	8005126 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80050ca:	691b      	ldr	r3, [r3, #16]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d00a      	beq.n	80050e6 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80050d6:	2b03      	cmp	r3, #3
 80050d8:	d105      	bne.n	80050e6 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80050e0:	691b      	ldr	r3, [r3, #16]
 80050e2:	68f8      	ldr	r0, [r7, #12]
 80050e4:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 80050e6:	68f8      	ldr	r0, [r7, #12]
 80050e8:	f000 ff8c 	bl	8006004 <USBD_CtlSendStatus>
 80050ec:	e01b      	b.n	8005126 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80050f4:	699b      	ldr	r3, [r3, #24]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d013      	beq.n	8005122 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8005100:	2b03      	cmp	r3, #3
 8005102:	d10e      	bne.n	8005122 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800510a:	699b      	ldr	r3, [r3, #24]
 800510c:	7afa      	ldrb	r2, [r7, #11]
 800510e:	4611      	mov	r1, r2
 8005110:	68f8      	ldr	r0, [r7, #12]
 8005112:	4798      	blx	r3
 8005114:	4603      	mov	r3, r0
 8005116:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8005118:	7dfb      	ldrb	r3, [r7, #23]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d003      	beq.n	8005126 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800511e:	7dfb      	ldrb	r3, [r7, #23]
 8005120:	e002      	b.n	8005128 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005122:	2303      	movs	r3, #3
 8005124:	e000      	b.n	8005128 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8005126:	2300      	movs	r3, #0
}
 8005128:	4618      	mov	r0, r3
 800512a:	3718      	adds	r7, #24
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}

08005130 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b086      	sub	sp, #24
 8005134:	af00      	add	r7, sp, #0
 8005136:	60f8      	str	r0, [r7, #12]
 8005138:	460b      	mov	r3, r1
 800513a:	607a      	str	r2, [r7, #4]
 800513c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800513e:	7afb      	ldrb	r3, [r7, #11]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d16a      	bne.n	800521a <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	3314      	adds	r3, #20
 8005148:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005150:	2b02      	cmp	r3, #2
 8005152:	d155      	bne.n	8005200 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	689a      	ldr	r2, [r3, #8]
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	68db      	ldr	r3, [r3, #12]
 800515c:	429a      	cmp	r2, r3
 800515e:	d914      	bls.n	800518a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	689a      	ldr	r2, [r3, #8]
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	68db      	ldr	r3, [r3, #12]
 8005168:	1ad2      	subs	r2, r2, r3
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	689b      	ldr	r3, [r3, #8]
 8005172:	461a      	mov	r2, r3
 8005174:	6879      	ldr	r1, [r7, #4]
 8005176:	68f8      	ldr	r0, [r7, #12]
 8005178:	f000 ff22 	bl	8005fc0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800517c:	2300      	movs	r3, #0
 800517e:	2200      	movs	r2, #0
 8005180:	2100      	movs	r1, #0
 8005182:	68f8      	ldr	r0, [r7, #12]
 8005184:	f001 fb2a 	bl	80067dc <USBD_LL_PrepareReceive>
 8005188:	e03a      	b.n	8005200 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	68da      	ldr	r2, [r3, #12]
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	429a      	cmp	r2, r3
 8005194:	d11c      	bne.n	80051d0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	685a      	ldr	r2, [r3, #4]
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800519e:	429a      	cmp	r2, r3
 80051a0:	d316      	bcc.n	80051d0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80051a2:	693b      	ldr	r3, [r7, #16]
 80051a4:	685a      	ldr	r2, [r3, #4]
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80051ac:	429a      	cmp	r2, r3
 80051ae:	d20f      	bcs.n	80051d0 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80051b0:	2200      	movs	r2, #0
 80051b2:	2100      	movs	r1, #0
 80051b4:	68f8      	ldr	r0, [r7, #12]
 80051b6:	f000 ff03 	bl	8005fc0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2200      	movs	r2, #0
 80051be:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80051c2:	2300      	movs	r3, #0
 80051c4:	2200      	movs	r2, #0
 80051c6:	2100      	movs	r1, #0
 80051c8:	68f8      	ldr	r0, [r7, #12]
 80051ca:	f001 fb07 	bl	80067dc <USBD_LL_PrepareReceive>
 80051ce:	e017      	b.n	8005200 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051d6:	68db      	ldr	r3, [r3, #12]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d00a      	beq.n	80051f2 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80051e2:	2b03      	cmp	r3, #3
 80051e4:	d105      	bne.n	80051f2 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051ec:	68db      	ldr	r3, [r3, #12]
 80051ee:	68f8      	ldr	r0, [r7, #12]
 80051f0:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80051f2:	2180      	movs	r1, #128	; 0x80
 80051f4:	68f8      	ldr	r0, [r7, #12]
 80051f6:	f001 fa47 	bl	8006688 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80051fa:	68f8      	ldr	r0, [r7, #12]
 80051fc:	f000 ff15 	bl	800602a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005206:	2b01      	cmp	r3, #1
 8005208:	d123      	bne.n	8005252 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800520a:	68f8      	ldr	r0, [r7, #12]
 800520c:	f7ff fe9b 	bl	8004f46 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	2200      	movs	r2, #0
 8005214:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005218:	e01b      	b.n	8005252 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005220:	695b      	ldr	r3, [r3, #20]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d013      	beq.n	800524e <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800522c:	2b03      	cmp	r3, #3
 800522e:	d10e      	bne.n	800524e <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005236:	695b      	ldr	r3, [r3, #20]
 8005238:	7afa      	ldrb	r2, [r7, #11]
 800523a:	4611      	mov	r1, r2
 800523c:	68f8      	ldr	r0, [r7, #12]
 800523e:	4798      	blx	r3
 8005240:	4603      	mov	r3, r0
 8005242:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8005244:	7dfb      	ldrb	r3, [r7, #23]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d003      	beq.n	8005252 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800524a:	7dfb      	ldrb	r3, [r7, #23]
 800524c:	e002      	b.n	8005254 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800524e:	2303      	movs	r3, #3
 8005250:	e000      	b.n	8005254 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8005252:	2300      	movs	r3, #0
}
 8005254:	4618      	mov	r0, r3
 8005256:	3718      	adds	r7, #24
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}

0800525c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b082      	sub	sp, #8
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2201      	movs	r2, #1
 8005268:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2200      	movs	r2, #0
 8005270:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2200      	movs	r2, #0
 8005278:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2200      	movs	r2, #0
 800527e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005288:	2b00      	cmp	r3, #0
 800528a:	d009      	beq.n	80052a0 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	687a      	ldr	r2, [r7, #4]
 8005296:	6852      	ldr	r2, [r2, #4]
 8005298:	b2d2      	uxtb	r2, r2
 800529a:	4611      	mov	r1, r2
 800529c:	6878      	ldr	r0, [r7, #4]
 800529e:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80052a0:	2308      	movs	r3, #8
 80052a2:	2200      	movs	r2, #0
 80052a4:	2100      	movs	r1, #0
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f001 f9a9 	bl	80065fe <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2201      	movs	r2, #1
 80052b0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2208      	movs	r2, #8
 80052b8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80052bc:	2308      	movs	r3, #8
 80052be:	2200      	movs	r2, #0
 80052c0:	2180      	movs	r1, #128	; 0x80
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f001 f99b 	bl	80065fe <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2201      	movs	r2, #1
 80052cc:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2208      	movs	r2, #8
 80052d2:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80052d4:	2300      	movs	r3, #0
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	3708      	adds	r7, #8
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd80      	pop	{r7, pc}

080052de <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80052de:	b480      	push	{r7}
 80052e0:	b083      	sub	sp, #12
 80052e2:	af00      	add	r7, sp, #0
 80052e4:	6078      	str	r0, [r7, #4]
 80052e6:	460b      	mov	r3, r1
 80052e8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	78fa      	ldrb	r2, [r7, #3]
 80052ee:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80052f0:	2300      	movs	r3, #0
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	370c      	adds	r7, #12
 80052f6:	46bd      	mov	sp, r7
 80052f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fc:	4770      	bx	lr

080052fe <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80052fe:	b480      	push	{r7}
 8005300:	b083      	sub	sp, #12
 8005302:	af00      	add	r7, sp, #0
 8005304:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2204      	movs	r2, #4
 8005316:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800531a:	2300      	movs	r3, #0
}
 800531c:	4618      	mov	r0, r3
 800531e:	370c      	adds	r7, #12
 8005320:	46bd      	mov	sp, r7
 8005322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005326:	4770      	bx	lr

08005328 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005328:	b480      	push	{r7}
 800532a:	b083      	sub	sp, #12
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005336:	2b04      	cmp	r3, #4
 8005338:	d105      	bne.n	8005346 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005346:	2300      	movs	r3, #0
}
 8005348:	4618      	mov	r0, r3
 800534a:	370c      	adds	r7, #12
 800534c:	46bd      	mov	sp, r7
 800534e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005352:	4770      	bx	lr

08005354 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b082      	sub	sp, #8
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005362:	2b03      	cmp	r3, #3
 8005364:	d10b      	bne.n	800537e <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800536c:	69db      	ldr	r3, [r3, #28]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d005      	beq.n	800537e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005378:	69db      	ldr	r3, [r3, #28]
 800537a:	6878      	ldr	r0, [r7, #4]
 800537c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800537e:	2300      	movs	r3, #0
}
 8005380:	4618      	mov	r0, r3
 8005382:	3708      	adds	r7, #8
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}

08005388 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005388:	b480      	push	{r7}
 800538a:	b083      	sub	sp, #12
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
 8005390:	460b      	mov	r3, r1
 8005392:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8005394:	2300      	movs	r3, #0
}
 8005396:	4618      	mov	r0, r3
 8005398:	370c      	adds	r7, #12
 800539a:	46bd      	mov	sp, r7
 800539c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a0:	4770      	bx	lr

080053a2 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80053a2:	b480      	push	{r7}
 80053a4:	b083      	sub	sp, #12
 80053a6:	af00      	add	r7, sp, #0
 80053a8:	6078      	str	r0, [r7, #4]
 80053aa:	460b      	mov	r3, r1
 80053ac:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80053ae:	2300      	movs	r3, #0
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	370c      	adds	r7, #12
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr

080053bc <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80053bc:	b480      	push	{r7}
 80053be:	b083      	sub	sp, #12
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80053c4:	2300      	movs	r3, #0
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	370c      	adds	r7, #12
 80053ca:	46bd      	mov	sp, r7
 80053cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d0:	4770      	bx	lr

080053d2 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80053d2:	b580      	push	{r7, lr}
 80053d4:	b082      	sub	sp, #8
 80053d6:	af00      	add	r7, sp, #0
 80053d8:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2201      	movs	r2, #1
 80053de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d009      	beq.n	8005400 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	687a      	ldr	r2, [r7, #4]
 80053f6:	6852      	ldr	r2, [r2, #4]
 80053f8:	b2d2      	uxtb	r2, r2
 80053fa:	4611      	mov	r1, r2
 80053fc:	6878      	ldr	r0, [r7, #4]
 80053fe:	4798      	blx	r3
  }

  return USBD_OK;
 8005400:	2300      	movs	r3, #0
}
 8005402:	4618      	mov	r0, r3
 8005404:	3708      	adds	r7, #8
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}

0800540a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800540a:	b480      	push	{r7}
 800540c:	b087      	sub	sp, #28
 800540e:	af00      	add	r7, sp, #0
 8005410:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	781b      	ldrb	r3, [r3, #0]
 800541a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	3301      	adds	r3, #1
 8005420:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	781b      	ldrb	r3, [r3, #0]
 8005426:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005428:	8a3b      	ldrh	r3, [r7, #16]
 800542a:	021b      	lsls	r3, r3, #8
 800542c:	b21a      	sxth	r2, r3
 800542e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005432:	4313      	orrs	r3, r2
 8005434:	b21b      	sxth	r3, r3
 8005436:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005438:	89fb      	ldrh	r3, [r7, #14]
}
 800543a:	4618      	mov	r0, r3
 800543c:	371c      	adds	r7, #28
 800543e:	46bd      	mov	sp, r7
 8005440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005444:	4770      	bx	lr
	...

08005448 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b084      	sub	sp, #16
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
 8005450:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005452:	2300      	movs	r3, #0
 8005454:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	781b      	ldrb	r3, [r3, #0]
 800545a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800545e:	2b20      	cmp	r3, #32
 8005460:	d004      	beq.n	800546c <USBD_StdDevReq+0x24>
 8005462:	2b40      	cmp	r3, #64	; 0x40
 8005464:	d002      	beq.n	800546c <USBD_StdDevReq+0x24>
 8005466:	2b00      	cmp	r3, #0
 8005468:	d00a      	beq.n	8005480 <USBD_StdDevReq+0x38>
 800546a:	e050      	b.n	800550e <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005472:	689b      	ldr	r3, [r3, #8]
 8005474:	6839      	ldr	r1, [r7, #0]
 8005476:	6878      	ldr	r0, [r7, #4]
 8005478:	4798      	blx	r3
 800547a:	4603      	mov	r3, r0
 800547c:	73fb      	strb	r3, [r7, #15]
    break;
 800547e:	e04b      	b.n	8005518 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	785b      	ldrb	r3, [r3, #1]
 8005484:	2b09      	cmp	r3, #9
 8005486:	d83c      	bhi.n	8005502 <USBD_StdDevReq+0xba>
 8005488:	a201      	add	r2, pc, #4	; (adr r2, 8005490 <USBD_StdDevReq+0x48>)
 800548a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800548e:	bf00      	nop
 8005490:	080054e5 	.word	0x080054e5
 8005494:	080054f9 	.word	0x080054f9
 8005498:	08005503 	.word	0x08005503
 800549c:	080054ef 	.word	0x080054ef
 80054a0:	08005503 	.word	0x08005503
 80054a4:	080054c3 	.word	0x080054c3
 80054a8:	080054b9 	.word	0x080054b9
 80054ac:	08005503 	.word	0x08005503
 80054b0:	080054db 	.word	0x080054db
 80054b4:	080054cd 	.word	0x080054cd
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 80054b8:	6839      	ldr	r1, [r7, #0]
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f000 f9ce 	bl	800585c <USBD_GetDescriptor>
      break;
 80054c0:	e024      	b.n	800550c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 80054c2:	6839      	ldr	r1, [r7, #0]
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	f000 fb33 	bl	8005b30 <USBD_SetAddress>
      break;
 80054ca:	e01f      	b.n	800550c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 80054cc:	6839      	ldr	r1, [r7, #0]
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f000 fb70 	bl	8005bb4 <USBD_SetConfig>
 80054d4:	4603      	mov	r3, r0
 80054d6:	73fb      	strb	r3, [r7, #15]
      break;
 80054d8:	e018      	b.n	800550c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 80054da:	6839      	ldr	r1, [r7, #0]
 80054dc:	6878      	ldr	r0, [r7, #4]
 80054de:	f000 fc0d 	bl	8005cfc <USBD_GetConfig>
      break;
 80054e2:	e013      	b.n	800550c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 80054e4:	6839      	ldr	r1, [r7, #0]
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f000 fc3c 	bl	8005d64 <USBD_GetStatus>
      break;
 80054ec:	e00e      	b.n	800550c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 80054ee:	6839      	ldr	r1, [r7, #0]
 80054f0:	6878      	ldr	r0, [r7, #4]
 80054f2:	f000 fc6a 	bl	8005dca <USBD_SetFeature>
      break;
 80054f6:	e009      	b.n	800550c <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 80054f8:	6839      	ldr	r1, [r7, #0]
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f000 fc79 	bl	8005df2 <USBD_ClrFeature>
      break;
 8005500:	e004      	b.n	800550c <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8005502:	6839      	ldr	r1, [r7, #0]
 8005504:	6878      	ldr	r0, [r7, #4]
 8005506:	f000 fccf 	bl	8005ea8 <USBD_CtlError>
      break;
 800550a:	bf00      	nop
    }
    break;
 800550c:	e004      	b.n	8005518 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800550e:	6839      	ldr	r1, [r7, #0]
 8005510:	6878      	ldr	r0, [r7, #4]
 8005512:	f000 fcc9 	bl	8005ea8 <USBD_CtlError>
    break;
 8005516:	bf00      	nop
  }

  return ret;
 8005518:	7bfb      	ldrb	r3, [r7, #15]
}
 800551a:	4618      	mov	r0, r3
 800551c:	3710      	adds	r7, #16
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}
 8005522:	bf00      	nop

08005524 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b084      	sub	sp, #16
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
 800552c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800552e:	2300      	movs	r3, #0
 8005530:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	781b      	ldrb	r3, [r3, #0]
 8005536:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800553a:	2b20      	cmp	r3, #32
 800553c:	d003      	beq.n	8005546 <USBD_StdItfReq+0x22>
 800553e:	2b40      	cmp	r3, #64	; 0x40
 8005540:	d001      	beq.n	8005546 <USBD_StdItfReq+0x22>
 8005542:	2b00      	cmp	r3, #0
 8005544:	d12a      	bne.n	800559c <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800554c:	3b01      	subs	r3, #1
 800554e:	2b02      	cmp	r3, #2
 8005550:	d81d      	bhi.n	800558e <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	889b      	ldrh	r3, [r3, #4]
 8005556:	b2db      	uxtb	r3, r3
 8005558:	2b01      	cmp	r3, #1
 800555a:	d813      	bhi.n	8005584 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005562:	689b      	ldr	r3, [r3, #8]
 8005564:	6839      	ldr	r1, [r7, #0]
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	4798      	blx	r3
 800556a:	4603      	mov	r3, r0
 800556c:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	88db      	ldrh	r3, [r3, #6]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d110      	bne.n	8005598 <USBD_StdItfReq+0x74>
 8005576:	7bfb      	ldrb	r3, [r7, #15]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d10d      	bne.n	8005598 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 800557c:	6878      	ldr	r0, [r7, #4]
 800557e:	f000 fd41 	bl	8006004 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8005582:	e009      	b.n	8005598 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8005584:	6839      	ldr	r1, [r7, #0]
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	f000 fc8e 	bl	8005ea8 <USBD_CtlError>
      break;
 800558c:	e004      	b.n	8005598 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800558e:	6839      	ldr	r1, [r7, #0]
 8005590:	6878      	ldr	r0, [r7, #4]
 8005592:	f000 fc89 	bl	8005ea8 <USBD_CtlError>
      break;
 8005596:	e000      	b.n	800559a <USBD_StdItfReq+0x76>
      break;
 8005598:	bf00      	nop
    }
    break;
 800559a:	e004      	b.n	80055a6 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800559c:	6839      	ldr	r1, [r7, #0]
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f000 fc82 	bl	8005ea8 <USBD_CtlError>
    break;
 80055a4:	bf00      	nop
  }

  return ret;
 80055a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	3710      	adds	r7, #16
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}

080055b0 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b084      	sub	sp, #16
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
 80055b8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80055ba:	2300      	movs	r3, #0
 80055bc:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	889b      	ldrh	r3, [r3, #4]
 80055c2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	781b      	ldrb	r3, [r3, #0]
 80055c8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80055cc:	2b20      	cmp	r3, #32
 80055ce:	d004      	beq.n	80055da <USBD_StdEPReq+0x2a>
 80055d0:	2b40      	cmp	r3, #64	; 0x40
 80055d2:	d002      	beq.n	80055da <USBD_StdEPReq+0x2a>
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d00a      	beq.n	80055ee <USBD_StdEPReq+0x3e>
 80055d8:	e135      	b.n	8005846 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055e0:	689b      	ldr	r3, [r3, #8]
 80055e2:	6839      	ldr	r1, [r7, #0]
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	4798      	blx	r3
 80055e8:	4603      	mov	r3, r0
 80055ea:	73fb      	strb	r3, [r7, #15]
    break;
 80055ec:	e130      	b.n	8005850 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	785b      	ldrb	r3, [r3, #1]
 80055f2:	2b01      	cmp	r3, #1
 80055f4:	d03e      	beq.n	8005674 <USBD_StdEPReq+0xc4>
 80055f6:	2b03      	cmp	r3, #3
 80055f8:	d002      	beq.n	8005600 <USBD_StdEPReq+0x50>
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d077      	beq.n	80056ee <USBD_StdEPReq+0x13e>
 80055fe:	e11c      	b.n	800583a <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005606:	2b02      	cmp	r3, #2
 8005608:	d002      	beq.n	8005610 <USBD_StdEPReq+0x60>
 800560a:	2b03      	cmp	r3, #3
 800560c:	d015      	beq.n	800563a <USBD_StdEPReq+0x8a>
 800560e:	e02b      	b.n	8005668 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005610:	7bbb      	ldrb	r3, [r7, #14]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d00c      	beq.n	8005630 <USBD_StdEPReq+0x80>
 8005616:	7bbb      	ldrb	r3, [r7, #14]
 8005618:	2b80      	cmp	r3, #128	; 0x80
 800561a:	d009      	beq.n	8005630 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800561c:	7bbb      	ldrb	r3, [r7, #14]
 800561e:	4619      	mov	r1, r3
 8005620:	6878      	ldr	r0, [r7, #4]
 8005622:	f001 f831 	bl	8006688 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005626:	2180      	movs	r1, #128	; 0x80
 8005628:	6878      	ldr	r0, [r7, #4]
 800562a:	f001 f82d 	bl	8006688 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800562e:	e020      	b.n	8005672 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8005630:	6839      	ldr	r1, [r7, #0]
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	f000 fc38 	bl	8005ea8 <USBD_CtlError>
        break;
 8005638:	e01b      	b.n	8005672 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	885b      	ldrh	r3, [r3, #2]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d10e      	bne.n	8005660 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005642:	7bbb      	ldrb	r3, [r7, #14]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d00b      	beq.n	8005660 <USBD_StdEPReq+0xb0>
 8005648:	7bbb      	ldrb	r3, [r7, #14]
 800564a:	2b80      	cmp	r3, #128	; 0x80
 800564c:	d008      	beq.n	8005660 <USBD_StdEPReq+0xb0>
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	88db      	ldrh	r3, [r3, #6]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d104      	bne.n	8005660 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8005656:	7bbb      	ldrb	r3, [r7, #14]
 8005658:	4619      	mov	r1, r3
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	f001 f814 	bl	8006688 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8005660:	6878      	ldr	r0, [r7, #4]
 8005662:	f000 fccf 	bl	8006004 <USBD_CtlSendStatus>

        break;
 8005666:	e004      	b.n	8005672 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8005668:	6839      	ldr	r1, [r7, #0]
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f000 fc1c 	bl	8005ea8 <USBD_CtlError>
        break;
 8005670:	bf00      	nop
      }
      break;
 8005672:	e0e7      	b.n	8005844 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800567a:	2b02      	cmp	r3, #2
 800567c:	d002      	beq.n	8005684 <USBD_StdEPReq+0xd4>
 800567e:	2b03      	cmp	r3, #3
 8005680:	d015      	beq.n	80056ae <USBD_StdEPReq+0xfe>
 8005682:	e02d      	b.n	80056e0 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005684:	7bbb      	ldrb	r3, [r7, #14]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d00c      	beq.n	80056a4 <USBD_StdEPReq+0xf4>
 800568a:	7bbb      	ldrb	r3, [r7, #14]
 800568c:	2b80      	cmp	r3, #128	; 0x80
 800568e:	d009      	beq.n	80056a4 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8005690:	7bbb      	ldrb	r3, [r7, #14]
 8005692:	4619      	mov	r1, r3
 8005694:	6878      	ldr	r0, [r7, #4]
 8005696:	f000 fff7 	bl	8006688 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800569a:	2180      	movs	r1, #128	; 0x80
 800569c:	6878      	ldr	r0, [r7, #4]
 800569e:	f000 fff3 	bl	8006688 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80056a2:	e023      	b.n	80056ec <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 80056a4:	6839      	ldr	r1, [r7, #0]
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f000 fbfe 	bl	8005ea8 <USBD_CtlError>
        break;
 80056ac:	e01e      	b.n	80056ec <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	885b      	ldrh	r3, [r3, #2]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d119      	bne.n	80056ea <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 80056b6:	7bbb      	ldrb	r3, [r7, #14]
 80056b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d004      	beq.n	80056ca <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80056c0:	7bbb      	ldrb	r3, [r7, #14]
 80056c2:	4619      	mov	r1, r3
 80056c4:	6878      	ldr	r0, [r7, #4]
 80056c6:	f000 fffe 	bl	80066c6 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f000 fc9a 	bl	8006004 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056d6:	689b      	ldr	r3, [r3, #8]
 80056d8:	6839      	ldr	r1, [r7, #0]
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	4798      	blx	r3
        }
        break;
 80056de:	e004      	b.n	80056ea <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 80056e0:	6839      	ldr	r1, [r7, #0]
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f000 fbe0 	bl	8005ea8 <USBD_CtlError>
        break;
 80056e8:	e000      	b.n	80056ec <USBD_StdEPReq+0x13c>
        break;
 80056ea:	bf00      	nop
      }
      break;
 80056ec:	e0aa      	b.n	8005844 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80056f4:	2b02      	cmp	r3, #2
 80056f6:	d002      	beq.n	80056fe <USBD_StdEPReq+0x14e>
 80056f8:	2b03      	cmp	r3, #3
 80056fa:	d032      	beq.n	8005762 <USBD_StdEPReq+0x1b2>
 80056fc:	e097      	b.n	800582e <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80056fe:	7bbb      	ldrb	r3, [r7, #14]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d007      	beq.n	8005714 <USBD_StdEPReq+0x164>
 8005704:	7bbb      	ldrb	r3, [r7, #14]
 8005706:	2b80      	cmp	r3, #128	; 0x80
 8005708:	d004      	beq.n	8005714 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 800570a:	6839      	ldr	r1, [r7, #0]
 800570c:	6878      	ldr	r0, [r7, #4]
 800570e:	f000 fbcb 	bl	8005ea8 <USBD_CtlError>
          break;
 8005712:	e091      	b.n	8005838 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005714:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005718:	2b00      	cmp	r3, #0
 800571a:	da0b      	bge.n	8005734 <USBD_StdEPReq+0x184>
 800571c:	7bbb      	ldrb	r3, [r7, #14]
 800571e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005722:	4613      	mov	r3, r2
 8005724:	009b      	lsls	r3, r3, #2
 8005726:	4413      	add	r3, r2
 8005728:	009b      	lsls	r3, r3, #2
 800572a:	3310      	adds	r3, #16
 800572c:	687a      	ldr	r2, [r7, #4]
 800572e:	4413      	add	r3, r2
 8005730:	3304      	adds	r3, #4
 8005732:	e00b      	b.n	800574c <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8005734:	7bbb      	ldrb	r3, [r7, #14]
 8005736:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800573a:	4613      	mov	r3, r2
 800573c:	009b      	lsls	r3, r3, #2
 800573e:	4413      	add	r3, r2
 8005740:	009b      	lsls	r3, r3, #2
 8005742:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005746:	687a      	ldr	r2, [r7, #4]
 8005748:	4413      	add	r3, r2
 800574a:	3304      	adds	r3, #4
 800574c:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	2200      	movs	r2, #0
 8005752:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	2202      	movs	r2, #2
 8005758:	4619      	mov	r1, r3
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f000 fc15 	bl	8005f8a <USBD_CtlSendData>
        break;
 8005760:	e06a      	b.n	8005838 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8005762:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005766:	2b00      	cmp	r3, #0
 8005768:	da11      	bge.n	800578e <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800576a:	7bbb      	ldrb	r3, [r7, #14]
 800576c:	f003 020f 	and.w	r2, r3, #15
 8005770:	6879      	ldr	r1, [r7, #4]
 8005772:	4613      	mov	r3, r2
 8005774:	009b      	lsls	r3, r3, #2
 8005776:	4413      	add	r3, r2
 8005778:	009b      	lsls	r3, r3, #2
 800577a:	440b      	add	r3, r1
 800577c:	3324      	adds	r3, #36	; 0x24
 800577e:	881b      	ldrh	r3, [r3, #0]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d117      	bne.n	80057b4 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8005784:	6839      	ldr	r1, [r7, #0]
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	f000 fb8e 	bl	8005ea8 <USBD_CtlError>
            break;
 800578c:	e054      	b.n	8005838 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800578e:	7bbb      	ldrb	r3, [r7, #14]
 8005790:	f003 020f 	and.w	r2, r3, #15
 8005794:	6879      	ldr	r1, [r7, #4]
 8005796:	4613      	mov	r3, r2
 8005798:	009b      	lsls	r3, r3, #2
 800579a:	4413      	add	r3, r2
 800579c:	009b      	lsls	r3, r3, #2
 800579e:	440b      	add	r3, r1
 80057a0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80057a4:	881b      	ldrh	r3, [r3, #0]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d104      	bne.n	80057b4 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 80057aa:	6839      	ldr	r1, [r7, #0]
 80057ac:	6878      	ldr	r0, [r7, #4]
 80057ae:	f000 fb7b 	bl	8005ea8 <USBD_CtlError>
            break;
 80057b2:	e041      	b.n	8005838 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80057b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	da0b      	bge.n	80057d4 <USBD_StdEPReq+0x224>
 80057bc:	7bbb      	ldrb	r3, [r7, #14]
 80057be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80057c2:	4613      	mov	r3, r2
 80057c4:	009b      	lsls	r3, r3, #2
 80057c6:	4413      	add	r3, r2
 80057c8:	009b      	lsls	r3, r3, #2
 80057ca:	3310      	adds	r3, #16
 80057cc:	687a      	ldr	r2, [r7, #4]
 80057ce:	4413      	add	r3, r2
 80057d0:	3304      	adds	r3, #4
 80057d2:	e00b      	b.n	80057ec <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 80057d4:	7bbb      	ldrb	r3, [r7, #14]
 80057d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80057da:	4613      	mov	r3, r2
 80057dc:	009b      	lsls	r3, r3, #2
 80057de:	4413      	add	r3, r2
 80057e0:	009b      	lsls	r3, r3, #2
 80057e2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80057e6:	687a      	ldr	r2, [r7, #4]
 80057e8:	4413      	add	r3, r2
 80057ea:	3304      	adds	r3, #4
 80057ec:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80057ee:	7bbb      	ldrb	r3, [r7, #14]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d002      	beq.n	80057fa <USBD_StdEPReq+0x24a>
 80057f4:	7bbb      	ldrb	r3, [r7, #14]
 80057f6:	2b80      	cmp	r3, #128	; 0x80
 80057f8:	d103      	bne.n	8005802 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	2200      	movs	r2, #0
 80057fe:	601a      	str	r2, [r3, #0]
 8005800:	e00e      	b.n	8005820 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8005802:	7bbb      	ldrb	r3, [r7, #14]
 8005804:	4619      	mov	r1, r3
 8005806:	6878      	ldr	r0, [r7, #4]
 8005808:	f000 ff7c 	bl	8006704 <USBD_LL_IsStallEP>
 800580c:	4603      	mov	r3, r0
 800580e:	2b00      	cmp	r3, #0
 8005810:	d003      	beq.n	800581a <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	2201      	movs	r2, #1
 8005816:	601a      	str	r2, [r3, #0]
 8005818:	e002      	b.n	8005820 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	2200      	movs	r2, #0
 800581e:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	2202      	movs	r2, #2
 8005824:	4619      	mov	r1, r3
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f000 fbaf 	bl	8005f8a <USBD_CtlSendData>
          break;
 800582c:	e004      	b.n	8005838 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 800582e:	6839      	ldr	r1, [r7, #0]
 8005830:	6878      	ldr	r0, [r7, #4]
 8005832:	f000 fb39 	bl	8005ea8 <USBD_CtlError>
        break;
 8005836:	bf00      	nop
      }
      break;
 8005838:	e004      	b.n	8005844 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 800583a:	6839      	ldr	r1, [r7, #0]
 800583c:	6878      	ldr	r0, [r7, #4]
 800583e:	f000 fb33 	bl	8005ea8 <USBD_CtlError>
      break;
 8005842:	bf00      	nop
    }
    break;
 8005844:	e004      	b.n	8005850 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8005846:	6839      	ldr	r1, [r7, #0]
 8005848:	6878      	ldr	r0, [r7, #4]
 800584a:	f000 fb2d 	bl	8005ea8 <USBD_CtlError>
    break;
 800584e:	bf00      	nop
  }

  return ret;
 8005850:	7bfb      	ldrb	r3, [r7, #15]
}
 8005852:	4618      	mov	r0, r3
 8005854:	3710      	adds	r7, #16
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}
	...

0800585c <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b084      	sub	sp, #16
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
 8005864:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005866:	2300      	movs	r3, #0
 8005868:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800586a:	2300      	movs	r3, #0
 800586c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800586e:	2300      	movs	r3, #0
 8005870:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	885b      	ldrh	r3, [r3, #2]
 8005876:	0a1b      	lsrs	r3, r3, #8
 8005878:	b29b      	uxth	r3, r3
 800587a:	3b01      	subs	r3, #1
 800587c:	2b06      	cmp	r3, #6
 800587e:	f200 8128 	bhi.w	8005ad2 <USBD_GetDescriptor+0x276>
 8005882:	a201      	add	r2, pc, #4	; (adr r2, 8005888 <USBD_GetDescriptor+0x2c>)
 8005884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005888:	080058a5 	.word	0x080058a5
 800588c:	080058bd 	.word	0x080058bd
 8005890:	080058fd 	.word	0x080058fd
 8005894:	08005ad3 	.word	0x08005ad3
 8005898:	08005ad3 	.word	0x08005ad3
 800589c:	08005a73 	.word	0x08005a73
 80058a0:	08005a9f 	.word	0x08005a9f
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	687a      	ldr	r2, [r7, #4]
 80058ae:	7c12      	ldrb	r2, [r2, #16]
 80058b0:	f107 0108 	add.w	r1, r7, #8
 80058b4:	4610      	mov	r0, r2
 80058b6:	4798      	blx	r3
 80058b8:	60f8      	str	r0, [r7, #12]
    break;
 80058ba:	e112      	b.n	8005ae2 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	7c1b      	ldrb	r3, [r3, #16]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d10d      	bne.n	80058e0 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058cc:	f107 0208 	add.w	r2, r7, #8
 80058d0:	4610      	mov	r0, r2
 80058d2:	4798      	blx	r3
 80058d4:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	3301      	adds	r3, #1
 80058da:	2202      	movs	r2, #2
 80058dc:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 80058de:	e100      	b.n	8005ae2 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058e8:	f107 0208 	add.w	r2, r7, #8
 80058ec:	4610      	mov	r0, r2
 80058ee:	4798      	blx	r3
 80058f0:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	3301      	adds	r3, #1
 80058f6:	2202      	movs	r2, #2
 80058f8:	701a      	strb	r2, [r3, #0]
    break;
 80058fa:	e0f2      	b.n	8005ae2 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	885b      	ldrh	r3, [r3, #2]
 8005900:	b2db      	uxtb	r3, r3
 8005902:	2b05      	cmp	r3, #5
 8005904:	f200 80ac 	bhi.w	8005a60 <USBD_GetDescriptor+0x204>
 8005908:	a201      	add	r2, pc, #4	; (adr r2, 8005910 <USBD_GetDescriptor+0xb4>)
 800590a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800590e:	bf00      	nop
 8005910:	08005929 	.word	0x08005929
 8005914:	0800595d 	.word	0x0800595d
 8005918:	08005991 	.word	0x08005991
 800591c:	080059c5 	.word	0x080059c5
 8005920:	080059f9 	.word	0x080059f9
 8005924:	08005a2d 	.word	0x08005a2d
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d00b      	beq.n	800594c <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	687a      	ldr	r2, [r7, #4]
 800593e:	7c12      	ldrb	r2, [r2, #16]
 8005940:	f107 0108 	add.w	r1, r7, #8
 8005944:	4610      	mov	r0, r2
 8005946:	4798      	blx	r3
 8005948:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800594a:	e091      	b.n	8005a70 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800594c:	6839      	ldr	r1, [r7, #0]
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f000 faaa 	bl	8005ea8 <USBD_CtlError>
        err++;
 8005954:	7afb      	ldrb	r3, [r7, #11]
 8005956:	3301      	adds	r3, #1
 8005958:	72fb      	strb	r3, [r7, #11]
      break;
 800595a:	e089      	b.n	8005a70 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005962:	689b      	ldr	r3, [r3, #8]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d00b      	beq.n	8005980 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800596e:	689b      	ldr	r3, [r3, #8]
 8005970:	687a      	ldr	r2, [r7, #4]
 8005972:	7c12      	ldrb	r2, [r2, #16]
 8005974:	f107 0108 	add.w	r1, r7, #8
 8005978:	4610      	mov	r0, r2
 800597a:	4798      	blx	r3
 800597c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800597e:	e077      	b.n	8005a70 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005980:	6839      	ldr	r1, [r7, #0]
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f000 fa90 	bl	8005ea8 <USBD_CtlError>
        err++;
 8005988:	7afb      	ldrb	r3, [r7, #11]
 800598a:	3301      	adds	r3, #1
 800598c:	72fb      	strb	r3, [r7, #11]
      break;
 800598e:	e06f      	b.n	8005a70 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005996:	68db      	ldr	r3, [r3, #12]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d00b      	beq.n	80059b4 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80059a2:	68db      	ldr	r3, [r3, #12]
 80059a4:	687a      	ldr	r2, [r7, #4]
 80059a6:	7c12      	ldrb	r2, [r2, #16]
 80059a8:	f107 0108 	add.w	r1, r7, #8
 80059ac:	4610      	mov	r0, r2
 80059ae:	4798      	blx	r3
 80059b0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80059b2:	e05d      	b.n	8005a70 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80059b4:	6839      	ldr	r1, [r7, #0]
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f000 fa76 	bl	8005ea8 <USBD_CtlError>
        err++;
 80059bc:	7afb      	ldrb	r3, [r7, #11]
 80059be:	3301      	adds	r3, #1
 80059c0:	72fb      	strb	r3, [r7, #11]
      break;
 80059c2:	e055      	b.n	8005a70 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80059ca:	691b      	ldr	r3, [r3, #16]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d00b      	beq.n	80059e8 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80059d6:	691b      	ldr	r3, [r3, #16]
 80059d8:	687a      	ldr	r2, [r7, #4]
 80059da:	7c12      	ldrb	r2, [r2, #16]
 80059dc:	f107 0108 	add.w	r1, r7, #8
 80059e0:	4610      	mov	r0, r2
 80059e2:	4798      	blx	r3
 80059e4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80059e6:	e043      	b.n	8005a70 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80059e8:	6839      	ldr	r1, [r7, #0]
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	f000 fa5c 	bl	8005ea8 <USBD_CtlError>
        err++;
 80059f0:	7afb      	ldrb	r3, [r7, #11]
 80059f2:	3301      	adds	r3, #1
 80059f4:	72fb      	strb	r3, [r7, #11]
      break;
 80059f6:	e03b      	b.n	8005a70 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80059fe:	695b      	ldr	r3, [r3, #20]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d00b      	beq.n	8005a1c <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a0a:	695b      	ldr	r3, [r3, #20]
 8005a0c:	687a      	ldr	r2, [r7, #4]
 8005a0e:	7c12      	ldrb	r2, [r2, #16]
 8005a10:	f107 0108 	add.w	r1, r7, #8
 8005a14:	4610      	mov	r0, r2
 8005a16:	4798      	blx	r3
 8005a18:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005a1a:	e029      	b.n	8005a70 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005a1c:	6839      	ldr	r1, [r7, #0]
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f000 fa42 	bl	8005ea8 <USBD_CtlError>
        err++;
 8005a24:	7afb      	ldrb	r3, [r7, #11]
 8005a26:	3301      	adds	r3, #1
 8005a28:	72fb      	strb	r3, [r7, #11]
      break;
 8005a2a:	e021      	b.n	8005a70 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a32:	699b      	ldr	r3, [r3, #24]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d00b      	beq.n	8005a50 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a3e:	699b      	ldr	r3, [r3, #24]
 8005a40:	687a      	ldr	r2, [r7, #4]
 8005a42:	7c12      	ldrb	r2, [r2, #16]
 8005a44:	f107 0108 	add.w	r1, r7, #8
 8005a48:	4610      	mov	r0, r2
 8005a4a:	4798      	blx	r3
 8005a4c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005a4e:	e00f      	b.n	8005a70 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005a50:	6839      	ldr	r1, [r7, #0]
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f000 fa28 	bl	8005ea8 <USBD_CtlError>
        err++;
 8005a58:	7afb      	ldrb	r3, [r7, #11]
 8005a5a:	3301      	adds	r3, #1
 8005a5c:	72fb      	strb	r3, [r7, #11]
      break;
 8005a5e:	e007      	b.n	8005a70 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8005a60:	6839      	ldr	r1, [r7, #0]
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f000 fa20 	bl	8005ea8 <USBD_CtlError>
      err++;
 8005a68:	7afb      	ldrb	r3, [r7, #11]
 8005a6a:	3301      	adds	r3, #1
 8005a6c:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8005a6e:	bf00      	nop
    }
    break;
 8005a70:	e037      	b.n	8005ae2 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	7c1b      	ldrb	r3, [r3, #16]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d109      	bne.n	8005a8e <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a82:	f107 0208 	add.w	r2, r7, #8
 8005a86:	4610      	mov	r0, r2
 8005a88:	4798      	blx	r3
 8005a8a:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8005a8c:	e029      	b.n	8005ae2 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8005a8e:	6839      	ldr	r1, [r7, #0]
 8005a90:	6878      	ldr	r0, [r7, #4]
 8005a92:	f000 fa09 	bl	8005ea8 <USBD_CtlError>
      err++;
 8005a96:	7afb      	ldrb	r3, [r7, #11]
 8005a98:	3301      	adds	r3, #1
 8005a9a:	72fb      	strb	r3, [r7, #11]
    break;
 8005a9c:	e021      	b.n	8005ae2 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	7c1b      	ldrb	r3, [r3, #16]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d10d      	bne.n	8005ac2 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aae:	f107 0208 	add.w	r2, r7, #8
 8005ab2:	4610      	mov	r0, r2
 8005ab4:	4798      	blx	r3
 8005ab6:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	3301      	adds	r3, #1
 8005abc:	2207      	movs	r2, #7
 8005abe:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8005ac0:	e00f      	b.n	8005ae2 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8005ac2:	6839      	ldr	r1, [r7, #0]
 8005ac4:	6878      	ldr	r0, [r7, #4]
 8005ac6:	f000 f9ef 	bl	8005ea8 <USBD_CtlError>
      err++;
 8005aca:	7afb      	ldrb	r3, [r7, #11]
 8005acc:	3301      	adds	r3, #1
 8005ace:	72fb      	strb	r3, [r7, #11]
    break;
 8005ad0:	e007      	b.n	8005ae2 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8005ad2:	6839      	ldr	r1, [r7, #0]
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f000 f9e7 	bl	8005ea8 <USBD_CtlError>
    err++;
 8005ada:	7afb      	ldrb	r3, [r7, #11]
 8005adc:	3301      	adds	r3, #1
 8005ade:	72fb      	strb	r3, [r7, #11]
    break;
 8005ae0:	bf00      	nop
  }

  if (err != 0U)
 8005ae2:	7afb      	ldrb	r3, [r7, #11]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d11e      	bne.n	8005b26 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	88db      	ldrh	r3, [r3, #6]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d016      	beq.n	8005b1e <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8005af0:	893b      	ldrh	r3, [r7, #8]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d00e      	beq.n	8005b14 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	88da      	ldrh	r2, [r3, #6]
 8005afa:	893b      	ldrh	r3, [r7, #8]
 8005afc:	4293      	cmp	r3, r2
 8005afe:	bf28      	it	cs
 8005b00:	4613      	movcs	r3, r2
 8005b02:	b29b      	uxth	r3, r3
 8005b04:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8005b06:	893b      	ldrh	r3, [r7, #8]
 8005b08:	461a      	mov	r2, r3
 8005b0a:	68f9      	ldr	r1, [r7, #12]
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	f000 fa3c 	bl	8005f8a <USBD_CtlSendData>
 8005b12:	e009      	b.n	8005b28 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8005b14:	6839      	ldr	r1, [r7, #0]
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	f000 f9c6 	bl	8005ea8 <USBD_CtlError>
 8005b1c:	e004      	b.n	8005b28 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f000 fa70 	bl	8006004 <USBD_CtlSendStatus>
 8005b24:	e000      	b.n	8005b28 <USBD_GetDescriptor+0x2cc>
    return;
 8005b26:	bf00      	nop
    }
  }
}
 8005b28:	3710      	adds	r7, #16
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}
 8005b2e:	bf00      	nop

08005b30 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b084      	sub	sp, #16
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
 8005b38:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	889b      	ldrh	r3, [r3, #4]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d130      	bne.n	8005ba4 <USBD_SetAddress+0x74>
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	88db      	ldrh	r3, [r3, #6]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d12c      	bne.n	8005ba4 <USBD_SetAddress+0x74>
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	885b      	ldrh	r3, [r3, #2]
 8005b4e:	2b7f      	cmp	r3, #127	; 0x7f
 8005b50:	d828      	bhi.n	8005ba4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	885b      	ldrh	r3, [r3, #2]
 8005b56:	b2db      	uxtb	r3, r3
 8005b58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b5c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b64:	2b03      	cmp	r3, #3
 8005b66:	d104      	bne.n	8005b72 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8005b68:	6839      	ldr	r1, [r7, #0]
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	f000 f99c 	bl	8005ea8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b70:	e01c      	b.n	8005bac <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	7bfa      	ldrb	r2, [r7, #15]
 8005b76:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005b7a:	7bfb      	ldrb	r3, [r7, #15]
 8005b7c:	4619      	mov	r1, r3
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f000 fdec 	bl	800675c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8005b84:	6878      	ldr	r0, [r7, #4]
 8005b86:	f000 fa3d 	bl	8006004 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005b8a:	7bfb      	ldrb	r3, [r7, #15]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d004      	beq.n	8005b9a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2202      	movs	r2, #2
 8005b94:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b98:	e008      	b.n	8005bac <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2201      	movs	r2, #1
 8005b9e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ba2:	e003      	b.n	8005bac <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005ba4:	6839      	ldr	r1, [r7, #0]
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f000 f97e 	bl	8005ea8 <USBD_CtlError>
  }
}
 8005bac:	bf00      	nop
 8005bae:	3710      	adds	r7, #16
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd80      	pop	{r7, pc}

08005bb4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b084      	sub	sp, #16
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
 8005bbc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	885b      	ldrh	r3, [r3, #2]
 8005bc6:	b2da      	uxtb	r2, r3
 8005bc8:	4b4b      	ldr	r3, [pc, #300]	; (8005cf8 <USBD_SetConfig+0x144>)
 8005bca:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005bcc:	4b4a      	ldr	r3, [pc, #296]	; (8005cf8 <USBD_SetConfig+0x144>)
 8005bce:	781b      	ldrb	r3, [r3, #0]
 8005bd0:	2b01      	cmp	r3, #1
 8005bd2:	d905      	bls.n	8005be0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8005bd4:	6839      	ldr	r1, [r7, #0]
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f000 f966 	bl	8005ea8 <USBD_CtlError>
    return USBD_FAIL;
 8005bdc:	2303      	movs	r3, #3
 8005bde:	e087      	b.n	8005cf0 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005be6:	2b02      	cmp	r3, #2
 8005be8:	d002      	beq.n	8005bf0 <USBD_SetConfig+0x3c>
 8005bea:	2b03      	cmp	r3, #3
 8005bec:	d025      	beq.n	8005c3a <USBD_SetConfig+0x86>
 8005bee:	e071      	b.n	8005cd4 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8005bf0:	4b41      	ldr	r3, [pc, #260]	; (8005cf8 <USBD_SetConfig+0x144>)
 8005bf2:	781b      	ldrb	r3, [r3, #0]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d01c      	beq.n	8005c32 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8005bf8:	4b3f      	ldr	r3, [pc, #252]	; (8005cf8 <USBD_SetConfig+0x144>)
 8005bfa:	781b      	ldrb	r3, [r3, #0]
 8005bfc:	461a      	mov	r2, r3
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8005c02:	4b3d      	ldr	r3, [pc, #244]	; (8005cf8 <USBD_SetConfig+0x144>)
 8005c04:	781b      	ldrb	r3, [r3, #0]
 8005c06:	4619      	mov	r1, r3
 8005c08:	6878      	ldr	r0, [r7, #4]
 8005c0a:	f7ff f9a7 	bl	8004f5c <USBD_SetClassConfig>
 8005c0e:	4603      	mov	r3, r0
 8005c10:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8005c12:	7bfb      	ldrb	r3, [r7, #15]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d004      	beq.n	8005c22 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8005c18:	6839      	ldr	r1, [r7, #0]
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f000 f944 	bl	8005ea8 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8005c20:	e065      	b.n	8005cee <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f000 f9ee 	bl	8006004 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2203      	movs	r2, #3
 8005c2c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8005c30:	e05d      	b.n	8005cee <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	f000 f9e6 	bl	8006004 <USBD_CtlSendStatus>
    break;
 8005c38:	e059      	b.n	8005cee <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8005c3a:	4b2f      	ldr	r3, [pc, #188]	; (8005cf8 <USBD_SetConfig+0x144>)
 8005c3c:	781b      	ldrb	r3, [r3, #0]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d112      	bne.n	8005c68 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2202      	movs	r2, #2
 8005c46:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8005c4a:	4b2b      	ldr	r3, [pc, #172]	; (8005cf8 <USBD_SetConfig+0x144>)
 8005c4c:	781b      	ldrb	r3, [r3, #0]
 8005c4e:	461a      	mov	r2, r3
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005c54:	4b28      	ldr	r3, [pc, #160]	; (8005cf8 <USBD_SetConfig+0x144>)
 8005c56:	781b      	ldrb	r3, [r3, #0]
 8005c58:	4619      	mov	r1, r3
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	f7ff f99a 	bl	8004f94 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8005c60:	6878      	ldr	r0, [r7, #4]
 8005c62:	f000 f9cf 	bl	8006004 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8005c66:	e042      	b.n	8005cee <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8005c68:	4b23      	ldr	r3, [pc, #140]	; (8005cf8 <USBD_SetConfig+0x144>)
 8005c6a:	781b      	ldrb	r3, [r3, #0]
 8005c6c:	461a      	mov	r2, r3
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	429a      	cmp	r2, r3
 8005c74:	d02a      	beq.n	8005ccc <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	b2db      	uxtb	r3, r3
 8005c7c:	4619      	mov	r1, r3
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	f7ff f988 	bl	8004f94 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8005c84:	4b1c      	ldr	r3, [pc, #112]	; (8005cf8 <USBD_SetConfig+0x144>)
 8005c86:	781b      	ldrb	r3, [r3, #0]
 8005c88:	461a      	mov	r2, r3
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8005c8e:	4b1a      	ldr	r3, [pc, #104]	; (8005cf8 <USBD_SetConfig+0x144>)
 8005c90:	781b      	ldrb	r3, [r3, #0]
 8005c92:	4619      	mov	r1, r3
 8005c94:	6878      	ldr	r0, [r7, #4]
 8005c96:	f7ff f961 	bl	8004f5c <USBD_SetClassConfig>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8005c9e:	7bfb      	ldrb	r3, [r7, #15]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d00f      	beq.n	8005cc4 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8005ca4:	6839      	ldr	r1, [r7, #0]
 8005ca6:	6878      	ldr	r0, [r7, #4]
 8005ca8:	f000 f8fe 	bl	8005ea8 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	b2db      	uxtb	r3, r3
 8005cb2:	4619      	mov	r1, r3
 8005cb4:	6878      	ldr	r0, [r7, #4]
 8005cb6:	f7ff f96d 	bl	8004f94 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2202      	movs	r2, #2
 8005cbe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8005cc2:	e014      	b.n	8005cee <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8005cc4:	6878      	ldr	r0, [r7, #4]
 8005cc6:	f000 f99d 	bl	8006004 <USBD_CtlSendStatus>
    break;
 8005cca:	e010      	b.n	8005cee <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	f000 f999 	bl	8006004 <USBD_CtlSendStatus>
    break;
 8005cd2:	e00c      	b.n	8005cee <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8005cd4:	6839      	ldr	r1, [r7, #0]
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f000 f8e6 	bl	8005ea8 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005cdc:	4b06      	ldr	r3, [pc, #24]	; (8005cf8 <USBD_SetConfig+0x144>)
 8005cde:	781b      	ldrb	r3, [r3, #0]
 8005ce0:	4619      	mov	r1, r3
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f7ff f956 	bl	8004f94 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8005ce8:	2303      	movs	r3, #3
 8005cea:	73fb      	strb	r3, [r7, #15]
    break;
 8005cec:	bf00      	nop
  }

  return ret;
 8005cee:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	3710      	adds	r7, #16
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bd80      	pop	{r7, pc}
 8005cf8:	20000260 	.word	0x20000260

08005cfc <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b082      	sub	sp, #8
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
 8005d04:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	88db      	ldrh	r3, [r3, #6]
 8005d0a:	2b01      	cmp	r3, #1
 8005d0c:	d004      	beq.n	8005d18 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8005d0e:	6839      	ldr	r1, [r7, #0]
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	f000 f8c9 	bl	8005ea8 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8005d16:	e021      	b.n	8005d5c <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d1e:	2b01      	cmp	r3, #1
 8005d20:	db17      	blt.n	8005d52 <USBD_GetConfig+0x56>
 8005d22:	2b02      	cmp	r3, #2
 8005d24:	dd02      	ble.n	8005d2c <USBD_GetConfig+0x30>
 8005d26:	2b03      	cmp	r3, #3
 8005d28:	d00b      	beq.n	8005d42 <USBD_GetConfig+0x46>
 8005d2a:	e012      	b.n	8005d52 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2200      	movs	r2, #0
 8005d30:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	3308      	adds	r3, #8
 8005d36:	2201      	movs	r2, #1
 8005d38:	4619      	mov	r1, r3
 8005d3a:	6878      	ldr	r0, [r7, #4]
 8005d3c:	f000 f925 	bl	8005f8a <USBD_CtlSendData>
      break;
 8005d40:	e00c      	b.n	8005d5c <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	3304      	adds	r3, #4
 8005d46:	2201      	movs	r2, #1
 8005d48:	4619      	mov	r1, r3
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	f000 f91d 	bl	8005f8a <USBD_CtlSendData>
      break;
 8005d50:	e004      	b.n	8005d5c <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8005d52:	6839      	ldr	r1, [r7, #0]
 8005d54:	6878      	ldr	r0, [r7, #4]
 8005d56:	f000 f8a7 	bl	8005ea8 <USBD_CtlError>
      break;
 8005d5a:	bf00      	nop
}
 8005d5c:	bf00      	nop
 8005d5e:	3708      	adds	r7, #8
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bd80      	pop	{r7, pc}

08005d64 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b082      	sub	sp, #8
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
 8005d6c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d74:	3b01      	subs	r3, #1
 8005d76:	2b02      	cmp	r3, #2
 8005d78:	d81e      	bhi.n	8005db8 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	88db      	ldrh	r3, [r3, #6]
 8005d7e:	2b02      	cmp	r3, #2
 8005d80:	d004      	beq.n	8005d8c <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8005d82:	6839      	ldr	r1, [r7, #0]
 8005d84:	6878      	ldr	r0, [r7, #4]
 8005d86:	f000 f88f 	bl	8005ea8 <USBD_CtlError>
      break;
 8005d8a:	e01a      	b.n	8005dc2 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2201      	movs	r2, #1
 8005d90:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d005      	beq.n	8005da8 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	68db      	ldr	r3, [r3, #12]
 8005da0:	f043 0202 	orr.w	r2, r3, #2
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	330c      	adds	r3, #12
 8005dac:	2202      	movs	r2, #2
 8005dae:	4619      	mov	r1, r3
 8005db0:	6878      	ldr	r0, [r7, #4]
 8005db2:	f000 f8ea 	bl	8005f8a <USBD_CtlSendData>
    break;
 8005db6:	e004      	b.n	8005dc2 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8005db8:	6839      	ldr	r1, [r7, #0]
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	f000 f874 	bl	8005ea8 <USBD_CtlError>
    break;
 8005dc0:	bf00      	nop
  }
}
 8005dc2:	bf00      	nop
 8005dc4:	3708      	adds	r7, #8
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}

08005dca <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005dca:	b580      	push	{r7, lr}
 8005dcc:	b082      	sub	sp, #8
 8005dce:	af00      	add	r7, sp, #0
 8005dd0:	6078      	str	r0, [r7, #4]
 8005dd2:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	885b      	ldrh	r3, [r3, #2]
 8005dd8:	2b01      	cmp	r3, #1
 8005dda:	d106      	bne.n	8005dea <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2201      	movs	r2, #1
 8005de0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	f000 f90d 	bl	8006004 <USBD_CtlSendStatus>
  }
}
 8005dea:	bf00      	nop
 8005dec:	3708      	adds	r7, #8
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}

08005df2 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005df2:	b580      	push	{r7, lr}
 8005df4:	b082      	sub	sp, #8
 8005df6:	af00      	add	r7, sp, #0
 8005df8:	6078      	str	r0, [r7, #4]
 8005dfa:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e02:	3b01      	subs	r3, #1
 8005e04:	2b02      	cmp	r3, #2
 8005e06:	d80b      	bhi.n	8005e20 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	885b      	ldrh	r3, [r3, #2]
 8005e0c:	2b01      	cmp	r3, #1
 8005e0e:	d10c      	bne.n	8005e2a <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2200      	movs	r2, #0
 8005e14:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f000 f8f3 	bl	8006004 <USBD_CtlSendStatus>
      }
      break;
 8005e1e:	e004      	b.n	8005e2a <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8005e20:	6839      	ldr	r1, [r7, #0]
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f000 f840 	bl	8005ea8 <USBD_CtlError>
      break;
 8005e28:	e000      	b.n	8005e2c <USBD_ClrFeature+0x3a>
      break;
 8005e2a:	bf00      	nop
  }
}
 8005e2c:	bf00      	nop
 8005e2e:	3708      	adds	r7, #8
 8005e30:	46bd      	mov	sp, r7
 8005e32:	bd80      	pop	{r7, pc}

08005e34 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b084      	sub	sp, #16
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
 8005e3c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	781a      	ldrb	r2, [r3, #0]
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	3301      	adds	r3, #1
 8005e4e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	781a      	ldrb	r2, [r3, #0]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	3301      	adds	r3, #1
 8005e5c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8005e5e:	68f8      	ldr	r0, [r7, #12]
 8005e60:	f7ff fad3 	bl	800540a <SWAPBYTE>
 8005e64:	4603      	mov	r3, r0
 8005e66:	461a      	mov	r2, r3
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	3301      	adds	r3, #1
 8005e70:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	3301      	adds	r3, #1
 8005e76:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8005e78:	68f8      	ldr	r0, [r7, #12]
 8005e7a:	f7ff fac6 	bl	800540a <SWAPBYTE>
 8005e7e:	4603      	mov	r3, r0
 8005e80:	461a      	mov	r2, r3
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	3301      	adds	r3, #1
 8005e8a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	3301      	adds	r3, #1
 8005e90:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8005e92:	68f8      	ldr	r0, [r7, #12]
 8005e94:	f7ff fab9 	bl	800540a <SWAPBYTE>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	461a      	mov	r2, r3
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	80da      	strh	r2, [r3, #6]
}
 8005ea0:	bf00      	nop
 8005ea2:	3710      	adds	r7, #16
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bd80      	pop	{r7, pc}

08005ea8 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b082      	sub	sp, #8
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
 8005eb0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8005eb2:	2180      	movs	r1, #128	; 0x80
 8005eb4:	6878      	ldr	r0, [r7, #4]
 8005eb6:	f000 fbe7 	bl	8006688 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8005eba:	2100      	movs	r1, #0
 8005ebc:	6878      	ldr	r0, [r7, #4]
 8005ebe:	f000 fbe3 	bl	8006688 <USBD_LL_StallEP>
}
 8005ec2:	bf00      	nop
 8005ec4:	3708      	adds	r7, #8
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd80      	pop	{r7, pc}

08005eca <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8005eca:	b580      	push	{r7, lr}
 8005ecc:	b086      	sub	sp, #24
 8005ece:	af00      	add	r7, sp, #0
 8005ed0:	60f8      	str	r0, [r7, #12]
 8005ed2:	60b9      	str	r1, [r7, #8]
 8005ed4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d036      	beq.n	8005f4e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8005ee4:	6938      	ldr	r0, [r7, #16]
 8005ee6:	f000 f836 	bl	8005f56 <USBD_GetLen>
 8005eea:	4603      	mov	r3, r0
 8005eec:	3301      	adds	r3, #1
 8005eee:	b29b      	uxth	r3, r3
 8005ef0:	005b      	lsls	r3, r3, #1
 8005ef2:	b29a      	uxth	r2, r3
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8005ef8:	7dfb      	ldrb	r3, [r7, #23]
 8005efa:	68ba      	ldr	r2, [r7, #8]
 8005efc:	4413      	add	r3, r2
 8005efe:	687a      	ldr	r2, [r7, #4]
 8005f00:	7812      	ldrb	r2, [r2, #0]
 8005f02:	701a      	strb	r2, [r3, #0]
  idx++;
 8005f04:	7dfb      	ldrb	r3, [r7, #23]
 8005f06:	3301      	adds	r3, #1
 8005f08:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8005f0a:	7dfb      	ldrb	r3, [r7, #23]
 8005f0c:	68ba      	ldr	r2, [r7, #8]
 8005f0e:	4413      	add	r3, r2
 8005f10:	2203      	movs	r2, #3
 8005f12:	701a      	strb	r2, [r3, #0]
  idx++;
 8005f14:	7dfb      	ldrb	r3, [r7, #23]
 8005f16:	3301      	adds	r3, #1
 8005f18:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8005f1a:	e013      	b.n	8005f44 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8005f1c:	7dfb      	ldrb	r3, [r7, #23]
 8005f1e:	68ba      	ldr	r2, [r7, #8]
 8005f20:	4413      	add	r3, r2
 8005f22:	693a      	ldr	r2, [r7, #16]
 8005f24:	7812      	ldrb	r2, [r2, #0]
 8005f26:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8005f28:	693b      	ldr	r3, [r7, #16]
 8005f2a:	3301      	adds	r3, #1
 8005f2c:	613b      	str	r3, [r7, #16]
    idx++;
 8005f2e:	7dfb      	ldrb	r3, [r7, #23]
 8005f30:	3301      	adds	r3, #1
 8005f32:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8005f34:	7dfb      	ldrb	r3, [r7, #23]
 8005f36:	68ba      	ldr	r2, [r7, #8]
 8005f38:	4413      	add	r3, r2
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	701a      	strb	r2, [r3, #0]
    idx++;
 8005f3e:	7dfb      	ldrb	r3, [r7, #23]
 8005f40:	3301      	adds	r3, #1
 8005f42:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8005f44:	693b      	ldr	r3, [r7, #16]
 8005f46:	781b      	ldrb	r3, [r3, #0]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d1e7      	bne.n	8005f1c <USBD_GetString+0x52>
 8005f4c:	e000      	b.n	8005f50 <USBD_GetString+0x86>
    return;
 8005f4e:	bf00      	nop
  }
}
 8005f50:	3718      	adds	r7, #24
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bd80      	pop	{r7, pc}

08005f56 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8005f56:	b480      	push	{r7}
 8005f58:	b085      	sub	sp, #20
 8005f5a:	af00      	add	r7, sp, #0
 8005f5c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8005f5e:	2300      	movs	r3, #0
 8005f60:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8005f66:	e005      	b.n	8005f74 <USBD_GetLen+0x1e>
  {
    len++;
 8005f68:	7bfb      	ldrb	r3, [r7, #15]
 8005f6a:	3301      	adds	r3, #1
 8005f6c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	3301      	adds	r3, #1
 8005f72:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	781b      	ldrb	r3, [r3, #0]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d1f5      	bne.n	8005f68 <USBD_GetLen+0x12>
  }

  return len;
 8005f7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f7e:	4618      	mov	r0, r3
 8005f80:	3714      	adds	r7, #20
 8005f82:	46bd      	mov	sp, r7
 8005f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f88:	4770      	bx	lr

08005f8a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8005f8a:	b580      	push	{r7, lr}
 8005f8c:	b084      	sub	sp, #16
 8005f8e:	af00      	add	r7, sp, #0
 8005f90:	60f8      	str	r0, [r7, #12]
 8005f92:	60b9      	str	r1, [r7, #8]
 8005f94:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	2202      	movs	r2, #2
 8005f9a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	687a      	ldr	r2, [r7, #4]
 8005fa2:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	687a      	ldr	r2, [r7, #4]
 8005fa8:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	68ba      	ldr	r2, [r7, #8]
 8005fae:	2100      	movs	r1, #0
 8005fb0:	68f8      	ldr	r0, [r7, #12]
 8005fb2:	f000 fbf2 	bl	800679a <USBD_LL_Transmit>

  return USBD_OK;
 8005fb6:	2300      	movs	r3, #0
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	3710      	adds	r7, #16
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bd80      	pop	{r7, pc}

08005fc0 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b084      	sub	sp, #16
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	60f8      	str	r0, [r7, #12]
 8005fc8:	60b9      	str	r1, [r7, #8]
 8005fca:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	68ba      	ldr	r2, [r7, #8]
 8005fd0:	2100      	movs	r1, #0
 8005fd2:	68f8      	ldr	r0, [r7, #12]
 8005fd4:	f000 fbe1 	bl	800679a <USBD_LL_Transmit>

  return USBD_OK;
 8005fd8:	2300      	movs	r3, #0
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	3710      	adds	r7, #16
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}

08005fe2 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8005fe2:	b580      	push	{r7, lr}
 8005fe4:	b084      	sub	sp, #16
 8005fe6:	af00      	add	r7, sp, #0
 8005fe8:	60f8      	str	r0, [r7, #12]
 8005fea:	60b9      	str	r1, [r7, #8]
 8005fec:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	68ba      	ldr	r2, [r7, #8]
 8005ff2:	2100      	movs	r1, #0
 8005ff4:	68f8      	ldr	r0, [r7, #12]
 8005ff6:	f000 fbf1 	bl	80067dc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005ffa:	2300      	movs	r3, #0
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	3710      	adds	r7, #16
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}

08006004 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b082      	sub	sp, #8
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2204      	movs	r2, #4
 8006010:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006014:	2300      	movs	r3, #0
 8006016:	2200      	movs	r2, #0
 8006018:	2100      	movs	r1, #0
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f000 fbbd 	bl	800679a <USBD_LL_Transmit>

  return USBD_OK;
 8006020:	2300      	movs	r3, #0
}
 8006022:	4618      	mov	r0, r3
 8006024:	3708      	adds	r7, #8
 8006026:	46bd      	mov	sp, r7
 8006028:	bd80      	pop	{r7, pc}

0800602a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800602a:	b580      	push	{r7, lr}
 800602c:	b082      	sub	sp, #8
 800602e:	af00      	add	r7, sp, #0
 8006030:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2205      	movs	r2, #5
 8006036:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800603a:	2300      	movs	r3, #0
 800603c:	2200      	movs	r2, #0
 800603e:	2100      	movs	r1, #0
 8006040:	6878      	ldr	r0, [r7, #4]
 8006042:	f000 fbcb 	bl	80067dc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006046:	2300      	movs	r3, #0
}
 8006048:	4618      	mov	r0, r3
 800604a:	3708      	adds	r7, #8
 800604c:	46bd      	mov	sp, r7
 800604e:	bd80      	pop	{r7, pc}

08006050 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006054:	2200      	movs	r2, #0
 8006056:	490e      	ldr	r1, [pc, #56]	; (8006090 <MX_USB_DEVICE_Init+0x40>)
 8006058:	480e      	ldr	r0, [pc, #56]	; (8006094 <MX_USB_DEVICE_Init+0x44>)
 800605a:	f7fe ff11 	bl	8004e80 <USBD_Init>
 800605e:	4603      	mov	r3, r0
 8006060:	2b00      	cmp	r3, #0
 8006062:	d001      	beq.n	8006068 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006064:	f7fa fe84 	bl	8000d70 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8006068:	490b      	ldr	r1, [pc, #44]	; (8006098 <MX_USB_DEVICE_Init+0x48>)
 800606a:	480a      	ldr	r0, [pc, #40]	; (8006094 <MX_USB_DEVICE_Init+0x44>)
 800606c:	f7fe ff3e 	bl	8004eec <USBD_RegisterClass>
 8006070:	4603      	mov	r3, r0
 8006072:	2b00      	cmp	r3, #0
 8006074:	d001      	beq.n	800607a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006076:	f7fa fe7b 	bl	8000d70 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800607a:	4806      	ldr	r0, [pc, #24]	; (8006094 <MX_USB_DEVICE_Init+0x44>)
 800607c:	f7fe ff57 	bl	8004f2e <USBD_Start>
 8006080:	4603      	mov	r3, r0
 8006082:	2b00      	cmp	r3, #0
 8006084:	d001      	beq.n	800608a <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8006086:	f7fa fe73 	bl	8000d70 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800608a:	bf00      	nop
 800608c:	bd80      	pop	{r7, pc}
 800608e:	bf00      	nop
 8006090:	2000015c 	.word	0x2000015c
 8006094:	20000270 	.word	0x20000270
 8006098:	20000014 	.word	0x20000014

0800609c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800609c:	b480      	push	{r7}
 800609e:	b083      	sub	sp, #12
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	4603      	mov	r3, r0
 80060a4:	6039      	str	r1, [r7, #0]
 80060a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	2212      	movs	r2, #18
 80060ac:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80060ae:	4b03      	ldr	r3, [pc, #12]	; (80060bc <USBD_FS_DeviceDescriptor+0x20>)
}
 80060b0:	4618      	mov	r0, r3
 80060b2:	370c      	adds	r7, #12
 80060b4:	46bd      	mov	sp, r7
 80060b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ba:	4770      	bx	lr
 80060bc:	20000178 	.word	0x20000178

080060c0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b083      	sub	sp, #12
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	4603      	mov	r3, r0
 80060c8:	6039      	str	r1, [r7, #0]
 80060ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	2204      	movs	r2, #4
 80060d0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80060d2:	4b03      	ldr	r3, [pc, #12]	; (80060e0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80060d4:	4618      	mov	r0, r3
 80060d6:	370c      	adds	r7, #12
 80060d8:	46bd      	mov	sp, r7
 80060da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060de:	4770      	bx	lr
 80060e0:	2000018c 	.word	0x2000018c

080060e4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b082      	sub	sp, #8
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	4603      	mov	r3, r0
 80060ec:	6039      	str	r1, [r7, #0]
 80060ee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80060f0:	79fb      	ldrb	r3, [r7, #7]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d105      	bne.n	8006102 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80060f6:	683a      	ldr	r2, [r7, #0]
 80060f8:	4907      	ldr	r1, [pc, #28]	; (8006118 <USBD_FS_ProductStrDescriptor+0x34>)
 80060fa:	4808      	ldr	r0, [pc, #32]	; (800611c <USBD_FS_ProductStrDescriptor+0x38>)
 80060fc:	f7ff fee5 	bl	8005eca <USBD_GetString>
 8006100:	e004      	b.n	800610c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006102:	683a      	ldr	r2, [r7, #0]
 8006104:	4904      	ldr	r1, [pc, #16]	; (8006118 <USBD_FS_ProductStrDescriptor+0x34>)
 8006106:	4805      	ldr	r0, [pc, #20]	; (800611c <USBD_FS_ProductStrDescriptor+0x38>)
 8006108:	f7ff fedf 	bl	8005eca <USBD_GetString>
  }
  return USBD_StrDesc;
 800610c:	4b02      	ldr	r3, [pc, #8]	; (8006118 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800610e:	4618      	mov	r0, r3
 8006110:	3708      	adds	r7, #8
 8006112:	46bd      	mov	sp, r7
 8006114:	bd80      	pop	{r7, pc}
 8006116:	bf00      	nop
 8006118:	20000540 	.word	0x20000540
 800611c:	08006a88 	.word	0x08006a88

08006120 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b082      	sub	sp, #8
 8006124:	af00      	add	r7, sp, #0
 8006126:	4603      	mov	r3, r0
 8006128:	6039      	str	r1, [r7, #0]
 800612a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800612c:	683a      	ldr	r2, [r7, #0]
 800612e:	4904      	ldr	r1, [pc, #16]	; (8006140 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006130:	4804      	ldr	r0, [pc, #16]	; (8006144 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006132:	f7ff feca 	bl	8005eca <USBD_GetString>
  return USBD_StrDesc;
 8006136:	4b02      	ldr	r3, [pc, #8]	; (8006140 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006138:	4618      	mov	r0, r3
 800613a:	3708      	adds	r7, #8
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}
 8006140:	20000540 	.word	0x20000540
 8006144:	08006aa0 	.word	0x08006aa0

08006148 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b082      	sub	sp, #8
 800614c:	af00      	add	r7, sp, #0
 800614e:	4603      	mov	r3, r0
 8006150:	6039      	str	r1, [r7, #0]
 8006152:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	221a      	movs	r2, #26
 8006158:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800615a:	f000 f843 	bl	80061e4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800615e:	4b02      	ldr	r3, [pc, #8]	; (8006168 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006160:	4618      	mov	r0, r3
 8006162:	3708      	adds	r7, #8
 8006164:	46bd      	mov	sp, r7
 8006166:	bd80      	pop	{r7, pc}
 8006168:	20000190 	.word	0x20000190

0800616c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b082      	sub	sp, #8
 8006170:	af00      	add	r7, sp, #0
 8006172:	4603      	mov	r3, r0
 8006174:	6039      	str	r1, [r7, #0]
 8006176:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006178:	79fb      	ldrb	r3, [r7, #7]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d105      	bne.n	800618a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800617e:	683a      	ldr	r2, [r7, #0]
 8006180:	4907      	ldr	r1, [pc, #28]	; (80061a0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006182:	4808      	ldr	r0, [pc, #32]	; (80061a4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006184:	f7ff fea1 	bl	8005eca <USBD_GetString>
 8006188:	e004      	b.n	8006194 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800618a:	683a      	ldr	r2, [r7, #0]
 800618c:	4904      	ldr	r1, [pc, #16]	; (80061a0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800618e:	4805      	ldr	r0, [pc, #20]	; (80061a4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006190:	f7ff fe9b 	bl	8005eca <USBD_GetString>
  }
  return USBD_StrDesc;
 8006194:	4b02      	ldr	r3, [pc, #8]	; (80061a0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006196:	4618      	mov	r0, r3
 8006198:	3708      	adds	r7, #8
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}
 800619e:	bf00      	nop
 80061a0:	20000540 	.word	0x20000540
 80061a4:	08006ab4 	.word	0x08006ab4

080061a8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b082      	sub	sp, #8
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	4603      	mov	r3, r0
 80061b0:	6039      	str	r1, [r7, #0]
 80061b2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80061b4:	79fb      	ldrb	r3, [r7, #7]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d105      	bne.n	80061c6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80061ba:	683a      	ldr	r2, [r7, #0]
 80061bc:	4907      	ldr	r1, [pc, #28]	; (80061dc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80061be:	4808      	ldr	r0, [pc, #32]	; (80061e0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80061c0:	f7ff fe83 	bl	8005eca <USBD_GetString>
 80061c4:	e004      	b.n	80061d0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80061c6:	683a      	ldr	r2, [r7, #0]
 80061c8:	4904      	ldr	r1, [pc, #16]	; (80061dc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80061ca:	4805      	ldr	r0, [pc, #20]	; (80061e0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80061cc:	f7ff fe7d 	bl	8005eca <USBD_GetString>
  }
  return USBD_StrDesc;
 80061d0:	4b02      	ldr	r3, [pc, #8]	; (80061dc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80061d2:	4618      	mov	r0, r3
 80061d4:	3708      	adds	r7, #8
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bd80      	pop	{r7, pc}
 80061da:	bf00      	nop
 80061dc:	20000540 	.word	0x20000540
 80061e0:	08006ac0 	.word	0x08006ac0

080061e4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b084      	sub	sp, #16
 80061e8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80061ea:	4b0f      	ldr	r3, [pc, #60]	; (8006228 <Get_SerialNum+0x44>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80061f0:	4b0e      	ldr	r3, [pc, #56]	; (800622c <Get_SerialNum+0x48>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80061f6:	4b0e      	ldr	r3, [pc, #56]	; (8006230 <Get_SerialNum+0x4c>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80061fc:	68fa      	ldr	r2, [r7, #12]
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	4413      	add	r3, r2
 8006202:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d009      	beq.n	800621e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800620a:	2208      	movs	r2, #8
 800620c:	4909      	ldr	r1, [pc, #36]	; (8006234 <Get_SerialNum+0x50>)
 800620e:	68f8      	ldr	r0, [r7, #12]
 8006210:	f000 f814 	bl	800623c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006214:	2204      	movs	r2, #4
 8006216:	4908      	ldr	r1, [pc, #32]	; (8006238 <Get_SerialNum+0x54>)
 8006218:	68b8      	ldr	r0, [r7, #8]
 800621a:	f000 f80f 	bl	800623c <IntToUnicode>
  }
}
 800621e:	bf00      	nop
 8006220:	3710      	adds	r7, #16
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}
 8006226:	bf00      	nop
 8006228:	1fff7a10 	.word	0x1fff7a10
 800622c:	1fff7a14 	.word	0x1fff7a14
 8006230:	1fff7a18 	.word	0x1fff7a18
 8006234:	20000192 	.word	0x20000192
 8006238:	200001a2 	.word	0x200001a2

0800623c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800623c:	b480      	push	{r7}
 800623e:	b087      	sub	sp, #28
 8006240:	af00      	add	r7, sp, #0
 8006242:	60f8      	str	r0, [r7, #12]
 8006244:	60b9      	str	r1, [r7, #8]
 8006246:	4613      	mov	r3, r2
 8006248:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800624a:	2300      	movs	r3, #0
 800624c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800624e:	2300      	movs	r3, #0
 8006250:	75fb      	strb	r3, [r7, #23]
 8006252:	e027      	b.n	80062a4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	0f1b      	lsrs	r3, r3, #28
 8006258:	2b09      	cmp	r3, #9
 800625a:	d80b      	bhi.n	8006274 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	0f1b      	lsrs	r3, r3, #28
 8006260:	b2da      	uxtb	r2, r3
 8006262:	7dfb      	ldrb	r3, [r7, #23]
 8006264:	005b      	lsls	r3, r3, #1
 8006266:	4619      	mov	r1, r3
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	440b      	add	r3, r1
 800626c:	3230      	adds	r2, #48	; 0x30
 800626e:	b2d2      	uxtb	r2, r2
 8006270:	701a      	strb	r2, [r3, #0]
 8006272:	e00a      	b.n	800628a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	0f1b      	lsrs	r3, r3, #28
 8006278:	b2da      	uxtb	r2, r3
 800627a:	7dfb      	ldrb	r3, [r7, #23]
 800627c:	005b      	lsls	r3, r3, #1
 800627e:	4619      	mov	r1, r3
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	440b      	add	r3, r1
 8006284:	3237      	adds	r2, #55	; 0x37
 8006286:	b2d2      	uxtb	r2, r2
 8006288:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	011b      	lsls	r3, r3, #4
 800628e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006290:	7dfb      	ldrb	r3, [r7, #23]
 8006292:	005b      	lsls	r3, r3, #1
 8006294:	3301      	adds	r3, #1
 8006296:	68ba      	ldr	r2, [r7, #8]
 8006298:	4413      	add	r3, r2
 800629a:	2200      	movs	r2, #0
 800629c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800629e:	7dfb      	ldrb	r3, [r7, #23]
 80062a0:	3301      	adds	r3, #1
 80062a2:	75fb      	strb	r3, [r7, #23]
 80062a4:	7dfa      	ldrb	r2, [r7, #23]
 80062a6:	79fb      	ldrb	r3, [r7, #7]
 80062a8:	429a      	cmp	r2, r3
 80062aa:	d3d3      	bcc.n	8006254 <IntToUnicode+0x18>
  }
}
 80062ac:	bf00      	nop
 80062ae:	371c      	adds	r7, #28
 80062b0:	46bd      	mov	sp, r7
 80062b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b6:	4770      	bx	lr

080062b8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b08a      	sub	sp, #40	; 0x28
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80062c0:	f107 0314 	add.w	r3, r7, #20
 80062c4:	2200      	movs	r2, #0
 80062c6:	601a      	str	r2, [r3, #0]
 80062c8:	605a      	str	r2, [r3, #4]
 80062ca:	609a      	str	r2, [r3, #8]
 80062cc:	60da      	str	r2, [r3, #12]
 80062ce:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80062d8:	d13a      	bne.n	8006350 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80062da:	2300      	movs	r3, #0
 80062dc:	613b      	str	r3, [r7, #16]
 80062de:	4b1e      	ldr	r3, [pc, #120]	; (8006358 <HAL_PCD_MspInit+0xa0>)
 80062e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062e2:	4a1d      	ldr	r2, [pc, #116]	; (8006358 <HAL_PCD_MspInit+0xa0>)
 80062e4:	f043 0301 	orr.w	r3, r3, #1
 80062e8:	6313      	str	r3, [r2, #48]	; 0x30
 80062ea:	4b1b      	ldr	r3, [pc, #108]	; (8006358 <HAL_PCD_MspInit+0xa0>)
 80062ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062ee:	f003 0301 	and.w	r3, r3, #1
 80062f2:	613b      	str	r3, [r7, #16]
 80062f4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80062f6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80062fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80062fc:	2302      	movs	r3, #2
 80062fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006300:	2300      	movs	r3, #0
 8006302:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006304:	2303      	movs	r3, #3
 8006306:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006308:	230a      	movs	r3, #10
 800630a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800630c:	f107 0314 	add.w	r3, r7, #20
 8006310:	4619      	mov	r1, r3
 8006312:	4812      	ldr	r0, [pc, #72]	; (800635c <HAL_PCD_MspInit+0xa4>)
 8006314:	f7fb f9a8 	bl	8001668 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006318:	4b0f      	ldr	r3, [pc, #60]	; (8006358 <HAL_PCD_MspInit+0xa0>)
 800631a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800631c:	4a0e      	ldr	r2, [pc, #56]	; (8006358 <HAL_PCD_MspInit+0xa0>)
 800631e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006322:	6353      	str	r3, [r2, #52]	; 0x34
 8006324:	2300      	movs	r3, #0
 8006326:	60fb      	str	r3, [r7, #12]
 8006328:	4b0b      	ldr	r3, [pc, #44]	; (8006358 <HAL_PCD_MspInit+0xa0>)
 800632a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800632c:	4a0a      	ldr	r2, [pc, #40]	; (8006358 <HAL_PCD_MspInit+0xa0>)
 800632e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006332:	6453      	str	r3, [r2, #68]	; 0x44
 8006334:	4b08      	ldr	r3, [pc, #32]	; (8006358 <HAL_PCD_MspInit+0xa0>)
 8006336:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006338:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800633c:	60fb      	str	r3, [r7, #12]
 800633e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006340:	2200      	movs	r2, #0
 8006342:	2100      	movs	r1, #0
 8006344:	2043      	movs	r0, #67	; 0x43
 8006346:	f7fb f958 	bl	80015fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800634a:	2043      	movs	r0, #67	; 0x43
 800634c:	f7fb f971 	bl	8001632 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006350:	bf00      	nop
 8006352:	3728      	adds	r7, #40	; 0x28
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}
 8006358:	40023800 	.word	0x40023800
 800635c:	40020000 	.word	0x40020000

08006360 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b082      	sub	sp, #8
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006374:	4619      	mov	r1, r3
 8006376:	4610      	mov	r0, r2
 8006378:	f7fe fe24 	bl	8004fc4 <USBD_LL_SetupStage>
}
 800637c:	bf00      	nop
 800637e:	3708      	adds	r7, #8
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}

08006384 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b082      	sub	sp, #8
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
 800638c:	460b      	mov	r3, r1
 800638e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8006396:	78fa      	ldrb	r2, [r7, #3]
 8006398:	6879      	ldr	r1, [r7, #4]
 800639a:	4613      	mov	r3, r2
 800639c:	00db      	lsls	r3, r3, #3
 800639e:	1a9b      	subs	r3, r3, r2
 80063a0:	009b      	lsls	r3, r3, #2
 80063a2:	440b      	add	r3, r1
 80063a4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80063a8:	681a      	ldr	r2, [r3, #0]
 80063aa:	78fb      	ldrb	r3, [r7, #3]
 80063ac:	4619      	mov	r1, r3
 80063ae:	f7fe fe5c 	bl	800506a <USBD_LL_DataOutStage>
}
 80063b2:	bf00      	nop
 80063b4:	3708      	adds	r7, #8
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}

080063ba <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80063ba:	b580      	push	{r7, lr}
 80063bc:	b082      	sub	sp, #8
 80063be:	af00      	add	r7, sp, #0
 80063c0:	6078      	str	r0, [r7, #4]
 80063c2:	460b      	mov	r3, r1
 80063c4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80063cc:	78fa      	ldrb	r2, [r7, #3]
 80063ce:	6879      	ldr	r1, [r7, #4]
 80063d0:	4613      	mov	r3, r2
 80063d2:	00db      	lsls	r3, r3, #3
 80063d4:	1a9b      	subs	r3, r3, r2
 80063d6:	009b      	lsls	r3, r3, #2
 80063d8:	440b      	add	r3, r1
 80063da:	3348      	adds	r3, #72	; 0x48
 80063dc:	681a      	ldr	r2, [r3, #0]
 80063de:	78fb      	ldrb	r3, [r7, #3]
 80063e0:	4619      	mov	r1, r3
 80063e2:	f7fe fea5 	bl	8005130 <USBD_LL_DataInStage>
}
 80063e6:	bf00      	nop
 80063e8:	3708      	adds	r7, #8
 80063ea:	46bd      	mov	sp, r7
 80063ec:	bd80      	pop	{r7, pc}

080063ee <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80063ee:	b580      	push	{r7, lr}
 80063f0:	b082      	sub	sp, #8
 80063f2:	af00      	add	r7, sp, #0
 80063f4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80063fc:	4618      	mov	r0, r3
 80063fe:	f7fe ffa9 	bl	8005354 <USBD_LL_SOF>
}
 8006402:	bf00      	nop
 8006404:	3708      	adds	r7, #8
 8006406:	46bd      	mov	sp, r7
 8006408:	bd80      	pop	{r7, pc}

0800640a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800640a:	b580      	push	{r7, lr}
 800640c:	b084      	sub	sp, #16
 800640e:	af00      	add	r7, sp, #0
 8006410:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006412:	2301      	movs	r3, #1
 8006414:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	68db      	ldr	r3, [r3, #12]
 800641a:	2b02      	cmp	r3, #2
 800641c:	d001      	beq.n	8006422 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800641e:	f7fa fca7 	bl	8000d70 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006428:	7bfa      	ldrb	r2, [r7, #15]
 800642a:	4611      	mov	r1, r2
 800642c:	4618      	mov	r0, r3
 800642e:	f7fe ff56 	bl	80052de <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006438:	4618      	mov	r0, r3
 800643a:	f7fe ff0f 	bl	800525c <USBD_LL_Reset>
}
 800643e:	bf00      	nop
 8006440:	3710      	adds	r7, #16
 8006442:	46bd      	mov	sp, r7
 8006444:	bd80      	pop	{r7, pc}
	...

08006448 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b082      	sub	sp, #8
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006456:	4618      	mov	r0, r3
 8006458:	f7fe ff51 	bl	80052fe <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	687a      	ldr	r2, [r7, #4]
 8006468:	6812      	ldr	r2, [r2, #0]
 800646a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800646e:	f043 0301 	orr.w	r3, r3, #1
 8006472:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6a1b      	ldr	r3, [r3, #32]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d005      	beq.n	8006488 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800647c:	4b04      	ldr	r3, [pc, #16]	; (8006490 <HAL_PCD_SuspendCallback+0x48>)
 800647e:	691b      	ldr	r3, [r3, #16]
 8006480:	4a03      	ldr	r2, [pc, #12]	; (8006490 <HAL_PCD_SuspendCallback+0x48>)
 8006482:	f043 0306 	orr.w	r3, r3, #6
 8006486:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006488:	bf00      	nop
 800648a:	3708      	adds	r7, #8
 800648c:	46bd      	mov	sp, r7
 800648e:	bd80      	pop	{r7, pc}
 8006490:	e000ed00 	.word	0xe000ed00

08006494 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b082      	sub	sp, #8
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80064a2:	4618      	mov	r0, r3
 80064a4:	f7fe ff40 	bl	8005328 <USBD_LL_Resume>
}
 80064a8:	bf00      	nop
 80064aa:	3708      	adds	r7, #8
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bd80      	pop	{r7, pc}

080064b0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b082      	sub	sp, #8
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
 80064b8:	460b      	mov	r3, r1
 80064ba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80064c2:	78fa      	ldrb	r2, [r7, #3]
 80064c4:	4611      	mov	r1, r2
 80064c6:	4618      	mov	r0, r3
 80064c8:	f7fe ff6b 	bl	80053a2 <USBD_LL_IsoOUTIncomplete>
}
 80064cc:	bf00      	nop
 80064ce:	3708      	adds	r7, #8
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bd80      	pop	{r7, pc}

080064d4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b082      	sub	sp, #8
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
 80064dc:	460b      	mov	r3, r1
 80064de:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80064e6:	78fa      	ldrb	r2, [r7, #3]
 80064e8:	4611      	mov	r1, r2
 80064ea:	4618      	mov	r0, r3
 80064ec:	f7fe ff4c 	bl	8005388 <USBD_LL_IsoINIncomplete>
}
 80064f0:	bf00      	nop
 80064f2:	3708      	adds	r7, #8
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bd80      	pop	{r7, pc}

080064f8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b082      	sub	sp, #8
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006506:	4618      	mov	r0, r3
 8006508:	f7fe ff58 	bl	80053bc <USBD_LL_DevConnected>
}
 800650c:	bf00      	nop
 800650e:	3708      	adds	r7, #8
 8006510:	46bd      	mov	sp, r7
 8006512:	bd80      	pop	{r7, pc}

08006514 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b082      	sub	sp, #8
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006522:	4618      	mov	r0, r3
 8006524:	f7fe ff55 	bl	80053d2 <USBD_LL_DevDisconnected>
}
 8006528:	bf00      	nop
 800652a:	3708      	adds	r7, #8
 800652c:	46bd      	mov	sp, r7
 800652e:	bd80      	pop	{r7, pc}

08006530 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b082      	sub	sp, #8
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	781b      	ldrb	r3, [r3, #0]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d13c      	bne.n	80065ba <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8006540:	4a20      	ldr	r2, [pc, #128]	; (80065c4 <USBD_LL_Init+0x94>)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	4a1e      	ldr	r2, [pc, #120]	; (80065c4 <USBD_LL_Init+0x94>)
 800654c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006550:	4b1c      	ldr	r3, [pc, #112]	; (80065c4 <USBD_LL_Init+0x94>)
 8006552:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006556:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8006558:	4b1a      	ldr	r3, [pc, #104]	; (80065c4 <USBD_LL_Init+0x94>)
 800655a:	2204      	movs	r2, #4
 800655c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800655e:	4b19      	ldr	r3, [pc, #100]	; (80065c4 <USBD_LL_Init+0x94>)
 8006560:	2202      	movs	r2, #2
 8006562:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006564:	4b17      	ldr	r3, [pc, #92]	; (80065c4 <USBD_LL_Init+0x94>)
 8006566:	2200      	movs	r2, #0
 8006568:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800656a:	4b16      	ldr	r3, [pc, #88]	; (80065c4 <USBD_LL_Init+0x94>)
 800656c:	2202      	movs	r2, #2
 800656e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006570:	4b14      	ldr	r3, [pc, #80]	; (80065c4 <USBD_LL_Init+0x94>)
 8006572:	2200      	movs	r2, #0
 8006574:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8006576:	4b13      	ldr	r3, [pc, #76]	; (80065c4 <USBD_LL_Init+0x94>)
 8006578:	2200      	movs	r2, #0
 800657a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800657c:	4b11      	ldr	r3, [pc, #68]	; (80065c4 <USBD_LL_Init+0x94>)
 800657e:	2200      	movs	r2, #0
 8006580:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8006582:	4b10      	ldr	r3, [pc, #64]	; (80065c4 <USBD_LL_Init+0x94>)
 8006584:	2200      	movs	r2, #0
 8006586:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006588:	4b0e      	ldr	r3, [pc, #56]	; (80065c4 <USBD_LL_Init+0x94>)
 800658a:	2200      	movs	r2, #0
 800658c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800658e:	480d      	ldr	r0, [pc, #52]	; (80065c4 <USBD_LL_Init+0x94>)
 8006590:	f7fb fa1d 	bl	80019ce <HAL_PCD_Init>
 8006594:	4603      	mov	r3, r0
 8006596:	2b00      	cmp	r3, #0
 8006598:	d001      	beq.n	800659e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800659a:	f7fa fbe9 	bl	8000d70 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800659e:	2180      	movs	r1, #128	; 0x80
 80065a0:	4808      	ldr	r0, [pc, #32]	; (80065c4 <USBD_LL_Init+0x94>)
 80065a2:	f7fc fb62 	bl	8002c6a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80065a6:	2240      	movs	r2, #64	; 0x40
 80065a8:	2100      	movs	r1, #0
 80065aa:	4806      	ldr	r0, [pc, #24]	; (80065c4 <USBD_LL_Init+0x94>)
 80065ac:	f7fc fb16 	bl	8002bdc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80065b0:	2280      	movs	r2, #128	; 0x80
 80065b2:	2101      	movs	r1, #1
 80065b4:	4803      	ldr	r0, [pc, #12]	; (80065c4 <USBD_LL_Init+0x94>)
 80065b6:	f7fc fb11 	bl	8002bdc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80065ba:	2300      	movs	r3, #0
}
 80065bc:	4618      	mov	r0, r3
 80065be:	3708      	adds	r7, #8
 80065c0:	46bd      	mov	sp, r7
 80065c2:	bd80      	pop	{r7, pc}
 80065c4:	20000740 	.word	0x20000740

080065c8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b084      	sub	sp, #16
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80065d0:	2300      	movs	r3, #0
 80065d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80065d4:	2300      	movs	r3, #0
 80065d6:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80065de:	4618      	mov	r0, r3
 80065e0:	f7fb fb12 	bl	8001c08 <HAL_PCD_Start>
 80065e4:	4603      	mov	r3, r0
 80065e6:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 80065e8:	7bfb      	ldrb	r3, [r7, #15]
 80065ea:	4618      	mov	r0, r3
 80065ec:	f000 f918 	bl	8006820 <USBD_Get_USB_Status>
 80065f0:	4603      	mov	r3, r0
 80065f2:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80065f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80065f6:	4618      	mov	r0, r3
 80065f8:	3710      	adds	r7, #16
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}

080065fe <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80065fe:	b580      	push	{r7, lr}
 8006600:	b084      	sub	sp, #16
 8006602:	af00      	add	r7, sp, #0
 8006604:	6078      	str	r0, [r7, #4]
 8006606:	4608      	mov	r0, r1
 8006608:	4611      	mov	r1, r2
 800660a:	461a      	mov	r2, r3
 800660c:	4603      	mov	r3, r0
 800660e:	70fb      	strb	r3, [r7, #3]
 8006610:	460b      	mov	r3, r1
 8006612:	70bb      	strb	r3, [r7, #2]
 8006614:	4613      	mov	r3, r2
 8006616:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006618:	2300      	movs	r3, #0
 800661a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800661c:	2300      	movs	r3, #0
 800661e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006626:	78bb      	ldrb	r3, [r7, #2]
 8006628:	883a      	ldrh	r2, [r7, #0]
 800662a:	78f9      	ldrb	r1, [r7, #3]
 800662c:	f7fb fef6 	bl	800241c <HAL_PCD_EP_Open>
 8006630:	4603      	mov	r3, r0
 8006632:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006634:	7bfb      	ldrb	r3, [r7, #15]
 8006636:	4618      	mov	r0, r3
 8006638:	f000 f8f2 	bl	8006820 <USBD_Get_USB_Status>
 800663c:	4603      	mov	r3, r0
 800663e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8006640:	7bbb      	ldrb	r3, [r7, #14]
}
 8006642:	4618      	mov	r0, r3
 8006644:	3710      	adds	r7, #16
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}

0800664a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800664a:	b580      	push	{r7, lr}
 800664c:	b084      	sub	sp, #16
 800664e:	af00      	add	r7, sp, #0
 8006650:	6078      	str	r0, [r7, #4]
 8006652:	460b      	mov	r3, r1
 8006654:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006656:	2300      	movs	r3, #0
 8006658:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800665a:	2300      	movs	r3, #0
 800665c:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006664:	78fa      	ldrb	r2, [r7, #3]
 8006666:	4611      	mov	r1, r2
 8006668:	4618      	mov	r0, r3
 800666a:	f7fb ff3f 	bl	80024ec <HAL_PCD_EP_Close>
 800666e:	4603      	mov	r3, r0
 8006670:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 8006672:	7bfb      	ldrb	r3, [r7, #15]
 8006674:	4618      	mov	r0, r3
 8006676:	f000 f8d3 	bl	8006820 <USBD_Get_USB_Status>
 800667a:	4603      	mov	r3, r0
 800667c:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800667e:	7bbb      	ldrb	r3, [r7, #14]
}
 8006680:	4618      	mov	r0, r3
 8006682:	3710      	adds	r7, #16
 8006684:	46bd      	mov	sp, r7
 8006686:	bd80      	pop	{r7, pc}

08006688 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b084      	sub	sp, #16
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
 8006690:	460b      	mov	r3, r1
 8006692:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006694:	2300      	movs	r3, #0
 8006696:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006698:	2300      	movs	r3, #0
 800669a:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80066a2:	78fa      	ldrb	r2, [r7, #3]
 80066a4:	4611      	mov	r1, r2
 80066a6:	4618      	mov	r0, r3
 80066a8:	f7fb ffff 	bl	80026aa <HAL_PCD_EP_SetStall>
 80066ac:	4603      	mov	r3, r0
 80066ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80066b0:	7bfb      	ldrb	r3, [r7, #15]
 80066b2:	4618      	mov	r0, r3
 80066b4:	f000 f8b4 	bl	8006820 <USBD_Get_USB_Status>
 80066b8:	4603      	mov	r3, r0
 80066ba:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 80066bc:	7bbb      	ldrb	r3, [r7, #14]
}
 80066be:	4618      	mov	r0, r3
 80066c0:	3710      	adds	r7, #16
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd80      	pop	{r7, pc}

080066c6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80066c6:	b580      	push	{r7, lr}
 80066c8:	b084      	sub	sp, #16
 80066ca:	af00      	add	r7, sp, #0
 80066cc:	6078      	str	r0, [r7, #4]
 80066ce:	460b      	mov	r3, r1
 80066d0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80066d2:	2300      	movs	r3, #0
 80066d4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80066d6:	2300      	movs	r3, #0
 80066d8:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80066e0:	78fa      	ldrb	r2, [r7, #3]
 80066e2:	4611      	mov	r1, r2
 80066e4:	4618      	mov	r0, r3
 80066e6:	f7fc f844 	bl	8002772 <HAL_PCD_EP_ClrStall>
 80066ea:	4603      	mov	r3, r0
 80066ec:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 80066ee:	7bfb      	ldrb	r3, [r7, #15]
 80066f0:	4618      	mov	r0, r3
 80066f2:	f000 f895 	bl	8006820 <USBD_Get_USB_Status>
 80066f6:	4603      	mov	r3, r0
 80066f8:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 80066fa:	7bbb      	ldrb	r3, [r7, #14]
}
 80066fc:	4618      	mov	r0, r3
 80066fe:	3710      	adds	r7, #16
 8006700:	46bd      	mov	sp, r7
 8006702:	bd80      	pop	{r7, pc}

08006704 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006704:	b480      	push	{r7}
 8006706:	b085      	sub	sp, #20
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
 800670c:	460b      	mov	r3, r1
 800670e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006716:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8006718:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800671c:	2b00      	cmp	r3, #0
 800671e:	da0b      	bge.n	8006738 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8006720:	78fb      	ldrb	r3, [r7, #3]
 8006722:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006726:	68f9      	ldr	r1, [r7, #12]
 8006728:	4613      	mov	r3, r2
 800672a:	00db      	lsls	r3, r3, #3
 800672c:	1a9b      	subs	r3, r3, r2
 800672e:	009b      	lsls	r3, r3, #2
 8006730:	440b      	add	r3, r1
 8006732:	333e      	adds	r3, #62	; 0x3e
 8006734:	781b      	ldrb	r3, [r3, #0]
 8006736:	e00b      	b.n	8006750 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8006738:	78fb      	ldrb	r3, [r7, #3]
 800673a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800673e:	68f9      	ldr	r1, [r7, #12]
 8006740:	4613      	mov	r3, r2
 8006742:	00db      	lsls	r3, r3, #3
 8006744:	1a9b      	subs	r3, r3, r2
 8006746:	009b      	lsls	r3, r3, #2
 8006748:	440b      	add	r3, r1
 800674a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800674e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006750:	4618      	mov	r0, r3
 8006752:	3714      	adds	r7, #20
 8006754:	46bd      	mov	sp, r7
 8006756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675a:	4770      	bx	lr

0800675c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b084      	sub	sp, #16
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
 8006764:	460b      	mov	r3, r1
 8006766:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006768:	2300      	movs	r3, #0
 800676a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800676c:	2300      	movs	r3, #0
 800676e:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006776:	78fa      	ldrb	r2, [r7, #3]
 8006778:	4611      	mov	r1, r2
 800677a:	4618      	mov	r0, r3
 800677c:	f7fb fe29 	bl	80023d2 <HAL_PCD_SetAddress>
 8006780:	4603      	mov	r3, r0
 8006782:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006784:	7bfb      	ldrb	r3, [r7, #15]
 8006786:	4618      	mov	r0, r3
 8006788:	f000 f84a 	bl	8006820 <USBD_Get_USB_Status>
 800678c:	4603      	mov	r3, r0
 800678e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8006790:	7bbb      	ldrb	r3, [r7, #14]
}
 8006792:	4618      	mov	r0, r3
 8006794:	3710      	adds	r7, #16
 8006796:	46bd      	mov	sp, r7
 8006798:	bd80      	pop	{r7, pc}

0800679a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800679a:	b580      	push	{r7, lr}
 800679c:	b086      	sub	sp, #24
 800679e:	af00      	add	r7, sp, #0
 80067a0:	60f8      	str	r0, [r7, #12]
 80067a2:	607a      	str	r2, [r7, #4]
 80067a4:	603b      	str	r3, [r7, #0]
 80067a6:	460b      	mov	r3, r1
 80067a8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80067aa:	2300      	movs	r3, #0
 80067ac:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80067ae:	2300      	movs	r3, #0
 80067b0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80067b8:	7af9      	ldrb	r1, [r7, #11]
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	687a      	ldr	r2, [r7, #4]
 80067be:	f7fb ff2a 	bl	8002616 <HAL_PCD_EP_Transmit>
 80067c2:	4603      	mov	r3, r0
 80067c4:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 80067c6:	7dfb      	ldrb	r3, [r7, #23]
 80067c8:	4618      	mov	r0, r3
 80067ca:	f000 f829 	bl	8006820 <USBD_Get_USB_Status>
 80067ce:	4603      	mov	r3, r0
 80067d0:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 80067d2:	7dbb      	ldrb	r3, [r7, #22]
}
 80067d4:	4618      	mov	r0, r3
 80067d6:	3718      	adds	r7, #24
 80067d8:	46bd      	mov	sp, r7
 80067da:	bd80      	pop	{r7, pc}

080067dc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b086      	sub	sp, #24
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	60f8      	str	r0, [r7, #12]
 80067e4:	607a      	str	r2, [r7, #4]
 80067e6:	603b      	str	r3, [r7, #0]
 80067e8:	460b      	mov	r3, r1
 80067ea:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80067ec:	2300      	movs	r3, #0
 80067ee:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80067f0:	2300      	movs	r3, #0
 80067f2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80067fa:	7af9      	ldrb	r1, [r7, #11]
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	687a      	ldr	r2, [r7, #4]
 8006800:	f7fb febe 	bl	8002580 <HAL_PCD_EP_Receive>
 8006804:	4603      	mov	r3, r0
 8006806:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 8006808:	7dfb      	ldrb	r3, [r7, #23]
 800680a:	4618      	mov	r0, r3
 800680c:	f000 f808 	bl	8006820 <USBD_Get_USB_Status>
 8006810:	4603      	mov	r3, r0
 8006812:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 8006814:	7dbb      	ldrb	r3, [r7, #22]
}
 8006816:	4618      	mov	r0, r3
 8006818:	3718      	adds	r7, #24
 800681a:	46bd      	mov	sp, r7
 800681c:	bd80      	pop	{r7, pc}
	...

08006820 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006820:	b480      	push	{r7}
 8006822:	b085      	sub	sp, #20
 8006824:	af00      	add	r7, sp, #0
 8006826:	4603      	mov	r3, r0
 8006828:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800682a:	2300      	movs	r3, #0
 800682c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800682e:	79fb      	ldrb	r3, [r7, #7]
 8006830:	2b03      	cmp	r3, #3
 8006832:	d817      	bhi.n	8006864 <USBD_Get_USB_Status+0x44>
 8006834:	a201      	add	r2, pc, #4	; (adr r2, 800683c <USBD_Get_USB_Status+0x1c>)
 8006836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800683a:	bf00      	nop
 800683c:	0800684d 	.word	0x0800684d
 8006840:	08006853 	.word	0x08006853
 8006844:	08006859 	.word	0x08006859
 8006848:	0800685f 	.word	0x0800685f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800684c:	2300      	movs	r3, #0
 800684e:	73fb      	strb	r3, [r7, #15]
    break;
 8006850:	e00b      	b.n	800686a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006852:	2303      	movs	r3, #3
 8006854:	73fb      	strb	r3, [r7, #15]
    break;
 8006856:	e008      	b.n	800686a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006858:	2301      	movs	r3, #1
 800685a:	73fb      	strb	r3, [r7, #15]
    break;
 800685c:	e005      	b.n	800686a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800685e:	2303      	movs	r3, #3
 8006860:	73fb      	strb	r3, [r7, #15]
    break;
 8006862:	e002      	b.n	800686a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8006864:	2303      	movs	r3, #3
 8006866:	73fb      	strb	r3, [r7, #15]
    break;
 8006868:	bf00      	nop
  }
  return usb_status;
 800686a:	7bfb      	ldrb	r3, [r7, #15]
}
 800686c:	4618      	mov	r0, r3
 800686e:	3714      	adds	r7, #20
 8006870:	46bd      	mov	sp, r7
 8006872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006876:	4770      	bx	lr

08006878 <__errno>:
 8006878:	4b01      	ldr	r3, [pc, #4]	; (8006880 <__errno+0x8>)
 800687a:	6818      	ldr	r0, [r3, #0]
 800687c:	4770      	bx	lr
 800687e:	bf00      	nop
 8006880:	200001ac 	.word	0x200001ac

08006884 <__libc_init_array>:
 8006884:	b570      	push	{r4, r5, r6, lr}
 8006886:	4e0d      	ldr	r6, [pc, #52]	; (80068bc <__libc_init_array+0x38>)
 8006888:	4c0d      	ldr	r4, [pc, #52]	; (80068c0 <__libc_init_array+0x3c>)
 800688a:	1ba4      	subs	r4, r4, r6
 800688c:	10a4      	asrs	r4, r4, #2
 800688e:	2500      	movs	r5, #0
 8006890:	42a5      	cmp	r5, r4
 8006892:	d109      	bne.n	80068a8 <__libc_init_array+0x24>
 8006894:	4e0b      	ldr	r6, [pc, #44]	; (80068c4 <__libc_init_array+0x40>)
 8006896:	4c0c      	ldr	r4, [pc, #48]	; (80068c8 <__libc_init_array+0x44>)
 8006898:	f000 f8ea 	bl	8006a70 <_init>
 800689c:	1ba4      	subs	r4, r4, r6
 800689e:	10a4      	asrs	r4, r4, #2
 80068a0:	2500      	movs	r5, #0
 80068a2:	42a5      	cmp	r5, r4
 80068a4:	d105      	bne.n	80068b2 <__libc_init_array+0x2e>
 80068a6:	bd70      	pop	{r4, r5, r6, pc}
 80068a8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80068ac:	4798      	blx	r3
 80068ae:	3501      	adds	r5, #1
 80068b0:	e7ee      	b.n	8006890 <__libc_init_array+0xc>
 80068b2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80068b6:	4798      	blx	r3
 80068b8:	3501      	adds	r5, #1
 80068ba:	e7f2      	b.n	80068a2 <__libc_init_array+0x1e>
 80068bc:	08006b74 	.word	0x08006b74
 80068c0:	08006b74 	.word	0x08006b74
 80068c4:	08006b74 	.word	0x08006b74
 80068c8:	08006b78 	.word	0x08006b78

080068cc <malloc>:
 80068cc:	4b02      	ldr	r3, [pc, #8]	; (80068d8 <malloc+0xc>)
 80068ce:	4601      	mov	r1, r0
 80068d0:	6818      	ldr	r0, [r3, #0]
 80068d2:	f000 b861 	b.w	8006998 <_malloc_r>
 80068d6:	bf00      	nop
 80068d8:	200001ac 	.word	0x200001ac

080068dc <free>:
 80068dc:	4b02      	ldr	r3, [pc, #8]	; (80068e8 <free+0xc>)
 80068de:	4601      	mov	r1, r0
 80068e0:	6818      	ldr	r0, [r3, #0]
 80068e2:	f000 b80b 	b.w	80068fc <_free_r>
 80068e6:	bf00      	nop
 80068e8:	200001ac 	.word	0x200001ac

080068ec <memset>:
 80068ec:	4402      	add	r2, r0
 80068ee:	4603      	mov	r3, r0
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d100      	bne.n	80068f6 <memset+0xa>
 80068f4:	4770      	bx	lr
 80068f6:	f803 1b01 	strb.w	r1, [r3], #1
 80068fa:	e7f9      	b.n	80068f0 <memset+0x4>

080068fc <_free_r>:
 80068fc:	b538      	push	{r3, r4, r5, lr}
 80068fe:	4605      	mov	r5, r0
 8006900:	2900      	cmp	r1, #0
 8006902:	d045      	beq.n	8006990 <_free_r+0x94>
 8006904:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006908:	1f0c      	subs	r4, r1, #4
 800690a:	2b00      	cmp	r3, #0
 800690c:	bfb8      	it	lt
 800690e:	18e4      	addlt	r4, r4, r3
 8006910:	f000 f8ac 	bl	8006a6c <__malloc_lock>
 8006914:	4a1f      	ldr	r2, [pc, #124]	; (8006994 <_free_r+0x98>)
 8006916:	6813      	ldr	r3, [r2, #0]
 8006918:	4610      	mov	r0, r2
 800691a:	b933      	cbnz	r3, 800692a <_free_r+0x2e>
 800691c:	6063      	str	r3, [r4, #4]
 800691e:	6014      	str	r4, [r2, #0]
 8006920:	4628      	mov	r0, r5
 8006922:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006926:	f000 b8a2 	b.w	8006a6e <__malloc_unlock>
 800692a:	42a3      	cmp	r3, r4
 800692c:	d90c      	bls.n	8006948 <_free_r+0x4c>
 800692e:	6821      	ldr	r1, [r4, #0]
 8006930:	1862      	adds	r2, r4, r1
 8006932:	4293      	cmp	r3, r2
 8006934:	bf04      	itt	eq
 8006936:	681a      	ldreq	r2, [r3, #0]
 8006938:	685b      	ldreq	r3, [r3, #4]
 800693a:	6063      	str	r3, [r4, #4]
 800693c:	bf04      	itt	eq
 800693e:	1852      	addeq	r2, r2, r1
 8006940:	6022      	streq	r2, [r4, #0]
 8006942:	6004      	str	r4, [r0, #0]
 8006944:	e7ec      	b.n	8006920 <_free_r+0x24>
 8006946:	4613      	mov	r3, r2
 8006948:	685a      	ldr	r2, [r3, #4]
 800694a:	b10a      	cbz	r2, 8006950 <_free_r+0x54>
 800694c:	42a2      	cmp	r2, r4
 800694e:	d9fa      	bls.n	8006946 <_free_r+0x4a>
 8006950:	6819      	ldr	r1, [r3, #0]
 8006952:	1858      	adds	r0, r3, r1
 8006954:	42a0      	cmp	r0, r4
 8006956:	d10b      	bne.n	8006970 <_free_r+0x74>
 8006958:	6820      	ldr	r0, [r4, #0]
 800695a:	4401      	add	r1, r0
 800695c:	1858      	adds	r0, r3, r1
 800695e:	4282      	cmp	r2, r0
 8006960:	6019      	str	r1, [r3, #0]
 8006962:	d1dd      	bne.n	8006920 <_free_r+0x24>
 8006964:	6810      	ldr	r0, [r2, #0]
 8006966:	6852      	ldr	r2, [r2, #4]
 8006968:	605a      	str	r2, [r3, #4]
 800696a:	4401      	add	r1, r0
 800696c:	6019      	str	r1, [r3, #0]
 800696e:	e7d7      	b.n	8006920 <_free_r+0x24>
 8006970:	d902      	bls.n	8006978 <_free_r+0x7c>
 8006972:	230c      	movs	r3, #12
 8006974:	602b      	str	r3, [r5, #0]
 8006976:	e7d3      	b.n	8006920 <_free_r+0x24>
 8006978:	6820      	ldr	r0, [r4, #0]
 800697a:	1821      	adds	r1, r4, r0
 800697c:	428a      	cmp	r2, r1
 800697e:	bf04      	itt	eq
 8006980:	6811      	ldreq	r1, [r2, #0]
 8006982:	6852      	ldreq	r2, [r2, #4]
 8006984:	6062      	str	r2, [r4, #4]
 8006986:	bf04      	itt	eq
 8006988:	1809      	addeq	r1, r1, r0
 800698a:	6021      	streq	r1, [r4, #0]
 800698c:	605c      	str	r4, [r3, #4]
 800698e:	e7c7      	b.n	8006920 <_free_r+0x24>
 8006990:	bd38      	pop	{r3, r4, r5, pc}
 8006992:	bf00      	nop
 8006994:	20000264 	.word	0x20000264

08006998 <_malloc_r>:
 8006998:	b570      	push	{r4, r5, r6, lr}
 800699a:	1ccd      	adds	r5, r1, #3
 800699c:	f025 0503 	bic.w	r5, r5, #3
 80069a0:	3508      	adds	r5, #8
 80069a2:	2d0c      	cmp	r5, #12
 80069a4:	bf38      	it	cc
 80069a6:	250c      	movcc	r5, #12
 80069a8:	2d00      	cmp	r5, #0
 80069aa:	4606      	mov	r6, r0
 80069ac:	db01      	blt.n	80069b2 <_malloc_r+0x1a>
 80069ae:	42a9      	cmp	r1, r5
 80069b0:	d903      	bls.n	80069ba <_malloc_r+0x22>
 80069b2:	230c      	movs	r3, #12
 80069b4:	6033      	str	r3, [r6, #0]
 80069b6:	2000      	movs	r0, #0
 80069b8:	bd70      	pop	{r4, r5, r6, pc}
 80069ba:	f000 f857 	bl	8006a6c <__malloc_lock>
 80069be:	4a21      	ldr	r2, [pc, #132]	; (8006a44 <_malloc_r+0xac>)
 80069c0:	6814      	ldr	r4, [r2, #0]
 80069c2:	4621      	mov	r1, r4
 80069c4:	b991      	cbnz	r1, 80069ec <_malloc_r+0x54>
 80069c6:	4c20      	ldr	r4, [pc, #128]	; (8006a48 <_malloc_r+0xb0>)
 80069c8:	6823      	ldr	r3, [r4, #0]
 80069ca:	b91b      	cbnz	r3, 80069d4 <_malloc_r+0x3c>
 80069cc:	4630      	mov	r0, r6
 80069ce:	f000 f83d 	bl	8006a4c <_sbrk_r>
 80069d2:	6020      	str	r0, [r4, #0]
 80069d4:	4629      	mov	r1, r5
 80069d6:	4630      	mov	r0, r6
 80069d8:	f000 f838 	bl	8006a4c <_sbrk_r>
 80069dc:	1c43      	adds	r3, r0, #1
 80069de:	d124      	bne.n	8006a2a <_malloc_r+0x92>
 80069e0:	230c      	movs	r3, #12
 80069e2:	6033      	str	r3, [r6, #0]
 80069e4:	4630      	mov	r0, r6
 80069e6:	f000 f842 	bl	8006a6e <__malloc_unlock>
 80069ea:	e7e4      	b.n	80069b6 <_malloc_r+0x1e>
 80069ec:	680b      	ldr	r3, [r1, #0]
 80069ee:	1b5b      	subs	r3, r3, r5
 80069f0:	d418      	bmi.n	8006a24 <_malloc_r+0x8c>
 80069f2:	2b0b      	cmp	r3, #11
 80069f4:	d90f      	bls.n	8006a16 <_malloc_r+0x7e>
 80069f6:	600b      	str	r3, [r1, #0]
 80069f8:	50cd      	str	r5, [r1, r3]
 80069fa:	18cc      	adds	r4, r1, r3
 80069fc:	4630      	mov	r0, r6
 80069fe:	f000 f836 	bl	8006a6e <__malloc_unlock>
 8006a02:	f104 000b 	add.w	r0, r4, #11
 8006a06:	1d23      	adds	r3, r4, #4
 8006a08:	f020 0007 	bic.w	r0, r0, #7
 8006a0c:	1ac3      	subs	r3, r0, r3
 8006a0e:	d0d3      	beq.n	80069b8 <_malloc_r+0x20>
 8006a10:	425a      	negs	r2, r3
 8006a12:	50e2      	str	r2, [r4, r3]
 8006a14:	e7d0      	b.n	80069b8 <_malloc_r+0x20>
 8006a16:	428c      	cmp	r4, r1
 8006a18:	684b      	ldr	r3, [r1, #4]
 8006a1a:	bf16      	itet	ne
 8006a1c:	6063      	strne	r3, [r4, #4]
 8006a1e:	6013      	streq	r3, [r2, #0]
 8006a20:	460c      	movne	r4, r1
 8006a22:	e7eb      	b.n	80069fc <_malloc_r+0x64>
 8006a24:	460c      	mov	r4, r1
 8006a26:	6849      	ldr	r1, [r1, #4]
 8006a28:	e7cc      	b.n	80069c4 <_malloc_r+0x2c>
 8006a2a:	1cc4      	adds	r4, r0, #3
 8006a2c:	f024 0403 	bic.w	r4, r4, #3
 8006a30:	42a0      	cmp	r0, r4
 8006a32:	d005      	beq.n	8006a40 <_malloc_r+0xa8>
 8006a34:	1a21      	subs	r1, r4, r0
 8006a36:	4630      	mov	r0, r6
 8006a38:	f000 f808 	bl	8006a4c <_sbrk_r>
 8006a3c:	3001      	adds	r0, #1
 8006a3e:	d0cf      	beq.n	80069e0 <_malloc_r+0x48>
 8006a40:	6025      	str	r5, [r4, #0]
 8006a42:	e7db      	b.n	80069fc <_malloc_r+0x64>
 8006a44:	20000264 	.word	0x20000264
 8006a48:	20000268 	.word	0x20000268

08006a4c <_sbrk_r>:
 8006a4c:	b538      	push	{r3, r4, r5, lr}
 8006a4e:	4c06      	ldr	r4, [pc, #24]	; (8006a68 <_sbrk_r+0x1c>)
 8006a50:	2300      	movs	r3, #0
 8006a52:	4605      	mov	r5, r0
 8006a54:	4608      	mov	r0, r1
 8006a56:	6023      	str	r3, [r4, #0]
 8006a58:	f7fa fbf4 	bl	8001244 <_sbrk>
 8006a5c:	1c43      	adds	r3, r0, #1
 8006a5e:	d102      	bne.n	8006a66 <_sbrk_r+0x1a>
 8006a60:	6823      	ldr	r3, [r4, #0]
 8006a62:	b103      	cbz	r3, 8006a66 <_sbrk_r+0x1a>
 8006a64:	602b      	str	r3, [r5, #0]
 8006a66:	bd38      	pop	{r3, r4, r5, pc}
 8006a68:	20000b48 	.word	0x20000b48

08006a6c <__malloc_lock>:
 8006a6c:	4770      	bx	lr

08006a6e <__malloc_unlock>:
 8006a6e:	4770      	bx	lr

08006a70 <_init>:
 8006a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a72:	bf00      	nop
 8006a74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a76:	bc08      	pop	{r3}
 8006a78:	469e      	mov	lr, r3
 8006a7a:	4770      	bx	lr

08006a7c <_fini>:
 8006a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a7e:	bf00      	nop
 8006a80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a82:	bc08      	pop	{r3}
 8006a84:	469e      	mov	lr, r3
 8006a86:	4770      	bx	lr

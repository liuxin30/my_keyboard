
my-keyboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006934  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08006acc  08006acc  00016acc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006bb0  08006bb0  00020210  2**0
                  CONTENTS
  4 .ARM          00000008  08006bb0  08006bb0  00016bb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006bb8  08006bb8  00020210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006bb8  08006bb8  00016bb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006bbc  08006bbc  00016bbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  08006bc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000940  20000210  08006dd0  00020210  2**2
                  ALLOC
 10 ._user_heap_stack 00000800  20000b50  08006dd0  00020b50  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 12 .debug_info   000138d0  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000030d7  00000000  00000000  00033b10  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000bf0  00000000  00000000  00036be8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a68  00000000  00000000  000377d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019495  00000000  00000000  00038240  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e93f  00000000  00000000  000516d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00087589  00000000  00000000  00060014  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e759d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f40  00000000  00000000  000e7618  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000210 	.word	0x20000210
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08006ab4 	.word	0x08006ab4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000214 	.word	0x20000214
 80001d4:	08006ab4 	.word	0x08006ab4

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <IS_NOEVENT>:

/* Rules for No Event:
 * 1) (time == 0) to handle (keyevent_t){} as empty event
 * 2) Matrix(255, 255) to make TICK event available
 */
static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 && event.key.col == 255); }
 80004d8:	b480      	push	{r7}
 80004da:	b083      	sub	sp, #12
 80004dc:	af00      	add	r7, sp, #0
 80004de:	463b      	mov	r3, r7
 80004e0:	e883 0003 	stmia.w	r3, {r0, r1}
 80004e4:	88bb      	ldrh	r3, [r7, #4]
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d005      	beq.n	80004f6 <IS_NOEVENT+0x1e>
 80004ea:	787b      	ldrb	r3, [r7, #1]
 80004ec:	2bff      	cmp	r3, #255	; 0xff
 80004ee:	d104      	bne.n	80004fa <IS_NOEVENT+0x22>
 80004f0:	783b      	ldrb	r3, [r7, #0]
 80004f2:	2bff      	cmp	r3, #255	; 0xff
 80004f4:	d101      	bne.n	80004fa <IS_NOEVENT+0x22>
 80004f6:	2301      	movs	r3, #1
 80004f8:	e000      	b.n	80004fc <IS_NOEVENT+0x24>
 80004fa:	2300      	movs	r3, #0
 80004fc:	f003 0301 	and.w	r3, r3, #1
 8000500:	b2db      	uxtb	r3, r3
 8000502:	4618      	mov	r0, r3
 8000504:	370c      	adds	r7, #12
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr
	...

08000510 <send_keyboard_report>:
//report_keyboard_t keyboard_report = {};
static report_keyboard_t *keyboard_report = &(report_keyboard_t){};

extern USBD_HandleTypeDef hUsbDeviceFS;

void send_keyboard_report(void) {
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
    USBD_HID_SendReport(&hUsbDeviceFS, keyboard_report, 8);
 8000514:	4b04      	ldr	r3, [pc, #16]	; (8000528 <send_keyboard_report+0x18>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	2208      	movs	r2, #8
 800051a:	4619      	mov	r1, r3
 800051c:	4803      	ldr	r0, [pc, #12]	; (800052c <send_keyboard_report+0x1c>)
 800051e:	f004 fc5d 	bl	8004ddc <USBD_HID_SendReport>
}
 8000522:	bf00      	nop
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	20000000 	.word	0x20000000
 800052c:	20000274 	.word	0x20000274

08000530 <action_exec>:
	}
}


void action_exec(keyevent_t event)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b084      	sub	sp, #16
 8000534:	af00      	add	r7, sp, #0
 8000536:	463b      	mov	r3, r7
 8000538:	e883 0003 	stmia.w	r3, {r0, r1}
	static uint8_t layer = 0;
    if (IS_NOEVENT(event)) { return; }
 800053c:	463b      	mov	r3, r7
 800053e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000542:	f7ff ffc9 	bl	80004d8 <IS_NOEVENT>
 8000546:	4603      	mov	r3, r0
 8000548:	2b00      	cmp	r3, #0
 800054a:	d126      	bne.n	800059a <action_exec+0x6a>

    if (event.key.row == 4 && event.key.col == 10){
 800054c:	787b      	ldrb	r3, [r7, #1]
 800054e:	2b04      	cmp	r3, #4
 8000550:	d10e      	bne.n	8000570 <action_exec+0x40>
 8000552:	783b      	ldrb	r3, [r7, #0]
 8000554:	2b0a      	cmp	r3, #10
 8000556:	d10b      	bne.n	8000570 <action_exec+0x40>
    	if (layer == 0 ){
 8000558:	4b12      	ldr	r3, [pc, #72]	; (80005a4 <action_exec+0x74>)
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	2b00      	cmp	r3, #0
 800055e:	d103      	bne.n	8000568 <action_exec+0x38>
    		layer = 1;
 8000560:	4b10      	ldr	r3, [pc, #64]	; (80005a4 <action_exec+0x74>)
 8000562:	2201      	movs	r2, #1
 8000564:	701a      	strb	r2, [r3, #0]
    	}
    	else{
    		layer = 0;
    	}
    	return;
 8000566:	e019      	b.n	800059c <action_exec+0x6c>
    		layer = 0;
 8000568:	4b0e      	ldr	r3, [pc, #56]	; (80005a4 <action_exec+0x74>)
 800056a:	2200      	movs	r2, #0
 800056c:	701a      	strb	r2, [r3, #0]
    	return;
 800056e:	e015      	b.n	800059c <action_exec+0x6c>
    }

    action_t action = action_for_key(layer, event.key);
 8000570:	4b0c      	ldr	r3, [pc, #48]	; (80005a4 <action_exec+0x74>)
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	6839      	ldr	r1, [r7, #0]
 8000576:	4618      	mov	r0, r3
 8000578:	f000 fddc 	bl	8001134 <action_for_key>
 800057c:	4603      	mov	r3, r0
 800057e:	81bb      	strh	r3, [r7, #12]
    //dprint("ACTION: "); debug_action(action);

    if (event.pressed) {
 8000580:	78bb      	ldrb	r3, [r7, #2]
 8000582:	2b00      	cmp	r3, #0
 8000584:	d004      	beq.n	8000590 <action_exec+0x60>
        register_code(action.key.code);
 8000586:	7b3b      	ldrb	r3, [r7, #12]
 8000588:	4618      	mov	r0, r3
 800058a:	f000 f80d 	bl	80005a8 <register_code>
 800058e:	e005      	b.n	800059c <action_exec+0x6c>
    }
    else {
        unregister_code(action.key.code);
 8000590:	7b3b      	ldrb	r3, [r7, #12]
 8000592:	4618      	mov	r0, r3
 8000594:	f000 f830 	bl	80005f8 <unregister_code>
 8000598:	e000      	b.n	800059c <action_exec+0x6c>
    if (IS_NOEVENT(event)) { return; }
 800059a:	bf00      	nop
    }
}
 800059c:	3710      	adds	r7, #16
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	20000238 	.word	0x20000238

080005a8 <register_code>:

/*
 * Utilities for actions.
 */
void register_code(uint8_t code)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	4603      	mov	r3, r0
 80005b0:	71fb      	strb	r3, [r7, #7]
    if (code == KC_NO) {
 80005b2:	79fb      	ldrb	r3, [r7, #7]
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d01b      	beq.n	80005f0 <register_code+0x48>
        return;
    }
    else if IS_KEY(code) {
 80005b8:	79fb      	ldrb	r3, [r7, #7]
 80005ba:	2b03      	cmp	r3, #3
 80005bc:	d907      	bls.n	80005ce <register_code+0x26>
 80005be:	79fb      	ldrb	r3, [r7, #7]
 80005c0:	2ba4      	cmp	r3, #164	; 0xa4
 80005c2:	d804      	bhi.n	80005ce <register_code+0x26>
        add_key(code);
 80005c4:	79fb      	ldrb	r3, [r7, #7]
 80005c6:	4618      	mov	r0, r3
 80005c8:	f000 f83e 	bl	8000648 <add_key>
 80005cc:	e011      	b.n	80005f2 <register_code+0x4a>
    }
    else if IS_MOD(code) {
 80005ce:	79fb      	ldrb	r3, [r7, #7]
 80005d0:	2bdf      	cmp	r3, #223	; 0xdf
 80005d2:	d90e      	bls.n	80005f2 <register_code+0x4a>
 80005d4:	79fb      	ldrb	r3, [r7, #7]
 80005d6:	2be7      	cmp	r3, #231	; 0xe7
 80005d8:	d80b      	bhi.n	80005f2 <register_code+0x4a>
        add_mods(MOD_BIT(code));
 80005da:	79fb      	ldrb	r3, [r7, #7]
 80005dc:	f003 0307 	and.w	r3, r3, #7
 80005e0:	2201      	movs	r2, #1
 80005e2:	fa02 f303 	lsl.w	r3, r2, r3
 80005e6:	b2db      	uxtb	r3, r3
 80005e8:	4618      	mov	r0, r3
 80005ea:	f000 fa0d 	bl	8000a08 <add_mods>
 80005ee:	e000      	b.n	80005f2 <register_code+0x4a>
        return;
 80005f0:	bf00      	nop
    }

//    send_keyboard_report();
}
 80005f2:	3708      	adds	r7, #8
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}

080005f8 <unregister_code>:

void unregister_code(uint8_t code)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	4603      	mov	r3, r0
 8000600:	71fb      	strb	r3, [r7, #7]
    if (code == KC_NO) {
 8000602:	79fb      	ldrb	r3, [r7, #7]
 8000604:	2b00      	cmp	r3, #0
 8000606:	d01b      	beq.n	8000640 <unregister_code+0x48>
        return;
    }
    else if IS_KEY(code) {
 8000608:	79fb      	ldrb	r3, [r7, #7]
 800060a:	2b03      	cmp	r3, #3
 800060c:	d907      	bls.n	800061e <unregister_code+0x26>
 800060e:	79fb      	ldrb	r3, [r7, #7]
 8000610:	2ba4      	cmp	r3, #164	; 0xa4
 8000612:	d804      	bhi.n	800061e <unregister_code+0x26>
        del_key(code);
 8000614:	79fb      	ldrb	r3, [r7, #7]
 8000616:	4618      	mov	r0, r3
 8000618:	f000 f924 	bl	8000864 <del_key>
 800061c:	e011      	b.n	8000642 <unregister_code+0x4a>
    }
    else if IS_MOD(code) {
 800061e:	79fb      	ldrb	r3, [r7, #7]
 8000620:	2bdf      	cmp	r3, #223	; 0xdf
 8000622:	d90e      	bls.n	8000642 <unregister_code+0x4a>
 8000624:	79fb      	ldrb	r3, [r7, #7]
 8000626:	2be7      	cmp	r3, #231	; 0xe7
 8000628:	d80b      	bhi.n	8000642 <unregister_code+0x4a>
        del_mods(MOD_BIT(code));
 800062a:	79fb      	ldrb	r3, [r7, #7]
 800062c:	f003 0307 	and.w	r3, r3, #7
 8000630:	2201      	movs	r2, #1
 8000632:	fa02 f303 	lsl.w	r3, r2, r3
 8000636:	b2db      	uxtb	r3, r3
 8000638:	4618      	mov	r0, r3
 800063a:	f000 f9fb 	bl	8000a34 <del_mods>
 800063e:	e000      	b.n	8000642 <unregister_code+0x4a>
        return;
 8000640:	bf00      	nop
    }
//    send_keyboard_report();
}
 8000642:	3708      	adds	r7, #8
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}

08000648 <add_key>:

/* local functions */
void add_key(uint8_t code)
{
 8000648:	b480      	push	{r7}
 800064a:	b085      	sub	sp, #20
 800064c:	af00      	add	r7, sp, #0
 800064e:	4603      	mov	r3, r0
 8000650:	71fb      	strb	r3, [r7, #7]
    int8_t i = cb_head;
 8000652:	4b7f      	ldr	r3, [pc, #508]	; (8000850 <add_key+0x208>)
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	73fb      	strb	r3, [r7, #15]
    int8_t empty = -1;
 8000658:	23ff      	movs	r3, #255	; 0xff
 800065a:	73bb      	strb	r3, [r7, #14]
    if (cb_count) {
 800065c:	4b7d      	ldr	r3, [pc, #500]	; (8000854 <add_key+0x20c>)
 800065e:	f993 3000 	ldrsb.w	r3, [r3]
 8000662:	2b00      	cmp	r3, #0
 8000664:	f000 80ca 	beq.w	80007fc <add_key+0x1b4>
        do {
            if (keyboard_report->keys[i] == code) {
 8000668:	4b7b      	ldr	r3, [pc, #492]	; (8000858 <add_key+0x210>)
 800066a:	681a      	ldr	r2, [r3, #0]
 800066c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000670:	4413      	add	r3, r2
 8000672:	789b      	ldrb	r3, [r3, #2]
 8000674:	79fa      	ldrb	r2, [r7, #7]
 8000676:	429a      	cmp	r2, r3
 8000678:	f000 80e3 	beq.w	8000842 <add_key+0x1fa>
                return;
            }
            if (empty == -1 && keyboard_report->keys[i] == 0) {
 800067c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000680:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000684:	d109      	bne.n	800069a <add_key+0x52>
 8000686:	4b74      	ldr	r3, [pc, #464]	; (8000858 <add_key+0x210>)
 8000688:	681a      	ldr	r2, [r3, #0]
 800068a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800068e:	4413      	add	r3, r2
 8000690:	789b      	ldrb	r3, [r3, #2]
 8000692:	2b00      	cmp	r3, #0
 8000694:	d101      	bne.n	800069a <add_key+0x52>
                empty = i;
 8000696:	7bfb      	ldrb	r3, [r7, #15]
 8000698:	73bb      	strb	r3, [r7, #14]
            }
            i = RO_INC(i);
 800069a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800069e:	1c5a      	adds	r2, r3, #1
 80006a0:	4b6e      	ldr	r3, [pc, #440]	; (800085c <add_key+0x214>)
 80006a2:	fb83 3102 	smull	r3, r1, r3, r2
 80006a6:	17d3      	asrs	r3, r2, #31
 80006a8:	1ac9      	subs	r1, r1, r3
 80006aa:	460b      	mov	r3, r1
 80006ac:	005b      	lsls	r3, r3, #1
 80006ae:	440b      	add	r3, r1
 80006b0:	005b      	lsls	r3, r3, #1
 80006b2:	1ad1      	subs	r1, r2, r3
 80006b4:	460b      	mov	r3, r1
 80006b6:	73fb      	strb	r3, [r7, #15]
        } while (i != cb_tail);
 80006b8:	4b69      	ldr	r3, [pc, #420]	; (8000860 <add_key+0x218>)
 80006ba:	f993 3000 	ldrsb.w	r3, [r3]
 80006be:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80006c2:	429a      	cmp	r2, r3
 80006c4:	d1d0      	bne.n	8000668 <add_key+0x20>
        if (i == cb_tail) {
 80006c6:	4b66      	ldr	r3, [pc, #408]	; (8000860 <add_key+0x218>)
 80006c8:	f993 3000 	ldrsb.w	r3, [r3]
 80006cc:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80006d0:	429a      	cmp	r2, r3
 80006d2:	f040 8093 	bne.w	80007fc <add_key+0x1b4>
            if (cb_tail == cb_head) {
 80006d6:	4b62      	ldr	r3, [pc, #392]	; (8000860 <add_key+0x218>)
 80006d8:	f993 2000 	ldrsb.w	r2, [r3]
 80006dc:	4b5c      	ldr	r3, [pc, #368]	; (8000850 <add_key+0x208>)
 80006de:	f993 3000 	ldrsb.w	r3, [r3]
 80006e2:	429a      	cmp	r2, r3
 80006e4:	f040 808a 	bne.w	80007fc <add_key+0x1b4>
                // buffer is full
                if (empty == -1) {
 80006e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80006ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006f0:	d11a      	bne.n	8000728 <add_key+0xe0>
                    // pop head when has no empty space
                    cb_head = RO_INC(cb_head);
 80006f2:	4b57      	ldr	r3, [pc, #348]	; (8000850 <add_key+0x208>)
 80006f4:	f993 3000 	ldrsb.w	r3, [r3]
 80006f8:	1c5a      	adds	r2, r3, #1
 80006fa:	4b58      	ldr	r3, [pc, #352]	; (800085c <add_key+0x214>)
 80006fc:	fb83 3102 	smull	r3, r1, r3, r2
 8000700:	17d3      	asrs	r3, r2, #31
 8000702:	1ac9      	subs	r1, r1, r3
 8000704:	460b      	mov	r3, r1
 8000706:	005b      	lsls	r3, r3, #1
 8000708:	440b      	add	r3, r1
 800070a:	005b      	lsls	r3, r3, #1
 800070c:	1ad1      	subs	r1, r2, r3
 800070e:	b24a      	sxtb	r2, r1
 8000710:	4b4f      	ldr	r3, [pc, #316]	; (8000850 <add_key+0x208>)
 8000712:	701a      	strb	r2, [r3, #0]
                    cb_count--;
 8000714:	4b4f      	ldr	r3, [pc, #316]	; (8000854 <add_key+0x20c>)
 8000716:	f993 3000 	ldrsb.w	r3, [r3]
 800071a:	b2db      	uxtb	r3, r3
 800071c:	3b01      	subs	r3, #1
 800071e:	b2db      	uxtb	r3, r3
 8000720:	b25a      	sxtb	r2, r3
 8000722:	4b4c      	ldr	r3, [pc, #304]	; (8000854 <add_key+0x20c>)
 8000724:	701a      	strb	r2, [r3, #0]
 8000726:	e069      	b.n	80007fc <add_key+0x1b4>
                }
                else {
                    // left shift when has empty space
                    uint8_t offset = 1;
 8000728:	2301      	movs	r3, #1
 800072a:	737b      	strb	r3, [r7, #13]
                    i = RO_INC(empty);
 800072c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000730:	1c5a      	adds	r2, r3, #1
 8000732:	4b4a      	ldr	r3, [pc, #296]	; (800085c <add_key+0x214>)
 8000734:	fb83 3102 	smull	r3, r1, r3, r2
 8000738:	17d3      	asrs	r3, r2, #31
 800073a:	1ac9      	subs	r1, r1, r3
 800073c:	460b      	mov	r3, r1
 800073e:	005b      	lsls	r3, r3, #1
 8000740:	440b      	add	r3, r1
 8000742:	005b      	lsls	r3, r3, #1
 8000744:	1ad1      	subs	r1, r2, r3
 8000746:	460b      	mov	r3, r1
 8000748:	73fb      	strb	r3, [r7, #15]
                    do {
                        if (keyboard_report->keys[i] != 0) {
 800074a:	4b43      	ldr	r3, [pc, #268]	; (8000858 <add_key+0x210>)
 800074c:	681a      	ldr	r2, [r3, #0]
 800074e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000752:	4413      	add	r3, r2
 8000754:	789b      	ldrb	r3, [r3, #2]
 8000756:	2b00      	cmp	r3, #0
 8000758:	d023      	beq.n	80007a2 <add_key+0x15a>
                            keyboard_report->keys[empty] = keyboard_report->keys[i];
 800075a:	4b3f      	ldr	r3, [pc, #252]	; (8000858 <add_key+0x210>)
 800075c:	6818      	ldr	r0, [r3, #0]
 800075e:	f997 100f 	ldrsb.w	r1, [r7, #15]
 8000762:	4b3d      	ldr	r3, [pc, #244]	; (8000858 <add_key+0x210>)
 8000764:	681a      	ldr	r2, [r3, #0]
 8000766:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800076a:	4401      	add	r1, r0
 800076c:	7889      	ldrb	r1, [r1, #2]
 800076e:	4413      	add	r3, r2
 8000770:	460a      	mov	r2, r1
 8000772:	709a      	strb	r2, [r3, #2]
                            keyboard_report->keys[i] = 0;
 8000774:	4b38      	ldr	r3, [pc, #224]	; (8000858 <add_key+0x210>)
 8000776:	681a      	ldr	r2, [r3, #0]
 8000778:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800077c:	4413      	add	r3, r2
 800077e:	2200      	movs	r2, #0
 8000780:	709a      	strb	r2, [r3, #2]
                            empty = RO_INC(empty);
 8000782:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000786:	1c5a      	adds	r2, r3, #1
 8000788:	4b34      	ldr	r3, [pc, #208]	; (800085c <add_key+0x214>)
 800078a:	fb83 3102 	smull	r3, r1, r3, r2
 800078e:	17d3      	asrs	r3, r2, #31
 8000790:	1ac9      	subs	r1, r1, r3
 8000792:	460b      	mov	r3, r1
 8000794:	005b      	lsls	r3, r3, #1
 8000796:	440b      	add	r3, r1
 8000798:	005b      	lsls	r3, r3, #1
 800079a:	1ad1      	subs	r1, r2, r3
 800079c:	460b      	mov	r3, r1
 800079e:	73bb      	strb	r3, [r7, #14]
 80007a0:	e002      	b.n	80007a8 <add_key+0x160>
                        }
                        else {
                            offset++;
 80007a2:	7b7b      	ldrb	r3, [r7, #13]
 80007a4:	3301      	adds	r3, #1
 80007a6:	737b      	strb	r3, [r7, #13]
                        }
                        i = RO_INC(i);
 80007a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007ac:	1c5a      	adds	r2, r3, #1
 80007ae:	4b2b      	ldr	r3, [pc, #172]	; (800085c <add_key+0x214>)
 80007b0:	fb83 3102 	smull	r3, r1, r3, r2
 80007b4:	17d3      	asrs	r3, r2, #31
 80007b6:	1ac9      	subs	r1, r1, r3
 80007b8:	460b      	mov	r3, r1
 80007ba:	005b      	lsls	r3, r3, #1
 80007bc:	440b      	add	r3, r1
 80007be:	005b      	lsls	r3, r3, #1
 80007c0:	1ad1      	subs	r1, r2, r3
 80007c2:	460b      	mov	r3, r1
 80007c4:	73fb      	strb	r3, [r7, #15]
                    } while (i != cb_tail);
 80007c6:	4b26      	ldr	r3, [pc, #152]	; (8000860 <add_key+0x218>)
 80007c8:	f993 3000 	ldrsb.w	r3, [r3]
 80007cc:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80007d0:	429a      	cmp	r2, r3
 80007d2:	d1ba      	bne.n	800074a <add_key+0x102>
                    cb_tail = RO_SUB(cb_tail, offset);
 80007d4:	4b22      	ldr	r3, [pc, #136]	; (8000860 <add_key+0x218>)
 80007d6:	f993 3000 	ldrsb.w	r3, [r3]
 80007da:	461a      	mov	r2, r3
 80007dc:	7b7b      	ldrb	r3, [r7, #13]
 80007de:	1ad3      	subs	r3, r2, r3
 80007e0:	1d9a      	adds	r2, r3, #6
 80007e2:	4b1e      	ldr	r3, [pc, #120]	; (800085c <add_key+0x214>)
 80007e4:	fb83 3102 	smull	r3, r1, r3, r2
 80007e8:	17d3      	asrs	r3, r2, #31
 80007ea:	1ac9      	subs	r1, r1, r3
 80007ec:	460b      	mov	r3, r1
 80007ee:	005b      	lsls	r3, r3, #1
 80007f0:	440b      	add	r3, r1
 80007f2:	005b      	lsls	r3, r3, #1
 80007f4:	1ad1      	subs	r1, r2, r3
 80007f6:	b24a      	sxtb	r2, r1
 80007f8:	4b19      	ldr	r3, [pc, #100]	; (8000860 <add_key+0x218>)
 80007fa:	701a      	strb	r2, [r3, #0]
                }
            }
        }
    }
    // add to tail
    keyboard_report->keys[cb_tail] = code;
 80007fc:	4b16      	ldr	r3, [pc, #88]	; (8000858 <add_key+0x210>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	4a17      	ldr	r2, [pc, #92]	; (8000860 <add_key+0x218>)
 8000802:	f992 2000 	ldrsb.w	r2, [r2]
 8000806:	4413      	add	r3, r2
 8000808:	79fa      	ldrb	r2, [r7, #7]
 800080a:	709a      	strb	r2, [r3, #2]
    cb_tail = RO_INC(cb_tail);
 800080c:	4b14      	ldr	r3, [pc, #80]	; (8000860 <add_key+0x218>)
 800080e:	f993 3000 	ldrsb.w	r3, [r3]
 8000812:	1c5a      	adds	r2, r3, #1
 8000814:	4b11      	ldr	r3, [pc, #68]	; (800085c <add_key+0x214>)
 8000816:	fb83 3102 	smull	r3, r1, r3, r2
 800081a:	17d3      	asrs	r3, r2, #31
 800081c:	1ac9      	subs	r1, r1, r3
 800081e:	460b      	mov	r3, r1
 8000820:	005b      	lsls	r3, r3, #1
 8000822:	440b      	add	r3, r1
 8000824:	005b      	lsls	r3, r3, #1
 8000826:	1ad1      	subs	r1, r2, r3
 8000828:	b24a      	sxtb	r2, r1
 800082a:	4b0d      	ldr	r3, [pc, #52]	; (8000860 <add_key+0x218>)
 800082c:	701a      	strb	r2, [r3, #0]
    cb_count++;
 800082e:	4b09      	ldr	r3, [pc, #36]	; (8000854 <add_key+0x20c>)
 8000830:	f993 3000 	ldrsb.w	r3, [r3]
 8000834:	b2db      	uxtb	r3, r3
 8000836:	3301      	adds	r3, #1
 8000838:	b2db      	uxtb	r3, r3
 800083a:	b25a      	sxtb	r2, r3
 800083c:	4b05      	ldr	r3, [pc, #20]	; (8000854 <add_key+0x20c>)
 800083e:	701a      	strb	r2, [r3, #0]
 8000840:	e000      	b.n	8000844 <add_key+0x1fc>
                return;
 8000842:	bf00      	nop
}
 8000844:	3714      	adds	r7, #20
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr
 800084e:	bf00      	nop
 8000850:	2000022c 	.word	0x2000022c
 8000854:	2000022e 	.word	0x2000022e
 8000858:	20000000 	.word	0x20000000
 800085c:	2aaaaaab 	.word	0x2aaaaaab
 8000860:	2000022d 	.word	0x2000022d

08000864 <del_key>:

void del_key(uint8_t code)
{
 8000864:	b480      	push	{r7}
 8000866:	b085      	sub	sp, #20
 8000868:	af00      	add	r7, sp, #0
 800086a:	4603      	mov	r3, r0
 800086c:	71fb      	strb	r3, [r7, #7]
    uint8_t i = cb_head;
 800086e:	4b61      	ldr	r3, [pc, #388]	; (80009f4 <del_key+0x190>)
 8000870:	f993 3000 	ldrsb.w	r3, [r3]
 8000874:	73fb      	strb	r3, [r7, #15]
    if (cb_count) {
 8000876:	4b60      	ldr	r3, [pc, #384]	; (80009f8 <del_key+0x194>)
 8000878:	f993 3000 	ldrsb.w	r3, [r3]
 800087c:	2b00      	cmp	r3, #0
 800087e:	f000 80b3 	beq.w	80009e8 <del_key+0x184>
        do {
            if (keyboard_report->keys[i] == code) {
 8000882:	4b5e      	ldr	r3, [pc, #376]	; (80009fc <del_key+0x198>)
 8000884:	681a      	ldr	r2, [r3, #0]
 8000886:	7bfb      	ldrb	r3, [r7, #15]
 8000888:	4413      	add	r3, r2
 800088a:	789b      	ldrb	r3, [r3, #2]
 800088c:	79fa      	ldrb	r2, [r7, #7]
 800088e:	429a      	cmp	r2, r3
 8000890:	f040 8094 	bne.w	80009bc <del_key+0x158>
                keyboard_report->keys[i] = 0;
 8000894:	4b59      	ldr	r3, [pc, #356]	; (80009fc <del_key+0x198>)
 8000896:	681a      	ldr	r2, [r3, #0]
 8000898:	7bfb      	ldrb	r3, [r7, #15]
 800089a:	4413      	add	r3, r2
 800089c:	2200      	movs	r2, #0
 800089e:	709a      	strb	r2, [r3, #2]
                cb_count--;
 80008a0:	4b55      	ldr	r3, [pc, #340]	; (80009f8 <del_key+0x194>)
 80008a2:	f993 3000 	ldrsb.w	r3, [r3]
 80008a6:	b2db      	uxtb	r3, r3
 80008a8:	3b01      	subs	r3, #1
 80008aa:	b2db      	uxtb	r3, r3
 80008ac:	b25a      	sxtb	r2, r3
 80008ae:	4b52      	ldr	r3, [pc, #328]	; (80009f8 <del_key+0x194>)
 80008b0:	701a      	strb	r2, [r3, #0]
                if (cb_count == 0) {
 80008b2:	4b51      	ldr	r3, [pc, #324]	; (80009f8 <del_key+0x194>)
 80008b4:	f993 3000 	ldrsb.w	r3, [r3]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d108      	bne.n	80008ce <del_key+0x6a>
                    // reset head and tail
                    cb_tail = cb_head = 0;
 80008bc:	4b4d      	ldr	r3, [pc, #308]	; (80009f4 <del_key+0x190>)
 80008be:	2200      	movs	r2, #0
 80008c0:	701a      	strb	r2, [r3, #0]
 80008c2:	4b4c      	ldr	r3, [pc, #304]	; (80009f4 <del_key+0x190>)
 80008c4:	f993 2000 	ldrsb.w	r2, [r3]
 80008c8:	4b4d      	ldr	r3, [pc, #308]	; (8000a00 <del_key+0x19c>)
 80008ca:	701a      	strb	r2, [r3, #0]
                    break;
 80008cc:	e08c      	b.n	80009e8 <del_key+0x184>
                }
                if (i == cb_head) {
 80008ce:	7bfb      	ldrb	r3, [r7, #15]
 80008d0:	4a48      	ldr	r2, [pc, #288]	; (80009f4 <del_key+0x190>)
 80008d2:	f992 2000 	ldrsb.w	r2, [r2]
 80008d6:	4293      	cmp	r3, r2
 80008d8:	d12f      	bne.n	800093a <del_key+0xd6>
                    // left shift when next to tail
                    do {
                        if (keyboard_report->keys[RO_INC(cb_head)] != 0) {
 80008da:	4b48      	ldr	r3, [pc, #288]	; (80009fc <del_key+0x198>)
 80008dc:	6818      	ldr	r0, [r3, #0]
 80008de:	4b45      	ldr	r3, [pc, #276]	; (80009f4 <del_key+0x190>)
 80008e0:	f993 3000 	ldrsb.w	r3, [r3]
 80008e4:	1c59      	adds	r1, r3, #1
 80008e6:	4b47      	ldr	r3, [pc, #284]	; (8000a04 <del_key+0x1a0>)
 80008e8:	fb83 3201 	smull	r3, r2, r3, r1
 80008ec:	17cb      	asrs	r3, r1, #31
 80008ee:	1ad2      	subs	r2, r2, r3
 80008f0:	4613      	mov	r3, r2
 80008f2:	005b      	lsls	r3, r3, #1
 80008f4:	4413      	add	r3, r2
 80008f6:	005b      	lsls	r3, r3, #1
 80008f8:	1aca      	subs	r2, r1, r3
 80008fa:	1883      	adds	r3, r0, r2
 80008fc:	789b      	ldrb	r3, [r3, #2]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d119      	bne.n	8000936 <del_key+0xd2>
                            break;
                        }
                        cb_head = RO_INC(cb_head);
 8000902:	4b3c      	ldr	r3, [pc, #240]	; (80009f4 <del_key+0x190>)
 8000904:	f993 3000 	ldrsb.w	r3, [r3]
 8000908:	1c5a      	adds	r2, r3, #1
 800090a:	4b3e      	ldr	r3, [pc, #248]	; (8000a04 <del_key+0x1a0>)
 800090c:	fb83 3102 	smull	r3, r1, r3, r2
 8000910:	17d3      	asrs	r3, r2, #31
 8000912:	1ac9      	subs	r1, r1, r3
 8000914:	460b      	mov	r3, r1
 8000916:	005b      	lsls	r3, r3, #1
 8000918:	440b      	add	r3, r1
 800091a:	005b      	lsls	r3, r3, #1
 800091c:	1ad1      	subs	r1, r2, r3
 800091e:	b24a      	sxtb	r2, r1
 8000920:	4b34      	ldr	r3, [pc, #208]	; (80009f4 <del_key+0x190>)
 8000922:	701a      	strb	r2, [r3, #0]
                    } while (cb_tail != cb_head);
 8000924:	4b36      	ldr	r3, [pc, #216]	; (8000a00 <del_key+0x19c>)
 8000926:	f993 2000 	ldrsb.w	r2, [r3]
 800092a:	4b32      	ldr	r3, [pc, #200]	; (80009f4 <del_key+0x190>)
 800092c:	f993 3000 	ldrsb.w	r3, [r3]
 8000930:	429a      	cmp	r2, r3
 8000932:	d1d2      	bne.n	80008da <del_key+0x76>
                    break;
 8000934:	e058      	b.n	80009e8 <del_key+0x184>
                            break;
 8000936:	bf00      	nop
                    break;
 8000938:	e056      	b.n	80009e8 <del_key+0x184>
                }
                if (i == RO_DEC(cb_tail)) {
 800093a:	7bf8      	ldrb	r0, [r7, #15]
 800093c:	4b30      	ldr	r3, [pc, #192]	; (8000a00 <del_key+0x19c>)
 800093e:	f993 3000 	ldrsb.w	r3, [r3]
 8000942:	1d59      	adds	r1, r3, #5
 8000944:	4b2f      	ldr	r3, [pc, #188]	; (8000a04 <del_key+0x1a0>)
 8000946:	fb83 3201 	smull	r3, r2, r3, r1
 800094a:	17cb      	asrs	r3, r1, #31
 800094c:	1ad2      	subs	r2, r2, r3
 800094e:	4613      	mov	r3, r2
 8000950:	005b      	lsls	r3, r3, #1
 8000952:	4413      	add	r3, r2
 8000954:	005b      	lsls	r3, r3, #1
 8000956:	1aca      	subs	r2, r1, r3
 8000958:	4290      	cmp	r0, r2
 800095a:	d12f      	bne.n	80009bc <del_key+0x158>
                    // left shift when next to tail
                    do {
                        cb_tail = RO_DEC(cb_tail);
 800095c:	4b28      	ldr	r3, [pc, #160]	; (8000a00 <del_key+0x19c>)
 800095e:	f993 3000 	ldrsb.w	r3, [r3]
 8000962:	1d5a      	adds	r2, r3, #5
 8000964:	4b27      	ldr	r3, [pc, #156]	; (8000a04 <del_key+0x1a0>)
 8000966:	fb83 3102 	smull	r3, r1, r3, r2
 800096a:	17d3      	asrs	r3, r2, #31
 800096c:	1ac9      	subs	r1, r1, r3
 800096e:	460b      	mov	r3, r1
 8000970:	005b      	lsls	r3, r3, #1
 8000972:	440b      	add	r3, r1
 8000974:	005b      	lsls	r3, r3, #1
 8000976:	1ad1      	subs	r1, r2, r3
 8000978:	b24a      	sxtb	r2, r1
 800097a:	4b21      	ldr	r3, [pc, #132]	; (8000a00 <del_key+0x19c>)
 800097c:	701a      	strb	r2, [r3, #0]
                        if (keyboard_report->keys[RO_DEC(cb_tail)] != 0) {
 800097e:	4b1f      	ldr	r3, [pc, #124]	; (80009fc <del_key+0x198>)
 8000980:	6818      	ldr	r0, [r3, #0]
 8000982:	4b1f      	ldr	r3, [pc, #124]	; (8000a00 <del_key+0x19c>)
 8000984:	f993 3000 	ldrsb.w	r3, [r3]
 8000988:	1d59      	adds	r1, r3, #5
 800098a:	4b1e      	ldr	r3, [pc, #120]	; (8000a04 <del_key+0x1a0>)
 800098c:	fb83 3201 	smull	r3, r2, r3, r1
 8000990:	17cb      	asrs	r3, r1, #31
 8000992:	1ad2      	subs	r2, r2, r3
 8000994:	4613      	mov	r3, r2
 8000996:	005b      	lsls	r3, r3, #1
 8000998:	4413      	add	r3, r2
 800099a:	005b      	lsls	r3, r3, #1
 800099c:	1aca      	subs	r2, r1, r3
 800099e:	1883      	adds	r3, r0, r2
 80009a0:	789b      	ldrb	r3, [r3, #2]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d108      	bne.n	80009b8 <del_key+0x154>
                            break;
                        }
                    } while (cb_tail != cb_head);
 80009a6:	4b16      	ldr	r3, [pc, #88]	; (8000a00 <del_key+0x19c>)
 80009a8:	f993 2000 	ldrsb.w	r2, [r3]
 80009ac:	4b11      	ldr	r3, [pc, #68]	; (80009f4 <del_key+0x190>)
 80009ae:	f993 3000 	ldrsb.w	r3, [r3]
 80009b2:	429a      	cmp	r2, r3
 80009b4:	d1d2      	bne.n	800095c <del_key+0xf8>
                    break;
 80009b6:	e017      	b.n	80009e8 <del_key+0x184>
                            break;
 80009b8:	bf00      	nop
                    break;
 80009ba:	e015      	b.n	80009e8 <del_key+0x184>
                }
            }
            i = RO_INC(i);
 80009bc:	7bfb      	ldrb	r3, [r7, #15]
 80009be:	1c5a      	adds	r2, r3, #1
 80009c0:	4b10      	ldr	r3, [pc, #64]	; (8000a04 <del_key+0x1a0>)
 80009c2:	fb83 3102 	smull	r3, r1, r3, r2
 80009c6:	17d3      	asrs	r3, r2, #31
 80009c8:	1ac9      	subs	r1, r1, r3
 80009ca:	460b      	mov	r3, r1
 80009cc:	005b      	lsls	r3, r3, #1
 80009ce:	440b      	add	r3, r1
 80009d0:	005b      	lsls	r3, r3, #1
 80009d2:	1ad1      	subs	r1, r2, r3
 80009d4:	460b      	mov	r3, r1
 80009d6:	73fb      	strb	r3, [r7, #15]
        } while (i != cb_tail);
 80009d8:	7bfb      	ldrb	r3, [r7, #15]
 80009da:	4a09      	ldr	r2, [pc, #36]	; (8000a00 <del_key+0x19c>)
 80009dc:	f992 2000 	ldrsb.w	r2, [r2]
 80009e0:	4293      	cmp	r3, r2
 80009e2:	f47f af4e 	bne.w	8000882 <del_key+0x1e>
    }
}
 80009e6:	e7ff      	b.n	80009e8 <del_key+0x184>
 80009e8:	bf00      	nop
 80009ea:	3714      	adds	r7, #20
 80009ec:	46bd      	mov	sp, r7
 80009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f2:	4770      	bx	lr
 80009f4:	2000022c 	.word	0x2000022c
 80009f8:	2000022e 	.word	0x2000022e
 80009fc:	20000000 	.word	0x20000000
 8000a00:	2000022d 	.word	0x2000022d
 8000a04:	2aaaaaab 	.word	0x2aaaaaab

08000a08 <add_mods>:

/* modifier */
void add_mods(uint8_t mods) {
 8000a08:	b480      	push	{r7}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	4603      	mov	r3, r0
 8000a10:	71fb      	strb	r3, [r7, #7]
	keyboard_report->mods |= mods;
 8000a12:	4b07      	ldr	r3, [pc, #28]	; (8000a30 <add_mods+0x28>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	7819      	ldrb	r1, [r3, #0]
 8000a18:	4b05      	ldr	r3, [pc, #20]	; (8000a30 <add_mods+0x28>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	79fa      	ldrb	r2, [r7, #7]
 8000a1e:	430a      	orrs	r2, r1
 8000a20:	b2d2      	uxtb	r2, r2
 8000a22:	701a      	strb	r2, [r3, #0]
}
 8000a24:	bf00      	nop
 8000a26:	370c      	adds	r7, #12
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr
 8000a30:	20000000 	.word	0x20000000

08000a34 <del_mods>:
void del_mods(uint8_t mods) {
 8000a34:	b480      	push	{r7}
 8000a36:	b083      	sub	sp, #12
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	71fb      	strb	r3, [r7, #7]
	keyboard_report->mods ^= mods;
 8000a3e:	4b07      	ldr	r3, [pc, #28]	; (8000a5c <del_mods+0x28>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	7819      	ldrb	r1, [r3, #0]
 8000a44:	4b05      	ldr	r3, [pc, #20]	; (8000a5c <del_mods+0x28>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	79fa      	ldrb	r2, [r7, #7]
 8000a4a:	404a      	eors	r2, r1
 8000a4c:	b2d2      	uxtb	r2, r2
 8000a4e:	701a      	strb	r2, [r3, #0]
}
 8000a50:	bf00      	nop
 8000a52:	370c      	adds	r7, #12
 8000a54:	46bd      	mov	sp, r7
 8000a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5a:	4770      	bx	lr
 8000a5c:	20000000 	.word	0x20000000

08000a60 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b08a      	sub	sp, #40	; 0x28
 8000a64:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a66:	f107 0314 	add.w	r3, r7, #20
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	601a      	str	r2, [r3, #0]
 8000a6e:	605a      	str	r2, [r3, #4]
 8000a70:	609a      	str	r2, [r3, #8]
 8000a72:	60da      	str	r2, [r3, #12]
 8000a74:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	613b      	str	r3, [r7, #16]
 8000a7a:	4b51      	ldr	r3, [pc, #324]	; (8000bc0 <MX_GPIO_Init+0x160>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	4a50      	ldr	r2, [pc, #320]	; (8000bc0 <MX_GPIO_Init+0x160>)
 8000a80:	f043 0304 	orr.w	r3, r3, #4
 8000a84:	6313      	str	r3, [r2, #48]	; 0x30
 8000a86:	4b4e      	ldr	r3, [pc, #312]	; (8000bc0 <MX_GPIO_Init+0x160>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	f003 0304 	and.w	r3, r3, #4
 8000a8e:	613b      	str	r3, [r7, #16]
 8000a90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a92:	2300      	movs	r3, #0
 8000a94:	60fb      	str	r3, [r7, #12]
 8000a96:	4b4a      	ldr	r3, [pc, #296]	; (8000bc0 <MX_GPIO_Init+0x160>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	4a49      	ldr	r2, [pc, #292]	; (8000bc0 <MX_GPIO_Init+0x160>)
 8000a9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa2:	4b47      	ldr	r3, [pc, #284]	; (8000bc0 <MX_GPIO_Init+0x160>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000aaa:	60fb      	str	r3, [r7, #12]
 8000aac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aae:	2300      	movs	r3, #0
 8000ab0:	60bb      	str	r3, [r7, #8]
 8000ab2:	4b43      	ldr	r3, [pc, #268]	; (8000bc0 <MX_GPIO_Init+0x160>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	4a42      	ldr	r2, [pc, #264]	; (8000bc0 <MX_GPIO_Init+0x160>)
 8000ab8:	f043 0301 	orr.w	r3, r3, #1
 8000abc:	6313      	str	r3, [r2, #48]	; 0x30
 8000abe:	4b40      	ldr	r3, [pc, #256]	; (8000bc0 <MX_GPIO_Init+0x160>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	f003 0301 	and.w	r3, r3, #1
 8000ac6:	60bb      	str	r3, [r7, #8]
 8000ac8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aca:	2300      	movs	r3, #0
 8000acc:	607b      	str	r3, [r7, #4]
 8000ace:	4b3c      	ldr	r3, [pc, #240]	; (8000bc0 <MX_GPIO_Init+0x160>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	4a3b      	ldr	r2, [pc, #236]	; (8000bc0 <MX_GPIO_Init+0x160>)
 8000ad4:	f043 0302 	orr.w	r3, r3, #2
 8000ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8000ada:	4b39      	ldr	r3, [pc, #228]	; (8000bc0 <MX_GPIO_Init+0x160>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	f003 0302 	and.w	r3, r3, #2
 8000ae2:	607b      	str	r3, [r7, #4]
 8000ae4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ROW4_Pin|ROW3_Pin|ROW2_Pin|ROW1_Pin 
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	211f      	movs	r1, #31
 8000aea:	4836      	ldr	r0, [pc, #216]	; (8000bc4 <MX_GPIO_Init+0x164>)
 8000aec:	f000 ff78 	bl	80019e0 <HAL_GPIO_WritePin>
                          |ROW0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAPLED_GPIO_Port, CAPLED_Pin, GPIO_PIN_RESET);
 8000af0:	2200      	movs	r2, #0
 8000af2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000af6:	4834      	ldr	r0, [pc, #208]	; (8000bc8 <MX_GPIO_Init+0x168>)
 8000af8:	f000 ff72 	bl	80019e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000afc:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000b00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b02:	2303      	movs	r3, #3
 8000b04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b06:	2300      	movs	r3, #0
 8000b08:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b0a:	f107 0314 	add.w	r3, r7, #20
 8000b0e:	4619      	mov	r1, r3
 8000b10:	482e      	ldr	r0, [pc, #184]	; (8000bcc <MX_GPIO_Init+0x16c>)
 8000b12:	f000 fdcb 	bl	80016ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin 
                           PAPin */
  GPIO_InitStruct.Pin = ROW4_Pin|ROW3_Pin|ROW2_Pin|ROW1_Pin 
 8000b16:	231f      	movs	r3, #31
 8000b18:	617b      	str	r3, [r7, #20]
                          |ROW0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b1e:	2302      	movs	r3, #2
 8000b20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b22:	2300      	movs	r3, #0
 8000b24:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b26:	f107 0314 	add.w	r3, r7, #20
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	4825      	ldr	r0, [pc, #148]	; (8000bc4 <MX_GPIO_Init+0x164>)
 8000b2e:	f000 fdbd 	bl	80016ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = COL0_Pin|COL1_Pin|COL2_Pin;
 8000b32:	23e0      	movs	r3, #224	; 0xe0
 8000b34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b36:	2300      	movs	r3, #0
 8000b38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b3a:	2302      	movs	r3, #2
 8000b3c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b3e:	f107 0314 	add.w	r3, r7, #20
 8000b42:	4619      	mov	r1, r3
 8000b44:	481f      	ldr	r0, [pc, #124]	; (8000bc4 <MX_GPIO_Init+0x164>)
 8000b46:	f000 fdb1 	bl	80016ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin 
                           PBPin PBPin PBPin PBPin 
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = COL3_Pin|COL4_Pin|COL5_Pin|COL6_Pin 
 8000b4a:	f248 53ff 	movw	r3, #34303	; 0x85ff
 8000b4e:	617b      	str	r3, [r7, #20]
                          |COL7_Pin|COL8_Pin|COL9_Pin|COL10_Pin 
                          |COL11_Pin|COL12_Pin|COL13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b50:	2300      	movs	r3, #0
 8000b52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b54:	2302      	movs	r3, #2
 8000b56:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b58:	f107 0314 	add.w	r3, r7, #20
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	481a      	ldr	r0, [pc, #104]	; (8000bc8 <MX_GPIO_Init+0x168>)
 8000b60:	f000 fda4 	bl	80016ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8000b64:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000b68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b6a:	2303      	movs	r3, #3
 8000b6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b72:	f107 0314 	add.w	r3, r7, #20
 8000b76:	4619      	mov	r1, r3
 8000b78:	4813      	ldr	r0, [pc, #76]	; (8000bc8 <MX_GPIO_Init+0x168>)
 8000b7a:	f000 fd97 	bl	80016ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15;
 8000b7e:	f44f 4307 	mov.w	r3, #34560	; 0x8700
 8000b82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b84:	2303      	movs	r3, #3
 8000b86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b8c:	f107 0314 	add.w	r3, r7, #20
 8000b90:	4619      	mov	r1, r3
 8000b92:	480c      	ldr	r0, [pc, #48]	; (8000bc4 <MX_GPIO_Init+0x164>)
 8000b94:	f000 fd8a 	bl	80016ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CAPLED_Pin;
 8000b98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ba2:	2302      	movs	r3, #2
 8000ba4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CAPLED_GPIO_Port, &GPIO_InitStruct);
 8000baa:	f107 0314 	add.w	r3, r7, #20
 8000bae:	4619      	mov	r1, r3
 8000bb0:	4805      	ldr	r0, [pc, #20]	; (8000bc8 <MX_GPIO_Init+0x168>)
 8000bb2:	f000 fd7b 	bl	80016ac <HAL_GPIO_Init>

}
 8000bb6:	bf00      	nop
 8000bb8:	3728      	adds	r7, #40	; 0x28
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	40023800 	.word	0x40023800
 8000bc4:	40020000 	.word	0x40020000
 8000bc8:	40020400 	.word	0x40020400
 8000bcc:	40020800 	.word	0x40020800

08000bd0 <keyboard_init>:
{
    matrix_setup();
}

void keyboard_init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
    matrix_init();
 8000bd4:	f000 f8f6 	bl	8000dc4 <matrix_init>
}
 8000bd8:	bf00      	nop
 8000bda:	bd80      	pop	{r7, pc}

08000bdc <keyboard_task>:
/*
 * Do keyboard routine jobs: scan matrix, light LEDs, ...
 * This is repeatedly called as fast as possible.
 */
void keyboard_task(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b084      	sub	sp, #16
 8000be0:	af00      	add	r7, sp, #0
	static matrix_row_t matrix_prev[MATRIX_ROWS];
	static uint8_t is_change = 0;
    matrix_row_t matrix_row = 0;
 8000be2:	2300      	movs	r3, #0
 8000be4:	813b      	strh	r3, [r7, #8]
    matrix_row_t matrix_change = 0;
 8000be6:	2300      	movs	r3, #0
 8000be8:	80fb      	strh	r3, [r7, #6]
//    uint8_t is_null = 0;

    matrix_scan();
 8000bea:	f000 f90b 	bl	8000e04 <matrix_scan>
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
 8000bee:	2300      	movs	r3, #0
 8000bf0:	73fb      	strb	r3, [r7, #15]
 8000bf2:	e053      	b.n	8000c9c <keyboard_task+0xc0>

        matrix_row = matrix_get_row(r);
 8000bf4:	7bfb      	ldrb	r3, [r7, #15]
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f000 f95c 	bl	8000eb4 <matrix_get_row>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	813b      	strh	r3, [r7, #8]

        matrix_change = matrix_row ^ matrix_prev[r];
 8000c00:	7bfb      	ldrb	r3, [r7, #15]
 8000c02:	4a2e      	ldr	r2, [pc, #184]	; (8000cbc <keyboard_task+0xe0>)
 8000c04:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000c08:	893b      	ldrh	r3, [r7, #8]
 8000c0a:	4053      	eors	r3, r2
 8000c0c:	80fb      	strh	r3, [r7, #6]
        if (matrix_change) {
 8000c0e:	88fb      	ldrh	r3, [r7, #6]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d040      	beq.n	8000c96 <keyboard_task+0xba>
        	is_change = 1;
 8000c14:	4b2a      	ldr	r3, [pc, #168]	; (8000cc0 <keyboard_task+0xe4>)
 8000c16:	2201      	movs	r2, #1
 8000c18:	701a      	strb	r2, [r3, #0]
//        	matrix_prev[r] = matrix_row;
            matrix_row_t col_mask = 1;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	81bb      	strh	r3, [r7, #12]
            for (uint8_t c = 0; c < MATRIX_COLS; c++, col_mask <<= 1 ) {
 8000c1e:	2300      	movs	r3, #0
 8000c20:	72fb      	strb	r3, [r7, #11]
 8000c22:	e035      	b.n	8000c90 <keyboard_task+0xb4>
                if (matrix_change & col_mask) {
 8000c24:	88fa      	ldrh	r2, [r7, #6]
 8000c26:	89bb      	ldrh	r3, [r7, #12]
 8000c28:	4013      	ands	r3, r2
 8000c2a:	b29b      	uxth	r3, r3
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d029      	beq.n	8000c84 <keyboard_task+0xa8>

                    keyevent_t e = (keyevent_t){
 8000c30:	7afb      	ldrb	r3, [r7, #11]
 8000c32:	703b      	strb	r3, [r7, #0]
 8000c34:	7bfb      	ldrb	r3, [r7, #15]
 8000c36:	707b      	strb	r3, [r7, #1]
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & col_mask),
 8000c38:	893a      	ldrh	r2, [r7, #8]
 8000c3a:	89bb      	ldrh	r3, [r7, #12]
 8000c3c:	4013      	ands	r3, r2
 8000c3e:	b29b      	uxth	r3, r3
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	bf14      	ite	ne
 8000c44:	2301      	movne	r3, #1
 8000c46:	2300      	moveq	r3, #0
 8000c48:	b2db      	uxtb	r3, r3
                    keyevent_t e = (keyevent_t){
 8000c4a:	70bb      	strb	r3, [r7, #2]
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	80bb      	strh	r3, [r7, #4]
                        .time = 1/* time should not be 0 */
                    };
                    action_exec(e);
 8000c50:	463b      	mov	r3, r7
 8000c52:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000c56:	f7ff fc6b 	bl	8000530 <action_exec>
                    if(r==4 && c==10){
 8000c5a:	7bfb      	ldrb	r3, [r7, #15]
 8000c5c:	2b04      	cmp	r3, #4
 8000c5e:	d106      	bne.n	8000c6e <keyboard_task+0x92>
 8000c60:	7afb      	ldrb	r3, [r7, #11]
 8000c62:	2b0a      	cmp	r3, #10
 8000c64:	d103      	bne.n	8000c6e <keyboard_task+0x92>
						is_change = 0;
 8000c66:	4b16      	ldr	r3, [pc, #88]	; (8000cc0 <keyboard_task+0xe4>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	701a      	strb	r2, [r3, #0]
 8000c6c:	e013      	b.n	8000c96 <keyboard_task+0xba>
						break;
					}

                    // record a processed key
                    matrix_prev[r] ^= col_mask;
 8000c6e:	7bfb      	ldrb	r3, [r7, #15]
 8000c70:	4a12      	ldr	r2, [pc, #72]	; (8000cbc <keyboard_task+0xe0>)
 8000c72:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000c76:	7bfb      	ldrb	r3, [r7, #15]
 8000c78:	89ba      	ldrh	r2, [r7, #12]
 8000c7a:	404a      	eors	r2, r1
 8000c7c:	b291      	uxth	r1, r2
 8000c7e:	4a0f      	ldr	r2, [pc, #60]	; (8000cbc <keyboard_task+0xe0>)
 8000c80:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            for (uint8_t c = 0; c < MATRIX_COLS; c++, col_mask <<= 1 ) {
 8000c84:	7afb      	ldrb	r3, [r7, #11]
 8000c86:	3301      	adds	r3, #1
 8000c88:	72fb      	strb	r3, [r7, #11]
 8000c8a:	89bb      	ldrh	r3, [r7, #12]
 8000c8c:	005b      	lsls	r3, r3, #1
 8000c8e:	81bb      	strh	r3, [r7, #12]
 8000c90:	7afb      	ldrb	r3, [r7, #11]
 8000c92:	2b0d      	cmp	r3, #13
 8000c94:	d9c6      	bls.n	8000c24 <keyboard_task+0x48>
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
 8000c96:	7bfb      	ldrb	r3, [r7, #15]
 8000c98:	3301      	adds	r3, #1
 8000c9a:	73fb      	strb	r3, [r7, #15]
 8000c9c:	7bfb      	ldrb	r3, [r7, #15]
 8000c9e:	2b04      	cmp	r3, #4
 8000ca0:	d9a8      	bls.n	8000bf4 <keyboard_task+0x18>
        }
//        if(matrix_row == 0){
//        	is_null++;
//        }
    }
    if (is_change == 1){
 8000ca2:	4b07      	ldr	r3, [pc, #28]	; (8000cc0 <keyboard_task+0xe4>)
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	2b01      	cmp	r3, #1
 8000ca8:	d104      	bne.n	8000cb4 <keyboard_task+0xd8>
    	send_keyboard_report();
 8000caa:	f7ff fc31 	bl	8000510 <send_keyboard_report>
    	is_change = 0;
 8000cae:	4b04      	ldr	r3, [pc, #16]	; (8000cc0 <keyboard_task+0xe4>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	701a      	strb	r2, [r3, #0]
    }

//    if(is_null == 5){
//    	clear();
//    }
}
 8000cb4:	bf00      	nop
 8000cb6:	3710      	adds	r7, #16
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	2000023c 	.word	0x2000023c
 8000cc0:	20000246 	.word	0x20000246

08000cc4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cc8:	f000 fb4a 	bl	8001360 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ccc:	f000 f80a 	bl	8000ce4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cd0:	f7ff fec6 	bl	8000a60 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000cd4:	f005 f9de 	bl	8006094 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  keyboard_init();
 8000cd8:	f7ff ff7a 	bl	8000bd0 <keyboard_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  keyboard_task();
 8000cdc:	f7ff ff7e 	bl	8000bdc <keyboard_task>
 8000ce0:	e7fc      	b.n	8000cdc <main+0x18>
	...

08000ce4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b094      	sub	sp, #80	; 0x50
 8000ce8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cea:	f107 0320 	add.w	r3, r7, #32
 8000cee:	2230      	movs	r2, #48	; 0x30
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f005 fe1c 	bl	8006930 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cf8:	f107 030c 	add.w	r3, r7, #12
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	601a      	str	r2, [r3, #0]
 8000d00:	605a      	str	r2, [r3, #4]
 8000d02:	609a      	str	r2, [r3, #8]
 8000d04:	60da      	str	r2, [r3, #12]
 8000d06:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d08:	2300      	movs	r3, #0
 8000d0a:	60bb      	str	r3, [r7, #8]
 8000d0c:	4b27      	ldr	r3, [pc, #156]	; (8000dac <SystemClock_Config+0xc8>)
 8000d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d10:	4a26      	ldr	r2, [pc, #152]	; (8000dac <SystemClock_Config+0xc8>)
 8000d12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d16:	6413      	str	r3, [r2, #64]	; 0x40
 8000d18:	4b24      	ldr	r3, [pc, #144]	; (8000dac <SystemClock_Config+0xc8>)
 8000d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d20:	60bb      	str	r3, [r7, #8]
 8000d22:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d24:	2300      	movs	r3, #0
 8000d26:	607b      	str	r3, [r7, #4]
 8000d28:	4b21      	ldr	r3, [pc, #132]	; (8000db0 <SystemClock_Config+0xcc>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a20      	ldr	r2, [pc, #128]	; (8000db0 <SystemClock_Config+0xcc>)
 8000d2e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d32:	6013      	str	r3, [r2, #0]
 8000d34:	4b1e      	ldr	r3, [pc, #120]	; (8000db0 <SystemClock_Config+0xcc>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d3c:	607b      	str	r3, [r7, #4]
 8000d3e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d40:	2301      	movs	r3, #1
 8000d42:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d44:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d48:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d4a:	2302      	movs	r3, #2
 8000d4c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d4e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d52:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000d54:	2319      	movs	r3, #25
 8000d56:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000d58:	23c0      	movs	r3, #192	; 0xc0
 8000d5a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d5c:	2302      	movs	r3, #2
 8000d5e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d60:	2304      	movs	r3, #4
 8000d62:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d64:	f107 0320 	add.w	r3, r7, #32
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f001 ffbd 	bl	8002ce8 <HAL_RCC_OscConfig>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000d74:	f000 f81e 	bl	8000db4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d78:	230f      	movs	r3, #15
 8000d7a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d7c:	2302      	movs	r3, #2
 8000d7e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d80:	2300      	movs	r3, #0
 8000d82:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d88:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000d8e:	f107 030c 	add.w	r3, r7, #12
 8000d92:	2103      	movs	r1, #3
 8000d94:	4618      	mov	r0, r3
 8000d96:	f002 fa17 	bl	80031c8 <HAL_RCC_ClockConfig>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000da0:	f000 f808 	bl	8000db4 <Error_Handler>
  }
}
 8000da4:	bf00      	nop
 8000da6:	3750      	adds	r7, #80	; 0x50
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	40023800 	.word	0x40023800
 8000db0:	40007000 	.word	0x40007000

08000db4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000db8:	bf00      	nop
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
	...

08000dc4 <matrix_init>:
#define LED_OFF()   do { palClearPad(GPIOB, 1); } while (0)
#define LED_TGL()   do { palTogglePad(GPIOB, 1); } while (0)
#endif

void matrix_init(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b083      	sub	sp, #12
 8000dc8:	af00      	add	r7, sp, #0
    // initialize row and col
//    init_rows();
//    init_cols();

    // initialize matrix state: all keys off
    for (uint8_t i=0; i < MATRIX_ROWS; i++) {
 8000dca:	2300      	movs	r3, #0
 8000dcc:	71fb      	strb	r3, [r7, #7]
 8000dce:	e00c      	b.n	8000dea <matrix_init+0x26>
        matrix[i] = 0;
 8000dd0:	79fb      	ldrb	r3, [r7, #7]
 8000dd2:	4a0a      	ldr	r2, [pc, #40]	; (8000dfc <matrix_init+0x38>)
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        matrix_debouncing[i] = 0;
 8000dda:	79fb      	ldrb	r3, [r7, #7]
 8000ddc:	4a08      	ldr	r2, [pc, #32]	; (8000e00 <matrix_init+0x3c>)
 8000dde:	2100      	movs	r1, #0
 8000de0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (uint8_t i=0; i < MATRIX_ROWS; i++) {
 8000de4:	79fb      	ldrb	r3, [r7, #7]
 8000de6:	3301      	adds	r3, #1
 8000de8:	71fb      	strb	r3, [r7, #7]
 8000dea:	79fb      	ldrb	r3, [r7, #7]
 8000dec:	2b04      	cmp	r3, #4
 8000dee:	d9ef      	bls.n	8000dd0 <matrix_init+0xc>
    }


}
 8000df0:	bf00      	nop
 8000df2:	370c      	adds	r7, #12
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr
 8000dfc:	20000248 	.word	0x20000248
 8000e00:	20000254 	.word	0x20000254

08000e04 <matrix_scan>:

uint8_t matrix_scan(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0

    for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	71fb      	strb	r3, [r7, #7]
 8000e0e:	e020      	b.n	8000e52 <matrix_scan+0x4e>
    	select_row(i);
 8000e10:	79fb      	ldrb	r3, [r7, #7]
 8000e12:	4618      	mov	r0, r3
 8000e14:	f000 f954 	bl	80010c0 <select_row>
    	HAL_Delay(1); // without this wait read unstable value.
 8000e18:	2001      	movs	r0, #1
 8000e1a:	f000 fb13 	bl	8001444 <HAL_Delay>
        matrix_row_t cols = read_cols();
 8000e1e:	f000 f85b 	bl	8000ed8 <read_cols>
 8000e22:	4603      	mov	r3, r0
 8000e24:	80bb      	strh	r3, [r7, #4]
        if (matrix_debouncing[i] != cols) {
 8000e26:	79fb      	ldrb	r3, [r7, #7]
 8000e28:	4a1f      	ldr	r2, [pc, #124]	; (8000ea8 <matrix_scan+0xa4>)
 8000e2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e2e:	88ba      	ldrh	r2, [r7, #4]
 8000e30:	429a      	cmp	r2, r3
 8000e32:	d007      	beq.n	8000e44 <matrix_scan+0x40>
            matrix_debouncing[i] = cols;
 8000e34:	79fb      	ldrb	r3, [r7, #7]
 8000e36:	491c      	ldr	r1, [pc, #112]	; (8000ea8 <matrix_scan+0xa4>)
 8000e38:	88ba      	ldrh	r2, [r7, #4]
 8000e3a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
//            matrix[i] = matrix_debouncing[i];

            debouncing = DEBOUNCE;
 8000e3e:	4b1b      	ldr	r3, [pc, #108]	; (8000eac <matrix_scan+0xa8>)
 8000e40:	2203      	movs	r2, #3
 8000e42:	701a      	strb	r2, [r3, #0]
        }
        unselect_rows(i);
 8000e44:	79fb      	ldrb	r3, [r7, #7]
 8000e46:	4618      	mov	r0, r3
 8000e48:	f000 f900 	bl	800104c <unselect_rows>
    for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
 8000e4c:	79fb      	ldrb	r3, [r7, #7]
 8000e4e:	3301      	adds	r3, #1
 8000e50:	71fb      	strb	r3, [r7, #7]
 8000e52:	79fb      	ldrb	r3, [r7, #7]
 8000e54:	2b04      	cmp	r3, #4
 8000e56:	d9db      	bls.n	8000e10 <matrix_scan+0xc>
    }

    if (debouncing) {
 8000e58:	4b14      	ldr	r3, [pc, #80]	; (8000eac <matrix_scan+0xa8>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d01e      	beq.n	8000e9e <matrix_scan+0x9a>
        if (--debouncing) {
 8000e60:	4b12      	ldr	r3, [pc, #72]	; (8000eac <matrix_scan+0xa8>)
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	3b01      	subs	r3, #1
 8000e66:	b2da      	uxtb	r2, r3
 8000e68:	4b10      	ldr	r3, [pc, #64]	; (8000eac <matrix_scan+0xa8>)
 8000e6a:	701a      	strb	r2, [r3, #0]
 8000e6c:	4b0f      	ldr	r3, [pc, #60]	; (8000eac <matrix_scan+0xa8>)
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d003      	beq.n	8000e7c <matrix_scan+0x78>
        	HAL_Delay(1);
 8000e74:	2001      	movs	r0, #1
 8000e76:	f000 fae5 	bl	8001444 <HAL_Delay>
 8000e7a:	e010      	b.n	8000e9e <matrix_scan+0x9a>
        } else {
            for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	71bb      	strb	r3, [r7, #6]
 8000e80:	e00a      	b.n	8000e98 <matrix_scan+0x94>
                matrix[i] = matrix_debouncing[i];
 8000e82:	79ba      	ldrb	r2, [r7, #6]
 8000e84:	79bb      	ldrb	r3, [r7, #6]
 8000e86:	4908      	ldr	r1, [pc, #32]	; (8000ea8 <matrix_scan+0xa4>)
 8000e88:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8000e8c:	4a08      	ldr	r2, [pc, #32]	; (8000eb0 <matrix_scan+0xac>)
 8000e8e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
 8000e92:	79bb      	ldrb	r3, [r7, #6]
 8000e94:	3301      	adds	r3, #1
 8000e96:	71bb      	strb	r3, [r7, #6]
 8000e98:	79bb      	ldrb	r3, [r7, #6]
 8000e9a:	2b04      	cmp	r3, #4
 8000e9c:	d9f1      	bls.n	8000e82 <matrix_scan+0x7e>
            }
        }
    }

    return 1;
 8000e9e:	2301      	movs	r3, #1
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	3708      	adds	r7, #8
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	20000254 	.word	0x20000254
 8000eac:	20000004 	.word	0x20000004
 8000eb0:	20000248 	.word	0x20000248

08000eb4 <matrix_get_row>:
    return (matrix[row] & ((matrix_row_t)1<<col));
}


inline matrix_row_t matrix_get_row(uint8_t row)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	4603      	mov	r3, r0
 8000ebc:	71fb      	strb	r3, [r7, #7]
//    matrix_row_t matrix_row = 0;
//    select_row(row);
//    HAL_Delay(1); // without this wait read unstable value.
//    matrix_row = read_cols();
//    unselect_rows(row);
    return matrix[row];
 8000ebe:	79fb      	ldrb	r3, [r7, #7]
 8000ec0:	4a04      	ldr	r2, [pc, #16]	; (8000ed4 <matrix_get_row+0x20>)
 8000ec2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	370c      	adds	r7, #12
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	20000248 	.word	0x20000248

08000ed8 <read_cols>:
//
/* Returns status of switches(1:on, 0:off)
    读取每列的电平，如果检测到高电平，则视为该列的键被按下
*/
matrix_row_t read_cols(void)
{
 8000ed8:	b598      	push	{r3, r4, r7, lr}
 8000eda:	af00      	add	r7, sp, #0
    return ((HAL_GPIO_ReadPin(COL0_GPIO_Port, COL0_Pin)==1) ? (1<<0):0) |
 8000edc:	2120      	movs	r1, #32
 8000ede:	4859      	ldr	r0, [pc, #356]	; (8001044 <read_cols+0x16c>)
 8000ee0:	f000 fd66 	bl	80019b0 <HAL_GPIO_ReadPin>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b01      	cmp	r3, #1
 8000ee8:	bf0c      	ite	eq
 8000eea:	2301      	moveq	r3, #1
 8000eec:	2300      	movne	r3, #0
 8000eee:	b2db      	uxtb	r3, r3
 8000ef0:	b21c      	sxth	r4, r3
           ((HAL_GPIO_ReadPin(COL1_GPIO_Port, COL1_Pin)==1) ? (1<<1):0) |
 8000ef2:	2140      	movs	r1, #64	; 0x40
 8000ef4:	4853      	ldr	r0, [pc, #332]	; (8001044 <read_cols+0x16c>)
 8000ef6:	f000 fd5b 	bl	80019b0 <HAL_GPIO_ReadPin>
 8000efa:	4603      	mov	r3, r0
    return ((HAL_GPIO_ReadPin(COL0_GPIO_Port, COL0_Pin)==1) ? (1<<0):0) |
 8000efc:	2b01      	cmp	r3, #1
 8000efe:	d101      	bne.n	8000f04 <read_cols+0x2c>
 8000f00:	2302      	movs	r3, #2
 8000f02:	e000      	b.n	8000f06 <read_cols+0x2e>
 8000f04:	2300      	movs	r3, #0
 8000f06:	4323      	orrs	r3, r4
 8000f08:	b21c      	sxth	r4, r3
           ((HAL_GPIO_ReadPin(COL2_GPIO_Port, COL2_Pin)==1) ? (1<<2):0) |
 8000f0a:	2180      	movs	r1, #128	; 0x80
 8000f0c:	484d      	ldr	r0, [pc, #308]	; (8001044 <read_cols+0x16c>)
 8000f0e:	f000 fd4f 	bl	80019b0 <HAL_GPIO_ReadPin>
 8000f12:	4603      	mov	r3, r0
           ((HAL_GPIO_ReadPin(COL1_GPIO_Port, COL1_Pin)==1) ? (1<<1):0) |
 8000f14:	2b01      	cmp	r3, #1
 8000f16:	d101      	bne.n	8000f1c <read_cols+0x44>
 8000f18:	2304      	movs	r3, #4
 8000f1a:	e000      	b.n	8000f1e <read_cols+0x46>
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	4323      	orrs	r3, r4
 8000f20:	b21c      	sxth	r4, r3
           ((HAL_GPIO_ReadPin(COL3_GPIO_Port, COL3_Pin)==1) ? (1<<3):0) |
 8000f22:	2101      	movs	r1, #1
 8000f24:	4848      	ldr	r0, [pc, #288]	; (8001048 <read_cols+0x170>)
 8000f26:	f000 fd43 	bl	80019b0 <HAL_GPIO_ReadPin>
 8000f2a:	4603      	mov	r3, r0
           ((HAL_GPIO_ReadPin(COL2_GPIO_Port, COL2_Pin)==1) ? (1<<2):0) |
 8000f2c:	2b01      	cmp	r3, #1
 8000f2e:	d101      	bne.n	8000f34 <read_cols+0x5c>
 8000f30:	2308      	movs	r3, #8
 8000f32:	e000      	b.n	8000f36 <read_cols+0x5e>
 8000f34:	2300      	movs	r3, #0
 8000f36:	4323      	orrs	r3, r4
 8000f38:	b21c      	sxth	r4, r3
           ((HAL_GPIO_ReadPin(COL4_GPIO_Port, COL4_Pin)==1) ? (1<<4):0) |
 8000f3a:	2102      	movs	r1, #2
 8000f3c:	4842      	ldr	r0, [pc, #264]	; (8001048 <read_cols+0x170>)
 8000f3e:	f000 fd37 	bl	80019b0 <HAL_GPIO_ReadPin>
 8000f42:	4603      	mov	r3, r0
           ((HAL_GPIO_ReadPin(COL3_GPIO_Port, COL3_Pin)==1) ? (1<<3):0) |
 8000f44:	2b01      	cmp	r3, #1
 8000f46:	d101      	bne.n	8000f4c <read_cols+0x74>
 8000f48:	2310      	movs	r3, #16
 8000f4a:	e000      	b.n	8000f4e <read_cols+0x76>
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	4323      	orrs	r3, r4
 8000f50:	b21c      	sxth	r4, r3
           ((HAL_GPIO_ReadPin(COL5_GPIO_Port, COL5_Pin)==1) ? (1<<5):0) |
 8000f52:	2104      	movs	r1, #4
 8000f54:	483c      	ldr	r0, [pc, #240]	; (8001048 <read_cols+0x170>)
 8000f56:	f000 fd2b 	bl	80019b0 <HAL_GPIO_ReadPin>
 8000f5a:	4603      	mov	r3, r0
           ((HAL_GPIO_ReadPin(COL4_GPIO_Port, COL4_Pin)==1) ? (1<<4):0) |
 8000f5c:	2b01      	cmp	r3, #1
 8000f5e:	d101      	bne.n	8000f64 <read_cols+0x8c>
 8000f60:	2320      	movs	r3, #32
 8000f62:	e000      	b.n	8000f66 <read_cols+0x8e>
 8000f64:	2300      	movs	r3, #0
 8000f66:	4323      	orrs	r3, r4
 8000f68:	b21c      	sxth	r4, r3
           ((HAL_GPIO_ReadPin(COL6_GPIO_Port, COL6_Pin)==1) ? (1<<6):0) |
 8000f6a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f6e:	4836      	ldr	r0, [pc, #216]	; (8001048 <read_cols+0x170>)
 8000f70:	f000 fd1e 	bl	80019b0 <HAL_GPIO_ReadPin>
 8000f74:	4603      	mov	r3, r0
           ((HAL_GPIO_ReadPin(COL5_GPIO_Port, COL5_Pin)==1) ? (1<<5):0) |
 8000f76:	2b01      	cmp	r3, #1
 8000f78:	d101      	bne.n	8000f7e <read_cols+0xa6>
 8000f7a:	2340      	movs	r3, #64	; 0x40
 8000f7c:	e000      	b.n	8000f80 <read_cols+0xa8>
 8000f7e:	2300      	movs	r3, #0
 8000f80:	4323      	orrs	r3, r4
 8000f82:	b21c      	sxth	r4, r3
           ((HAL_GPIO_ReadPin(COL7_GPIO_Port, COL7_Pin)==1) ? (1<<7):0) |
 8000f84:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f88:	482f      	ldr	r0, [pc, #188]	; (8001048 <read_cols+0x170>)
 8000f8a:	f000 fd11 	bl	80019b0 <HAL_GPIO_ReadPin>
 8000f8e:	4603      	mov	r3, r0
           ((HAL_GPIO_ReadPin(COL6_GPIO_Port, COL6_Pin)==1) ? (1<<6):0) |
 8000f90:	2b01      	cmp	r3, #1
 8000f92:	d101      	bne.n	8000f98 <read_cols+0xc0>
 8000f94:	2380      	movs	r3, #128	; 0x80
 8000f96:	e000      	b.n	8000f9a <read_cols+0xc2>
 8000f98:	2300      	movs	r3, #0
 8000f9a:	4323      	orrs	r3, r4
 8000f9c:	b21c      	sxth	r4, r3
           ((HAL_GPIO_ReadPin(COL8_GPIO_Port, COL8_Pin)==1) ? (1<<8):0) |
 8000f9e:	2108      	movs	r1, #8
 8000fa0:	4829      	ldr	r0, [pc, #164]	; (8001048 <read_cols+0x170>)
 8000fa2:	f000 fd05 	bl	80019b0 <HAL_GPIO_ReadPin>
 8000fa6:	4603      	mov	r3, r0
           ((HAL_GPIO_ReadPin(COL7_GPIO_Port, COL7_Pin)==1) ? (1<<7):0) |
 8000fa8:	2b01      	cmp	r3, #1
 8000faa:	d102      	bne.n	8000fb2 <read_cols+0xda>
 8000fac:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fb0:	e000      	b.n	8000fb4 <read_cols+0xdc>
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	4323      	orrs	r3, r4
 8000fb6:	b21c      	sxth	r4, r3
           ((HAL_GPIO_ReadPin(COL9_GPIO_Port, COL9_Pin)==1) ? (1<<9):0) |
 8000fb8:	2110      	movs	r1, #16
 8000fba:	4823      	ldr	r0, [pc, #140]	; (8001048 <read_cols+0x170>)
 8000fbc:	f000 fcf8 	bl	80019b0 <HAL_GPIO_ReadPin>
 8000fc0:	4603      	mov	r3, r0
           ((HAL_GPIO_ReadPin(COL8_GPIO_Port, COL8_Pin)==1) ? (1<<8):0) |
 8000fc2:	2b01      	cmp	r3, #1
 8000fc4:	d102      	bne.n	8000fcc <read_cols+0xf4>
 8000fc6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fca:	e000      	b.n	8000fce <read_cols+0xf6>
 8000fcc:	2300      	movs	r3, #0
 8000fce:	4323      	orrs	r3, r4
 8000fd0:	b21c      	sxth	r4, r3
           ((HAL_GPIO_ReadPin(COL10_GPIO_Port, COL10_Pin)==1) ? (1<<10):0) |
 8000fd2:	2120      	movs	r1, #32
 8000fd4:	481c      	ldr	r0, [pc, #112]	; (8001048 <read_cols+0x170>)
 8000fd6:	f000 fceb 	bl	80019b0 <HAL_GPIO_ReadPin>
 8000fda:	4603      	mov	r3, r0
           ((HAL_GPIO_ReadPin(COL9_GPIO_Port, COL9_Pin)==1) ? (1<<9):0) |
 8000fdc:	2b01      	cmp	r3, #1
 8000fde:	d102      	bne.n	8000fe6 <read_cols+0x10e>
 8000fe0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fe4:	e000      	b.n	8000fe8 <read_cols+0x110>
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	4323      	orrs	r3, r4
 8000fea:	b21c      	sxth	r4, r3
           ((HAL_GPIO_ReadPin(COL11_GPIO_Port, COL11_Pin)==1) ? (1<<11):0) |
 8000fec:	2140      	movs	r1, #64	; 0x40
 8000fee:	4816      	ldr	r0, [pc, #88]	; (8001048 <read_cols+0x170>)
 8000ff0:	f000 fcde 	bl	80019b0 <HAL_GPIO_ReadPin>
 8000ff4:	4603      	mov	r3, r0
           ((HAL_GPIO_ReadPin(COL10_GPIO_Port, COL10_Pin)==1) ? (1<<10):0) |
 8000ff6:	2b01      	cmp	r3, #1
 8000ff8:	d102      	bne.n	8001000 <read_cols+0x128>
 8000ffa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000ffe:	e000      	b.n	8001002 <read_cols+0x12a>
 8001000:	2300      	movs	r3, #0
 8001002:	4323      	orrs	r3, r4
 8001004:	b21c      	sxth	r4, r3
           ((HAL_GPIO_ReadPin(COL12_GPIO_Port, COL12_Pin)==1) ? (1<<12):0) |
 8001006:	2180      	movs	r1, #128	; 0x80
 8001008:	480f      	ldr	r0, [pc, #60]	; (8001048 <read_cols+0x170>)
 800100a:	f000 fcd1 	bl	80019b0 <HAL_GPIO_ReadPin>
 800100e:	4603      	mov	r3, r0
           ((HAL_GPIO_ReadPin(COL11_GPIO_Port, COL11_Pin)==1) ? (1<<11):0) |
 8001010:	2b01      	cmp	r3, #1
 8001012:	d102      	bne.n	800101a <read_cols+0x142>
 8001014:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001018:	e000      	b.n	800101c <read_cols+0x144>
 800101a:	2300      	movs	r3, #0
 800101c:	4323      	orrs	r3, r4
 800101e:	b21c      	sxth	r4, r3
           ((HAL_GPIO_ReadPin(COL13_GPIO_Port, COL13_Pin)==1) ? (1<<13):0);
 8001020:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001024:	4808      	ldr	r0, [pc, #32]	; (8001048 <read_cols+0x170>)
 8001026:	f000 fcc3 	bl	80019b0 <HAL_GPIO_ReadPin>
 800102a:	4603      	mov	r3, r0
           ((HAL_GPIO_ReadPin(COL12_GPIO_Port, COL12_Pin)==1) ? (1<<12):0) |
 800102c:	2b01      	cmp	r3, #1
 800102e:	d102      	bne.n	8001036 <read_cols+0x15e>
 8001030:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001034:	e000      	b.n	8001038 <read_cols+0x160>
 8001036:	2300      	movs	r3, #0
 8001038:	4323      	orrs	r3, r4
 800103a:	b21b      	sxth	r3, r3
 800103c:	b29b      	uxth	r3, r3
}
 800103e:	4618      	mov	r0, r3
 8001040:	bd98      	pop	{r3, r4, r7, pc}
 8001042:	bf00      	nop
 8001044:	40020000 	.word	0x40020000
 8001048:	40020400 	.word	0x40020400

0800104c <unselect_rows>:

/* 复位每行的电平为低电平 */
void unselect_rows(uint8_t row)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	4603      	mov	r3, r0
 8001054:	71fb      	strb	r3, [r7, #7]
	switch (row) {
 8001056:	79fb      	ldrb	r3, [r7, #7]
 8001058:	2b04      	cmp	r3, #4
 800105a:	d82b      	bhi.n	80010b4 <unselect_rows+0x68>
 800105c:	a201      	add	r2, pc, #4	; (adr r2, 8001064 <unselect_rows+0x18>)
 800105e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001062:	bf00      	nop
 8001064:	08001079 	.word	0x08001079
 8001068:	08001085 	.word	0x08001085
 800106c:	08001091 	.word	0x08001091
 8001070:	0800109d 	.word	0x0800109d
 8001074:	080010a9 	.word	0x080010a9
		case 0:
			HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, GPIO_PIN_RESET);
 8001078:	2200      	movs	r2, #0
 800107a:	2110      	movs	r1, #16
 800107c:	480f      	ldr	r0, [pc, #60]	; (80010bc <unselect_rows+0x70>)
 800107e:	f000 fcaf 	bl	80019e0 <HAL_GPIO_WritePin>
			break;
 8001082:	e017      	b.n	80010b4 <unselect_rows+0x68>
		case 1:
			HAL_GPIO_WritePin(ROW1_GPIO_Port, ROW1_Pin, GPIO_PIN_RESET);
 8001084:	2200      	movs	r2, #0
 8001086:	2108      	movs	r1, #8
 8001088:	480c      	ldr	r0, [pc, #48]	; (80010bc <unselect_rows+0x70>)
 800108a:	f000 fca9 	bl	80019e0 <HAL_GPIO_WritePin>
			break;
 800108e:	e011      	b.n	80010b4 <unselect_rows+0x68>
		case 2:
			HAL_GPIO_WritePin(ROW2_GPIO_Port, ROW2_Pin, GPIO_PIN_RESET);
 8001090:	2200      	movs	r2, #0
 8001092:	2104      	movs	r1, #4
 8001094:	4809      	ldr	r0, [pc, #36]	; (80010bc <unselect_rows+0x70>)
 8001096:	f000 fca3 	bl	80019e0 <HAL_GPIO_WritePin>
			break;
 800109a:	e00b      	b.n	80010b4 <unselect_rows+0x68>
		case 3:
			HAL_GPIO_WritePin(ROW3_GPIO_Port, ROW3_Pin, GPIO_PIN_RESET);
 800109c:	2200      	movs	r2, #0
 800109e:	2102      	movs	r1, #2
 80010a0:	4806      	ldr	r0, [pc, #24]	; (80010bc <unselect_rows+0x70>)
 80010a2:	f000 fc9d 	bl	80019e0 <HAL_GPIO_WritePin>
			break;
 80010a6:	e005      	b.n	80010b4 <unselect_rows+0x68>
		case 4:
			HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW4_Pin, GPIO_PIN_RESET);
 80010a8:	2200      	movs	r2, #0
 80010aa:	2101      	movs	r1, #1
 80010ac:	4803      	ldr	r0, [pc, #12]	; (80010bc <unselect_rows+0x70>)
 80010ae:	f000 fc97 	bl	80019e0 <HAL_GPIO_WritePin>
			break;
 80010b2:	bf00      	nop
	}
}
 80010b4:	bf00      	nop
 80010b6:	3708      	adds	r7, #8
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	40020000 	.word	0x40020000

080010c0 <select_row>:

/* 设置每行的输出电平为高电平 */
void select_row(uint8_t row)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	4603      	mov	r3, r0
 80010c8:	71fb      	strb	r3, [r7, #7]
    switch (row) {
 80010ca:	79fb      	ldrb	r3, [r7, #7]
 80010cc:	2b04      	cmp	r3, #4
 80010ce:	d82b      	bhi.n	8001128 <select_row+0x68>
 80010d0:	a201      	add	r2, pc, #4	; (adr r2, 80010d8 <select_row+0x18>)
 80010d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010d6:	bf00      	nop
 80010d8:	080010ed 	.word	0x080010ed
 80010dc:	080010f9 	.word	0x080010f9
 80010e0:	08001105 	.word	0x08001105
 80010e4:	08001111 	.word	0x08001111
 80010e8:	0800111d 	.word	0x0800111d
        case 0:
        	HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, GPIO_PIN_SET);
 80010ec:	2201      	movs	r2, #1
 80010ee:	2110      	movs	r1, #16
 80010f0:	480f      	ldr	r0, [pc, #60]	; (8001130 <select_row+0x70>)
 80010f2:	f000 fc75 	bl	80019e0 <HAL_GPIO_WritePin>
            break;
 80010f6:	e017      	b.n	8001128 <select_row+0x68>
        case 1:
        	HAL_GPIO_WritePin(ROW1_GPIO_Port, ROW1_Pin, GPIO_PIN_SET);
 80010f8:	2201      	movs	r2, #1
 80010fa:	2108      	movs	r1, #8
 80010fc:	480c      	ldr	r0, [pc, #48]	; (8001130 <select_row+0x70>)
 80010fe:	f000 fc6f 	bl	80019e0 <HAL_GPIO_WritePin>
            break;
 8001102:	e011      	b.n	8001128 <select_row+0x68>
        case 2:
        	HAL_GPIO_WritePin(ROW2_GPIO_Port, ROW2_Pin, GPIO_PIN_SET);
 8001104:	2201      	movs	r2, #1
 8001106:	2104      	movs	r1, #4
 8001108:	4809      	ldr	r0, [pc, #36]	; (8001130 <select_row+0x70>)
 800110a:	f000 fc69 	bl	80019e0 <HAL_GPIO_WritePin>
            break;
 800110e:	e00b      	b.n	8001128 <select_row+0x68>
        case 3:
        	HAL_GPIO_WritePin(ROW3_GPIO_Port, ROW3_Pin, GPIO_PIN_SET);
 8001110:	2201      	movs	r2, #1
 8001112:	2102      	movs	r1, #2
 8001114:	4806      	ldr	r0, [pc, #24]	; (8001130 <select_row+0x70>)
 8001116:	f000 fc63 	bl	80019e0 <HAL_GPIO_WritePin>
            break;
 800111a:	e005      	b.n	8001128 <select_row+0x68>
        case 4:
        	HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW4_Pin, GPIO_PIN_SET);
 800111c:	2201      	movs	r2, #1
 800111e:	2101      	movs	r1, #1
 8001120:	4803      	ldr	r0, [pc, #12]	; (8001130 <select_row+0x70>)
 8001122:	f000 fc5d 	bl	80019e0 <HAL_GPIO_WritePin>
            break;
 8001126:	bf00      	nop
    }
}
 8001128:	bf00      	nop
 800112a:	3708      	adds	r7, #8
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	40020000 	.word	0x40020000

08001134 <action_for_key>:
};


/* converts key to action */
action_t action_for_key(uint8_t layer, keypos_t key)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	4603      	mov	r3, r0
 800113c:	8039      	strh	r1, [r7, #0]
 800113e:	71fb      	strb	r3, [r7, #7]
    uint8_t keycode = keymap_key_to_keycode(layer, key);
 8001140:	79fb      	ldrb	r3, [r7, #7]
 8001142:	6839      	ldr	r1, [r7, #0]
 8001144:	4618      	mov	r0, r3
 8001146:	f000 f80b 	bl	8001160 <keymap_key_to_keycode>
 800114a:	4603      	mov	r3, r0
 800114c:	73fb      	strb	r3, [r7, #15]

    return keycode_to_action(keycode);
 800114e:	7bfb      	ldrb	r3, [r7, #15]
 8001150:	4618      	mov	r0, r3
 8001152:	f000 f823 	bl	800119c <keycode_to_action>
 8001156:	4603      	mov	r3, r0
}
 8001158:	4618      	mov	r0, r3
 800115a:	3710      	adds	r7, #16
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}

08001160 <keymap_key_to_keycode>:

/* translates key to keycode */
uint8_t keymap_key_to_keycode(uint8_t layer, keypos_t key)
{
 8001160:	b490      	push	{r4, r7}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	4603      	mov	r3, r0
 8001168:	8039      	strh	r1, [r7, #0]
 800116a:	71fb      	strb	r3, [r7, #7]
    return keymaps[(layer)][(key.row)][(key.col)];
 800116c:	79fa      	ldrb	r2, [r7, #7]
 800116e:	787b      	ldrb	r3, [r7, #1]
 8001170:	4618      	mov	r0, r3
 8001172:	783b      	ldrb	r3, [r7, #0]
 8001174:	461c      	mov	r4, r3
 8001176:	4908      	ldr	r1, [pc, #32]	; (8001198 <keymap_key_to_keycode+0x38>)
 8001178:	4603      	mov	r3, r0
 800117a:	00db      	lsls	r3, r3, #3
 800117c:	1a1b      	subs	r3, r3, r0
 800117e:	005b      	lsls	r3, r3, #1
 8001180:	2046      	movs	r0, #70	; 0x46
 8001182:	fb00 f202 	mul.w	r2, r0, r2
 8001186:	4413      	add	r3, r2
 8001188:	440b      	add	r3, r1
 800118a:	4423      	add	r3, r4
 800118c:	781b      	ldrb	r3, [r3, #0]
}
 800118e:	4618      	mov	r0, r3
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bc90      	pop	{r4, r7}
 8001196:	4770      	bx	lr
 8001198:	08006b14 	.word	0x08006b14

0800119c <keycode_to_action>:

/* translates keycode to action */
action_t keycode_to_action(uint8_t keycode)
{
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	4603      	mov	r3, r0
 80011a4:	71fb      	strb	r3, [r7, #7]
    if(KC_A <= keycode && keycode <= KC_RGUI){
 80011a6:	79fb      	ldrb	r3, [r7, #7]
 80011a8:	2b03      	cmp	r3, #3
 80011aa:	d905      	bls.n	80011b8 <keycode_to_action+0x1c>
 80011ac:	79fb      	ldrb	r3, [r7, #7]
 80011ae:	2be7      	cmp	r3, #231	; 0xe7
 80011b0:	d802      	bhi.n	80011b8 <keycode_to_action+0x1c>
        return (action_t)ACTION_KEY(keycode);
 80011b2:	79fb      	ldrb	r3, [r7, #7]
 80011b4:	b29b      	uxth	r3, r3
 80011b6:	e000      	b.n	80011ba <keycode_to_action+0x1e>
    }
    else{
        return (action_t)ACTION_NO;
 80011b8:	2300      	movs	r3, #0
    }
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	370c      	adds	r7, #12
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
	...

080011c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ce:	2300      	movs	r3, #0
 80011d0:	607b      	str	r3, [r7, #4]
 80011d2:	4b10      	ldr	r3, [pc, #64]	; (8001214 <HAL_MspInit+0x4c>)
 80011d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d6:	4a0f      	ldr	r2, [pc, #60]	; (8001214 <HAL_MspInit+0x4c>)
 80011d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011dc:	6453      	str	r3, [r2, #68]	; 0x44
 80011de:	4b0d      	ldr	r3, [pc, #52]	; (8001214 <HAL_MspInit+0x4c>)
 80011e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011e6:	607b      	str	r3, [r7, #4]
 80011e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011ea:	2300      	movs	r3, #0
 80011ec:	603b      	str	r3, [r7, #0]
 80011ee:	4b09      	ldr	r3, [pc, #36]	; (8001214 <HAL_MspInit+0x4c>)
 80011f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f2:	4a08      	ldr	r2, [pc, #32]	; (8001214 <HAL_MspInit+0x4c>)
 80011f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011f8:	6413      	str	r3, [r2, #64]	; 0x40
 80011fa:	4b06      	ldr	r3, [pc, #24]	; (8001214 <HAL_MspInit+0x4c>)
 80011fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001202:	603b      	str	r3, [r7, #0]
 8001204:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001206:	bf00      	nop
 8001208:	370c      	adds	r7, #12
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	40023800 	.word	0x40023800

08001218 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800121c:	bf00      	nop
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr

08001226 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001226:	b480      	push	{r7}
 8001228:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800122a:	e7fe      	b.n	800122a <HardFault_Handler+0x4>

0800122c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001230:	e7fe      	b.n	8001230 <MemManage_Handler+0x4>

08001232 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001232:	b480      	push	{r7}
 8001234:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001236:	e7fe      	b.n	8001236 <BusFault_Handler+0x4>

08001238 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800123c:	e7fe      	b.n	800123c <UsageFault_Handler+0x4>

0800123e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800123e:	b480      	push	{r7}
 8001240:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001242:	bf00      	nop
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr

0800124c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001250:	bf00      	nop
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr

0800125a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800125a:	b480      	push	{r7}
 800125c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800125e:	bf00      	nop
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr

08001268 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800126c:	f000 f8ca 	bl	8001404 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001270:	bf00      	nop
 8001272:	bd80      	pop	{r7, pc}

08001274 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001278:	4802      	ldr	r0, [pc, #8]	; (8001284 <OTG_FS_IRQHandler+0x10>)
 800127a:	f000 fd1a 	bl	8001cb2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800127e:	bf00      	nop
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	20000744 	.word	0x20000744

08001288 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001290:	4b11      	ldr	r3, [pc, #68]	; (80012d8 <_sbrk+0x50>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d102      	bne.n	800129e <_sbrk+0x16>
		heap_end = &end;
 8001298:	4b0f      	ldr	r3, [pc, #60]	; (80012d8 <_sbrk+0x50>)
 800129a:	4a10      	ldr	r2, [pc, #64]	; (80012dc <_sbrk+0x54>)
 800129c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800129e:	4b0e      	ldr	r3, [pc, #56]	; (80012d8 <_sbrk+0x50>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80012a4:	4b0c      	ldr	r3, [pc, #48]	; (80012d8 <_sbrk+0x50>)
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	4413      	add	r3, r2
 80012ac:	466a      	mov	r2, sp
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d907      	bls.n	80012c2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80012b2:	f005 fb03 	bl	80068bc <__errno>
 80012b6:	4602      	mov	r2, r0
 80012b8:	230c      	movs	r3, #12
 80012ba:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80012bc:	f04f 33ff 	mov.w	r3, #4294967295
 80012c0:	e006      	b.n	80012d0 <_sbrk+0x48>
	}

	heap_end += incr;
 80012c2:	4b05      	ldr	r3, [pc, #20]	; (80012d8 <_sbrk+0x50>)
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4413      	add	r3, r2
 80012ca:	4a03      	ldr	r2, [pc, #12]	; (80012d8 <_sbrk+0x50>)
 80012cc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80012ce:	68fb      	ldr	r3, [r7, #12]
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3710      	adds	r7, #16
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	20000260 	.word	0x20000260
 80012dc:	20000b50 	.word	0x20000b50

080012e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012e4:	4b08      	ldr	r3, [pc, #32]	; (8001308 <SystemInit+0x28>)
 80012e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012ea:	4a07      	ldr	r2, [pc, #28]	; (8001308 <SystemInit+0x28>)
 80012ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80012f4:	4b04      	ldr	r3, [pc, #16]	; (8001308 <SystemInit+0x28>)
 80012f6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80012fa:	609a      	str	r2, [r3, #8]
#endif
}
 80012fc:	bf00      	nop
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	e000ed00 	.word	0xe000ed00

0800130c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800130c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001344 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001310:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001312:	e003      	b.n	800131c <LoopCopyDataInit>

08001314 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001314:	4b0c      	ldr	r3, [pc, #48]	; (8001348 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001316:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001318:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800131a:	3104      	adds	r1, #4

0800131c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800131c:	480b      	ldr	r0, [pc, #44]	; (800134c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800131e:	4b0c      	ldr	r3, [pc, #48]	; (8001350 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001320:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001322:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001324:	d3f6      	bcc.n	8001314 <CopyDataInit>
  ldr  r2, =_sbss
 8001326:	4a0b      	ldr	r2, [pc, #44]	; (8001354 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001328:	e002      	b.n	8001330 <LoopFillZerobss>

0800132a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800132a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800132c:	f842 3b04 	str.w	r3, [r2], #4

08001330 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001330:	4b09      	ldr	r3, [pc, #36]	; (8001358 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001332:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001334:	d3f9      	bcc.n	800132a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001336:	f7ff ffd3 	bl	80012e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800133a:	f005 fac5 	bl	80068c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800133e:	f7ff fcc1 	bl	8000cc4 <main>
  bx  lr    
 8001342:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001344:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001348:	08006bc0 	.word	0x08006bc0
  ldr  r0, =_sdata
 800134c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001350:	20000210 	.word	0x20000210
  ldr  r2, =_sbss
 8001354:	20000210 	.word	0x20000210
  ldr  r3, = _ebss
 8001358:	20000b50 	.word	0x20000b50

0800135c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800135c:	e7fe      	b.n	800135c <ADC_IRQHandler>
	...

08001360 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001364:	4b0e      	ldr	r3, [pc, #56]	; (80013a0 <HAL_Init+0x40>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a0d      	ldr	r2, [pc, #52]	; (80013a0 <HAL_Init+0x40>)
 800136a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800136e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001370:	4b0b      	ldr	r3, [pc, #44]	; (80013a0 <HAL_Init+0x40>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a0a      	ldr	r2, [pc, #40]	; (80013a0 <HAL_Init+0x40>)
 8001376:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800137a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800137c:	4b08      	ldr	r3, [pc, #32]	; (80013a0 <HAL_Init+0x40>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a07      	ldr	r2, [pc, #28]	; (80013a0 <HAL_Init+0x40>)
 8001382:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001386:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001388:	2003      	movs	r0, #3
 800138a:	f000 f94d 	bl	8001628 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800138e:	2000      	movs	r0, #0
 8001390:	f000 f808 	bl	80013a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001394:	f7ff ff18 	bl	80011c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001398:	2300      	movs	r3, #0
}
 800139a:	4618      	mov	r0, r3
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	40023c00 	.word	0x40023c00

080013a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013ac:	4b12      	ldr	r3, [pc, #72]	; (80013f8 <HAL_InitTick+0x54>)
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	4b12      	ldr	r3, [pc, #72]	; (80013fc <HAL_InitTick+0x58>)
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	4619      	mov	r1, r3
 80013b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80013be:	fbb2 f3f3 	udiv	r3, r2, r3
 80013c2:	4618      	mov	r0, r3
 80013c4:	f000 f965 	bl	8001692 <HAL_SYSTICK_Config>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013ce:	2301      	movs	r3, #1
 80013d0:	e00e      	b.n	80013f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2b0f      	cmp	r3, #15
 80013d6:	d80a      	bhi.n	80013ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013d8:	2200      	movs	r2, #0
 80013da:	6879      	ldr	r1, [r7, #4]
 80013dc:	f04f 30ff 	mov.w	r0, #4294967295
 80013e0:	f000 f92d 	bl	800163e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013e4:	4a06      	ldr	r2, [pc, #24]	; (8001400 <HAL_InitTick+0x5c>)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013ea:	2300      	movs	r3, #0
 80013ec:	e000      	b.n	80013f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	3708      	adds	r7, #8
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	20000008 	.word	0x20000008
 80013fc:	20000010 	.word	0x20000010
 8001400:	2000000c 	.word	0x2000000c

08001404 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001408:	4b06      	ldr	r3, [pc, #24]	; (8001424 <HAL_IncTick+0x20>)
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	461a      	mov	r2, r3
 800140e:	4b06      	ldr	r3, [pc, #24]	; (8001428 <HAL_IncTick+0x24>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4413      	add	r3, r2
 8001414:	4a04      	ldr	r2, [pc, #16]	; (8001428 <HAL_IncTick+0x24>)
 8001416:	6013      	str	r3, [r2, #0]
}
 8001418:	bf00      	nop
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	20000010 	.word	0x20000010
 8001428:	20000270 	.word	0x20000270

0800142c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  return uwTick;
 8001430:	4b03      	ldr	r3, [pc, #12]	; (8001440 <HAL_GetTick+0x14>)
 8001432:	681b      	ldr	r3, [r3, #0]
}
 8001434:	4618      	mov	r0, r3
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	20000270 	.word	0x20000270

08001444 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b084      	sub	sp, #16
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800144c:	f7ff ffee 	bl	800142c <HAL_GetTick>
 8001450:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	f1b3 3fff 	cmp.w	r3, #4294967295
 800145c:	d005      	beq.n	800146a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800145e:	4b09      	ldr	r3, [pc, #36]	; (8001484 <HAL_Delay+0x40>)
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	461a      	mov	r2, r3
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	4413      	add	r3, r2
 8001468:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800146a:	bf00      	nop
 800146c:	f7ff ffde 	bl	800142c <HAL_GetTick>
 8001470:	4602      	mov	r2, r0
 8001472:	68bb      	ldr	r3, [r7, #8]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	68fa      	ldr	r2, [r7, #12]
 8001478:	429a      	cmp	r2, r3
 800147a:	d8f7      	bhi.n	800146c <HAL_Delay+0x28>
  {
  }
}
 800147c:	bf00      	nop
 800147e:	3710      	adds	r7, #16
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	20000010 	.word	0x20000010

08001488 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001488:	b480      	push	{r7}
 800148a:	b085      	sub	sp, #20
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	f003 0307 	and.w	r3, r3, #7
 8001496:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001498:	4b0c      	ldr	r3, [pc, #48]	; (80014cc <__NVIC_SetPriorityGrouping+0x44>)
 800149a:	68db      	ldr	r3, [r3, #12]
 800149c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800149e:	68ba      	ldr	r2, [r7, #8]
 80014a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014a4:	4013      	ands	r3, r2
 80014a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014ba:	4a04      	ldr	r2, [pc, #16]	; (80014cc <__NVIC_SetPriorityGrouping+0x44>)
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	60d3      	str	r3, [r2, #12]
}
 80014c0:	bf00      	nop
 80014c2:	3714      	adds	r7, #20
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr
 80014cc:	e000ed00 	.word	0xe000ed00

080014d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014d4:	4b04      	ldr	r3, [pc, #16]	; (80014e8 <__NVIC_GetPriorityGrouping+0x18>)
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	0a1b      	lsrs	r3, r3, #8
 80014da:	f003 0307 	and.w	r3, r3, #7
}
 80014de:	4618      	mov	r0, r3
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr
 80014e8:	e000ed00 	.word	0xe000ed00

080014ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	4603      	mov	r3, r0
 80014f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	db0b      	blt.n	8001516 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014fe:	79fb      	ldrb	r3, [r7, #7]
 8001500:	f003 021f 	and.w	r2, r3, #31
 8001504:	4907      	ldr	r1, [pc, #28]	; (8001524 <__NVIC_EnableIRQ+0x38>)
 8001506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800150a:	095b      	lsrs	r3, r3, #5
 800150c:	2001      	movs	r0, #1
 800150e:	fa00 f202 	lsl.w	r2, r0, r2
 8001512:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001516:	bf00      	nop
 8001518:	370c      	adds	r7, #12
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	e000e100 	.word	0xe000e100

08001528 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	4603      	mov	r3, r0
 8001530:	6039      	str	r1, [r7, #0]
 8001532:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001534:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001538:	2b00      	cmp	r3, #0
 800153a:	db0a      	blt.n	8001552 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	b2da      	uxtb	r2, r3
 8001540:	490c      	ldr	r1, [pc, #48]	; (8001574 <__NVIC_SetPriority+0x4c>)
 8001542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001546:	0112      	lsls	r2, r2, #4
 8001548:	b2d2      	uxtb	r2, r2
 800154a:	440b      	add	r3, r1
 800154c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001550:	e00a      	b.n	8001568 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	b2da      	uxtb	r2, r3
 8001556:	4908      	ldr	r1, [pc, #32]	; (8001578 <__NVIC_SetPriority+0x50>)
 8001558:	79fb      	ldrb	r3, [r7, #7]
 800155a:	f003 030f 	and.w	r3, r3, #15
 800155e:	3b04      	subs	r3, #4
 8001560:	0112      	lsls	r2, r2, #4
 8001562:	b2d2      	uxtb	r2, r2
 8001564:	440b      	add	r3, r1
 8001566:	761a      	strb	r2, [r3, #24]
}
 8001568:	bf00      	nop
 800156a:	370c      	adds	r7, #12
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr
 8001574:	e000e100 	.word	0xe000e100
 8001578:	e000ed00 	.word	0xe000ed00

0800157c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800157c:	b480      	push	{r7}
 800157e:	b089      	sub	sp, #36	; 0x24
 8001580:	af00      	add	r7, sp, #0
 8001582:	60f8      	str	r0, [r7, #12]
 8001584:	60b9      	str	r1, [r7, #8]
 8001586:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	f003 0307 	and.w	r3, r3, #7
 800158e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001590:	69fb      	ldr	r3, [r7, #28]
 8001592:	f1c3 0307 	rsb	r3, r3, #7
 8001596:	2b04      	cmp	r3, #4
 8001598:	bf28      	it	cs
 800159a:	2304      	movcs	r3, #4
 800159c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	3304      	adds	r3, #4
 80015a2:	2b06      	cmp	r3, #6
 80015a4:	d902      	bls.n	80015ac <NVIC_EncodePriority+0x30>
 80015a6:	69fb      	ldr	r3, [r7, #28]
 80015a8:	3b03      	subs	r3, #3
 80015aa:	e000      	b.n	80015ae <NVIC_EncodePriority+0x32>
 80015ac:	2300      	movs	r3, #0
 80015ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015b0:	f04f 32ff 	mov.w	r2, #4294967295
 80015b4:	69bb      	ldr	r3, [r7, #24]
 80015b6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ba:	43da      	mvns	r2, r3
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	401a      	ands	r2, r3
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015c4:	f04f 31ff 	mov.w	r1, #4294967295
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	fa01 f303 	lsl.w	r3, r1, r3
 80015ce:	43d9      	mvns	r1, r3
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015d4:	4313      	orrs	r3, r2
         );
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3724      	adds	r7, #36	; 0x24
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
	...

080015e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	3b01      	subs	r3, #1
 80015f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015f4:	d301      	bcc.n	80015fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015f6:	2301      	movs	r3, #1
 80015f8:	e00f      	b.n	800161a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015fa:	4a0a      	ldr	r2, [pc, #40]	; (8001624 <SysTick_Config+0x40>)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	3b01      	subs	r3, #1
 8001600:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001602:	210f      	movs	r1, #15
 8001604:	f04f 30ff 	mov.w	r0, #4294967295
 8001608:	f7ff ff8e 	bl	8001528 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800160c:	4b05      	ldr	r3, [pc, #20]	; (8001624 <SysTick_Config+0x40>)
 800160e:	2200      	movs	r2, #0
 8001610:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001612:	4b04      	ldr	r3, [pc, #16]	; (8001624 <SysTick_Config+0x40>)
 8001614:	2207      	movs	r2, #7
 8001616:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001618:	2300      	movs	r3, #0
}
 800161a:	4618      	mov	r0, r3
 800161c:	3708      	adds	r7, #8
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	e000e010 	.word	0xe000e010

08001628 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001630:	6878      	ldr	r0, [r7, #4]
 8001632:	f7ff ff29 	bl	8001488 <__NVIC_SetPriorityGrouping>
}
 8001636:	bf00      	nop
 8001638:	3708      	adds	r7, #8
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}

0800163e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800163e:	b580      	push	{r7, lr}
 8001640:	b086      	sub	sp, #24
 8001642:	af00      	add	r7, sp, #0
 8001644:	4603      	mov	r3, r0
 8001646:	60b9      	str	r1, [r7, #8]
 8001648:	607a      	str	r2, [r7, #4]
 800164a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800164c:	2300      	movs	r3, #0
 800164e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001650:	f7ff ff3e 	bl	80014d0 <__NVIC_GetPriorityGrouping>
 8001654:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001656:	687a      	ldr	r2, [r7, #4]
 8001658:	68b9      	ldr	r1, [r7, #8]
 800165a:	6978      	ldr	r0, [r7, #20]
 800165c:	f7ff ff8e 	bl	800157c <NVIC_EncodePriority>
 8001660:	4602      	mov	r2, r0
 8001662:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001666:	4611      	mov	r1, r2
 8001668:	4618      	mov	r0, r3
 800166a:	f7ff ff5d 	bl	8001528 <__NVIC_SetPriority>
}
 800166e:	bf00      	nop
 8001670:	3718      	adds	r7, #24
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}

08001676 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001676:	b580      	push	{r7, lr}
 8001678:	b082      	sub	sp, #8
 800167a:	af00      	add	r7, sp, #0
 800167c:	4603      	mov	r3, r0
 800167e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001680:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001684:	4618      	mov	r0, r3
 8001686:	f7ff ff31 	bl	80014ec <__NVIC_EnableIRQ>
}
 800168a:	bf00      	nop
 800168c:	3708      	adds	r7, #8
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}

08001692 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001692:	b580      	push	{r7, lr}
 8001694:	b082      	sub	sp, #8
 8001696:	af00      	add	r7, sp, #0
 8001698:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	f7ff ffa2 	bl	80015e4 <SysTick_Config>
 80016a0:	4603      	mov	r3, r0
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	3708      	adds	r7, #8
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
	...

080016ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b089      	sub	sp, #36	; 0x24
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
 80016b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80016b6:	2300      	movs	r3, #0
 80016b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80016ba:	2300      	movs	r3, #0
 80016bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80016be:	2300      	movs	r3, #0
 80016c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016c2:	2300      	movs	r3, #0
 80016c4:	61fb      	str	r3, [r7, #28]
 80016c6:	e159      	b.n	800197c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80016c8:	2201      	movs	r2, #1
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	fa02 f303 	lsl.w	r3, r2, r3
 80016d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	697a      	ldr	r2, [r7, #20]
 80016d8:	4013      	ands	r3, r2
 80016da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80016dc:	693a      	ldr	r2, [r7, #16]
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	429a      	cmp	r2, r3
 80016e2:	f040 8148 	bne.w	8001976 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d00b      	beq.n	8001706 <HAL_GPIO_Init+0x5a>
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	2b02      	cmp	r3, #2
 80016f4:	d007      	beq.n	8001706 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016fa:	2b11      	cmp	r3, #17
 80016fc:	d003      	beq.n	8001706 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	2b12      	cmp	r3, #18
 8001704:	d130      	bne.n	8001768 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800170c:	69fb      	ldr	r3, [r7, #28]
 800170e:	005b      	lsls	r3, r3, #1
 8001710:	2203      	movs	r2, #3
 8001712:	fa02 f303 	lsl.w	r3, r2, r3
 8001716:	43db      	mvns	r3, r3
 8001718:	69ba      	ldr	r2, [r7, #24]
 800171a:	4013      	ands	r3, r2
 800171c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	68da      	ldr	r2, [r3, #12]
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	005b      	lsls	r3, r3, #1
 8001726:	fa02 f303 	lsl.w	r3, r2, r3
 800172a:	69ba      	ldr	r2, [r7, #24]
 800172c:	4313      	orrs	r3, r2
 800172e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	69ba      	ldr	r2, [r7, #24]
 8001734:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800173c:	2201      	movs	r2, #1
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	fa02 f303 	lsl.w	r3, r2, r3
 8001744:	43db      	mvns	r3, r3
 8001746:	69ba      	ldr	r2, [r7, #24]
 8001748:	4013      	ands	r3, r2
 800174a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	091b      	lsrs	r3, r3, #4
 8001752:	f003 0201 	and.w	r2, r3, #1
 8001756:	69fb      	ldr	r3, [r7, #28]
 8001758:	fa02 f303 	lsl.w	r3, r2, r3
 800175c:	69ba      	ldr	r2, [r7, #24]
 800175e:	4313      	orrs	r3, r2
 8001760:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	69ba      	ldr	r2, [r7, #24]
 8001766:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	005b      	lsls	r3, r3, #1
 8001772:	2203      	movs	r2, #3
 8001774:	fa02 f303 	lsl.w	r3, r2, r3
 8001778:	43db      	mvns	r3, r3
 800177a:	69ba      	ldr	r2, [r7, #24]
 800177c:	4013      	ands	r3, r2
 800177e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	689a      	ldr	r2, [r3, #8]
 8001784:	69fb      	ldr	r3, [r7, #28]
 8001786:	005b      	lsls	r3, r3, #1
 8001788:	fa02 f303 	lsl.w	r3, r2, r3
 800178c:	69ba      	ldr	r2, [r7, #24]
 800178e:	4313      	orrs	r3, r2
 8001790:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	69ba      	ldr	r2, [r7, #24]
 8001796:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	2b02      	cmp	r3, #2
 800179e:	d003      	beq.n	80017a8 <HAL_GPIO_Init+0xfc>
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	2b12      	cmp	r3, #18
 80017a6:	d123      	bne.n	80017f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017a8:	69fb      	ldr	r3, [r7, #28]
 80017aa:	08da      	lsrs	r2, r3, #3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	3208      	adds	r2, #8
 80017b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	f003 0307 	and.w	r3, r3, #7
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	220f      	movs	r2, #15
 80017c0:	fa02 f303 	lsl.w	r3, r2, r3
 80017c4:	43db      	mvns	r3, r3
 80017c6:	69ba      	ldr	r2, [r7, #24]
 80017c8:	4013      	ands	r3, r2
 80017ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	691a      	ldr	r2, [r3, #16]
 80017d0:	69fb      	ldr	r3, [r7, #28]
 80017d2:	f003 0307 	and.w	r3, r3, #7
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	fa02 f303 	lsl.w	r3, r2, r3
 80017dc:	69ba      	ldr	r2, [r7, #24]
 80017de:	4313      	orrs	r3, r2
 80017e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	08da      	lsrs	r2, r3, #3
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	3208      	adds	r2, #8
 80017ea:	69b9      	ldr	r1, [r7, #24]
 80017ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	005b      	lsls	r3, r3, #1
 80017fa:	2203      	movs	r2, #3
 80017fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001800:	43db      	mvns	r3, r3
 8001802:	69ba      	ldr	r2, [r7, #24]
 8001804:	4013      	ands	r3, r2
 8001806:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	f003 0203 	and.w	r2, r3, #3
 8001810:	69fb      	ldr	r3, [r7, #28]
 8001812:	005b      	lsls	r3, r3, #1
 8001814:	fa02 f303 	lsl.w	r3, r2, r3
 8001818:	69ba      	ldr	r2, [r7, #24]
 800181a:	4313      	orrs	r3, r2
 800181c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	69ba      	ldr	r2, [r7, #24]
 8001822:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800182c:	2b00      	cmp	r3, #0
 800182e:	f000 80a2 	beq.w	8001976 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001832:	2300      	movs	r3, #0
 8001834:	60fb      	str	r3, [r7, #12]
 8001836:	4b56      	ldr	r3, [pc, #344]	; (8001990 <HAL_GPIO_Init+0x2e4>)
 8001838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800183a:	4a55      	ldr	r2, [pc, #340]	; (8001990 <HAL_GPIO_Init+0x2e4>)
 800183c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001840:	6453      	str	r3, [r2, #68]	; 0x44
 8001842:	4b53      	ldr	r3, [pc, #332]	; (8001990 <HAL_GPIO_Init+0x2e4>)
 8001844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001846:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800184a:	60fb      	str	r3, [r7, #12]
 800184c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800184e:	4a51      	ldr	r2, [pc, #324]	; (8001994 <HAL_GPIO_Init+0x2e8>)
 8001850:	69fb      	ldr	r3, [r7, #28]
 8001852:	089b      	lsrs	r3, r3, #2
 8001854:	3302      	adds	r3, #2
 8001856:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800185a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800185c:	69fb      	ldr	r3, [r7, #28]
 800185e:	f003 0303 	and.w	r3, r3, #3
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	220f      	movs	r2, #15
 8001866:	fa02 f303 	lsl.w	r3, r2, r3
 800186a:	43db      	mvns	r3, r3
 800186c:	69ba      	ldr	r2, [r7, #24]
 800186e:	4013      	ands	r3, r2
 8001870:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4a48      	ldr	r2, [pc, #288]	; (8001998 <HAL_GPIO_Init+0x2ec>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d019      	beq.n	80018ae <HAL_GPIO_Init+0x202>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4a47      	ldr	r2, [pc, #284]	; (800199c <HAL_GPIO_Init+0x2f0>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d013      	beq.n	80018aa <HAL_GPIO_Init+0x1fe>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4a46      	ldr	r2, [pc, #280]	; (80019a0 <HAL_GPIO_Init+0x2f4>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d00d      	beq.n	80018a6 <HAL_GPIO_Init+0x1fa>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4a45      	ldr	r2, [pc, #276]	; (80019a4 <HAL_GPIO_Init+0x2f8>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d007      	beq.n	80018a2 <HAL_GPIO_Init+0x1f6>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4a44      	ldr	r2, [pc, #272]	; (80019a8 <HAL_GPIO_Init+0x2fc>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d101      	bne.n	800189e <HAL_GPIO_Init+0x1f2>
 800189a:	2304      	movs	r3, #4
 800189c:	e008      	b.n	80018b0 <HAL_GPIO_Init+0x204>
 800189e:	2307      	movs	r3, #7
 80018a0:	e006      	b.n	80018b0 <HAL_GPIO_Init+0x204>
 80018a2:	2303      	movs	r3, #3
 80018a4:	e004      	b.n	80018b0 <HAL_GPIO_Init+0x204>
 80018a6:	2302      	movs	r3, #2
 80018a8:	e002      	b.n	80018b0 <HAL_GPIO_Init+0x204>
 80018aa:	2301      	movs	r3, #1
 80018ac:	e000      	b.n	80018b0 <HAL_GPIO_Init+0x204>
 80018ae:	2300      	movs	r3, #0
 80018b0:	69fa      	ldr	r2, [r7, #28]
 80018b2:	f002 0203 	and.w	r2, r2, #3
 80018b6:	0092      	lsls	r2, r2, #2
 80018b8:	4093      	lsls	r3, r2
 80018ba:	69ba      	ldr	r2, [r7, #24]
 80018bc:	4313      	orrs	r3, r2
 80018be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018c0:	4934      	ldr	r1, [pc, #208]	; (8001994 <HAL_GPIO_Init+0x2e8>)
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	089b      	lsrs	r3, r3, #2
 80018c6:	3302      	adds	r3, #2
 80018c8:	69ba      	ldr	r2, [r7, #24]
 80018ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018ce:	4b37      	ldr	r3, [pc, #220]	; (80019ac <HAL_GPIO_Init+0x300>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	43db      	mvns	r3, r3
 80018d8:	69ba      	ldr	r2, [r7, #24]
 80018da:	4013      	ands	r3, r2
 80018dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d003      	beq.n	80018f2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80018ea:	69ba      	ldr	r2, [r7, #24]
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	4313      	orrs	r3, r2
 80018f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80018f2:	4a2e      	ldr	r2, [pc, #184]	; (80019ac <HAL_GPIO_Init+0x300>)
 80018f4:	69bb      	ldr	r3, [r7, #24]
 80018f6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80018f8:	4b2c      	ldr	r3, [pc, #176]	; (80019ac <HAL_GPIO_Init+0x300>)
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	43db      	mvns	r3, r3
 8001902:	69ba      	ldr	r2, [r7, #24]
 8001904:	4013      	ands	r3, r2
 8001906:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001910:	2b00      	cmp	r3, #0
 8001912:	d003      	beq.n	800191c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001914:	69ba      	ldr	r2, [r7, #24]
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	4313      	orrs	r3, r2
 800191a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800191c:	4a23      	ldr	r2, [pc, #140]	; (80019ac <HAL_GPIO_Init+0x300>)
 800191e:	69bb      	ldr	r3, [r7, #24]
 8001920:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001922:	4b22      	ldr	r3, [pc, #136]	; (80019ac <HAL_GPIO_Init+0x300>)
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	43db      	mvns	r3, r3
 800192c:	69ba      	ldr	r2, [r7, #24]
 800192e:	4013      	ands	r3, r2
 8001930:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800193a:	2b00      	cmp	r3, #0
 800193c:	d003      	beq.n	8001946 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800193e:	69ba      	ldr	r2, [r7, #24]
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	4313      	orrs	r3, r2
 8001944:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001946:	4a19      	ldr	r2, [pc, #100]	; (80019ac <HAL_GPIO_Init+0x300>)
 8001948:	69bb      	ldr	r3, [r7, #24]
 800194a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800194c:	4b17      	ldr	r3, [pc, #92]	; (80019ac <HAL_GPIO_Init+0x300>)
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	43db      	mvns	r3, r3
 8001956:	69ba      	ldr	r2, [r7, #24]
 8001958:	4013      	ands	r3, r2
 800195a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001964:	2b00      	cmp	r3, #0
 8001966:	d003      	beq.n	8001970 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001968:	69ba      	ldr	r2, [r7, #24]
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	4313      	orrs	r3, r2
 800196e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001970:	4a0e      	ldr	r2, [pc, #56]	; (80019ac <HAL_GPIO_Init+0x300>)
 8001972:	69bb      	ldr	r3, [r7, #24]
 8001974:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	3301      	adds	r3, #1
 800197a:	61fb      	str	r3, [r7, #28]
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	2b0f      	cmp	r3, #15
 8001980:	f67f aea2 	bls.w	80016c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001984:	bf00      	nop
 8001986:	3724      	adds	r7, #36	; 0x24
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr
 8001990:	40023800 	.word	0x40023800
 8001994:	40013800 	.word	0x40013800
 8001998:	40020000 	.word	0x40020000
 800199c:	40020400 	.word	0x40020400
 80019a0:	40020800 	.word	0x40020800
 80019a4:	40020c00 	.word	0x40020c00
 80019a8:	40021000 	.word	0x40021000
 80019ac:	40013c00 	.word	0x40013c00

080019b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b085      	sub	sp, #20
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
 80019b8:	460b      	mov	r3, r1
 80019ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	691a      	ldr	r2, [r3, #16]
 80019c0:	887b      	ldrh	r3, [r7, #2]
 80019c2:	4013      	ands	r3, r2
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d002      	beq.n	80019ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80019c8:	2301      	movs	r3, #1
 80019ca:	73fb      	strb	r3, [r7, #15]
 80019cc:	e001      	b.n	80019d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80019ce:	2300      	movs	r3, #0
 80019d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80019d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3714      	adds	r7, #20
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr

080019e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
 80019e8:	460b      	mov	r3, r1
 80019ea:	807b      	strh	r3, [r7, #2]
 80019ec:	4613      	mov	r3, r2
 80019ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019f0:	787b      	ldrb	r3, [r7, #1]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d003      	beq.n	80019fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019f6:	887a      	ldrh	r2, [r7, #2]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80019fc:	e003      	b.n	8001a06 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80019fe:	887b      	ldrh	r3, [r7, #2]
 8001a00:	041a      	lsls	r2, r3, #16
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	619a      	str	r2, [r3, #24]
}
 8001a06:	bf00      	nop
 8001a08:	370c      	adds	r7, #12
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr

08001a12 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001a12:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a14:	b08f      	sub	sp, #60	; 0x3c
 8001a16:	af0a      	add	r7, sp, #40	; 0x28
 8001a18:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d101      	bne.n	8001a24 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	e10f      	b.n	8001c44 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d106      	bne.n	8001a44 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f004 fc5c 	bl	80062fc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2203      	movs	r2, #3
 8001a48:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d102      	bne.n	8001a5e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4618      	mov	r0, r3
 8001a64:	f001 fe69 	bl	800373a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	603b      	str	r3, [r7, #0]
 8001a6e:	687e      	ldr	r6, [r7, #4]
 8001a70:	466d      	mov	r5, sp
 8001a72:	f106 0410 	add.w	r4, r6, #16
 8001a76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a7e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001a82:	e885 0003 	stmia.w	r5, {r0, r1}
 8001a86:	1d33      	adds	r3, r6, #4
 8001a88:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a8a:	6838      	ldr	r0, [r7, #0]
 8001a8c:	f001 fd40 	bl	8003510 <USB_CoreInit>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d005      	beq.n	8001aa2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2202      	movs	r2, #2
 8001a9a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e0d0      	b.n	8001c44 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	2100      	movs	r1, #0
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f001 fe57 	bl	800375c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001aae:	2300      	movs	r3, #0
 8001ab0:	73fb      	strb	r3, [r7, #15]
 8001ab2:	e04a      	b.n	8001b4a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001ab4:	7bfa      	ldrb	r2, [r7, #15]
 8001ab6:	6879      	ldr	r1, [r7, #4]
 8001ab8:	4613      	mov	r3, r2
 8001aba:	00db      	lsls	r3, r3, #3
 8001abc:	1a9b      	subs	r3, r3, r2
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	440b      	add	r3, r1
 8001ac2:	333d      	adds	r3, #61	; 0x3d
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001ac8:	7bfa      	ldrb	r2, [r7, #15]
 8001aca:	6879      	ldr	r1, [r7, #4]
 8001acc:	4613      	mov	r3, r2
 8001ace:	00db      	lsls	r3, r3, #3
 8001ad0:	1a9b      	subs	r3, r3, r2
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	440b      	add	r3, r1
 8001ad6:	333c      	adds	r3, #60	; 0x3c
 8001ad8:	7bfa      	ldrb	r2, [r7, #15]
 8001ada:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001adc:	7bfa      	ldrb	r2, [r7, #15]
 8001ade:	7bfb      	ldrb	r3, [r7, #15]
 8001ae0:	b298      	uxth	r0, r3
 8001ae2:	6879      	ldr	r1, [r7, #4]
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	00db      	lsls	r3, r3, #3
 8001ae8:	1a9b      	subs	r3, r3, r2
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	440b      	add	r3, r1
 8001aee:	3342      	adds	r3, #66	; 0x42
 8001af0:	4602      	mov	r2, r0
 8001af2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001af4:	7bfa      	ldrb	r2, [r7, #15]
 8001af6:	6879      	ldr	r1, [r7, #4]
 8001af8:	4613      	mov	r3, r2
 8001afa:	00db      	lsls	r3, r3, #3
 8001afc:	1a9b      	subs	r3, r3, r2
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	440b      	add	r3, r1
 8001b02:	333f      	adds	r3, #63	; 0x3f
 8001b04:	2200      	movs	r2, #0
 8001b06:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001b08:	7bfa      	ldrb	r2, [r7, #15]
 8001b0a:	6879      	ldr	r1, [r7, #4]
 8001b0c:	4613      	mov	r3, r2
 8001b0e:	00db      	lsls	r3, r3, #3
 8001b10:	1a9b      	subs	r3, r3, r2
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	440b      	add	r3, r1
 8001b16:	3344      	adds	r3, #68	; 0x44
 8001b18:	2200      	movs	r2, #0
 8001b1a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001b1c:	7bfa      	ldrb	r2, [r7, #15]
 8001b1e:	6879      	ldr	r1, [r7, #4]
 8001b20:	4613      	mov	r3, r2
 8001b22:	00db      	lsls	r3, r3, #3
 8001b24:	1a9b      	subs	r3, r3, r2
 8001b26:	009b      	lsls	r3, r3, #2
 8001b28:	440b      	add	r3, r1
 8001b2a:	3348      	adds	r3, #72	; 0x48
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001b30:	7bfa      	ldrb	r2, [r7, #15]
 8001b32:	6879      	ldr	r1, [r7, #4]
 8001b34:	4613      	mov	r3, r2
 8001b36:	00db      	lsls	r3, r3, #3
 8001b38:	1a9b      	subs	r3, r3, r2
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	440b      	add	r3, r1
 8001b3e:	3350      	adds	r3, #80	; 0x50
 8001b40:	2200      	movs	r2, #0
 8001b42:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b44:	7bfb      	ldrb	r3, [r7, #15]
 8001b46:	3301      	adds	r3, #1
 8001b48:	73fb      	strb	r3, [r7, #15]
 8001b4a:	7bfa      	ldrb	r2, [r7, #15]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d3af      	bcc.n	8001ab4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b54:	2300      	movs	r3, #0
 8001b56:	73fb      	strb	r3, [r7, #15]
 8001b58:	e044      	b.n	8001be4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001b5a:	7bfa      	ldrb	r2, [r7, #15]
 8001b5c:	6879      	ldr	r1, [r7, #4]
 8001b5e:	4613      	mov	r3, r2
 8001b60:	00db      	lsls	r3, r3, #3
 8001b62:	1a9b      	subs	r3, r3, r2
 8001b64:	009b      	lsls	r3, r3, #2
 8001b66:	440b      	add	r3, r1
 8001b68:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001b70:	7bfa      	ldrb	r2, [r7, #15]
 8001b72:	6879      	ldr	r1, [r7, #4]
 8001b74:	4613      	mov	r3, r2
 8001b76:	00db      	lsls	r3, r3, #3
 8001b78:	1a9b      	subs	r3, r3, r2
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	440b      	add	r3, r1
 8001b7e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001b82:	7bfa      	ldrb	r2, [r7, #15]
 8001b84:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001b86:	7bfa      	ldrb	r2, [r7, #15]
 8001b88:	6879      	ldr	r1, [r7, #4]
 8001b8a:	4613      	mov	r3, r2
 8001b8c:	00db      	lsls	r3, r3, #3
 8001b8e:	1a9b      	subs	r3, r3, r2
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	440b      	add	r3, r1
 8001b94:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001b98:	2200      	movs	r2, #0
 8001b9a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001b9c:	7bfa      	ldrb	r2, [r7, #15]
 8001b9e:	6879      	ldr	r1, [r7, #4]
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	00db      	lsls	r3, r3, #3
 8001ba4:	1a9b      	subs	r3, r3, r2
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	440b      	add	r3, r1
 8001baa:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001bae:	2200      	movs	r2, #0
 8001bb0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001bb2:	7bfa      	ldrb	r2, [r7, #15]
 8001bb4:	6879      	ldr	r1, [r7, #4]
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	00db      	lsls	r3, r3, #3
 8001bba:	1a9b      	subs	r3, r3, r2
 8001bbc:	009b      	lsls	r3, r3, #2
 8001bbe:	440b      	add	r3, r1
 8001bc0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001bc8:	7bfa      	ldrb	r2, [r7, #15]
 8001bca:	6879      	ldr	r1, [r7, #4]
 8001bcc:	4613      	mov	r3, r2
 8001bce:	00db      	lsls	r3, r3, #3
 8001bd0:	1a9b      	subs	r3, r3, r2
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	440b      	add	r3, r1
 8001bd6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001bda:	2200      	movs	r2, #0
 8001bdc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bde:	7bfb      	ldrb	r3, [r7, #15]
 8001be0:	3301      	adds	r3, #1
 8001be2:	73fb      	strb	r3, [r7, #15]
 8001be4:	7bfa      	ldrb	r2, [r7, #15]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	429a      	cmp	r2, r3
 8001bec:	d3b5      	bcc.n	8001b5a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	603b      	str	r3, [r7, #0]
 8001bf4:	687e      	ldr	r6, [r7, #4]
 8001bf6:	466d      	mov	r5, sp
 8001bf8:	f106 0410 	add.w	r4, r6, #16
 8001bfc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bfe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c00:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c02:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c04:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001c08:	e885 0003 	stmia.w	r5, {r0, r1}
 8001c0c:	1d33      	adds	r3, r6, #4
 8001c0e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c10:	6838      	ldr	r0, [r7, #0]
 8001c12:	f001 fdcd 	bl	80037b0 <USB_DevInit>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d005      	beq.n	8001c28 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2202      	movs	r2, #2
 8001c20:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	e00d      	b.n	8001c44 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2201      	movs	r2, #1
 8001c34:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f002 fe0c 	bl	800485a <USB_DevDisconnect>

  return HAL_OK;
 8001c42:	2300      	movs	r3, #0
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	3714      	adds	r7, #20
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001c4c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b084      	sub	sp, #16
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d101      	bne.n	8001c68 <HAL_PCD_Start+0x1c>
 8001c64:	2302      	movs	r3, #2
 8001c66:	e020      	b.n	8001caa <HAL_PCD_Start+0x5e>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d109      	bne.n	8001c8c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d005      	beq.n	8001c8c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c84:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4618      	mov	r0, r3
 8001c92:	f002 fdca 	bl	800482a <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f001 fd3c 	bl	8003718 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001ca8:	2300      	movs	r3, #0
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3710      	adds	r7, #16
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}

08001cb2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001cb2:	b590      	push	{r4, r7, lr}
 8001cb4:	b08d      	sub	sp, #52	; 0x34
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001cc0:	6a3b      	ldr	r3, [r7, #32]
 8001cc2:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f002 fe71 	bl	80049b0 <USB_GetMode>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	f040 839d 	bne.w	8002410 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f002 fdd5 	bl	800488a <USB_ReadInterrupts>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	f000 8393 	beq.w	800240e <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4618      	mov	r0, r3
 8001cee:	f002 fdcc 	bl	800488a <USB_ReadInterrupts>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	f003 0302 	and.w	r3, r3, #2
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	d107      	bne.n	8001d0c <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	695a      	ldr	r2, [r3, #20]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f002 0202 	and.w	r2, r2, #2
 8001d0a:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4618      	mov	r0, r3
 8001d12:	f002 fdba 	bl	800488a <USB_ReadInterrupts>
 8001d16:	4603      	mov	r3, r0
 8001d18:	f003 0310 	and.w	r3, r3, #16
 8001d1c:	2b10      	cmp	r3, #16
 8001d1e:	d161      	bne.n	8001de4 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	699a      	ldr	r2, [r3, #24]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f022 0210 	bic.w	r2, r2, #16
 8001d2e:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001d30:	6a3b      	ldr	r3, [r7, #32]
 8001d32:	6a1b      	ldr	r3, [r3, #32]
 8001d34:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001d36:	69bb      	ldr	r3, [r7, #24]
 8001d38:	f003 020f 	and.w	r2, r3, #15
 8001d3c:	4613      	mov	r3, r2
 8001d3e:	00db      	lsls	r3, r3, #3
 8001d40:	1a9b      	subs	r3, r3, r2
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001d48:	687a      	ldr	r2, [r7, #4]
 8001d4a:	4413      	add	r3, r2
 8001d4c:	3304      	adds	r3, #4
 8001d4e:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001d50:	69bb      	ldr	r3, [r7, #24]
 8001d52:	0c5b      	lsrs	r3, r3, #17
 8001d54:	f003 030f 	and.w	r3, r3, #15
 8001d58:	2b02      	cmp	r3, #2
 8001d5a:	d124      	bne.n	8001da6 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001d5c:	69ba      	ldr	r2, [r7, #24]
 8001d5e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001d62:	4013      	ands	r3, r2
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d035      	beq.n	8001dd4 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001d6c:	69bb      	ldr	r3, [r7, #24]
 8001d6e:	091b      	lsrs	r3, r3, #4
 8001d70:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001d72:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001d76:	b29b      	uxth	r3, r3
 8001d78:	461a      	mov	r2, r3
 8001d7a:	6a38      	ldr	r0, [r7, #32]
 8001d7c:	f002 fc32 	bl	80045e4 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	68da      	ldr	r2, [r3, #12]
 8001d84:	69bb      	ldr	r3, [r7, #24]
 8001d86:	091b      	lsrs	r3, r3, #4
 8001d88:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001d8c:	441a      	add	r2, r3
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	699a      	ldr	r2, [r3, #24]
 8001d96:	69bb      	ldr	r3, [r7, #24]
 8001d98:	091b      	lsrs	r3, r3, #4
 8001d9a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001d9e:	441a      	add	r2, r3
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	619a      	str	r2, [r3, #24]
 8001da4:	e016      	b.n	8001dd4 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001da6:	69bb      	ldr	r3, [r7, #24]
 8001da8:	0c5b      	lsrs	r3, r3, #17
 8001daa:	f003 030f 	and.w	r3, r3, #15
 8001dae:	2b06      	cmp	r3, #6
 8001db0:	d110      	bne.n	8001dd4 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001db8:	2208      	movs	r2, #8
 8001dba:	4619      	mov	r1, r3
 8001dbc:	6a38      	ldr	r0, [r7, #32]
 8001dbe:	f002 fc11 	bl	80045e4 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	699a      	ldr	r2, [r3, #24]
 8001dc6:	69bb      	ldr	r3, [r7, #24]
 8001dc8:	091b      	lsrs	r3, r3, #4
 8001dca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001dce:	441a      	add	r2, r3
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	699a      	ldr	r2, [r3, #24]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f042 0210 	orr.w	r2, r2, #16
 8001de2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4618      	mov	r0, r3
 8001dea:	f002 fd4e 	bl	800488a <USB_ReadInterrupts>
 8001dee:	4603      	mov	r3, r0
 8001df0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001df4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001df8:	d16e      	bne.n	8001ed8 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4618      	mov	r0, r3
 8001e04:	f002 fd54 	bl	80048b0 <USB_ReadDevAllOutEpInterrupt>
 8001e08:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001e0a:	e062      	b.n	8001ed2 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e0e:	f003 0301 	and.w	r3, r3, #1
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d057      	beq.n	8001ec6 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e1c:	b2d2      	uxtb	r2, r2
 8001e1e:	4611      	mov	r1, r2
 8001e20:	4618      	mov	r0, r3
 8001e22:	f002 fd79 	bl	8004918 <USB_ReadDevOutEPInterrupt>
 8001e26:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	f003 0301 	and.w	r3, r3, #1
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d00c      	beq.n	8001e4c <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e34:	015a      	lsls	r2, r3, #5
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	4413      	add	r3, r2
 8001e3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e3e:	461a      	mov	r2, r3
 8001e40:	2301      	movs	r3, #1
 8001e42:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001e44:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f000 fd98 	bl	800297c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	f003 0308 	and.w	r3, r3, #8
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d00c      	beq.n	8001e70 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e58:	015a      	lsls	r2, r3, #5
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	4413      	add	r3, r2
 8001e5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e62:	461a      	mov	r2, r3
 8001e64:	2308      	movs	r3, #8
 8001e66:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001e68:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f000 fe92 	bl	8002b94 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	f003 0310 	and.w	r3, r3, #16
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d008      	beq.n	8001e8c <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7c:	015a      	lsls	r2, r3, #5
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	4413      	add	r3, r2
 8001e82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e86:	461a      	mov	r2, r3
 8001e88:	2310      	movs	r3, #16
 8001e8a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	f003 0320 	and.w	r3, r3, #32
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d008      	beq.n	8001ea8 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e98:	015a      	lsls	r2, r3, #5
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	4413      	add	r3, r2
 8001e9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	2320      	movs	r3, #32
 8001ea6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d009      	beq.n	8001ec6 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb4:	015a      	lsls	r2, r3, #5
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	4413      	add	r3, r2
 8001eba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ebe:	461a      	mov	r2, r3
 8001ec0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ec4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec8:	3301      	adds	r3, #1
 8001eca:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ece:	085b      	lsrs	r3, r3, #1
 8001ed0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d199      	bne.n	8001e0c <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4618      	mov	r0, r3
 8001ede:	f002 fcd4 	bl	800488a <USB_ReadInterrupts>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ee8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001eec:	f040 80c0 	bne.w	8002070 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f002 fcf5 	bl	80048e4 <USB_ReadDevAllInEpInterrupt>
 8001efa:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001efc:	2300      	movs	r3, #0
 8001efe:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001f00:	e0b2      	b.n	8002068 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f04:	f003 0301 	and.w	r3, r3, #1
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	f000 80a7 	beq.w	800205c <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f14:	b2d2      	uxtb	r2, r2
 8001f16:	4611      	mov	r1, r2
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f002 fd1b 	bl	8004954 <USB_ReadDevInEPInterrupt>
 8001f1e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	f003 0301 	and.w	r3, r3, #1
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d057      	beq.n	8001fda <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2c:	f003 030f 	and.w	r3, r3, #15
 8001f30:	2201      	movs	r2, #1
 8001f32:	fa02 f303 	lsl.w	r3, r2, r3
 8001f36:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001f38:	69fb      	ldr	r3, [r7, #28]
 8001f3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	43db      	mvns	r3, r3
 8001f44:	69f9      	ldr	r1, [r7, #28]
 8001f46:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f50:	015a      	lsls	r2, r3, #5
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	4413      	add	r3, r2
 8001f56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	691b      	ldr	r3, [r3, #16]
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	d132      	bne.n	8001fce <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001f68:	6879      	ldr	r1, [r7, #4]
 8001f6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f6c:	4613      	mov	r3, r2
 8001f6e:	00db      	lsls	r3, r3, #3
 8001f70:	1a9b      	subs	r3, r3, r2
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	440b      	add	r3, r1
 8001f76:	3348      	adds	r3, #72	; 0x48
 8001f78:	6819      	ldr	r1, [r3, #0]
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f7e:	4613      	mov	r3, r2
 8001f80:	00db      	lsls	r3, r3, #3
 8001f82:	1a9b      	subs	r3, r3, r2
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	4403      	add	r3, r0
 8001f88:	3344      	adds	r3, #68	; 0x44
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4419      	add	r1, r3
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f92:	4613      	mov	r3, r2
 8001f94:	00db      	lsls	r3, r3, #3
 8001f96:	1a9b      	subs	r3, r3, r2
 8001f98:	009b      	lsls	r3, r3, #2
 8001f9a:	4403      	add	r3, r0
 8001f9c:	3348      	adds	r3, #72	; 0x48
 8001f9e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d113      	bne.n	8001fce <HAL_PCD_IRQHandler+0x31c>
 8001fa6:	6879      	ldr	r1, [r7, #4]
 8001fa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001faa:	4613      	mov	r3, r2
 8001fac:	00db      	lsls	r3, r3, #3
 8001fae:	1a9b      	subs	r3, r3, r2
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	440b      	add	r3, r1
 8001fb4:	3350      	adds	r3, #80	; 0x50
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d108      	bne.n	8001fce <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6818      	ldr	r0, [r3, #0]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	2101      	movs	r1, #1
 8001fca:	f002 fd23 	bl	8004a14 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	6878      	ldr	r0, [r7, #4]
 8001fd6:	f004 fa12 	bl	80063fe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	f003 0308 	and.w	r3, r3, #8
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d008      	beq.n	8001ff6 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe6:	015a      	lsls	r2, r3, #5
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	4413      	add	r3, r2
 8001fec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	2308      	movs	r3, #8
 8001ff4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	f003 0310 	and.w	r3, r3, #16
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d008      	beq.n	8002012 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002002:	015a      	lsls	r2, r3, #5
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	4413      	add	r3, r2
 8002008:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800200c:	461a      	mov	r2, r3
 800200e:	2310      	movs	r3, #16
 8002010:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002018:	2b00      	cmp	r3, #0
 800201a:	d008      	beq.n	800202e <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800201c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201e:	015a      	lsls	r2, r3, #5
 8002020:	69fb      	ldr	r3, [r7, #28]
 8002022:	4413      	add	r3, r2
 8002024:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002028:	461a      	mov	r2, r3
 800202a:	2340      	movs	r3, #64	; 0x40
 800202c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	f003 0302 	and.w	r3, r3, #2
 8002034:	2b00      	cmp	r3, #0
 8002036:	d008      	beq.n	800204a <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203a:	015a      	lsls	r2, r3, #5
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	4413      	add	r3, r2
 8002040:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002044:	461a      	mov	r2, r3
 8002046:	2302      	movs	r3, #2
 8002048:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002050:	2b00      	cmp	r3, #0
 8002052:	d003      	beq.n	800205c <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002054:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f000 fc03 	bl	8002862 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800205c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205e:	3301      	adds	r3, #1
 8002060:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002064:	085b      	lsrs	r3, r3, #1
 8002066:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800206a:	2b00      	cmp	r3, #0
 800206c:	f47f af49 	bne.w	8001f02 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4618      	mov	r0, r3
 8002076:	f002 fc08 	bl	800488a <USB_ReadInterrupts>
 800207a:	4603      	mov	r3, r0
 800207c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002080:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002084:	d122      	bne.n	80020cc <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	69fa      	ldr	r2, [r7, #28]
 8002090:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002094:	f023 0301 	bic.w	r3, r3, #1
 8002098:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d108      	bne.n	80020b6 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2200      	movs	r2, #0
 80020a8:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80020ac:	2100      	movs	r1, #0
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f000 fe0e 	bl	8002cd0 <HAL_PCDEx_LPM_Callback>
 80020b4:	e002      	b.n	80020bc <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f004 fa0e 	bl	80064d8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	695a      	ldr	r2, [r3, #20]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80020ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4618      	mov	r0, r3
 80020d2:	f002 fbda 	bl	800488a <USB_ReadInterrupts>
 80020d6:	4603      	mov	r3, r0
 80020d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80020e0:	d112      	bne.n	8002108 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	f003 0301 	and.w	r3, r3, #1
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d102      	bne.n	80020f8 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f004 f9ca 	bl	800648c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	695a      	ldr	r2, [r3, #20]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002106:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4618      	mov	r0, r3
 800210e:	f002 fbbc 	bl	800488a <USB_ReadInterrupts>
 8002112:	4603      	mov	r3, r0
 8002114:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002118:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800211c:	f040 80c7 	bne.w	80022ae <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	69fa      	ldr	r2, [r7, #28]
 800212a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800212e:	f023 0301 	bic.w	r3, r3, #1
 8002132:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	2110      	movs	r1, #16
 800213a:	4618      	mov	r0, r3
 800213c:	f001 fc9c 	bl	8003a78 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002140:	2300      	movs	r3, #0
 8002142:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002144:	e056      	b.n	80021f4 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002148:	015a      	lsls	r2, r3, #5
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	4413      	add	r3, r2
 800214e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002152:	461a      	mov	r2, r3
 8002154:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002158:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800215a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800215c:	015a      	lsls	r2, r3, #5
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	4413      	add	r3, r2
 8002162:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800216a:	0151      	lsls	r1, r2, #5
 800216c:	69fa      	ldr	r2, [r7, #28]
 800216e:	440a      	add	r2, r1
 8002170:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002174:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002178:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800217a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800217c:	015a      	lsls	r2, r3, #5
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	4413      	add	r3, r2
 8002182:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800218a:	0151      	lsls	r1, r2, #5
 800218c:	69fa      	ldr	r2, [r7, #28]
 800218e:	440a      	add	r2, r1
 8002190:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002194:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002198:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800219a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800219c:	015a      	lsls	r2, r3, #5
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	4413      	add	r3, r2
 80021a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021a6:	461a      	mov	r2, r3
 80021a8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80021ac:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80021ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021b0:	015a      	lsls	r2, r3, #5
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	4413      	add	r3, r2
 80021b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80021be:	0151      	lsls	r1, r2, #5
 80021c0:	69fa      	ldr	r2, [r7, #28]
 80021c2:	440a      	add	r2, r1
 80021c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80021c8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80021cc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80021ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021d0:	015a      	lsls	r2, r3, #5
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	4413      	add	r3, r2
 80021d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80021de:	0151      	lsls	r1, r2, #5
 80021e0:	69fa      	ldr	r2, [r7, #28]
 80021e2:	440a      	add	r2, r1
 80021e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80021e8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80021ec:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021f0:	3301      	adds	r3, #1
 80021f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80021fa:	429a      	cmp	r2, r3
 80021fc:	d3a3      	bcc.n	8002146 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002204:	69db      	ldr	r3, [r3, #28]
 8002206:	69fa      	ldr	r2, [r7, #28]
 8002208:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800220c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002210:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002216:	2b00      	cmp	r3, #0
 8002218:	d016      	beq.n	8002248 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002220:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002224:	69fa      	ldr	r2, [r7, #28]
 8002226:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800222a:	f043 030b 	orr.w	r3, r3, #11
 800222e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800223a:	69fa      	ldr	r2, [r7, #28]
 800223c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002240:	f043 030b 	orr.w	r3, r3, #11
 8002244:	6453      	str	r3, [r2, #68]	; 0x44
 8002246:	e015      	b.n	8002274 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800224e:	695b      	ldr	r3, [r3, #20]
 8002250:	69fa      	ldr	r2, [r7, #28]
 8002252:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002256:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800225a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800225e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002266:	691b      	ldr	r3, [r3, #16]
 8002268:	69fa      	ldr	r2, [r7, #28]
 800226a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800226e:	f043 030b 	orr.w	r3, r3, #11
 8002272:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	69fa      	ldr	r2, [r7, #28]
 800227e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002282:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002286:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6818      	ldr	r0, [r3, #0]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	691b      	ldr	r3, [r3, #16]
 8002290:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002298:	461a      	mov	r2, r3
 800229a:	f002 fbbb 	bl	8004a14 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	695a      	ldr	r2, [r3, #20]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80022ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4618      	mov	r0, r3
 80022b4:	f002 fae9 	bl	800488a <USB_ReadInterrupts>
 80022b8:	4603      	mov	r3, r0
 80022ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022c2:	d124      	bne.n	800230e <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4618      	mov	r0, r3
 80022ca:	f002 fb7f 	bl	80049cc <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4618      	mov	r0, r3
 80022d4:	f001 fc31 	bl	8003b3a <USB_GetDevSpeed>
 80022d8:	4603      	mov	r3, r0
 80022da:	461a      	mov	r2, r3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681c      	ldr	r4, [r3, #0]
 80022e4:	f001 f908 	bl	80034f8 <HAL_RCC_GetHCLKFreq>
 80022e8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80022ee:	b2db      	uxtb	r3, r3
 80022f0:	461a      	mov	r2, r3
 80022f2:	4620      	mov	r0, r4
 80022f4:	f001 f96e 	bl	80035d4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	f004 f8a8 	bl	800644e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	695a      	ldr	r2, [r3, #20]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800230c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4618      	mov	r0, r3
 8002314:	f002 fab9 	bl	800488a <USB_ReadInterrupts>
 8002318:	4603      	mov	r3, r0
 800231a:	f003 0308 	and.w	r3, r3, #8
 800231e:	2b08      	cmp	r3, #8
 8002320:	d10a      	bne.n	8002338 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f004 f885 	bl	8006432 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	695a      	ldr	r2, [r3, #20]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f002 0208 	and.w	r2, r2, #8
 8002336:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4618      	mov	r0, r3
 800233e:	f002 faa4 	bl	800488a <USB_ReadInterrupts>
 8002342:	4603      	mov	r3, r0
 8002344:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002348:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800234c:	d10f      	bne.n	800236e <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800234e:	2300      	movs	r3, #0
 8002350:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002354:	b2db      	uxtb	r3, r3
 8002356:	4619      	mov	r1, r3
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	f004 f8dd 	bl	8006518 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	695a      	ldr	r2, [r3, #20]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800236c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4618      	mov	r0, r3
 8002374:	f002 fa89 	bl	800488a <USB_ReadInterrupts>
 8002378:	4603      	mov	r3, r0
 800237a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800237e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002382:	d10f      	bne.n	80023a4 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002384:	2300      	movs	r3, #0
 8002386:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238a:	b2db      	uxtb	r3, r3
 800238c:	4619      	mov	r1, r3
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f004 f8b0 	bl	80064f4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	695a      	ldr	r2, [r3, #20]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80023a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4618      	mov	r0, r3
 80023aa:	f002 fa6e 	bl	800488a <USB_ReadInterrupts>
 80023ae:	4603      	mov	r3, r0
 80023b0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80023b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023b8:	d10a      	bne.n	80023d0 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f004 f8be 	bl	800653c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	695a      	ldr	r2, [r3, #20]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80023ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4618      	mov	r0, r3
 80023d6:	f002 fa58 	bl	800488a <USB_ReadInterrupts>
 80023da:	4603      	mov	r3, r0
 80023dc:	f003 0304 	and.w	r3, r3, #4
 80023e0:	2b04      	cmp	r3, #4
 80023e2:	d115      	bne.n	8002410 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80023ec:	69bb      	ldr	r3, [r7, #24]
 80023ee:	f003 0304 	and.w	r3, r3, #4
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d002      	beq.n	80023fc <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f004 f8ae 	bl	8006558 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	6859      	ldr	r1, [r3, #4]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	69ba      	ldr	r2, [r7, #24]
 8002408:	430a      	orrs	r2, r1
 800240a:	605a      	str	r2, [r3, #4]
 800240c:	e000      	b.n	8002410 <HAL_PCD_IRQHandler+0x75e>
      return;
 800240e:	bf00      	nop
    }
  }
}
 8002410:	3734      	adds	r7, #52	; 0x34
 8002412:	46bd      	mov	sp, r7
 8002414:	bd90      	pop	{r4, r7, pc}

08002416 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002416:	b580      	push	{r7, lr}
 8002418:	b082      	sub	sp, #8
 800241a:	af00      	add	r7, sp, #0
 800241c:	6078      	str	r0, [r7, #4]
 800241e:	460b      	mov	r3, r1
 8002420:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002428:	2b01      	cmp	r3, #1
 800242a:	d101      	bne.n	8002430 <HAL_PCD_SetAddress+0x1a>
 800242c:	2302      	movs	r3, #2
 800242e:	e013      	b.n	8002458 <HAL_PCD_SetAddress+0x42>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2201      	movs	r2, #1
 8002434:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	78fa      	ldrb	r2, [r7, #3]
 800243c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	78fa      	ldrb	r2, [r7, #3]
 8002446:	4611      	mov	r1, r2
 8002448:	4618      	mov	r0, r3
 800244a:	f002 f9c8 	bl	80047de <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2200      	movs	r2, #0
 8002452:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002456:	2300      	movs	r3, #0
}
 8002458:	4618      	mov	r0, r3
 800245a:	3708      	adds	r7, #8
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}

08002460 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b084      	sub	sp, #16
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
 8002468:	4608      	mov	r0, r1
 800246a:	4611      	mov	r1, r2
 800246c:	461a      	mov	r2, r3
 800246e:	4603      	mov	r3, r0
 8002470:	70fb      	strb	r3, [r7, #3]
 8002472:	460b      	mov	r3, r1
 8002474:	803b      	strh	r3, [r7, #0]
 8002476:	4613      	mov	r3, r2
 8002478:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800247a:	2300      	movs	r3, #0
 800247c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800247e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002482:	2b00      	cmp	r3, #0
 8002484:	da0f      	bge.n	80024a6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002486:	78fb      	ldrb	r3, [r7, #3]
 8002488:	f003 020f 	and.w	r2, r3, #15
 800248c:	4613      	mov	r3, r2
 800248e:	00db      	lsls	r3, r3, #3
 8002490:	1a9b      	subs	r3, r3, r2
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	3338      	adds	r3, #56	; 0x38
 8002496:	687a      	ldr	r2, [r7, #4]
 8002498:	4413      	add	r3, r2
 800249a:	3304      	adds	r3, #4
 800249c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2201      	movs	r2, #1
 80024a2:	705a      	strb	r2, [r3, #1]
 80024a4:	e00f      	b.n	80024c6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80024a6:	78fb      	ldrb	r3, [r7, #3]
 80024a8:	f003 020f 	and.w	r2, r3, #15
 80024ac:	4613      	mov	r3, r2
 80024ae:	00db      	lsls	r3, r3, #3
 80024b0:	1a9b      	subs	r3, r3, r2
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80024b8:	687a      	ldr	r2, [r7, #4]
 80024ba:	4413      	add	r3, r2
 80024bc:	3304      	adds	r3, #4
 80024be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2200      	movs	r2, #0
 80024c4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80024c6:	78fb      	ldrb	r3, [r7, #3]
 80024c8:	f003 030f 	and.w	r3, r3, #15
 80024cc:	b2da      	uxtb	r2, r3
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80024d2:	883a      	ldrh	r2, [r7, #0]
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	78ba      	ldrb	r2, [r7, #2]
 80024dc:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	785b      	ldrb	r3, [r3, #1]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d004      	beq.n	80024f0 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	781b      	ldrb	r3, [r3, #0]
 80024ea:	b29a      	uxth	r2, r3
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80024f0:	78bb      	ldrb	r3, [r7, #2]
 80024f2:	2b02      	cmp	r3, #2
 80024f4:	d102      	bne.n	80024fc <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	2200      	movs	r2, #0
 80024fa:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002502:	2b01      	cmp	r3, #1
 8002504:	d101      	bne.n	800250a <HAL_PCD_EP_Open+0xaa>
 8002506:	2302      	movs	r3, #2
 8002508:	e00e      	b.n	8002528 <HAL_PCD_EP_Open+0xc8>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2201      	movs	r2, #1
 800250e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	68f9      	ldr	r1, [r7, #12]
 8002518:	4618      	mov	r0, r3
 800251a:	f001 fb33 	bl	8003b84 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2200      	movs	r2, #0
 8002522:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002526:	7afb      	ldrb	r3, [r7, #11]
}
 8002528:	4618      	mov	r0, r3
 800252a:	3710      	adds	r7, #16
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}

08002530 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b084      	sub	sp, #16
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	460b      	mov	r3, r1
 800253a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800253c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002540:	2b00      	cmp	r3, #0
 8002542:	da0f      	bge.n	8002564 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002544:	78fb      	ldrb	r3, [r7, #3]
 8002546:	f003 020f 	and.w	r2, r3, #15
 800254a:	4613      	mov	r3, r2
 800254c:	00db      	lsls	r3, r3, #3
 800254e:	1a9b      	subs	r3, r3, r2
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	3338      	adds	r3, #56	; 0x38
 8002554:	687a      	ldr	r2, [r7, #4]
 8002556:	4413      	add	r3, r2
 8002558:	3304      	adds	r3, #4
 800255a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2201      	movs	r2, #1
 8002560:	705a      	strb	r2, [r3, #1]
 8002562:	e00f      	b.n	8002584 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002564:	78fb      	ldrb	r3, [r7, #3]
 8002566:	f003 020f 	and.w	r2, r3, #15
 800256a:	4613      	mov	r3, r2
 800256c:	00db      	lsls	r3, r3, #3
 800256e:	1a9b      	subs	r3, r3, r2
 8002570:	009b      	lsls	r3, r3, #2
 8002572:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	4413      	add	r3, r2
 800257a:	3304      	adds	r3, #4
 800257c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2200      	movs	r2, #0
 8002582:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002584:	78fb      	ldrb	r3, [r7, #3]
 8002586:	f003 030f 	and.w	r3, r3, #15
 800258a:	b2da      	uxtb	r2, r3
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002596:	2b01      	cmp	r3, #1
 8002598:	d101      	bne.n	800259e <HAL_PCD_EP_Close+0x6e>
 800259a:	2302      	movs	r3, #2
 800259c:	e00e      	b.n	80025bc <HAL_PCD_EP_Close+0x8c>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2201      	movs	r2, #1
 80025a2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	68f9      	ldr	r1, [r7, #12]
 80025ac:	4618      	mov	r0, r3
 80025ae:	f001 fb71 	bl	8003c94 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2200      	movs	r2, #0
 80025b6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80025ba:	2300      	movs	r3, #0
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3710      	adds	r7, #16
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}

080025c4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b086      	sub	sp, #24
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	60f8      	str	r0, [r7, #12]
 80025cc:	607a      	str	r2, [r7, #4]
 80025ce:	603b      	str	r3, [r7, #0]
 80025d0:	460b      	mov	r3, r1
 80025d2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80025d4:	7afb      	ldrb	r3, [r7, #11]
 80025d6:	f003 020f 	and.w	r2, r3, #15
 80025da:	4613      	mov	r3, r2
 80025dc:	00db      	lsls	r3, r3, #3
 80025de:	1a9b      	subs	r3, r3, r2
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80025e6:	68fa      	ldr	r2, [r7, #12]
 80025e8:	4413      	add	r3, r2
 80025ea:	3304      	adds	r3, #4
 80025ec:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	683a      	ldr	r2, [r7, #0]
 80025f8:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	2200      	movs	r2, #0
 80025fe:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	2200      	movs	r2, #0
 8002604:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002606:	7afb      	ldrb	r3, [r7, #11]
 8002608:	f003 030f 	and.w	r3, r3, #15
 800260c:	b2da      	uxtb	r2, r3
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	691b      	ldr	r3, [r3, #16]
 8002616:	2b01      	cmp	r3, #1
 8002618:	d102      	bne.n	8002620 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002620:	7afb      	ldrb	r3, [r7, #11]
 8002622:	f003 030f 	and.w	r3, r3, #15
 8002626:	2b00      	cmp	r3, #0
 8002628:	d109      	bne.n	800263e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	6818      	ldr	r0, [r3, #0]
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	691b      	ldr	r3, [r3, #16]
 8002632:	b2db      	uxtb	r3, r3
 8002634:	461a      	mov	r2, r3
 8002636:	6979      	ldr	r1, [r7, #20]
 8002638:	f001 fe4c 	bl	80042d4 <USB_EP0StartXfer>
 800263c:	e008      	b.n	8002650 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	6818      	ldr	r0, [r3, #0]
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	691b      	ldr	r3, [r3, #16]
 8002646:	b2db      	uxtb	r3, r3
 8002648:	461a      	mov	r2, r3
 800264a:	6979      	ldr	r1, [r7, #20]
 800264c:	f001 fbfe 	bl	8003e4c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002650:	2300      	movs	r3, #0
}
 8002652:	4618      	mov	r0, r3
 8002654:	3718      	adds	r7, #24
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}

0800265a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800265a:	b580      	push	{r7, lr}
 800265c:	b086      	sub	sp, #24
 800265e:	af00      	add	r7, sp, #0
 8002660:	60f8      	str	r0, [r7, #12]
 8002662:	607a      	str	r2, [r7, #4]
 8002664:	603b      	str	r3, [r7, #0]
 8002666:	460b      	mov	r3, r1
 8002668:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800266a:	7afb      	ldrb	r3, [r7, #11]
 800266c:	f003 020f 	and.w	r2, r3, #15
 8002670:	4613      	mov	r3, r2
 8002672:	00db      	lsls	r3, r3, #3
 8002674:	1a9b      	subs	r3, r3, r2
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	3338      	adds	r3, #56	; 0x38
 800267a:	68fa      	ldr	r2, [r7, #12]
 800267c:	4413      	add	r3, r2
 800267e:	3304      	adds	r3, #4
 8002680:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	687a      	ldr	r2, [r7, #4]
 8002686:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	683a      	ldr	r2, [r7, #0]
 800268c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	2200      	movs	r2, #0
 8002692:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	2201      	movs	r2, #1
 8002698:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800269a:	7afb      	ldrb	r3, [r7, #11]
 800269c:	f003 030f 	and.w	r3, r3, #15
 80026a0:	b2da      	uxtb	r2, r3
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	691b      	ldr	r3, [r3, #16]
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d102      	bne.n	80026b4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80026b4:	7afb      	ldrb	r3, [r7, #11]
 80026b6:	f003 030f 	and.w	r3, r3, #15
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d109      	bne.n	80026d2 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	6818      	ldr	r0, [r3, #0]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	691b      	ldr	r3, [r3, #16]
 80026c6:	b2db      	uxtb	r3, r3
 80026c8:	461a      	mov	r2, r3
 80026ca:	6979      	ldr	r1, [r7, #20]
 80026cc:	f001 fe02 	bl	80042d4 <USB_EP0StartXfer>
 80026d0:	e008      	b.n	80026e4 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	6818      	ldr	r0, [r3, #0]
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	691b      	ldr	r3, [r3, #16]
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	461a      	mov	r2, r3
 80026de:	6979      	ldr	r1, [r7, #20]
 80026e0:	f001 fbb4 	bl	8003e4c <USB_EPStartXfer>
  }

  return HAL_OK;
 80026e4:	2300      	movs	r3, #0
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3718      	adds	r7, #24
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}

080026ee <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80026ee:	b580      	push	{r7, lr}
 80026f0:	b084      	sub	sp, #16
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	6078      	str	r0, [r7, #4]
 80026f6:	460b      	mov	r3, r1
 80026f8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80026fa:	78fb      	ldrb	r3, [r7, #3]
 80026fc:	f003 020f 	and.w	r2, r3, #15
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	429a      	cmp	r2, r3
 8002706:	d901      	bls.n	800270c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	e050      	b.n	80027ae <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800270c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002710:	2b00      	cmp	r3, #0
 8002712:	da0f      	bge.n	8002734 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002714:	78fb      	ldrb	r3, [r7, #3]
 8002716:	f003 020f 	and.w	r2, r3, #15
 800271a:	4613      	mov	r3, r2
 800271c:	00db      	lsls	r3, r3, #3
 800271e:	1a9b      	subs	r3, r3, r2
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	3338      	adds	r3, #56	; 0x38
 8002724:	687a      	ldr	r2, [r7, #4]
 8002726:	4413      	add	r3, r2
 8002728:	3304      	adds	r3, #4
 800272a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2201      	movs	r2, #1
 8002730:	705a      	strb	r2, [r3, #1]
 8002732:	e00d      	b.n	8002750 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002734:	78fa      	ldrb	r2, [r7, #3]
 8002736:	4613      	mov	r3, r2
 8002738:	00db      	lsls	r3, r3, #3
 800273a:	1a9b      	subs	r3, r3, r2
 800273c:	009b      	lsls	r3, r3, #2
 800273e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002742:	687a      	ldr	r2, [r7, #4]
 8002744:	4413      	add	r3, r2
 8002746:	3304      	adds	r3, #4
 8002748:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2200      	movs	r2, #0
 800274e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2201      	movs	r2, #1
 8002754:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002756:	78fb      	ldrb	r3, [r7, #3]
 8002758:	f003 030f 	and.w	r3, r3, #15
 800275c:	b2da      	uxtb	r2, r3
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002768:	2b01      	cmp	r3, #1
 800276a:	d101      	bne.n	8002770 <HAL_PCD_EP_SetStall+0x82>
 800276c:	2302      	movs	r3, #2
 800276e:	e01e      	b.n	80027ae <HAL_PCD_EP_SetStall+0xc0>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2201      	movs	r2, #1
 8002774:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	68f9      	ldr	r1, [r7, #12]
 800277e:	4618      	mov	r0, r3
 8002780:	f001 ff59 	bl	8004636 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002784:	78fb      	ldrb	r3, [r7, #3]
 8002786:	f003 030f 	and.w	r3, r3, #15
 800278a:	2b00      	cmp	r3, #0
 800278c:	d10a      	bne.n	80027a4 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6818      	ldr	r0, [r3, #0]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	691b      	ldr	r3, [r3, #16]
 8002796:	b2d9      	uxtb	r1, r3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800279e:	461a      	mov	r2, r3
 80027a0:	f002 f938 	bl	8004a14 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2200      	movs	r2, #0
 80027a8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80027ac:	2300      	movs	r3, #0
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3710      	adds	r7, #16
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}

080027b6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80027b6:	b580      	push	{r7, lr}
 80027b8:	b084      	sub	sp, #16
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	6078      	str	r0, [r7, #4]
 80027be:	460b      	mov	r3, r1
 80027c0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80027c2:	78fb      	ldrb	r3, [r7, #3]
 80027c4:	f003 020f 	and.w	r2, r3, #15
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d901      	bls.n	80027d4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e042      	b.n	800285a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80027d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	da0f      	bge.n	80027fc <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027dc:	78fb      	ldrb	r3, [r7, #3]
 80027de:	f003 020f 	and.w	r2, r3, #15
 80027e2:	4613      	mov	r3, r2
 80027e4:	00db      	lsls	r3, r3, #3
 80027e6:	1a9b      	subs	r3, r3, r2
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	3338      	adds	r3, #56	; 0x38
 80027ec:	687a      	ldr	r2, [r7, #4]
 80027ee:	4413      	add	r3, r2
 80027f0:	3304      	adds	r3, #4
 80027f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2201      	movs	r2, #1
 80027f8:	705a      	strb	r2, [r3, #1]
 80027fa:	e00f      	b.n	800281c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80027fc:	78fb      	ldrb	r3, [r7, #3]
 80027fe:	f003 020f 	and.w	r2, r3, #15
 8002802:	4613      	mov	r3, r2
 8002804:	00db      	lsls	r3, r3, #3
 8002806:	1a9b      	subs	r3, r3, r2
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800280e:	687a      	ldr	r2, [r7, #4]
 8002810:	4413      	add	r3, r2
 8002812:	3304      	adds	r3, #4
 8002814:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2200      	movs	r2, #0
 800281a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2200      	movs	r2, #0
 8002820:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002822:	78fb      	ldrb	r3, [r7, #3]
 8002824:	f003 030f 	and.w	r3, r3, #15
 8002828:	b2da      	uxtb	r2, r3
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002834:	2b01      	cmp	r3, #1
 8002836:	d101      	bne.n	800283c <HAL_PCD_EP_ClrStall+0x86>
 8002838:	2302      	movs	r3, #2
 800283a:	e00e      	b.n	800285a <HAL_PCD_EP_ClrStall+0xa4>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2201      	movs	r2, #1
 8002840:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	68f9      	ldr	r1, [r7, #12]
 800284a:	4618      	mov	r0, r3
 800284c:	f001 ff61 	bl	8004712 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2200      	movs	r2, #0
 8002854:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002858:	2300      	movs	r3, #0
}
 800285a:	4618      	mov	r0, r3
 800285c:	3710      	adds	r7, #16
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}

08002862 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002862:	b580      	push	{r7, lr}
 8002864:	b08a      	sub	sp, #40	; 0x28
 8002866:	af02      	add	r7, sp, #8
 8002868:	6078      	str	r0, [r7, #4]
 800286a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002876:	683a      	ldr	r2, [r7, #0]
 8002878:	4613      	mov	r3, r2
 800287a:	00db      	lsls	r3, r3, #3
 800287c:	1a9b      	subs	r3, r3, r2
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	3338      	adds	r3, #56	; 0x38
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	4413      	add	r3, r2
 8002886:	3304      	adds	r3, #4
 8002888:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	699a      	ldr	r2, [r3, #24]
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	695b      	ldr	r3, [r3, #20]
 8002892:	429a      	cmp	r2, r3
 8002894:	d901      	bls.n	800289a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e06c      	b.n	8002974 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	695a      	ldr	r2, [r3, #20]
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	699b      	ldr	r3, [r3, #24]
 80028a2:	1ad3      	subs	r3, r2, r3
 80028a4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	69fa      	ldr	r2, [r7, #28]
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d902      	bls.n	80028b6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	3303      	adds	r3, #3
 80028ba:	089b      	lsrs	r3, r3, #2
 80028bc:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80028be:	e02b      	b.n	8002918 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	695a      	ldr	r2, [r3, #20]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	699b      	ldr	r3, [r3, #24]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	69fa      	ldr	r2, [r7, #28]
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d902      	bls.n	80028dc <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	3303      	adds	r3, #3
 80028e0:	089b      	lsrs	r3, r3, #2
 80028e2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	68d9      	ldr	r1, [r3, #12]
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	b2da      	uxtb	r2, r3
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	9300      	str	r3, [sp, #0]
 80028f8:	4603      	mov	r3, r0
 80028fa:	6978      	ldr	r0, [r7, #20]
 80028fc:	f001 fe3d 	bl	800457a <USB_WritePacket>

    ep->xfer_buff  += len;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	68da      	ldr	r2, [r3, #12]
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	441a      	add	r2, r3
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	699a      	ldr	r2, [r3, #24]
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	441a      	add	r2, r3
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	015a      	lsls	r2, r3, #5
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	4413      	add	r3, r2
 8002920:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002924:	699b      	ldr	r3, [r3, #24]
 8002926:	b29b      	uxth	r3, r3
 8002928:	69ba      	ldr	r2, [r7, #24]
 800292a:	429a      	cmp	r2, r3
 800292c:	d809      	bhi.n	8002942 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	699a      	ldr	r2, [r3, #24]
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002936:	429a      	cmp	r2, r3
 8002938:	d203      	bcs.n	8002942 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	695b      	ldr	r3, [r3, #20]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d1be      	bne.n	80028c0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	695a      	ldr	r2, [r3, #20]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	699b      	ldr	r3, [r3, #24]
 800294a:	429a      	cmp	r2, r3
 800294c:	d811      	bhi.n	8002972 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	f003 030f 	and.w	r3, r3, #15
 8002954:	2201      	movs	r2, #1
 8002956:	fa02 f303 	lsl.w	r3, r2, r3
 800295a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002962:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	43db      	mvns	r3, r3
 8002968:	6939      	ldr	r1, [r7, #16]
 800296a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800296e:	4013      	ands	r3, r2
 8002970:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002972:	2300      	movs	r3, #0
}
 8002974:	4618      	mov	r0, r3
 8002976:	3720      	adds	r7, #32
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}

0800297c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b086      	sub	sp, #24
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
 8002984:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	333c      	adds	r3, #60	; 0x3c
 8002994:	3304      	adds	r3, #4
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	015a      	lsls	r2, r3, #5
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	4413      	add	r3, r2
 80029a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	691b      	ldr	r3, [r3, #16]
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	f040 80a0 	bne.w	8002af4 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	f003 0308 	and.w	r3, r3, #8
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d015      	beq.n	80029ea <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	4a72      	ldr	r2, [pc, #456]	; (8002b8c <PCD_EP_OutXfrComplete_int+0x210>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	f240 80dd 	bls.w	8002b82 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	f000 80d7 	beq.w	8002b82 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	015a      	lsls	r2, r3, #5
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	4413      	add	r3, r2
 80029dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029e0:	461a      	mov	r2, r3
 80029e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029e6:	6093      	str	r3, [r2, #8]
 80029e8:	e0cb      	b.n	8002b82 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	f003 0320 	and.w	r3, r3, #32
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d009      	beq.n	8002a08 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	015a      	lsls	r2, r3, #5
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	4413      	add	r3, r2
 80029fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a00:	461a      	mov	r2, r3
 8002a02:	2320      	movs	r3, #32
 8002a04:	6093      	str	r3, [r2, #8]
 8002a06:	e0bc      	b.n	8002b82 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	f040 80b7 	bne.w	8002b82 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	4a5d      	ldr	r2, [pc, #372]	; (8002b8c <PCD_EP_OutXfrComplete_int+0x210>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d90f      	bls.n	8002a3c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d00a      	beq.n	8002a3c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	015a      	lsls	r2, r3, #5
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	4413      	add	r3, r2
 8002a2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a32:	461a      	mov	r2, r3
 8002a34:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a38:	6093      	str	r3, [r2, #8]
 8002a3a:	e0a2      	b.n	8002b82 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8002a3c:	6879      	ldr	r1, [r7, #4]
 8002a3e:	683a      	ldr	r2, [r7, #0]
 8002a40:	4613      	mov	r3, r2
 8002a42:	00db      	lsls	r3, r3, #3
 8002a44:	1a9b      	subs	r3, r3, r2
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	440b      	add	r3, r1
 8002a4a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002a4e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	0159      	lsls	r1, r3, #5
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	440b      	add	r3, r1
 8002a58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a5c:	691b      	ldr	r3, [r3, #16]
 8002a5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8002a62:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	683a      	ldr	r2, [r7, #0]
 8002a68:	4613      	mov	r3, r2
 8002a6a:	00db      	lsls	r3, r3, #3
 8002a6c:	1a9b      	subs	r3, r3, r2
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	4403      	add	r3, r0
 8002a72:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002a76:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002a78:	6879      	ldr	r1, [r7, #4]
 8002a7a:	683a      	ldr	r2, [r7, #0]
 8002a7c:	4613      	mov	r3, r2
 8002a7e:	00db      	lsls	r3, r3, #3
 8002a80:	1a9b      	subs	r3, r3, r2
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	440b      	add	r3, r1
 8002a86:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002a8a:	6819      	ldr	r1, [r3, #0]
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	683a      	ldr	r2, [r7, #0]
 8002a90:	4613      	mov	r3, r2
 8002a92:	00db      	lsls	r3, r3, #3
 8002a94:	1a9b      	subs	r3, r3, r2
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	4403      	add	r3, r0
 8002a9a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4419      	add	r1, r3
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	683a      	ldr	r2, [r7, #0]
 8002aa6:	4613      	mov	r3, r2
 8002aa8:	00db      	lsls	r3, r3, #3
 8002aaa:	1a9b      	subs	r3, r3, r2
 8002aac:	009b      	lsls	r3, r3, #2
 8002aae:	4403      	add	r3, r0
 8002ab0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002ab4:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d114      	bne.n	8002ae6 <PCD_EP_OutXfrComplete_int+0x16a>
 8002abc:	6879      	ldr	r1, [r7, #4]
 8002abe:	683a      	ldr	r2, [r7, #0]
 8002ac0:	4613      	mov	r3, r2
 8002ac2:	00db      	lsls	r3, r3, #3
 8002ac4:	1a9b      	subs	r3, r3, r2
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	440b      	add	r3, r1
 8002aca:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d108      	bne.n	8002ae6 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6818      	ldr	r0, [r3, #0]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002ade:	461a      	mov	r2, r3
 8002ae0:	2101      	movs	r1, #1
 8002ae2:	f001 ff97 	bl	8004a14 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	4619      	mov	r1, r3
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	f003 fc6b 	bl	80063c8 <HAL_PCD_DataOutStageCallback>
 8002af2:	e046      	b.n	8002b82 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	4a26      	ldr	r2, [pc, #152]	; (8002b90 <PCD_EP_OutXfrComplete_int+0x214>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d124      	bne.n	8002b46 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d00a      	beq.n	8002b1c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	015a      	lsls	r2, r3, #5
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	4413      	add	r3, r2
 8002b0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b12:	461a      	mov	r2, r3
 8002b14:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b18:	6093      	str	r3, [r2, #8]
 8002b1a:	e032      	b.n	8002b82 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	f003 0320 	and.w	r3, r3, #32
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d008      	beq.n	8002b38 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	015a      	lsls	r2, r3, #5
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	4413      	add	r3, r2
 8002b2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b32:	461a      	mov	r2, r3
 8002b34:	2320      	movs	r3, #32
 8002b36:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f003 fc42 	bl	80063c8 <HAL_PCD_DataOutStageCallback>
 8002b44:	e01d      	b.n	8002b82 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d114      	bne.n	8002b76 <PCD_EP_OutXfrComplete_int+0x1fa>
 8002b4c:	6879      	ldr	r1, [r7, #4]
 8002b4e:	683a      	ldr	r2, [r7, #0]
 8002b50:	4613      	mov	r3, r2
 8002b52:	00db      	lsls	r3, r3, #3
 8002b54:	1a9b      	subs	r3, r3, r2
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	440b      	add	r3, r1
 8002b5a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d108      	bne.n	8002b76 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6818      	ldr	r0, [r3, #0]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002b6e:	461a      	mov	r2, r3
 8002b70:	2100      	movs	r1, #0
 8002b72:	f001 ff4f 	bl	8004a14 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	4619      	mov	r1, r3
 8002b7c:	6878      	ldr	r0, [r7, #4]
 8002b7e:	f003 fc23 	bl	80063c8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002b82:	2300      	movs	r3, #0
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	3718      	adds	r7, #24
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	4f54300a 	.word	0x4f54300a
 8002b90:	4f54310a 	.word	0x4f54310a

08002b94 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b086      	sub	sp, #24
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	333c      	adds	r3, #60	; 0x3c
 8002bac:	3304      	adds	r3, #4
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	015a      	lsls	r2, r3, #5
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	4413      	add	r3, r2
 8002bba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	4a15      	ldr	r2, [pc, #84]	; (8002c1c <PCD_EP_OutSetupPacket_int+0x88>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d90e      	bls.n	8002be8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d009      	beq.n	8002be8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	015a      	lsls	r2, r3, #5
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	4413      	add	r3, r2
 8002bdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002be0:	461a      	mov	r2, r3
 8002be2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002be6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	f003 fbdb 	bl	80063a4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	4a0a      	ldr	r2, [pc, #40]	; (8002c1c <PCD_EP_OutSetupPacket_int+0x88>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d90c      	bls.n	8002c10 <PCD_EP_OutSetupPacket_int+0x7c>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	691b      	ldr	r3, [r3, #16]
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d108      	bne.n	8002c10 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6818      	ldr	r0, [r3, #0]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002c08:	461a      	mov	r2, r3
 8002c0a:	2101      	movs	r1, #1
 8002c0c:	f001 ff02 	bl	8004a14 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002c10:	2300      	movs	r3, #0
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3718      	adds	r7, #24
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	4f54300a 	.word	0x4f54300a

08002c20 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b085      	sub	sp, #20
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	460b      	mov	r3, r1
 8002c2a:	70fb      	strb	r3, [r7, #3]
 8002c2c:	4613      	mov	r3, r2
 8002c2e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c36:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002c38:	78fb      	ldrb	r3, [r7, #3]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d107      	bne.n	8002c4e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002c3e:	883b      	ldrh	r3, [r7, #0]
 8002c40:	0419      	lsls	r1, r3, #16
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	68ba      	ldr	r2, [r7, #8]
 8002c48:	430a      	orrs	r2, r1
 8002c4a:	629a      	str	r2, [r3, #40]	; 0x28
 8002c4c:	e028      	b.n	8002ca0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c54:	0c1b      	lsrs	r3, r3, #16
 8002c56:	68ba      	ldr	r2, [r7, #8]
 8002c58:	4413      	add	r3, r2
 8002c5a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	73fb      	strb	r3, [r7, #15]
 8002c60:	e00d      	b.n	8002c7e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	7bfb      	ldrb	r3, [r7, #15]
 8002c68:	3340      	adds	r3, #64	; 0x40
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	4413      	add	r3, r2
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	0c1b      	lsrs	r3, r3, #16
 8002c72:	68ba      	ldr	r2, [r7, #8]
 8002c74:	4413      	add	r3, r2
 8002c76:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002c78:	7bfb      	ldrb	r3, [r7, #15]
 8002c7a:	3301      	adds	r3, #1
 8002c7c:	73fb      	strb	r3, [r7, #15]
 8002c7e:	7bfa      	ldrb	r2, [r7, #15]
 8002c80:	78fb      	ldrb	r3, [r7, #3]
 8002c82:	3b01      	subs	r3, #1
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d3ec      	bcc.n	8002c62 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002c88:	883b      	ldrh	r3, [r7, #0]
 8002c8a:	0418      	lsls	r0, r3, #16
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6819      	ldr	r1, [r3, #0]
 8002c90:	78fb      	ldrb	r3, [r7, #3]
 8002c92:	3b01      	subs	r3, #1
 8002c94:	68ba      	ldr	r2, [r7, #8]
 8002c96:	4302      	orrs	r2, r0
 8002c98:	3340      	adds	r3, #64	; 0x40
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	440b      	add	r3, r1
 8002c9e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002ca0:	2300      	movs	r3, #0
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3714      	adds	r7, #20
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr

08002cae <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002cae:	b480      	push	{r7}
 8002cb0:	b083      	sub	sp, #12
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	6078      	str	r0, [r7, #4]
 8002cb6:	460b      	mov	r3, r1
 8002cb8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	887a      	ldrh	r2, [r7, #2]
 8002cc0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002cc2:	2300      	movs	r3, #0
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	370c      	adds	r7, #12
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr

08002cd0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b083      	sub	sp, #12
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
 8002cd8:	460b      	mov	r3, r1
 8002cda:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002cdc:	bf00      	nop
 8002cde:	370c      	adds	r7, #12
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr

08002ce8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b086      	sub	sp, #24
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d101      	bne.n	8002cfa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e25b      	b.n	80031b2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 0301 	and.w	r3, r3, #1
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d075      	beq.n	8002df2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d06:	4ba3      	ldr	r3, [pc, #652]	; (8002f94 <HAL_RCC_OscConfig+0x2ac>)
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	f003 030c 	and.w	r3, r3, #12
 8002d0e:	2b04      	cmp	r3, #4
 8002d10:	d00c      	beq.n	8002d2c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d12:	4ba0      	ldr	r3, [pc, #640]	; (8002f94 <HAL_RCC_OscConfig+0x2ac>)
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d1a:	2b08      	cmp	r3, #8
 8002d1c:	d112      	bne.n	8002d44 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d1e:	4b9d      	ldr	r3, [pc, #628]	; (8002f94 <HAL_RCC_OscConfig+0x2ac>)
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d26:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d2a:	d10b      	bne.n	8002d44 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d2c:	4b99      	ldr	r3, [pc, #612]	; (8002f94 <HAL_RCC_OscConfig+0x2ac>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d05b      	beq.n	8002df0 <HAL_RCC_OscConfig+0x108>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d157      	bne.n	8002df0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	e236      	b.n	80031b2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d4c:	d106      	bne.n	8002d5c <HAL_RCC_OscConfig+0x74>
 8002d4e:	4b91      	ldr	r3, [pc, #580]	; (8002f94 <HAL_RCC_OscConfig+0x2ac>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a90      	ldr	r2, [pc, #576]	; (8002f94 <HAL_RCC_OscConfig+0x2ac>)
 8002d54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d58:	6013      	str	r3, [r2, #0]
 8002d5a:	e01d      	b.n	8002d98 <HAL_RCC_OscConfig+0xb0>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d64:	d10c      	bne.n	8002d80 <HAL_RCC_OscConfig+0x98>
 8002d66:	4b8b      	ldr	r3, [pc, #556]	; (8002f94 <HAL_RCC_OscConfig+0x2ac>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a8a      	ldr	r2, [pc, #552]	; (8002f94 <HAL_RCC_OscConfig+0x2ac>)
 8002d6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d70:	6013      	str	r3, [r2, #0]
 8002d72:	4b88      	ldr	r3, [pc, #544]	; (8002f94 <HAL_RCC_OscConfig+0x2ac>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a87      	ldr	r2, [pc, #540]	; (8002f94 <HAL_RCC_OscConfig+0x2ac>)
 8002d78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d7c:	6013      	str	r3, [r2, #0]
 8002d7e:	e00b      	b.n	8002d98 <HAL_RCC_OscConfig+0xb0>
 8002d80:	4b84      	ldr	r3, [pc, #528]	; (8002f94 <HAL_RCC_OscConfig+0x2ac>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a83      	ldr	r2, [pc, #524]	; (8002f94 <HAL_RCC_OscConfig+0x2ac>)
 8002d86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d8a:	6013      	str	r3, [r2, #0]
 8002d8c:	4b81      	ldr	r3, [pc, #516]	; (8002f94 <HAL_RCC_OscConfig+0x2ac>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a80      	ldr	r2, [pc, #512]	; (8002f94 <HAL_RCC_OscConfig+0x2ac>)
 8002d92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d013      	beq.n	8002dc8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002da0:	f7fe fb44 	bl	800142c <HAL_GetTick>
 8002da4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002da6:	e008      	b.n	8002dba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002da8:	f7fe fb40 	bl	800142c <HAL_GetTick>
 8002dac:	4602      	mov	r2, r0
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	2b64      	cmp	r3, #100	; 0x64
 8002db4:	d901      	bls.n	8002dba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002db6:	2303      	movs	r3, #3
 8002db8:	e1fb      	b.n	80031b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dba:	4b76      	ldr	r3, [pc, #472]	; (8002f94 <HAL_RCC_OscConfig+0x2ac>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d0f0      	beq.n	8002da8 <HAL_RCC_OscConfig+0xc0>
 8002dc6:	e014      	b.n	8002df2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dc8:	f7fe fb30 	bl	800142c <HAL_GetTick>
 8002dcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dce:	e008      	b.n	8002de2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002dd0:	f7fe fb2c 	bl	800142c <HAL_GetTick>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	2b64      	cmp	r3, #100	; 0x64
 8002ddc:	d901      	bls.n	8002de2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	e1e7      	b.n	80031b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002de2:	4b6c      	ldr	r3, [pc, #432]	; (8002f94 <HAL_RCC_OscConfig+0x2ac>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d1f0      	bne.n	8002dd0 <HAL_RCC_OscConfig+0xe8>
 8002dee:	e000      	b.n	8002df2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002df0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 0302 	and.w	r3, r3, #2
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d063      	beq.n	8002ec6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002dfe:	4b65      	ldr	r3, [pc, #404]	; (8002f94 <HAL_RCC_OscConfig+0x2ac>)
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	f003 030c 	and.w	r3, r3, #12
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d00b      	beq.n	8002e22 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e0a:	4b62      	ldr	r3, [pc, #392]	; (8002f94 <HAL_RCC_OscConfig+0x2ac>)
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e12:	2b08      	cmp	r3, #8
 8002e14:	d11c      	bne.n	8002e50 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e16:	4b5f      	ldr	r3, [pc, #380]	; (8002f94 <HAL_RCC_OscConfig+0x2ac>)
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d116      	bne.n	8002e50 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e22:	4b5c      	ldr	r3, [pc, #368]	; (8002f94 <HAL_RCC_OscConfig+0x2ac>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0302 	and.w	r3, r3, #2
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d005      	beq.n	8002e3a <HAL_RCC_OscConfig+0x152>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	68db      	ldr	r3, [r3, #12]
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d001      	beq.n	8002e3a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e1bb      	b.n	80031b2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e3a:	4b56      	ldr	r3, [pc, #344]	; (8002f94 <HAL_RCC_OscConfig+0x2ac>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	691b      	ldr	r3, [r3, #16]
 8002e46:	00db      	lsls	r3, r3, #3
 8002e48:	4952      	ldr	r1, [pc, #328]	; (8002f94 <HAL_RCC_OscConfig+0x2ac>)
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e4e:	e03a      	b.n	8002ec6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d020      	beq.n	8002e9a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e58:	4b4f      	ldr	r3, [pc, #316]	; (8002f98 <HAL_RCC_OscConfig+0x2b0>)
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e5e:	f7fe fae5 	bl	800142c <HAL_GetTick>
 8002e62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e64:	e008      	b.n	8002e78 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e66:	f7fe fae1 	bl	800142c <HAL_GetTick>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	1ad3      	subs	r3, r2, r3
 8002e70:	2b02      	cmp	r3, #2
 8002e72:	d901      	bls.n	8002e78 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e74:	2303      	movs	r3, #3
 8002e76:	e19c      	b.n	80031b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e78:	4b46      	ldr	r3, [pc, #280]	; (8002f94 <HAL_RCC_OscConfig+0x2ac>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 0302 	and.w	r3, r3, #2
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d0f0      	beq.n	8002e66 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e84:	4b43      	ldr	r3, [pc, #268]	; (8002f94 <HAL_RCC_OscConfig+0x2ac>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	691b      	ldr	r3, [r3, #16]
 8002e90:	00db      	lsls	r3, r3, #3
 8002e92:	4940      	ldr	r1, [pc, #256]	; (8002f94 <HAL_RCC_OscConfig+0x2ac>)
 8002e94:	4313      	orrs	r3, r2
 8002e96:	600b      	str	r3, [r1, #0]
 8002e98:	e015      	b.n	8002ec6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e9a:	4b3f      	ldr	r3, [pc, #252]	; (8002f98 <HAL_RCC_OscConfig+0x2b0>)
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ea0:	f7fe fac4 	bl	800142c <HAL_GetTick>
 8002ea4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ea6:	e008      	b.n	8002eba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ea8:	f7fe fac0 	bl	800142c <HAL_GetTick>
 8002eac:	4602      	mov	r2, r0
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	2b02      	cmp	r3, #2
 8002eb4:	d901      	bls.n	8002eba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	e17b      	b.n	80031b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002eba:	4b36      	ldr	r3, [pc, #216]	; (8002f94 <HAL_RCC_OscConfig+0x2ac>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0302 	and.w	r3, r3, #2
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d1f0      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 0308 	and.w	r3, r3, #8
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d030      	beq.n	8002f34 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	695b      	ldr	r3, [r3, #20]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d016      	beq.n	8002f08 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002eda:	4b30      	ldr	r3, [pc, #192]	; (8002f9c <HAL_RCC_OscConfig+0x2b4>)
 8002edc:	2201      	movs	r2, #1
 8002ede:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ee0:	f7fe faa4 	bl	800142c <HAL_GetTick>
 8002ee4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ee6:	e008      	b.n	8002efa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ee8:	f7fe faa0 	bl	800142c <HAL_GetTick>
 8002eec:	4602      	mov	r2, r0
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	2b02      	cmp	r3, #2
 8002ef4:	d901      	bls.n	8002efa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	e15b      	b.n	80031b2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002efa:	4b26      	ldr	r3, [pc, #152]	; (8002f94 <HAL_RCC_OscConfig+0x2ac>)
 8002efc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002efe:	f003 0302 	and.w	r3, r3, #2
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d0f0      	beq.n	8002ee8 <HAL_RCC_OscConfig+0x200>
 8002f06:	e015      	b.n	8002f34 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f08:	4b24      	ldr	r3, [pc, #144]	; (8002f9c <HAL_RCC_OscConfig+0x2b4>)
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f0e:	f7fe fa8d 	bl	800142c <HAL_GetTick>
 8002f12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f14:	e008      	b.n	8002f28 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f16:	f7fe fa89 	bl	800142c <HAL_GetTick>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	1ad3      	subs	r3, r2, r3
 8002f20:	2b02      	cmp	r3, #2
 8002f22:	d901      	bls.n	8002f28 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002f24:	2303      	movs	r3, #3
 8002f26:	e144      	b.n	80031b2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f28:	4b1a      	ldr	r3, [pc, #104]	; (8002f94 <HAL_RCC_OscConfig+0x2ac>)
 8002f2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f2c:	f003 0302 	and.w	r3, r3, #2
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d1f0      	bne.n	8002f16 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 0304 	and.w	r3, r3, #4
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	f000 80a0 	beq.w	8003082 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f42:	2300      	movs	r3, #0
 8002f44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f46:	4b13      	ldr	r3, [pc, #76]	; (8002f94 <HAL_RCC_OscConfig+0x2ac>)
 8002f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d10f      	bne.n	8002f72 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f52:	2300      	movs	r3, #0
 8002f54:	60bb      	str	r3, [r7, #8]
 8002f56:	4b0f      	ldr	r3, [pc, #60]	; (8002f94 <HAL_RCC_OscConfig+0x2ac>)
 8002f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5a:	4a0e      	ldr	r2, [pc, #56]	; (8002f94 <HAL_RCC_OscConfig+0x2ac>)
 8002f5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f60:	6413      	str	r3, [r2, #64]	; 0x40
 8002f62:	4b0c      	ldr	r3, [pc, #48]	; (8002f94 <HAL_RCC_OscConfig+0x2ac>)
 8002f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f6a:	60bb      	str	r3, [r7, #8]
 8002f6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f72:	4b0b      	ldr	r3, [pc, #44]	; (8002fa0 <HAL_RCC_OscConfig+0x2b8>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d121      	bne.n	8002fc2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f7e:	4b08      	ldr	r3, [pc, #32]	; (8002fa0 <HAL_RCC_OscConfig+0x2b8>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a07      	ldr	r2, [pc, #28]	; (8002fa0 <HAL_RCC_OscConfig+0x2b8>)
 8002f84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f8a:	f7fe fa4f 	bl	800142c <HAL_GetTick>
 8002f8e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f90:	e011      	b.n	8002fb6 <HAL_RCC_OscConfig+0x2ce>
 8002f92:	bf00      	nop
 8002f94:	40023800 	.word	0x40023800
 8002f98:	42470000 	.word	0x42470000
 8002f9c:	42470e80 	.word	0x42470e80
 8002fa0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fa4:	f7fe fa42 	bl	800142c <HAL_GetTick>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	d901      	bls.n	8002fb6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	e0fd      	b.n	80031b2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fb6:	4b81      	ldr	r3, [pc, #516]	; (80031bc <HAL_RCC_OscConfig+0x4d4>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d0f0      	beq.n	8002fa4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d106      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x2f0>
 8002fca:	4b7d      	ldr	r3, [pc, #500]	; (80031c0 <HAL_RCC_OscConfig+0x4d8>)
 8002fcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fce:	4a7c      	ldr	r2, [pc, #496]	; (80031c0 <HAL_RCC_OscConfig+0x4d8>)
 8002fd0:	f043 0301 	orr.w	r3, r3, #1
 8002fd4:	6713      	str	r3, [r2, #112]	; 0x70
 8002fd6:	e01c      	b.n	8003012 <HAL_RCC_OscConfig+0x32a>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	2b05      	cmp	r3, #5
 8002fde:	d10c      	bne.n	8002ffa <HAL_RCC_OscConfig+0x312>
 8002fe0:	4b77      	ldr	r3, [pc, #476]	; (80031c0 <HAL_RCC_OscConfig+0x4d8>)
 8002fe2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fe4:	4a76      	ldr	r2, [pc, #472]	; (80031c0 <HAL_RCC_OscConfig+0x4d8>)
 8002fe6:	f043 0304 	orr.w	r3, r3, #4
 8002fea:	6713      	str	r3, [r2, #112]	; 0x70
 8002fec:	4b74      	ldr	r3, [pc, #464]	; (80031c0 <HAL_RCC_OscConfig+0x4d8>)
 8002fee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ff0:	4a73      	ldr	r2, [pc, #460]	; (80031c0 <HAL_RCC_OscConfig+0x4d8>)
 8002ff2:	f043 0301 	orr.w	r3, r3, #1
 8002ff6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ff8:	e00b      	b.n	8003012 <HAL_RCC_OscConfig+0x32a>
 8002ffa:	4b71      	ldr	r3, [pc, #452]	; (80031c0 <HAL_RCC_OscConfig+0x4d8>)
 8002ffc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ffe:	4a70      	ldr	r2, [pc, #448]	; (80031c0 <HAL_RCC_OscConfig+0x4d8>)
 8003000:	f023 0301 	bic.w	r3, r3, #1
 8003004:	6713      	str	r3, [r2, #112]	; 0x70
 8003006:	4b6e      	ldr	r3, [pc, #440]	; (80031c0 <HAL_RCC_OscConfig+0x4d8>)
 8003008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800300a:	4a6d      	ldr	r2, [pc, #436]	; (80031c0 <HAL_RCC_OscConfig+0x4d8>)
 800300c:	f023 0304 	bic.w	r3, r3, #4
 8003010:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d015      	beq.n	8003046 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800301a:	f7fe fa07 	bl	800142c <HAL_GetTick>
 800301e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003020:	e00a      	b.n	8003038 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003022:	f7fe fa03 	bl	800142c <HAL_GetTick>
 8003026:	4602      	mov	r2, r0
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003030:	4293      	cmp	r3, r2
 8003032:	d901      	bls.n	8003038 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003034:	2303      	movs	r3, #3
 8003036:	e0bc      	b.n	80031b2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003038:	4b61      	ldr	r3, [pc, #388]	; (80031c0 <HAL_RCC_OscConfig+0x4d8>)
 800303a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800303c:	f003 0302 	and.w	r3, r3, #2
 8003040:	2b00      	cmp	r3, #0
 8003042:	d0ee      	beq.n	8003022 <HAL_RCC_OscConfig+0x33a>
 8003044:	e014      	b.n	8003070 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003046:	f7fe f9f1 	bl	800142c <HAL_GetTick>
 800304a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800304c:	e00a      	b.n	8003064 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800304e:	f7fe f9ed 	bl	800142c <HAL_GetTick>
 8003052:	4602      	mov	r2, r0
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	1ad3      	subs	r3, r2, r3
 8003058:	f241 3288 	movw	r2, #5000	; 0x1388
 800305c:	4293      	cmp	r3, r2
 800305e:	d901      	bls.n	8003064 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003060:	2303      	movs	r3, #3
 8003062:	e0a6      	b.n	80031b2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003064:	4b56      	ldr	r3, [pc, #344]	; (80031c0 <HAL_RCC_OscConfig+0x4d8>)
 8003066:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003068:	f003 0302 	and.w	r3, r3, #2
 800306c:	2b00      	cmp	r3, #0
 800306e:	d1ee      	bne.n	800304e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003070:	7dfb      	ldrb	r3, [r7, #23]
 8003072:	2b01      	cmp	r3, #1
 8003074:	d105      	bne.n	8003082 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003076:	4b52      	ldr	r3, [pc, #328]	; (80031c0 <HAL_RCC_OscConfig+0x4d8>)
 8003078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307a:	4a51      	ldr	r2, [pc, #324]	; (80031c0 <HAL_RCC_OscConfig+0x4d8>)
 800307c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003080:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	699b      	ldr	r3, [r3, #24]
 8003086:	2b00      	cmp	r3, #0
 8003088:	f000 8092 	beq.w	80031b0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800308c:	4b4c      	ldr	r3, [pc, #304]	; (80031c0 <HAL_RCC_OscConfig+0x4d8>)
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	f003 030c 	and.w	r3, r3, #12
 8003094:	2b08      	cmp	r3, #8
 8003096:	d05c      	beq.n	8003152 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	699b      	ldr	r3, [r3, #24]
 800309c:	2b02      	cmp	r3, #2
 800309e:	d141      	bne.n	8003124 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030a0:	4b48      	ldr	r3, [pc, #288]	; (80031c4 <HAL_RCC_OscConfig+0x4dc>)
 80030a2:	2200      	movs	r2, #0
 80030a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030a6:	f7fe f9c1 	bl	800142c <HAL_GetTick>
 80030aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030ac:	e008      	b.n	80030c0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030ae:	f7fe f9bd 	bl	800142c <HAL_GetTick>
 80030b2:	4602      	mov	r2, r0
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	1ad3      	subs	r3, r2, r3
 80030b8:	2b02      	cmp	r3, #2
 80030ba:	d901      	bls.n	80030c0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80030bc:	2303      	movs	r3, #3
 80030be:	e078      	b.n	80031b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030c0:	4b3f      	ldr	r3, [pc, #252]	; (80031c0 <HAL_RCC_OscConfig+0x4d8>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d1f0      	bne.n	80030ae <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	69da      	ldr	r2, [r3, #28]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6a1b      	ldr	r3, [r3, #32]
 80030d4:	431a      	orrs	r2, r3
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030da:	019b      	lsls	r3, r3, #6
 80030dc:	431a      	orrs	r2, r3
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030e2:	085b      	lsrs	r3, r3, #1
 80030e4:	3b01      	subs	r3, #1
 80030e6:	041b      	lsls	r3, r3, #16
 80030e8:	431a      	orrs	r2, r3
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ee:	061b      	lsls	r3, r3, #24
 80030f0:	4933      	ldr	r1, [pc, #204]	; (80031c0 <HAL_RCC_OscConfig+0x4d8>)
 80030f2:	4313      	orrs	r3, r2
 80030f4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030f6:	4b33      	ldr	r3, [pc, #204]	; (80031c4 <HAL_RCC_OscConfig+0x4dc>)
 80030f8:	2201      	movs	r2, #1
 80030fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030fc:	f7fe f996 	bl	800142c <HAL_GetTick>
 8003100:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003102:	e008      	b.n	8003116 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003104:	f7fe f992 	bl	800142c <HAL_GetTick>
 8003108:	4602      	mov	r2, r0
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	2b02      	cmp	r3, #2
 8003110:	d901      	bls.n	8003116 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003112:	2303      	movs	r3, #3
 8003114:	e04d      	b.n	80031b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003116:	4b2a      	ldr	r3, [pc, #168]	; (80031c0 <HAL_RCC_OscConfig+0x4d8>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800311e:	2b00      	cmp	r3, #0
 8003120:	d0f0      	beq.n	8003104 <HAL_RCC_OscConfig+0x41c>
 8003122:	e045      	b.n	80031b0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003124:	4b27      	ldr	r3, [pc, #156]	; (80031c4 <HAL_RCC_OscConfig+0x4dc>)
 8003126:	2200      	movs	r2, #0
 8003128:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800312a:	f7fe f97f 	bl	800142c <HAL_GetTick>
 800312e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003130:	e008      	b.n	8003144 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003132:	f7fe f97b 	bl	800142c <HAL_GetTick>
 8003136:	4602      	mov	r2, r0
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	1ad3      	subs	r3, r2, r3
 800313c:	2b02      	cmp	r3, #2
 800313e:	d901      	bls.n	8003144 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003140:	2303      	movs	r3, #3
 8003142:	e036      	b.n	80031b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003144:	4b1e      	ldr	r3, [pc, #120]	; (80031c0 <HAL_RCC_OscConfig+0x4d8>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800314c:	2b00      	cmp	r3, #0
 800314e:	d1f0      	bne.n	8003132 <HAL_RCC_OscConfig+0x44a>
 8003150:	e02e      	b.n	80031b0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	699b      	ldr	r3, [r3, #24]
 8003156:	2b01      	cmp	r3, #1
 8003158:	d101      	bne.n	800315e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e029      	b.n	80031b2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800315e:	4b18      	ldr	r3, [pc, #96]	; (80031c0 <HAL_RCC_OscConfig+0x4d8>)
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	69db      	ldr	r3, [r3, #28]
 800316e:	429a      	cmp	r2, r3
 8003170:	d11c      	bne.n	80031ac <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800317c:	429a      	cmp	r2, r3
 800317e:	d115      	bne.n	80031ac <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003180:	68fa      	ldr	r2, [r7, #12]
 8003182:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003186:	4013      	ands	r3, r2
 8003188:	687a      	ldr	r2, [r7, #4]
 800318a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800318c:	4293      	cmp	r3, r2
 800318e:	d10d      	bne.n	80031ac <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800319a:	429a      	cmp	r2, r3
 800319c:	d106      	bne.n	80031ac <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d001      	beq.n	80031b0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e000      	b.n	80031b2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80031b0:	2300      	movs	r3, #0
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3718      	adds	r7, #24
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	40007000 	.word	0x40007000
 80031c0:	40023800 	.word	0x40023800
 80031c4:	42470060 	.word	0x42470060

080031c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b084      	sub	sp, #16
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
 80031d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d101      	bne.n	80031dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e0cc      	b.n	8003376 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031dc:	4b68      	ldr	r3, [pc, #416]	; (8003380 <HAL_RCC_ClockConfig+0x1b8>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 030f 	and.w	r3, r3, #15
 80031e4:	683a      	ldr	r2, [r7, #0]
 80031e6:	429a      	cmp	r2, r3
 80031e8:	d90c      	bls.n	8003204 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ea:	4b65      	ldr	r3, [pc, #404]	; (8003380 <HAL_RCC_ClockConfig+0x1b8>)
 80031ec:	683a      	ldr	r2, [r7, #0]
 80031ee:	b2d2      	uxtb	r2, r2
 80031f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031f2:	4b63      	ldr	r3, [pc, #396]	; (8003380 <HAL_RCC_ClockConfig+0x1b8>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 030f 	and.w	r3, r3, #15
 80031fa:	683a      	ldr	r2, [r7, #0]
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d001      	beq.n	8003204 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003200:	2301      	movs	r3, #1
 8003202:	e0b8      	b.n	8003376 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 0302 	and.w	r3, r3, #2
 800320c:	2b00      	cmp	r3, #0
 800320e:	d020      	beq.n	8003252 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 0304 	and.w	r3, r3, #4
 8003218:	2b00      	cmp	r3, #0
 800321a:	d005      	beq.n	8003228 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800321c:	4b59      	ldr	r3, [pc, #356]	; (8003384 <HAL_RCC_ClockConfig+0x1bc>)
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	4a58      	ldr	r2, [pc, #352]	; (8003384 <HAL_RCC_ClockConfig+0x1bc>)
 8003222:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003226:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 0308 	and.w	r3, r3, #8
 8003230:	2b00      	cmp	r3, #0
 8003232:	d005      	beq.n	8003240 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003234:	4b53      	ldr	r3, [pc, #332]	; (8003384 <HAL_RCC_ClockConfig+0x1bc>)
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	4a52      	ldr	r2, [pc, #328]	; (8003384 <HAL_RCC_ClockConfig+0x1bc>)
 800323a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800323e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003240:	4b50      	ldr	r3, [pc, #320]	; (8003384 <HAL_RCC_ClockConfig+0x1bc>)
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	494d      	ldr	r1, [pc, #308]	; (8003384 <HAL_RCC_ClockConfig+0x1bc>)
 800324e:	4313      	orrs	r3, r2
 8003250:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 0301 	and.w	r3, r3, #1
 800325a:	2b00      	cmp	r3, #0
 800325c:	d044      	beq.n	80032e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	2b01      	cmp	r3, #1
 8003264:	d107      	bne.n	8003276 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003266:	4b47      	ldr	r3, [pc, #284]	; (8003384 <HAL_RCC_ClockConfig+0x1bc>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800326e:	2b00      	cmp	r3, #0
 8003270:	d119      	bne.n	80032a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e07f      	b.n	8003376 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	2b02      	cmp	r3, #2
 800327c:	d003      	beq.n	8003286 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003282:	2b03      	cmp	r3, #3
 8003284:	d107      	bne.n	8003296 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003286:	4b3f      	ldr	r3, [pc, #252]	; (8003384 <HAL_RCC_ClockConfig+0x1bc>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d109      	bne.n	80032a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e06f      	b.n	8003376 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003296:	4b3b      	ldr	r3, [pc, #236]	; (8003384 <HAL_RCC_ClockConfig+0x1bc>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0302 	and.w	r3, r3, #2
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d101      	bne.n	80032a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e067      	b.n	8003376 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032a6:	4b37      	ldr	r3, [pc, #220]	; (8003384 <HAL_RCC_ClockConfig+0x1bc>)
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	f023 0203 	bic.w	r2, r3, #3
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	4934      	ldr	r1, [pc, #208]	; (8003384 <HAL_RCC_ClockConfig+0x1bc>)
 80032b4:	4313      	orrs	r3, r2
 80032b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032b8:	f7fe f8b8 	bl	800142c <HAL_GetTick>
 80032bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032be:	e00a      	b.n	80032d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032c0:	f7fe f8b4 	bl	800142c <HAL_GetTick>
 80032c4:	4602      	mov	r2, r0
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d901      	bls.n	80032d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032d2:	2303      	movs	r3, #3
 80032d4:	e04f      	b.n	8003376 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032d6:	4b2b      	ldr	r3, [pc, #172]	; (8003384 <HAL_RCC_ClockConfig+0x1bc>)
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	f003 020c 	and.w	r2, r3, #12
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	009b      	lsls	r3, r3, #2
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d1eb      	bne.n	80032c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032e8:	4b25      	ldr	r3, [pc, #148]	; (8003380 <HAL_RCC_ClockConfig+0x1b8>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 030f 	and.w	r3, r3, #15
 80032f0:	683a      	ldr	r2, [r7, #0]
 80032f2:	429a      	cmp	r2, r3
 80032f4:	d20c      	bcs.n	8003310 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032f6:	4b22      	ldr	r3, [pc, #136]	; (8003380 <HAL_RCC_ClockConfig+0x1b8>)
 80032f8:	683a      	ldr	r2, [r7, #0]
 80032fa:	b2d2      	uxtb	r2, r2
 80032fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032fe:	4b20      	ldr	r3, [pc, #128]	; (8003380 <HAL_RCC_ClockConfig+0x1b8>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 030f 	and.w	r3, r3, #15
 8003306:	683a      	ldr	r2, [r7, #0]
 8003308:	429a      	cmp	r2, r3
 800330a:	d001      	beq.n	8003310 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	e032      	b.n	8003376 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 0304 	and.w	r3, r3, #4
 8003318:	2b00      	cmp	r3, #0
 800331a:	d008      	beq.n	800332e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800331c:	4b19      	ldr	r3, [pc, #100]	; (8003384 <HAL_RCC_ClockConfig+0x1bc>)
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	4916      	ldr	r1, [pc, #88]	; (8003384 <HAL_RCC_ClockConfig+0x1bc>)
 800332a:	4313      	orrs	r3, r2
 800332c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 0308 	and.w	r3, r3, #8
 8003336:	2b00      	cmp	r3, #0
 8003338:	d009      	beq.n	800334e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800333a:	4b12      	ldr	r3, [pc, #72]	; (8003384 <HAL_RCC_ClockConfig+0x1bc>)
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	691b      	ldr	r3, [r3, #16]
 8003346:	00db      	lsls	r3, r3, #3
 8003348:	490e      	ldr	r1, [pc, #56]	; (8003384 <HAL_RCC_ClockConfig+0x1bc>)
 800334a:	4313      	orrs	r3, r2
 800334c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800334e:	f000 f821 	bl	8003394 <HAL_RCC_GetSysClockFreq>
 8003352:	4601      	mov	r1, r0
 8003354:	4b0b      	ldr	r3, [pc, #44]	; (8003384 <HAL_RCC_ClockConfig+0x1bc>)
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	091b      	lsrs	r3, r3, #4
 800335a:	f003 030f 	and.w	r3, r3, #15
 800335e:	4a0a      	ldr	r2, [pc, #40]	; (8003388 <HAL_RCC_ClockConfig+0x1c0>)
 8003360:	5cd3      	ldrb	r3, [r2, r3]
 8003362:	fa21 f303 	lsr.w	r3, r1, r3
 8003366:	4a09      	ldr	r2, [pc, #36]	; (800338c <HAL_RCC_ClockConfig+0x1c4>)
 8003368:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800336a:	4b09      	ldr	r3, [pc, #36]	; (8003390 <HAL_RCC_ClockConfig+0x1c8>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4618      	mov	r0, r3
 8003370:	f7fe f818 	bl	80013a4 <HAL_InitTick>

  return HAL_OK;
 8003374:	2300      	movs	r3, #0
}
 8003376:	4618      	mov	r0, r3
 8003378:	3710      	adds	r7, #16
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
 800337e:	bf00      	nop
 8003380:	40023c00 	.word	0x40023c00
 8003384:	40023800 	.word	0x40023800
 8003388:	08006ba0 	.word	0x08006ba0
 800338c:	20000008 	.word	0x20000008
 8003390:	2000000c 	.word	0x2000000c

08003394 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003394:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003396:	b085      	sub	sp, #20
 8003398:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800339a:	2300      	movs	r3, #0
 800339c:	607b      	str	r3, [r7, #4]
 800339e:	2300      	movs	r3, #0
 80033a0:	60fb      	str	r3, [r7, #12]
 80033a2:	2300      	movs	r3, #0
 80033a4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80033a6:	2300      	movs	r3, #0
 80033a8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033aa:	4b50      	ldr	r3, [pc, #320]	; (80034ec <HAL_RCC_GetSysClockFreq+0x158>)
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	f003 030c 	and.w	r3, r3, #12
 80033b2:	2b04      	cmp	r3, #4
 80033b4:	d007      	beq.n	80033c6 <HAL_RCC_GetSysClockFreq+0x32>
 80033b6:	2b08      	cmp	r3, #8
 80033b8:	d008      	beq.n	80033cc <HAL_RCC_GetSysClockFreq+0x38>
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	f040 808d 	bne.w	80034da <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80033c0:	4b4b      	ldr	r3, [pc, #300]	; (80034f0 <HAL_RCC_GetSysClockFreq+0x15c>)
 80033c2:	60bb      	str	r3, [r7, #8]
       break;
 80033c4:	e08c      	b.n	80034e0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80033c6:	4b4b      	ldr	r3, [pc, #300]	; (80034f4 <HAL_RCC_GetSysClockFreq+0x160>)
 80033c8:	60bb      	str	r3, [r7, #8]
      break;
 80033ca:	e089      	b.n	80034e0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033cc:	4b47      	ldr	r3, [pc, #284]	; (80034ec <HAL_RCC_GetSysClockFreq+0x158>)
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033d4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80033d6:	4b45      	ldr	r3, [pc, #276]	; (80034ec <HAL_RCC_GetSysClockFreq+0x158>)
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d023      	beq.n	800342a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033e2:	4b42      	ldr	r3, [pc, #264]	; (80034ec <HAL_RCC_GetSysClockFreq+0x158>)
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	099b      	lsrs	r3, r3, #6
 80033e8:	f04f 0400 	mov.w	r4, #0
 80033ec:	f240 11ff 	movw	r1, #511	; 0x1ff
 80033f0:	f04f 0200 	mov.w	r2, #0
 80033f4:	ea03 0501 	and.w	r5, r3, r1
 80033f8:	ea04 0602 	and.w	r6, r4, r2
 80033fc:	4a3d      	ldr	r2, [pc, #244]	; (80034f4 <HAL_RCC_GetSysClockFreq+0x160>)
 80033fe:	fb02 f106 	mul.w	r1, r2, r6
 8003402:	2200      	movs	r2, #0
 8003404:	fb02 f205 	mul.w	r2, r2, r5
 8003408:	440a      	add	r2, r1
 800340a:	493a      	ldr	r1, [pc, #232]	; (80034f4 <HAL_RCC_GetSysClockFreq+0x160>)
 800340c:	fba5 0101 	umull	r0, r1, r5, r1
 8003410:	1853      	adds	r3, r2, r1
 8003412:	4619      	mov	r1, r3
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	f04f 0400 	mov.w	r4, #0
 800341a:	461a      	mov	r2, r3
 800341c:	4623      	mov	r3, r4
 800341e:	f7fc fedb 	bl	80001d8 <__aeabi_uldivmod>
 8003422:	4603      	mov	r3, r0
 8003424:	460c      	mov	r4, r1
 8003426:	60fb      	str	r3, [r7, #12]
 8003428:	e049      	b.n	80034be <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800342a:	4b30      	ldr	r3, [pc, #192]	; (80034ec <HAL_RCC_GetSysClockFreq+0x158>)
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	099b      	lsrs	r3, r3, #6
 8003430:	f04f 0400 	mov.w	r4, #0
 8003434:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003438:	f04f 0200 	mov.w	r2, #0
 800343c:	ea03 0501 	and.w	r5, r3, r1
 8003440:	ea04 0602 	and.w	r6, r4, r2
 8003444:	4629      	mov	r1, r5
 8003446:	4632      	mov	r2, r6
 8003448:	f04f 0300 	mov.w	r3, #0
 800344c:	f04f 0400 	mov.w	r4, #0
 8003450:	0154      	lsls	r4, r2, #5
 8003452:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003456:	014b      	lsls	r3, r1, #5
 8003458:	4619      	mov	r1, r3
 800345a:	4622      	mov	r2, r4
 800345c:	1b49      	subs	r1, r1, r5
 800345e:	eb62 0206 	sbc.w	r2, r2, r6
 8003462:	f04f 0300 	mov.w	r3, #0
 8003466:	f04f 0400 	mov.w	r4, #0
 800346a:	0194      	lsls	r4, r2, #6
 800346c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003470:	018b      	lsls	r3, r1, #6
 8003472:	1a5b      	subs	r3, r3, r1
 8003474:	eb64 0402 	sbc.w	r4, r4, r2
 8003478:	f04f 0100 	mov.w	r1, #0
 800347c:	f04f 0200 	mov.w	r2, #0
 8003480:	00e2      	lsls	r2, r4, #3
 8003482:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003486:	00d9      	lsls	r1, r3, #3
 8003488:	460b      	mov	r3, r1
 800348a:	4614      	mov	r4, r2
 800348c:	195b      	adds	r3, r3, r5
 800348e:	eb44 0406 	adc.w	r4, r4, r6
 8003492:	f04f 0100 	mov.w	r1, #0
 8003496:	f04f 0200 	mov.w	r2, #0
 800349a:	02a2      	lsls	r2, r4, #10
 800349c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80034a0:	0299      	lsls	r1, r3, #10
 80034a2:	460b      	mov	r3, r1
 80034a4:	4614      	mov	r4, r2
 80034a6:	4618      	mov	r0, r3
 80034a8:	4621      	mov	r1, r4
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	f04f 0400 	mov.w	r4, #0
 80034b0:	461a      	mov	r2, r3
 80034b2:	4623      	mov	r3, r4
 80034b4:	f7fc fe90 	bl	80001d8 <__aeabi_uldivmod>
 80034b8:	4603      	mov	r3, r0
 80034ba:	460c      	mov	r4, r1
 80034bc:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80034be:	4b0b      	ldr	r3, [pc, #44]	; (80034ec <HAL_RCC_GetSysClockFreq+0x158>)
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	0c1b      	lsrs	r3, r3, #16
 80034c4:	f003 0303 	and.w	r3, r3, #3
 80034c8:	3301      	adds	r3, #1
 80034ca:	005b      	lsls	r3, r3, #1
 80034cc:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80034ce:	68fa      	ldr	r2, [r7, #12]
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80034d6:	60bb      	str	r3, [r7, #8]
      break;
 80034d8:	e002      	b.n	80034e0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80034da:	4b05      	ldr	r3, [pc, #20]	; (80034f0 <HAL_RCC_GetSysClockFreq+0x15c>)
 80034dc:	60bb      	str	r3, [r7, #8]
      break;
 80034de:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034e0:	68bb      	ldr	r3, [r7, #8]
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3714      	adds	r7, #20
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034ea:	bf00      	nop
 80034ec:	40023800 	.word	0x40023800
 80034f0:	00f42400 	.word	0x00f42400
 80034f4:	017d7840 	.word	0x017d7840

080034f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034f8:	b480      	push	{r7}
 80034fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034fc:	4b03      	ldr	r3, [pc, #12]	; (800350c <HAL_RCC_GetHCLKFreq+0x14>)
 80034fe:	681b      	ldr	r3, [r3, #0]
}
 8003500:	4618      	mov	r0, r3
 8003502:	46bd      	mov	sp, r7
 8003504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003508:	4770      	bx	lr
 800350a:	bf00      	nop
 800350c:	20000008 	.word	0x20000008

08003510 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003510:	b084      	sub	sp, #16
 8003512:	b580      	push	{r7, lr}
 8003514:	b084      	sub	sp, #16
 8003516:	af00      	add	r7, sp, #0
 8003518:	6078      	str	r0, [r7, #4]
 800351a:	f107 001c 	add.w	r0, r7, #28
 800351e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003524:	2b01      	cmp	r3, #1
 8003526:	d122      	bne.n	800356e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800352c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	68db      	ldr	r3, [r3, #12]
 8003538:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800353c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003540:	687a      	ldr	r2, [r7, #4]
 8003542:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003550:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003552:	2b01      	cmp	r3, #1
 8003554:	d105      	bne.n	8003562 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	68db      	ldr	r3, [r3, #12]
 800355a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f001 fab4 	bl	8004ad0 <USB_CoreReset>
 8003568:	4603      	mov	r3, r0
 800356a:	73fb      	strb	r3, [r7, #15]
 800356c:	e01a      	b.n	80035a4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	68db      	ldr	r3, [r3, #12]
 8003572:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f001 faa8 	bl	8004ad0 <USB_CoreReset>
 8003580:	4603      	mov	r3, r0
 8003582:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003584:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003586:	2b00      	cmp	r3, #0
 8003588:	d106      	bne.n	8003598 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800358e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	639a      	str	r2, [r3, #56]	; 0x38
 8003596:	e005      	b.n	80035a4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800359c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80035a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d10b      	bne.n	80035c2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	f043 0206 	orr.w	r2, r3, #6
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	f043 0220 	orr.w	r2, r3, #32
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80035c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	3710      	adds	r7, #16
 80035c8:	46bd      	mov	sp, r7
 80035ca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80035ce:	b004      	add	sp, #16
 80035d0:	4770      	bx	lr
	...

080035d4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b087      	sub	sp, #28
 80035d8:	af00      	add	r7, sp, #0
 80035da:	60f8      	str	r0, [r7, #12]
 80035dc:	60b9      	str	r1, [r7, #8]
 80035de:	4613      	mov	r3, r2
 80035e0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80035e2:	79fb      	ldrb	r3, [r7, #7]
 80035e4:	2b02      	cmp	r3, #2
 80035e6:	d165      	bne.n	80036b4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	4a41      	ldr	r2, [pc, #260]	; (80036f0 <USB_SetTurnaroundTime+0x11c>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d906      	bls.n	80035fe <USB_SetTurnaroundTime+0x2a>
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	4a40      	ldr	r2, [pc, #256]	; (80036f4 <USB_SetTurnaroundTime+0x120>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d802      	bhi.n	80035fe <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80035f8:	230f      	movs	r3, #15
 80035fa:	617b      	str	r3, [r7, #20]
 80035fc:	e062      	b.n	80036c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	4a3c      	ldr	r2, [pc, #240]	; (80036f4 <USB_SetTurnaroundTime+0x120>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d906      	bls.n	8003614 <USB_SetTurnaroundTime+0x40>
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	4a3b      	ldr	r2, [pc, #236]	; (80036f8 <USB_SetTurnaroundTime+0x124>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d802      	bhi.n	8003614 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800360e:	230e      	movs	r3, #14
 8003610:	617b      	str	r3, [r7, #20]
 8003612:	e057      	b.n	80036c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	4a38      	ldr	r2, [pc, #224]	; (80036f8 <USB_SetTurnaroundTime+0x124>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d906      	bls.n	800362a <USB_SetTurnaroundTime+0x56>
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	4a37      	ldr	r2, [pc, #220]	; (80036fc <USB_SetTurnaroundTime+0x128>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d802      	bhi.n	800362a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003624:	230d      	movs	r3, #13
 8003626:	617b      	str	r3, [r7, #20]
 8003628:	e04c      	b.n	80036c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	4a33      	ldr	r2, [pc, #204]	; (80036fc <USB_SetTurnaroundTime+0x128>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d906      	bls.n	8003640 <USB_SetTurnaroundTime+0x6c>
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	4a32      	ldr	r2, [pc, #200]	; (8003700 <USB_SetTurnaroundTime+0x12c>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d802      	bhi.n	8003640 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800363a:	230c      	movs	r3, #12
 800363c:	617b      	str	r3, [r7, #20]
 800363e:	e041      	b.n	80036c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	4a2f      	ldr	r2, [pc, #188]	; (8003700 <USB_SetTurnaroundTime+0x12c>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d906      	bls.n	8003656 <USB_SetTurnaroundTime+0x82>
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	4a2e      	ldr	r2, [pc, #184]	; (8003704 <USB_SetTurnaroundTime+0x130>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d802      	bhi.n	8003656 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003650:	230b      	movs	r3, #11
 8003652:	617b      	str	r3, [r7, #20]
 8003654:	e036      	b.n	80036c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	4a2a      	ldr	r2, [pc, #168]	; (8003704 <USB_SetTurnaroundTime+0x130>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d906      	bls.n	800366c <USB_SetTurnaroundTime+0x98>
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	4a29      	ldr	r2, [pc, #164]	; (8003708 <USB_SetTurnaroundTime+0x134>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d802      	bhi.n	800366c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003666:	230a      	movs	r3, #10
 8003668:	617b      	str	r3, [r7, #20]
 800366a:	e02b      	b.n	80036c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	4a26      	ldr	r2, [pc, #152]	; (8003708 <USB_SetTurnaroundTime+0x134>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d906      	bls.n	8003682 <USB_SetTurnaroundTime+0xae>
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	4a25      	ldr	r2, [pc, #148]	; (800370c <USB_SetTurnaroundTime+0x138>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d802      	bhi.n	8003682 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800367c:	2309      	movs	r3, #9
 800367e:	617b      	str	r3, [r7, #20]
 8003680:	e020      	b.n	80036c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	4a21      	ldr	r2, [pc, #132]	; (800370c <USB_SetTurnaroundTime+0x138>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d906      	bls.n	8003698 <USB_SetTurnaroundTime+0xc4>
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	4a20      	ldr	r2, [pc, #128]	; (8003710 <USB_SetTurnaroundTime+0x13c>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d802      	bhi.n	8003698 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003692:	2308      	movs	r3, #8
 8003694:	617b      	str	r3, [r7, #20]
 8003696:	e015      	b.n	80036c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	4a1d      	ldr	r2, [pc, #116]	; (8003710 <USB_SetTurnaroundTime+0x13c>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d906      	bls.n	80036ae <USB_SetTurnaroundTime+0xda>
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	4a1c      	ldr	r2, [pc, #112]	; (8003714 <USB_SetTurnaroundTime+0x140>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d802      	bhi.n	80036ae <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80036a8:	2307      	movs	r3, #7
 80036aa:	617b      	str	r3, [r7, #20]
 80036ac:	e00a      	b.n	80036c4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80036ae:	2306      	movs	r3, #6
 80036b0:	617b      	str	r3, [r7, #20]
 80036b2:	e007      	b.n	80036c4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80036b4:	79fb      	ldrb	r3, [r7, #7]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d102      	bne.n	80036c0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80036ba:	2309      	movs	r3, #9
 80036bc:	617b      	str	r3, [r7, #20]
 80036be:	e001      	b.n	80036c4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80036c0:	2309      	movs	r3, #9
 80036c2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	68db      	ldr	r3, [r3, #12]
 80036c8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	68da      	ldr	r2, [r3, #12]
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	029b      	lsls	r3, r3, #10
 80036d8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80036dc:	431a      	orrs	r2, r3
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80036e2:	2300      	movs	r3, #0
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	371c      	adds	r7, #28
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr
 80036f0:	00d8acbf 	.word	0x00d8acbf
 80036f4:	00e4e1bf 	.word	0x00e4e1bf
 80036f8:	00f423ff 	.word	0x00f423ff
 80036fc:	0106737f 	.word	0x0106737f
 8003700:	011a499f 	.word	0x011a499f
 8003704:	01312cff 	.word	0x01312cff
 8003708:	014ca43f 	.word	0x014ca43f
 800370c:	016e35ff 	.word	0x016e35ff
 8003710:	01a6ab1f 	.word	0x01a6ab1f
 8003714:	01e847ff 	.word	0x01e847ff

08003718 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003718:	b480      	push	{r7}
 800371a:	b083      	sub	sp, #12
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	f043 0201 	orr.w	r2, r3, #1
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800372c:	2300      	movs	r3, #0
}
 800372e:	4618      	mov	r0, r3
 8003730:	370c      	adds	r7, #12
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr

0800373a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800373a:	b480      	push	{r7}
 800373c:	b083      	sub	sp, #12
 800373e:	af00      	add	r7, sp, #0
 8003740:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	f023 0201 	bic.w	r2, r3, #1
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800374e:	2300      	movs	r3, #0
}
 8003750:	4618      	mov	r0, r3
 8003752:	370c      	adds	r7, #12
 8003754:	46bd      	mov	sp, r7
 8003756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375a:	4770      	bx	lr

0800375c <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b082      	sub	sp, #8
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
 8003764:	460b      	mov	r3, r1
 8003766:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003774:	78fb      	ldrb	r3, [r7, #3]
 8003776:	2b01      	cmp	r3, #1
 8003778:	d106      	bne.n	8003788 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	68db      	ldr	r3, [r3, #12]
 800377e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	60da      	str	r2, [r3, #12]
 8003786:	e00b      	b.n	80037a0 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8003788:	78fb      	ldrb	r3, [r7, #3]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d106      	bne.n	800379c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	68db      	ldr	r3, [r3, #12]
 8003792:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	60da      	str	r2, [r3, #12]
 800379a:	e001      	b.n	80037a0 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	e003      	b.n	80037a8 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80037a0:	2032      	movs	r0, #50	; 0x32
 80037a2:	f7fd fe4f 	bl	8001444 <HAL_Delay>

  return HAL_OK;
 80037a6:	2300      	movs	r3, #0
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	3708      	adds	r7, #8
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}

080037b0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80037b0:	b084      	sub	sp, #16
 80037b2:	b580      	push	{r7, lr}
 80037b4:	b086      	sub	sp, #24
 80037b6:	af00      	add	r7, sp, #0
 80037b8:	6078      	str	r0, [r7, #4]
 80037ba:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80037be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80037c2:	2300      	movs	r3, #0
 80037c4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80037ca:	2300      	movs	r3, #0
 80037cc:	613b      	str	r3, [r7, #16]
 80037ce:	e009      	b.n	80037e4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80037d0:	687a      	ldr	r2, [r7, #4]
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	3340      	adds	r3, #64	; 0x40
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	4413      	add	r3, r2
 80037da:	2200      	movs	r2, #0
 80037dc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	3301      	adds	r3, #1
 80037e2:	613b      	str	r3, [r7, #16]
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	2b0e      	cmp	r3, #14
 80037e8:	d9f2      	bls.n	80037d0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80037ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d11c      	bne.n	800382a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	68fa      	ldr	r2, [r7, #12]
 80037fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037fe:	f043 0302 	orr.w	r3, r3, #2
 8003802:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003808:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003814:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003820:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	639a      	str	r2, [r3, #56]	; 0x38
 8003828:	e00b      	b.n	8003842 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800382e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800383a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003848:	461a      	mov	r2, r3
 800384a:	2300      	movs	r3, #0
 800384c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003854:	4619      	mov	r1, r3
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800385c:	461a      	mov	r2, r3
 800385e:	680b      	ldr	r3, [r1, #0]
 8003860:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003864:	2b01      	cmp	r3, #1
 8003866:	d10c      	bne.n	8003882 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800386a:	2b00      	cmp	r3, #0
 800386c:	d104      	bne.n	8003878 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800386e:	2100      	movs	r1, #0
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	f000 f949 	bl	8003b08 <USB_SetDevSpeed>
 8003876:	e008      	b.n	800388a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003878:	2101      	movs	r1, #1
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f000 f944 	bl	8003b08 <USB_SetDevSpeed>
 8003880:	e003      	b.n	800388a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003882:	2103      	movs	r1, #3
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	f000 f93f 	bl	8003b08 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800388a:	2110      	movs	r1, #16
 800388c:	6878      	ldr	r0, [r7, #4]
 800388e:	f000 f8f3 	bl	8003a78 <USB_FlushTxFifo>
 8003892:	4603      	mov	r3, r0
 8003894:	2b00      	cmp	r3, #0
 8003896:	d001      	beq.n	800389c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	f000 f911 	bl	8003ac4 <USB_FlushRxFifo>
 80038a2:	4603      	mov	r3, r0
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d001      	beq.n	80038ac <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038b2:	461a      	mov	r2, r3
 80038b4:	2300      	movs	r3, #0
 80038b6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038be:	461a      	mov	r2, r3
 80038c0:	2300      	movs	r3, #0
 80038c2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038ca:	461a      	mov	r2, r3
 80038cc:	2300      	movs	r3, #0
 80038ce:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80038d0:	2300      	movs	r3, #0
 80038d2:	613b      	str	r3, [r7, #16]
 80038d4:	e043      	b.n	800395e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	015a      	lsls	r2, r3, #5
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	4413      	add	r3, r2
 80038de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80038e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80038ec:	d118      	bne.n	8003920 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d10a      	bne.n	800390a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	015a      	lsls	r2, r3, #5
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	4413      	add	r3, r2
 80038fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003900:	461a      	mov	r2, r3
 8003902:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003906:	6013      	str	r3, [r2, #0]
 8003908:	e013      	b.n	8003932 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	015a      	lsls	r2, r3, #5
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	4413      	add	r3, r2
 8003912:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003916:	461a      	mov	r2, r3
 8003918:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800391c:	6013      	str	r3, [r2, #0]
 800391e:	e008      	b.n	8003932 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	015a      	lsls	r2, r3, #5
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	4413      	add	r3, r2
 8003928:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800392c:	461a      	mov	r2, r3
 800392e:	2300      	movs	r3, #0
 8003930:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	015a      	lsls	r2, r3, #5
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	4413      	add	r3, r2
 800393a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800393e:	461a      	mov	r2, r3
 8003940:	2300      	movs	r3, #0
 8003942:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	015a      	lsls	r2, r3, #5
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	4413      	add	r3, r2
 800394c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003950:	461a      	mov	r2, r3
 8003952:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003956:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	3301      	adds	r3, #1
 800395c:	613b      	str	r3, [r7, #16]
 800395e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003960:	693a      	ldr	r2, [r7, #16]
 8003962:	429a      	cmp	r2, r3
 8003964:	d3b7      	bcc.n	80038d6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003966:	2300      	movs	r3, #0
 8003968:	613b      	str	r3, [r7, #16]
 800396a:	e043      	b.n	80039f4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	015a      	lsls	r2, r3, #5
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	4413      	add	r3, r2
 8003974:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800397e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003982:	d118      	bne.n	80039b6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d10a      	bne.n	80039a0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	015a      	lsls	r2, r3, #5
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	4413      	add	r3, r2
 8003992:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003996:	461a      	mov	r2, r3
 8003998:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800399c:	6013      	str	r3, [r2, #0]
 800399e:	e013      	b.n	80039c8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	015a      	lsls	r2, r3, #5
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	4413      	add	r3, r2
 80039a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039ac:	461a      	mov	r2, r3
 80039ae:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80039b2:	6013      	str	r3, [r2, #0]
 80039b4:	e008      	b.n	80039c8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	015a      	lsls	r2, r3, #5
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	4413      	add	r3, r2
 80039be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039c2:	461a      	mov	r2, r3
 80039c4:	2300      	movs	r3, #0
 80039c6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	015a      	lsls	r2, r3, #5
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	4413      	add	r3, r2
 80039d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039d4:	461a      	mov	r2, r3
 80039d6:	2300      	movs	r3, #0
 80039d8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	015a      	lsls	r2, r3, #5
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	4413      	add	r3, r2
 80039e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039e6:	461a      	mov	r2, r3
 80039e8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80039ec:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	3301      	adds	r3, #1
 80039f2:	613b      	str	r3, [r7, #16]
 80039f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f6:	693a      	ldr	r2, [r7, #16]
 80039f8:	429a      	cmp	r2, r3
 80039fa:	d3b7      	bcc.n	800396c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a02:	691b      	ldr	r3, [r3, #16]
 8003a04:	68fa      	ldr	r2, [r7, #12]
 8003a06:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a0a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a0e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2200      	movs	r2, #0
 8003a14:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003a1c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d105      	bne.n	8003a30 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	699b      	ldr	r3, [r3, #24]
 8003a28:	f043 0210 	orr.w	r2, r3, #16
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	699a      	ldr	r2, [r3, #24]
 8003a34:	4b0f      	ldr	r3, [pc, #60]	; (8003a74 <USB_DevInit+0x2c4>)
 8003a36:	4313      	orrs	r3, r2
 8003a38:	687a      	ldr	r2, [r7, #4]
 8003a3a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003a3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d005      	beq.n	8003a4e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	699b      	ldr	r3, [r3, #24]
 8003a46:	f043 0208 	orr.w	r2, r3, #8
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003a4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d107      	bne.n	8003a64 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	699b      	ldr	r3, [r3, #24]
 8003a58:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003a5c:	f043 0304 	orr.w	r3, r3, #4
 8003a60:	687a      	ldr	r2, [r7, #4]
 8003a62:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003a64:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3718      	adds	r7, #24
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003a70:	b004      	add	sp, #16
 8003a72:	4770      	bx	lr
 8003a74:	803c3800 	.word	0x803c3800

08003a78 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b085      	sub	sp, #20
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
 8003a80:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8003a82:	2300      	movs	r3, #0
 8003a84:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	019b      	lsls	r3, r3, #6
 8003a8a:	f043 0220 	orr.w	r2, r3, #32
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	3301      	adds	r3, #1
 8003a96:	60fb      	str	r3, [r7, #12]
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	4a09      	ldr	r2, [pc, #36]	; (8003ac0 <USB_FlushTxFifo+0x48>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d901      	bls.n	8003aa4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8003aa0:	2303      	movs	r3, #3
 8003aa2:	e006      	b.n	8003ab2 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	691b      	ldr	r3, [r3, #16]
 8003aa8:	f003 0320 	and.w	r3, r3, #32
 8003aac:	2b20      	cmp	r3, #32
 8003aae:	d0f0      	beq.n	8003a92 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8003ab0:	2300      	movs	r3, #0
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3714      	adds	r7, #20
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr
 8003abe:	bf00      	nop
 8003ac0:	00030d40 	.word	0x00030d40

08003ac4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b085      	sub	sp, #20
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8003acc:	2300      	movs	r3, #0
 8003ace:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2210      	movs	r2, #16
 8003ad4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	3301      	adds	r3, #1
 8003ada:	60fb      	str	r3, [r7, #12]
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	4a09      	ldr	r2, [pc, #36]	; (8003b04 <USB_FlushRxFifo+0x40>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d901      	bls.n	8003ae8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8003ae4:	2303      	movs	r3, #3
 8003ae6:	e006      	b.n	8003af6 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	691b      	ldr	r3, [r3, #16]
 8003aec:	f003 0310 	and.w	r3, r3, #16
 8003af0:	2b10      	cmp	r3, #16
 8003af2:	d0f0      	beq.n	8003ad6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8003af4:	2300      	movs	r3, #0
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	3714      	adds	r7, #20
 8003afa:	46bd      	mov	sp, r7
 8003afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b00:	4770      	bx	lr
 8003b02:	bf00      	nop
 8003b04:	00030d40 	.word	0x00030d40

08003b08 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b085      	sub	sp, #20
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
 8003b10:	460b      	mov	r3, r1
 8003b12:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	78fb      	ldrb	r3, [r7, #3]
 8003b22:	68f9      	ldr	r1, [r7, #12]
 8003b24:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003b2c:	2300      	movs	r3, #0
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3714      	adds	r7, #20
 8003b32:	46bd      	mov	sp, r7
 8003b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b38:	4770      	bx	lr

08003b3a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003b3a:	b480      	push	{r7}
 8003b3c:	b087      	sub	sp, #28
 8003b3e:	af00      	add	r7, sp, #0
 8003b40:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	f003 0306 	and.w	r3, r3, #6
 8003b52:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d102      	bne.n	8003b60 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	75fb      	strb	r3, [r7, #23]
 8003b5e:	e00a      	b.n	8003b76 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2b02      	cmp	r3, #2
 8003b64:	d002      	beq.n	8003b6c <USB_GetDevSpeed+0x32>
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2b06      	cmp	r3, #6
 8003b6a:	d102      	bne.n	8003b72 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003b6c:	2302      	movs	r3, #2
 8003b6e:	75fb      	strb	r3, [r7, #23]
 8003b70:	e001      	b.n	8003b76 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003b72:	230f      	movs	r3, #15
 8003b74:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003b76:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	371c      	adds	r7, #28
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b82:	4770      	bx	lr

08003b84 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b085      	sub	sp, #20
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
 8003b8c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	781b      	ldrb	r3, [r3, #0]
 8003b96:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	785b      	ldrb	r3, [r3, #1]
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d13a      	bne.n	8003c16 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ba6:	69da      	ldr	r2, [r3, #28]
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	781b      	ldrb	r3, [r3, #0]
 8003bac:	f003 030f 	and.w	r3, r3, #15
 8003bb0:	2101      	movs	r1, #1
 8003bb2:	fa01 f303 	lsl.w	r3, r1, r3
 8003bb6:	b29b      	uxth	r3, r3
 8003bb8:	68f9      	ldr	r1, [r7, #12]
 8003bba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	015a      	lsls	r2, r3, #5
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	4413      	add	r3, r2
 8003bca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d155      	bne.n	8003c84 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	015a      	lsls	r2, r3, #5
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	4413      	add	r3, r2
 8003be0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	78db      	ldrb	r3, [r3, #3]
 8003bf2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003bf4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	059b      	lsls	r3, r3, #22
 8003bfa:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	68ba      	ldr	r2, [r7, #8]
 8003c00:	0151      	lsls	r1, r2, #5
 8003c02:	68fa      	ldr	r2, [r7, #12]
 8003c04:	440a      	add	r2, r1
 8003c06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c12:	6013      	str	r3, [r2, #0]
 8003c14:	e036      	b.n	8003c84 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c1c:	69da      	ldr	r2, [r3, #28]
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	781b      	ldrb	r3, [r3, #0]
 8003c22:	f003 030f 	and.w	r3, r3, #15
 8003c26:	2101      	movs	r1, #1
 8003c28:	fa01 f303 	lsl.w	r3, r1, r3
 8003c2c:	041b      	lsls	r3, r3, #16
 8003c2e:	68f9      	ldr	r1, [r7, #12]
 8003c30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c34:	4313      	orrs	r3, r2
 8003c36:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	015a      	lsls	r2, r3, #5
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	4413      	add	r3, r2
 8003c40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d11a      	bne.n	8003c84 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	015a      	lsls	r2, r3, #5
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	4413      	add	r3, r2
 8003c56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	78db      	ldrb	r3, [r3, #3]
 8003c68:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003c6a:	430b      	orrs	r3, r1
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	68ba      	ldr	r2, [r7, #8]
 8003c70:	0151      	lsls	r1, r2, #5
 8003c72:	68fa      	ldr	r2, [r7, #12]
 8003c74:	440a      	add	r2, r1
 8003c76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c82:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003c84:	2300      	movs	r3, #0
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	3714      	adds	r7, #20
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr
	...

08003c94 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b085      	sub	sp, #20
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	781b      	ldrb	r3, [r3, #0]
 8003ca6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	785b      	ldrb	r3, [r3, #1]
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d161      	bne.n	8003d74 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	015a      	lsls	r2, r3, #5
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	4413      	add	r3, r2
 8003cb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003cc2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003cc6:	d11f      	bne.n	8003d08 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	015a      	lsls	r2, r3, #5
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	4413      	add	r3, r2
 8003cd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	68ba      	ldr	r2, [r7, #8]
 8003cd8:	0151      	lsls	r1, r2, #5
 8003cda:	68fa      	ldr	r2, [r7, #12]
 8003cdc:	440a      	add	r2, r1
 8003cde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ce2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003ce6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	015a      	lsls	r2, r3, #5
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	4413      	add	r3, r2
 8003cf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	68ba      	ldr	r2, [r7, #8]
 8003cf8:	0151      	lsls	r1, r2, #5
 8003cfa:	68fa      	ldr	r2, [r7, #12]
 8003cfc:	440a      	add	r2, r1
 8003cfe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d02:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003d06:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	781b      	ldrb	r3, [r3, #0]
 8003d14:	f003 030f 	and.w	r3, r3, #15
 8003d18:	2101      	movs	r1, #1
 8003d1a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d1e:	b29b      	uxth	r3, r3
 8003d20:	43db      	mvns	r3, r3
 8003d22:	68f9      	ldr	r1, [r7, #12]
 8003d24:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d28:	4013      	ands	r3, r2
 8003d2a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d32:	69da      	ldr	r2, [r3, #28]
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	781b      	ldrb	r3, [r3, #0]
 8003d38:	f003 030f 	and.w	r3, r3, #15
 8003d3c:	2101      	movs	r1, #1
 8003d3e:	fa01 f303 	lsl.w	r3, r1, r3
 8003d42:	b29b      	uxth	r3, r3
 8003d44:	43db      	mvns	r3, r3
 8003d46:	68f9      	ldr	r1, [r7, #12]
 8003d48:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	015a      	lsls	r2, r3, #5
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	4413      	add	r3, r2
 8003d58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	0159      	lsls	r1, r3, #5
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	440b      	add	r3, r1
 8003d66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d6a:	4619      	mov	r1, r3
 8003d6c:	4b35      	ldr	r3, [pc, #212]	; (8003e44 <USB_DeactivateEndpoint+0x1b0>)
 8003d6e:	4013      	ands	r3, r2
 8003d70:	600b      	str	r3, [r1, #0]
 8003d72:	e060      	b.n	8003e36 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	015a      	lsls	r2, r3, #5
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	4413      	add	r3, r2
 8003d7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003d86:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d8a:	d11f      	bne.n	8003dcc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	015a      	lsls	r2, r3, #5
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	4413      	add	r3, r2
 8003d94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	68ba      	ldr	r2, [r7, #8]
 8003d9c:	0151      	lsls	r1, r2, #5
 8003d9e:	68fa      	ldr	r2, [r7, #12]
 8003da0:	440a      	add	r2, r1
 8003da2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003da6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003daa:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	015a      	lsls	r2, r3, #5
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	4413      	add	r3, r2
 8003db4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	68ba      	ldr	r2, [r7, #8]
 8003dbc:	0151      	lsls	r1, r2, #5
 8003dbe:	68fa      	ldr	r2, [r7, #12]
 8003dc0:	440a      	add	r2, r1
 8003dc2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003dc6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003dca:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dd2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	781b      	ldrb	r3, [r3, #0]
 8003dd8:	f003 030f 	and.w	r3, r3, #15
 8003ddc:	2101      	movs	r1, #1
 8003dde:	fa01 f303 	lsl.w	r3, r1, r3
 8003de2:	041b      	lsls	r3, r3, #16
 8003de4:	43db      	mvns	r3, r3
 8003de6:	68f9      	ldr	r1, [r7, #12]
 8003de8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003dec:	4013      	ands	r3, r2
 8003dee:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003df6:	69da      	ldr	r2, [r3, #28]
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	781b      	ldrb	r3, [r3, #0]
 8003dfc:	f003 030f 	and.w	r3, r3, #15
 8003e00:	2101      	movs	r1, #1
 8003e02:	fa01 f303 	lsl.w	r3, r1, r3
 8003e06:	041b      	lsls	r3, r3, #16
 8003e08:	43db      	mvns	r3, r3
 8003e0a:	68f9      	ldr	r1, [r7, #12]
 8003e0c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e10:	4013      	ands	r3, r2
 8003e12:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	015a      	lsls	r2, r3, #5
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	4413      	add	r3, r2
 8003e1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	0159      	lsls	r1, r3, #5
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	440b      	add	r3, r1
 8003e2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e2e:	4619      	mov	r1, r3
 8003e30:	4b05      	ldr	r3, [pc, #20]	; (8003e48 <USB_DeactivateEndpoint+0x1b4>)
 8003e32:	4013      	ands	r3, r2
 8003e34:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003e36:	2300      	movs	r3, #0
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	3714      	adds	r7, #20
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr
 8003e44:	ec337800 	.word	0xec337800
 8003e48:	eff37800 	.word	0xeff37800

08003e4c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b08a      	sub	sp, #40	; 0x28
 8003e50:	af02      	add	r7, sp, #8
 8003e52:	60f8      	str	r0, [r7, #12]
 8003e54:	60b9      	str	r1, [r7, #8]
 8003e56:	4613      	mov	r3, r2
 8003e58:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	781b      	ldrb	r3, [r3, #0]
 8003e62:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	785b      	ldrb	r3, [r3, #1]
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	f040 815c 	bne.w	8004126 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	695b      	ldr	r3, [r3, #20]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d132      	bne.n	8003edc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003e76:	69bb      	ldr	r3, [r7, #24]
 8003e78:	015a      	lsls	r2, r3, #5
 8003e7a:	69fb      	ldr	r3, [r7, #28]
 8003e7c:	4413      	add	r3, r2
 8003e7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e82:	691b      	ldr	r3, [r3, #16]
 8003e84:	69ba      	ldr	r2, [r7, #24]
 8003e86:	0151      	lsls	r1, r2, #5
 8003e88:	69fa      	ldr	r2, [r7, #28]
 8003e8a:	440a      	add	r2, r1
 8003e8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e90:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003e94:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003e98:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003e9a:	69bb      	ldr	r3, [r7, #24]
 8003e9c:	015a      	lsls	r2, r3, #5
 8003e9e:	69fb      	ldr	r3, [r7, #28]
 8003ea0:	4413      	add	r3, r2
 8003ea2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ea6:	691b      	ldr	r3, [r3, #16]
 8003ea8:	69ba      	ldr	r2, [r7, #24]
 8003eaa:	0151      	lsls	r1, r2, #5
 8003eac:	69fa      	ldr	r2, [r7, #28]
 8003eae:	440a      	add	r2, r1
 8003eb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003eb4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003eb8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003eba:	69bb      	ldr	r3, [r7, #24]
 8003ebc:	015a      	lsls	r2, r3, #5
 8003ebe:	69fb      	ldr	r3, [r7, #28]
 8003ec0:	4413      	add	r3, r2
 8003ec2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ec6:	691b      	ldr	r3, [r3, #16]
 8003ec8:	69ba      	ldr	r2, [r7, #24]
 8003eca:	0151      	lsls	r1, r2, #5
 8003ecc:	69fa      	ldr	r2, [r7, #28]
 8003ece:	440a      	add	r2, r1
 8003ed0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ed4:	0cdb      	lsrs	r3, r3, #19
 8003ed6:	04db      	lsls	r3, r3, #19
 8003ed8:	6113      	str	r3, [r2, #16]
 8003eda:	e074      	b.n	8003fc6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003edc:	69bb      	ldr	r3, [r7, #24]
 8003ede:	015a      	lsls	r2, r3, #5
 8003ee0:	69fb      	ldr	r3, [r7, #28]
 8003ee2:	4413      	add	r3, r2
 8003ee4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ee8:	691b      	ldr	r3, [r3, #16]
 8003eea:	69ba      	ldr	r2, [r7, #24]
 8003eec:	0151      	lsls	r1, r2, #5
 8003eee:	69fa      	ldr	r2, [r7, #28]
 8003ef0:	440a      	add	r2, r1
 8003ef2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ef6:	0cdb      	lsrs	r3, r3, #19
 8003ef8:	04db      	lsls	r3, r3, #19
 8003efa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003efc:	69bb      	ldr	r3, [r7, #24]
 8003efe:	015a      	lsls	r2, r3, #5
 8003f00:	69fb      	ldr	r3, [r7, #28]
 8003f02:	4413      	add	r3, r2
 8003f04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f08:	691b      	ldr	r3, [r3, #16]
 8003f0a:	69ba      	ldr	r2, [r7, #24]
 8003f0c:	0151      	lsls	r1, r2, #5
 8003f0e:	69fa      	ldr	r2, [r7, #28]
 8003f10:	440a      	add	r2, r1
 8003f12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f16:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003f1a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003f1e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003f20:	69bb      	ldr	r3, [r7, #24]
 8003f22:	015a      	lsls	r2, r3, #5
 8003f24:	69fb      	ldr	r3, [r7, #28]
 8003f26:	4413      	add	r3, r2
 8003f28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f2c:	691a      	ldr	r2, [r3, #16]
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	6959      	ldr	r1, [r3, #20]
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	440b      	add	r3, r1
 8003f38:	1e59      	subs	r1, r3, #1
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f42:	04d9      	lsls	r1, r3, #19
 8003f44:	4b9d      	ldr	r3, [pc, #628]	; (80041bc <USB_EPStartXfer+0x370>)
 8003f46:	400b      	ands	r3, r1
 8003f48:	69b9      	ldr	r1, [r7, #24]
 8003f4a:	0148      	lsls	r0, r1, #5
 8003f4c:	69f9      	ldr	r1, [r7, #28]
 8003f4e:	4401      	add	r1, r0
 8003f50:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003f54:	4313      	orrs	r3, r2
 8003f56:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003f58:	69bb      	ldr	r3, [r7, #24]
 8003f5a:	015a      	lsls	r2, r3, #5
 8003f5c:	69fb      	ldr	r3, [r7, #28]
 8003f5e:	4413      	add	r3, r2
 8003f60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f64:	691a      	ldr	r2, [r3, #16]
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	695b      	ldr	r3, [r3, #20]
 8003f6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f6e:	69b9      	ldr	r1, [r7, #24]
 8003f70:	0148      	lsls	r0, r1, #5
 8003f72:	69f9      	ldr	r1, [r7, #28]
 8003f74:	4401      	add	r1, r0
 8003f76:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	78db      	ldrb	r3, [r3, #3]
 8003f82:	2b01      	cmp	r3, #1
 8003f84:	d11f      	bne.n	8003fc6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003f86:	69bb      	ldr	r3, [r7, #24]
 8003f88:	015a      	lsls	r2, r3, #5
 8003f8a:	69fb      	ldr	r3, [r7, #28]
 8003f8c:	4413      	add	r3, r2
 8003f8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f92:	691b      	ldr	r3, [r3, #16]
 8003f94:	69ba      	ldr	r2, [r7, #24]
 8003f96:	0151      	lsls	r1, r2, #5
 8003f98:	69fa      	ldr	r2, [r7, #28]
 8003f9a:	440a      	add	r2, r1
 8003f9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fa0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003fa4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003fa6:	69bb      	ldr	r3, [r7, #24]
 8003fa8:	015a      	lsls	r2, r3, #5
 8003faa:	69fb      	ldr	r3, [r7, #28]
 8003fac:	4413      	add	r3, r2
 8003fae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fb2:	691b      	ldr	r3, [r3, #16]
 8003fb4:	69ba      	ldr	r2, [r7, #24]
 8003fb6:	0151      	lsls	r1, r2, #5
 8003fb8:	69fa      	ldr	r2, [r7, #28]
 8003fba:	440a      	add	r2, r1
 8003fbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fc0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003fc4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8003fc6:	79fb      	ldrb	r3, [r7, #7]
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d14b      	bne.n	8004064 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	691b      	ldr	r3, [r3, #16]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d009      	beq.n	8003fe8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003fd4:	69bb      	ldr	r3, [r7, #24]
 8003fd6:	015a      	lsls	r2, r3, #5
 8003fd8:	69fb      	ldr	r3, [r7, #28]
 8003fda:	4413      	add	r3, r2
 8003fdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fe0:	461a      	mov	r2, r3
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	691b      	ldr	r3, [r3, #16]
 8003fe6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	78db      	ldrb	r3, [r3, #3]
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	d128      	bne.n	8004042 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003ff0:	69fb      	ldr	r3, [r7, #28]
 8003ff2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d110      	bne.n	8004022 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004000:	69bb      	ldr	r3, [r7, #24]
 8004002:	015a      	lsls	r2, r3, #5
 8004004:	69fb      	ldr	r3, [r7, #28]
 8004006:	4413      	add	r3, r2
 8004008:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	69ba      	ldr	r2, [r7, #24]
 8004010:	0151      	lsls	r1, r2, #5
 8004012:	69fa      	ldr	r2, [r7, #28]
 8004014:	440a      	add	r2, r1
 8004016:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800401a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800401e:	6013      	str	r3, [r2, #0]
 8004020:	e00f      	b.n	8004042 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004022:	69bb      	ldr	r3, [r7, #24]
 8004024:	015a      	lsls	r2, r3, #5
 8004026:	69fb      	ldr	r3, [r7, #28]
 8004028:	4413      	add	r3, r2
 800402a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	69ba      	ldr	r2, [r7, #24]
 8004032:	0151      	lsls	r1, r2, #5
 8004034:	69fa      	ldr	r2, [r7, #28]
 8004036:	440a      	add	r2, r1
 8004038:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800403c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004040:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004042:	69bb      	ldr	r3, [r7, #24]
 8004044:	015a      	lsls	r2, r3, #5
 8004046:	69fb      	ldr	r3, [r7, #28]
 8004048:	4413      	add	r3, r2
 800404a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	69ba      	ldr	r2, [r7, #24]
 8004052:	0151      	lsls	r1, r2, #5
 8004054:	69fa      	ldr	r2, [r7, #28]
 8004056:	440a      	add	r2, r1
 8004058:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800405c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004060:	6013      	str	r3, [r2, #0]
 8004062:	e12f      	b.n	80042c4 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004064:	69bb      	ldr	r3, [r7, #24]
 8004066:	015a      	lsls	r2, r3, #5
 8004068:	69fb      	ldr	r3, [r7, #28]
 800406a:	4413      	add	r3, r2
 800406c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	69ba      	ldr	r2, [r7, #24]
 8004074:	0151      	lsls	r1, r2, #5
 8004076:	69fa      	ldr	r2, [r7, #28]
 8004078:	440a      	add	r2, r1
 800407a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800407e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004082:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	78db      	ldrb	r3, [r3, #3]
 8004088:	2b01      	cmp	r3, #1
 800408a:	d015      	beq.n	80040b8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	695b      	ldr	r3, [r3, #20]
 8004090:	2b00      	cmp	r3, #0
 8004092:	f000 8117 	beq.w	80042c4 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004096:	69fb      	ldr	r3, [r7, #28]
 8004098:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800409c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	781b      	ldrb	r3, [r3, #0]
 80040a2:	f003 030f 	and.w	r3, r3, #15
 80040a6:	2101      	movs	r1, #1
 80040a8:	fa01 f303 	lsl.w	r3, r1, r3
 80040ac:	69f9      	ldr	r1, [r7, #28]
 80040ae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80040b2:	4313      	orrs	r3, r2
 80040b4:	634b      	str	r3, [r1, #52]	; 0x34
 80040b6:	e105      	b.n	80042c4 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80040b8:	69fb      	ldr	r3, [r7, #28]
 80040ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d110      	bne.n	80040ea <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80040c8:	69bb      	ldr	r3, [r7, #24]
 80040ca:	015a      	lsls	r2, r3, #5
 80040cc:	69fb      	ldr	r3, [r7, #28]
 80040ce:	4413      	add	r3, r2
 80040d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	69ba      	ldr	r2, [r7, #24]
 80040d8:	0151      	lsls	r1, r2, #5
 80040da:	69fa      	ldr	r2, [r7, #28]
 80040dc:	440a      	add	r2, r1
 80040de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040e2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80040e6:	6013      	str	r3, [r2, #0]
 80040e8:	e00f      	b.n	800410a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80040ea:	69bb      	ldr	r3, [r7, #24]
 80040ec:	015a      	lsls	r2, r3, #5
 80040ee:	69fb      	ldr	r3, [r7, #28]
 80040f0:	4413      	add	r3, r2
 80040f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	69ba      	ldr	r2, [r7, #24]
 80040fa:	0151      	lsls	r1, r2, #5
 80040fc:	69fa      	ldr	r2, [r7, #28]
 80040fe:	440a      	add	r2, r1
 8004100:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004104:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004108:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	68d9      	ldr	r1, [r3, #12]
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	781a      	ldrb	r2, [r3, #0]
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	695b      	ldr	r3, [r3, #20]
 8004116:	b298      	uxth	r0, r3
 8004118:	79fb      	ldrb	r3, [r7, #7]
 800411a:	9300      	str	r3, [sp, #0]
 800411c:	4603      	mov	r3, r0
 800411e:	68f8      	ldr	r0, [r7, #12]
 8004120:	f000 fa2b 	bl	800457a <USB_WritePacket>
 8004124:	e0ce      	b.n	80042c4 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004126:	69bb      	ldr	r3, [r7, #24]
 8004128:	015a      	lsls	r2, r3, #5
 800412a:	69fb      	ldr	r3, [r7, #28]
 800412c:	4413      	add	r3, r2
 800412e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004132:	691b      	ldr	r3, [r3, #16]
 8004134:	69ba      	ldr	r2, [r7, #24]
 8004136:	0151      	lsls	r1, r2, #5
 8004138:	69fa      	ldr	r2, [r7, #28]
 800413a:	440a      	add	r2, r1
 800413c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004140:	0cdb      	lsrs	r3, r3, #19
 8004142:	04db      	lsls	r3, r3, #19
 8004144:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004146:	69bb      	ldr	r3, [r7, #24]
 8004148:	015a      	lsls	r2, r3, #5
 800414a:	69fb      	ldr	r3, [r7, #28]
 800414c:	4413      	add	r3, r2
 800414e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004152:	691b      	ldr	r3, [r3, #16]
 8004154:	69ba      	ldr	r2, [r7, #24]
 8004156:	0151      	lsls	r1, r2, #5
 8004158:	69fa      	ldr	r2, [r7, #28]
 800415a:	440a      	add	r2, r1
 800415c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004160:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004164:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004168:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	695b      	ldr	r3, [r3, #20]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d126      	bne.n	80041c0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004172:	69bb      	ldr	r3, [r7, #24]
 8004174:	015a      	lsls	r2, r3, #5
 8004176:	69fb      	ldr	r3, [r7, #28]
 8004178:	4413      	add	r3, r2
 800417a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800417e:	691a      	ldr	r2, [r3, #16]
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004188:	69b9      	ldr	r1, [r7, #24]
 800418a:	0148      	lsls	r0, r1, #5
 800418c:	69f9      	ldr	r1, [r7, #28]
 800418e:	4401      	add	r1, r0
 8004190:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004194:	4313      	orrs	r3, r2
 8004196:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004198:	69bb      	ldr	r3, [r7, #24]
 800419a:	015a      	lsls	r2, r3, #5
 800419c:	69fb      	ldr	r3, [r7, #28]
 800419e:	4413      	add	r3, r2
 80041a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041a4:	691b      	ldr	r3, [r3, #16]
 80041a6:	69ba      	ldr	r2, [r7, #24]
 80041a8:	0151      	lsls	r1, r2, #5
 80041aa:	69fa      	ldr	r2, [r7, #28]
 80041ac:	440a      	add	r2, r1
 80041ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80041b2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80041b6:	6113      	str	r3, [r2, #16]
 80041b8:	e036      	b.n	8004228 <USB_EPStartXfer+0x3dc>
 80041ba:	bf00      	nop
 80041bc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	695a      	ldr	r2, [r3, #20]
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	4413      	add	r3, r2
 80041ca:	1e5a      	subs	r2, r3, #1
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80041d4:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80041d6:	69bb      	ldr	r3, [r7, #24]
 80041d8:	015a      	lsls	r2, r3, #5
 80041da:	69fb      	ldr	r3, [r7, #28]
 80041dc:	4413      	add	r3, r2
 80041de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041e2:	691a      	ldr	r2, [r3, #16]
 80041e4:	8afb      	ldrh	r3, [r7, #22]
 80041e6:	04d9      	lsls	r1, r3, #19
 80041e8:	4b39      	ldr	r3, [pc, #228]	; (80042d0 <USB_EPStartXfer+0x484>)
 80041ea:	400b      	ands	r3, r1
 80041ec:	69b9      	ldr	r1, [r7, #24]
 80041ee:	0148      	lsls	r0, r1, #5
 80041f0:	69f9      	ldr	r1, [r7, #28]
 80041f2:	4401      	add	r1, r0
 80041f4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80041f8:	4313      	orrs	r3, r2
 80041fa:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80041fc:	69bb      	ldr	r3, [r7, #24]
 80041fe:	015a      	lsls	r2, r3, #5
 8004200:	69fb      	ldr	r3, [r7, #28]
 8004202:	4413      	add	r3, r2
 8004204:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004208:	691a      	ldr	r2, [r3, #16]
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	8af9      	ldrh	r1, [r7, #22]
 8004210:	fb01 f303 	mul.w	r3, r1, r3
 8004214:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004218:	69b9      	ldr	r1, [r7, #24]
 800421a:	0148      	lsls	r0, r1, #5
 800421c:	69f9      	ldr	r1, [r7, #28]
 800421e:	4401      	add	r1, r0
 8004220:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004224:	4313      	orrs	r3, r2
 8004226:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004228:	79fb      	ldrb	r3, [r7, #7]
 800422a:	2b01      	cmp	r3, #1
 800422c:	d10d      	bne.n	800424a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	68db      	ldr	r3, [r3, #12]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d009      	beq.n	800424a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	68d9      	ldr	r1, [r3, #12]
 800423a:	69bb      	ldr	r3, [r7, #24]
 800423c:	015a      	lsls	r2, r3, #5
 800423e:	69fb      	ldr	r3, [r7, #28]
 8004240:	4413      	add	r3, r2
 8004242:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004246:	460a      	mov	r2, r1
 8004248:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	78db      	ldrb	r3, [r3, #3]
 800424e:	2b01      	cmp	r3, #1
 8004250:	d128      	bne.n	80042a4 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004252:	69fb      	ldr	r3, [r7, #28]
 8004254:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800425e:	2b00      	cmp	r3, #0
 8004260:	d110      	bne.n	8004284 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004262:	69bb      	ldr	r3, [r7, #24]
 8004264:	015a      	lsls	r2, r3, #5
 8004266:	69fb      	ldr	r3, [r7, #28]
 8004268:	4413      	add	r3, r2
 800426a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	69ba      	ldr	r2, [r7, #24]
 8004272:	0151      	lsls	r1, r2, #5
 8004274:	69fa      	ldr	r2, [r7, #28]
 8004276:	440a      	add	r2, r1
 8004278:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800427c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004280:	6013      	str	r3, [r2, #0]
 8004282:	e00f      	b.n	80042a4 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004284:	69bb      	ldr	r3, [r7, #24]
 8004286:	015a      	lsls	r2, r3, #5
 8004288:	69fb      	ldr	r3, [r7, #28]
 800428a:	4413      	add	r3, r2
 800428c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	69ba      	ldr	r2, [r7, #24]
 8004294:	0151      	lsls	r1, r2, #5
 8004296:	69fa      	ldr	r2, [r7, #28]
 8004298:	440a      	add	r2, r1
 800429a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800429e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042a2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80042a4:	69bb      	ldr	r3, [r7, #24]
 80042a6:	015a      	lsls	r2, r3, #5
 80042a8:	69fb      	ldr	r3, [r7, #28]
 80042aa:	4413      	add	r3, r2
 80042ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	69ba      	ldr	r2, [r7, #24]
 80042b4:	0151      	lsls	r1, r2, #5
 80042b6:	69fa      	ldr	r2, [r7, #28]
 80042b8:	440a      	add	r2, r1
 80042ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042be:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80042c2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80042c4:	2300      	movs	r3, #0
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3720      	adds	r7, #32
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}
 80042ce:	bf00      	nop
 80042d0:	1ff80000 	.word	0x1ff80000

080042d4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b087      	sub	sp, #28
 80042d8:	af00      	add	r7, sp, #0
 80042da:	60f8      	str	r0, [r7, #12]
 80042dc:	60b9      	str	r1, [r7, #8]
 80042de:	4613      	mov	r3, r2
 80042e0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	781b      	ldrb	r3, [r3, #0]
 80042ea:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	785b      	ldrb	r3, [r3, #1]
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	f040 80cd 	bne.w	8004490 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	695b      	ldr	r3, [r3, #20]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d132      	bne.n	8004364 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	015a      	lsls	r2, r3, #5
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	4413      	add	r3, r2
 8004306:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800430a:	691b      	ldr	r3, [r3, #16]
 800430c:	693a      	ldr	r2, [r7, #16]
 800430e:	0151      	lsls	r1, r2, #5
 8004310:	697a      	ldr	r2, [r7, #20]
 8004312:	440a      	add	r2, r1
 8004314:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004318:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800431c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004320:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	015a      	lsls	r2, r3, #5
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	4413      	add	r3, r2
 800432a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800432e:	691b      	ldr	r3, [r3, #16]
 8004330:	693a      	ldr	r2, [r7, #16]
 8004332:	0151      	lsls	r1, r2, #5
 8004334:	697a      	ldr	r2, [r7, #20]
 8004336:	440a      	add	r2, r1
 8004338:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800433c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004340:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	015a      	lsls	r2, r3, #5
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	4413      	add	r3, r2
 800434a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800434e:	691b      	ldr	r3, [r3, #16]
 8004350:	693a      	ldr	r2, [r7, #16]
 8004352:	0151      	lsls	r1, r2, #5
 8004354:	697a      	ldr	r2, [r7, #20]
 8004356:	440a      	add	r2, r1
 8004358:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800435c:	0cdb      	lsrs	r3, r3, #19
 800435e:	04db      	lsls	r3, r3, #19
 8004360:	6113      	str	r3, [r2, #16]
 8004362:	e04e      	b.n	8004402 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	015a      	lsls	r2, r3, #5
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	4413      	add	r3, r2
 800436c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004370:	691b      	ldr	r3, [r3, #16]
 8004372:	693a      	ldr	r2, [r7, #16]
 8004374:	0151      	lsls	r1, r2, #5
 8004376:	697a      	ldr	r2, [r7, #20]
 8004378:	440a      	add	r2, r1
 800437a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800437e:	0cdb      	lsrs	r3, r3, #19
 8004380:	04db      	lsls	r3, r3, #19
 8004382:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	015a      	lsls	r2, r3, #5
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	4413      	add	r3, r2
 800438c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004390:	691b      	ldr	r3, [r3, #16]
 8004392:	693a      	ldr	r2, [r7, #16]
 8004394:	0151      	lsls	r1, r2, #5
 8004396:	697a      	ldr	r2, [r7, #20]
 8004398:	440a      	add	r2, r1
 800439a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800439e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80043a2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80043a6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	695a      	ldr	r2, [r3, #20]
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	429a      	cmp	r2, r3
 80043b2:	d903      	bls.n	80043bc <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	689a      	ldr	r2, [r3, #8]
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	015a      	lsls	r2, r3, #5
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	4413      	add	r3, r2
 80043c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043c8:	691b      	ldr	r3, [r3, #16]
 80043ca:	693a      	ldr	r2, [r7, #16]
 80043cc:	0151      	lsls	r1, r2, #5
 80043ce:	697a      	ldr	r2, [r7, #20]
 80043d0:	440a      	add	r2, r1
 80043d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043d6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80043da:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	015a      	lsls	r2, r3, #5
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	4413      	add	r3, r2
 80043e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043e8:	691a      	ldr	r2, [r3, #16]
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	695b      	ldr	r3, [r3, #20]
 80043ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043f2:	6939      	ldr	r1, [r7, #16]
 80043f4:	0148      	lsls	r0, r1, #5
 80043f6:	6979      	ldr	r1, [r7, #20]
 80043f8:	4401      	add	r1, r0
 80043fa:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80043fe:	4313      	orrs	r3, r2
 8004400:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004402:	79fb      	ldrb	r3, [r7, #7]
 8004404:	2b01      	cmp	r3, #1
 8004406:	d11e      	bne.n	8004446 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	691b      	ldr	r3, [r3, #16]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d009      	beq.n	8004424 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	015a      	lsls	r2, r3, #5
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	4413      	add	r3, r2
 8004418:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800441c:	461a      	mov	r2, r3
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	691b      	ldr	r3, [r3, #16]
 8004422:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	015a      	lsls	r2, r3, #5
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	4413      	add	r3, r2
 800442c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	693a      	ldr	r2, [r7, #16]
 8004434:	0151      	lsls	r1, r2, #5
 8004436:	697a      	ldr	r2, [r7, #20]
 8004438:	440a      	add	r2, r1
 800443a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800443e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004442:	6013      	str	r3, [r2, #0]
 8004444:	e092      	b.n	800456c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	015a      	lsls	r2, r3, #5
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	4413      	add	r3, r2
 800444e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	693a      	ldr	r2, [r7, #16]
 8004456:	0151      	lsls	r1, r2, #5
 8004458:	697a      	ldr	r2, [r7, #20]
 800445a:	440a      	add	r2, r1
 800445c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004460:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004464:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	695b      	ldr	r3, [r3, #20]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d07e      	beq.n	800456c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004474:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	781b      	ldrb	r3, [r3, #0]
 800447a:	f003 030f 	and.w	r3, r3, #15
 800447e:	2101      	movs	r1, #1
 8004480:	fa01 f303 	lsl.w	r3, r1, r3
 8004484:	6979      	ldr	r1, [r7, #20]
 8004486:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800448a:	4313      	orrs	r3, r2
 800448c:	634b      	str	r3, [r1, #52]	; 0x34
 800448e:	e06d      	b.n	800456c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	015a      	lsls	r2, r3, #5
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	4413      	add	r3, r2
 8004498:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800449c:	691b      	ldr	r3, [r3, #16]
 800449e:	693a      	ldr	r2, [r7, #16]
 80044a0:	0151      	lsls	r1, r2, #5
 80044a2:	697a      	ldr	r2, [r7, #20]
 80044a4:	440a      	add	r2, r1
 80044a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044aa:	0cdb      	lsrs	r3, r3, #19
 80044ac:	04db      	lsls	r3, r3, #19
 80044ae:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	015a      	lsls	r2, r3, #5
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	4413      	add	r3, r2
 80044b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044bc:	691b      	ldr	r3, [r3, #16]
 80044be:	693a      	ldr	r2, [r7, #16]
 80044c0:	0151      	lsls	r1, r2, #5
 80044c2:	697a      	ldr	r2, [r7, #20]
 80044c4:	440a      	add	r2, r1
 80044c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044ca:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80044ce:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80044d2:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	695b      	ldr	r3, [r3, #20]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d003      	beq.n	80044e4 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	689a      	ldr	r2, [r3, #8]
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	015a      	lsls	r2, r3, #5
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	4413      	add	r3, r2
 80044ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044f0:	691b      	ldr	r3, [r3, #16]
 80044f2:	693a      	ldr	r2, [r7, #16]
 80044f4:	0151      	lsls	r1, r2, #5
 80044f6:	697a      	ldr	r2, [r7, #20]
 80044f8:	440a      	add	r2, r1
 80044fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044fe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004502:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	015a      	lsls	r2, r3, #5
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	4413      	add	r3, r2
 800450c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004510:	691a      	ldr	r2, [r3, #16]
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800451a:	6939      	ldr	r1, [r7, #16]
 800451c:	0148      	lsls	r0, r1, #5
 800451e:	6979      	ldr	r1, [r7, #20]
 8004520:	4401      	add	r1, r0
 8004522:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004526:	4313      	orrs	r3, r2
 8004528:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800452a:	79fb      	ldrb	r3, [r7, #7]
 800452c:	2b01      	cmp	r3, #1
 800452e:	d10d      	bne.n	800454c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	68db      	ldr	r3, [r3, #12]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d009      	beq.n	800454c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	68d9      	ldr	r1, [r3, #12]
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	015a      	lsls	r2, r3, #5
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	4413      	add	r3, r2
 8004544:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004548:	460a      	mov	r2, r1
 800454a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	015a      	lsls	r2, r3, #5
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	4413      	add	r3, r2
 8004554:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	693a      	ldr	r2, [r7, #16]
 800455c:	0151      	lsls	r1, r2, #5
 800455e:	697a      	ldr	r2, [r7, #20]
 8004560:	440a      	add	r2, r1
 8004562:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004566:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800456a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800456c:	2300      	movs	r3, #0
}
 800456e:	4618      	mov	r0, r3
 8004570:	371c      	adds	r7, #28
 8004572:	46bd      	mov	sp, r7
 8004574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004578:	4770      	bx	lr

0800457a <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800457a:	b480      	push	{r7}
 800457c:	b089      	sub	sp, #36	; 0x24
 800457e:	af00      	add	r7, sp, #0
 8004580:	60f8      	str	r0, [r7, #12]
 8004582:	60b9      	str	r1, [r7, #8]
 8004584:	4611      	mov	r1, r2
 8004586:	461a      	mov	r2, r3
 8004588:	460b      	mov	r3, r1
 800458a:	71fb      	strb	r3, [r7, #7]
 800458c:	4613      	mov	r3, r2
 800458e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8004598:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800459c:	2b00      	cmp	r3, #0
 800459e:	d11a      	bne.n	80045d6 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80045a0:	88bb      	ldrh	r3, [r7, #4]
 80045a2:	3303      	adds	r3, #3
 80045a4:	089b      	lsrs	r3, r3, #2
 80045a6:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80045a8:	2300      	movs	r3, #0
 80045aa:	61bb      	str	r3, [r7, #24]
 80045ac:	e00f      	b.n	80045ce <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80045ae:	79fb      	ldrb	r3, [r7, #7]
 80045b0:	031a      	lsls	r2, r3, #12
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	4413      	add	r3, r2
 80045b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045ba:	461a      	mov	r2, r3
 80045bc:	69fb      	ldr	r3, [r7, #28]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	6013      	str	r3, [r2, #0]
      pSrc++;
 80045c2:	69fb      	ldr	r3, [r7, #28]
 80045c4:	3304      	adds	r3, #4
 80045c6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80045c8:	69bb      	ldr	r3, [r7, #24]
 80045ca:	3301      	adds	r3, #1
 80045cc:	61bb      	str	r3, [r7, #24]
 80045ce:	69ba      	ldr	r2, [r7, #24]
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	429a      	cmp	r2, r3
 80045d4:	d3eb      	bcc.n	80045ae <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80045d6:	2300      	movs	r3, #0
}
 80045d8:	4618      	mov	r0, r3
 80045da:	3724      	adds	r7, #36	; 0x24
 80045dc:	46bd      	mov	sp, r7
 80045de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e2:	4770      	bx	lr

080045e4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b089      	sub	sp, #36	; 0x24
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	60f8      	str	r0, [r7, #12]
 80045ec:	60b9      	str	r1, [r7, #8]
 80045ee:	4613      	mov	r3, r2
 80045f0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80045fa:	88fb      	ldrh	r3, [r7, #6]
 80045fc:	3303      	adds	r3, #3
 80045fe:	089b      	lsrs	r3, r3, #2
 8004600:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8004602:	2300      	movs	r3, #0
 8004604:	61bb      	str	r3, [r7, #24]
 8004606:	e00b      	b.n	8004620 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	69fb      	ldr	r3, [r7, #28]
 8004612:	601a      	str	r2, [r3, #0]
    pDest++;
 8004614:	69fb      	ldr	r3, [r7, #28]
 8004616:	3304      	adds	r3, #4
 8004618:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800461a:	69bb      	ldr	r3, [r7, #24]
 800461c:	3301      	adds	r3, #1
 800461e:	61bb      	str	r3, [r7, #24]
 8004620:	69ba      	ldr	r2, [r7, #24]
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	429a      	cmp	r2, r3
 8004626:	d3ef      	bcc.n	8004608 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8004628:	69fb      	ldr	r3, [r7, #28]
}
 800462a:	4618      	mov	r0, r3
 800462c:	3724      	adds	r7, #36	; 0x24
 800462e:	46bd      	mov	sp, r7
 8004630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004634:	4770      	bx	lr

08004636 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004636:	b480      	push	{r7}
 8004638:	b085      	sub	sp, #20
 800463a:	af00      	add	r7, sp, #0
 800463c:	6078      	str	r0, [r7, #4]
 800463e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	781b      	ldrb	r3, [r3, #0]
 8004648:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	785b      	ldrb	r3, [r3, #1]
 800464e:	2b01      	cmp	r3, #1
 8004650:	d12c      	bne.n	80046ac <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	015a      	lsls	r2, r3, #5
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	4413      	add	r3, r2
 800465a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	2b00      	cmp	r3, #0
 8004662:	db12      	blt.n	800468a <USB_EPSetStall+0x54>
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d00f      	beq.n	800468a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	015a      	lsls	r2, r3, #5
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	4413      	add	r3, r2
 8004672:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	68ba      	ldr	r2, [r7, #8]
 800467a:	0151      	lsls	r1, r2, #5
 800467c:	68fa      	ldr	r2, [r7, #12]
 800467e:	440a      	add	r2, r1
 8004680:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004684:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004688:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	015a      	lsls	r2, r3, #5
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	4413      	add	r3, r2
 8004692:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	68ba      	ldr	r2, [r7, #8]
 800469a:	0151      	lsls	r1, r2, #5
 800469c:	68fa      	ldr	r2, [r7, #12]
 800469e:	440a      	add	r2, r1
 80046a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80046a8:	6013      	str	r3, [r2, #0]
 80046aa:	e02b      	b.n	8004704 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	015a      	lsls	r2, r3, #5
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	4413      	add	r3, r2
 80046b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	db12      	blt.n	80046e4 <USB_EPSetStall+0xae>
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d00f      	beq.n	80046e4 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	015a      	lsls	r2, r3, #5
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	4413      	add	r3, r2
 80046cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	68ba      	ldr	r2, [r7, #8]
 80046d4:	0151      	lsls	r1, r2, #5
 80046d6:	68fa      	ldr	r2, [r7, #12]
 80046d8:	440a      	add	r2, r1
 80046da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046de:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80046e2:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	015a      	lsls	r2, r3, #5
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	4413      	add	r3, r2
 80046ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	68ba      	ldr	r2, [r7, #8]
 80046f4:	0151      	lsls	r1, r2, #5
 80046f6:	68fa      	ldr	r2, [r7, #12]
 80046f8:	440a      	add	r2, r1
 80046fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046fe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004702:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004704:	2300      	movs	r3, #0
}
 8004706:	4618      	mov	r0, r3
 8004708:	3714      	adds	r7, #20
 800470a:	46bd      	mov	sp, r7
 800470c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004710:	4770      	bx	lr

08004712 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004712:	b480      	push	{r7}
 8004714:	b085      	sub	sp, #20
 8004716:	af00      	add	r7, sp, #0
 8004718:	6078      	str	r0, [r7, #4]
 800471a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	781b      	ldrb	r3, [r3, #0]
 8004724:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	785b      	ldrb	r3, [r3, #1]
 800472a:	2b01      	cmp	r3, #1
 800472c:	d128      	bne.n	8004780 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	015a      	lsls	r2, r3, #5
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	4413      	add	r3, r2
 8004736:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	68ba      	ldr	r2, [r7, #8]
 800473e:	0151      	lsls	r1, r2, #5
 8004740:	68fa      	ldr	r2, [r7, #12]
 8004742:	440a      	add	r2, r1
 8004744:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004748:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800474c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	78db      	ldrb	r3, [r3, #3]
 8004752:	2b03      	cmp	r3, #3
 8004754:	d003      	beq.n	800475e <USB_EPClearStall+0x4c>
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	78db      	ldrb	r3, [r3, #3]
 800475a:	2b02      	cmp	r3, #2
 800475c:	d138      	bne.n	80047d0 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	015a      	lsls	r2, r3, #5
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	4413      	add	r3, r2
 8004766:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	68ba      	ldr	r2, [r7, #8]
 800476e:	0151      	lsls	r1, r2, #5
 8004770:	68fa      	ldr	r2, [r7, #12]
 8004772:	440a      	add	r2, r1
 8004774:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004778:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800477c:	6013      	str	r3, [r2, #0]
 800477e:	e027      	b.n	80047d0 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	015a      	lsls	r2, r3, #5
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	4413      	add	r3, r2
 8004788:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	68ba      	ldr	r2, [r7, #8]
 8004790:	0151      	lsls	r1, r2, #5
 8004792:	68fa      	ldr	r2, [r7, #12]
 8004794:	440a      	add	r2, r1
 8004796:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800479a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800479e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	78db      	ldrb	r3, [r3, #3]
 80047a4:	2b03      	cmp	r3, #3
 80047a6:	d003      	beq.n	80047b0 <USB_EPClearStall+0x9e>
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	78db      	ldrb	r3, [r3, #3]
 80047ac:	2b02      	cmp	r3, #2
 80047ae:	d10f      	bne.n	80047d0 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	015a      	lsls	r2, r3, #5
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	4413      	add	r3, r2
 80047b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	68ba      	ldr	r2, [r7, #8]
 80047c0:	0151      	lsls	r1, r2, #5
 80047c2:	68fa      	ldr	r2, [r7, #12]
 80047c4:	440a      	add	r2, r1
 80047c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047ce:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80047d0:	2300      	movs	r3, #0
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3714      	adds	r7, #20
 80047d6:	46bd      	mov	sp, r7
 80047d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047dc:	4770      	bx	lr

080047de <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80047de:	b480      	push	{r7}
 80047e0:	b085      	sub	sp, #20
 80047e2:	af00      	add	r7, sp, #0
 80047e4:	6078      	str	r0, [r7, #4]
 80047e6:	460b      	mov	r3, r1
 80047e8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	68fa      	ldr	r2, [r7, #12]
 80047f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80047fc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004800:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	78fb      	ldrb	r3, [r7, #3]
 800480c:	011b      	lsls	r3, r3, #4
 800480e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004812:	68f9      	ldr	r1, [r7, #12]
 8004814:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004818:	4313      	orrs	r3, r2
 800481a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800481c:	2300      	movs	r3, #0
}
 800481e:	4618      	mov	r0, r3
 8004820:	3714      	adds	r7, #20
 8004822:	46bd      	mov	sp, r7
 8004824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004828:	4770      	bx	lr

0800482a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800482a:	b580      	push	{r7, lr}
 800482c:	b084      	sub	sp, #16
 800482e:	af00      	add	r7, sp, #0
 8004830:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	68fa      	ldr	r2, [r7, #12]
 8004840:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004844:	f023 0302 	bic.w	r3, r3, #2
 8004848:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800484a:	2003      	movs	r0, #3
 800484c:	f7fc fdfa 	bl	8001444 <HAL_Delay>

  return HAL_OK;
 8004850:	2300      	movs	r3, #0
}
 8004852:	4618      	mov	r0, r3
 8004854:	3710      	adds	r7, #16
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}

0800485a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800485a:	b580      	push	{r7, lr}
 800485c:	b084      	sub	sp, #16
 800485e:	af00      	add	r7, sp, #0
 8004860:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	68fa      	ldr	r2, [r7, #12]
 8004870:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004874:	f043 0302 	orr.w	r3, r3, #2
 8004878:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800487a:	2003      	movs	r0, #3
 800487c:	f7fc fde2 	bl	8001444 <HAL_Delay>

  return HAL_OK;
 8004880:	2300      	movs	r3, #0
}
 8004882:	4618      	mov	r0, r3
 8004884:	3710      	adds	r7, #16
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}

0800488a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800488a:	b480      	push	{r7}
 800488c:	b085      	sub	sp, #20
 800488e:	af00      	add	r7, sp, #0
 8004890:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	695b      	ldr	r3, [r3, #20]
 8004896:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	699b      	ldr	r3, [r3, #24]
 800489c:	68fa      	ldr	r2, [r7, #12]
 800489e:	4013      	ands	r3, r2
 80048a0:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80048a2:	68fb      	ldr	r3, [r7, #12]
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	3714      	adds	r7, #20
 80048a8:	46bd      	mov	sp, r7
 80048aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ae:	4770      	bx	lr

080048b0 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b085      	sub	sp, #20
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048c2:	699b      	ldr	r3, [r3, #24]
 80048c4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048cc:	69db      	ldr	r3, [r3, #28]
 80048ce:	68ba      	ldr	r2, [r7, #8]
 80048d0:	4013      	ands	r3, r2
 80048d2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	0c1b      	lsrs	r3, r3, #16
}
 80048d8:	4618      	mov	r0, r3
 80048da:	3714      	adds	r7, #20
 80048dc:	46bd      	mov	sp, r7
 80048de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e2:	4770      	bx	lr

080048e4 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b085      	sub	sp, #20
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048f6:	699b      	ldr	r3, [r3, #24]
 80048f8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004900:	69db      	ldr	r3, [r3, #28]
 8004902:	68ba      	ldr	r2, [r7, #8]
 8004904:	4013      	ands	r3, r2
 8004906:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	b29b      	uxth	r3, r3
}
 800490c:	4618      	mov	r0, r3
 800490e:	3714      	adds	r7, #20
 8004910:	46bd      	mov	sp, r7
 8004912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004916:	4770      	bx	lr

08004918 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004918:	b480      	push	{r7}
 800491a:	b085      	sub	sp, #20
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
 8004920:	460b      	mov	r3, r1
 8004922:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004928:	78fb      	ldrb	r3, [r7, #3]
 800492a:	015a      	lsls	r2, r3, #5
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	4413      	add	r3, r2
 8004930:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800493e:	695b      	ldr	r3, [r3, #20]
 8004940:	68ba      	ldr	r2, [r7, #8]
 8004942:	4013      	ands	r3, r2
 8004944:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004946:	68bb      	ldr	r3, [r7, #8]
}
 8004948:	4618      	mov	r0, r3
 800494a:	3714      	adds	r7, #20
 800494c:	46bd      	mov	sp, r7
 800494e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004952:	4770      	bx	lr

08004954 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004954:	b480      	push	{r7}
 8004956:	b087      	sub	sp, #28
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
 800495c:	460b      	mov	r3, r1
 800495e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800496a:	691b      	ldr	r3, [r3, #16]
 800496c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004974:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004976:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004978:	78fb      	ldrb	r3, [r7, #3]
 800497a:	f003 030f 	and.w	r3, r3, #15
 800497e:	68fa      	ldr	r2, [r7, #12]
 8004980:	fa22 f303 	lsr.w	r3, r2, r3
 8004984:	01db      	lsls	r3, r3, #7
 8004986:	b2db      	uxtb	r3, r3
 8004988:	693a      	ldr	r2, [r7, #16]
 800498a:	4313      	orrs	r3, r2
 800498c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800498e:	78fb      	ldrb	r3, [r7, #3]
 8004990:	015a      	lsls	r2, r3, #5
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	4413      	add	r3, r2
 8004996:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	693a      	ldr	r2, [r7, #16]
 800499e:	4013      	ands	r3, r2
 80049a0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80049a2:	68bb      	ldr	r3, [r7, #8]
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	371c      	adds	r7, #28
 80049a8:	46bd      	mov	sp, r7
 80049aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ae:	4770      	bx	lr

080049b0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b083      	sub	sp, #12
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	695b      	ldr	r3, [r3, #20]
 80049bc:	f003 0301 	and.w	r3, r3, #1
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	370c      	adds	r7, #12
 80049c4:	46bd      	mov	sp, r7
 80049c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ca:	4770      	bx	lr

080049cc <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b085      	sub	sp, #20
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	68fa      	ldr	r2, [r7, #12]
 80049e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049e6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80049ea:	f023 0307 	bic.w	r3, r3, #7
 80049ee:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	68fa      	ldr	r2, [r7, #12]
 80049fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80049fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a02:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004a04:	2300      	movs	r3, #0
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	3714      	adds	r7, #20
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a10:	4770      	bx	lr
	...

08004a14 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b087      	sub	sp, #28
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	60f8      	str	r0, [r7, #12]
 8004a1c:	460b      	mov	r3, r1
 8004a1e:	607a      	str	r2, [r7, #4]
 8004a20:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	333c      	adds	r3, #60	; 0x3c
 8004a2a:	3304      	adds	r3, #4
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	4a26      	ldr	r2, [pc, #152]	; (8004acc <USB_EP0_OutStart+0xb8>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d90a      	bls.n	8004a4e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a44:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a48:	d101      	bne.n	8004a4e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	e037      	b.n	8004abe <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a54:	461a      	mov	r2, r3
 8004a56:	2300      	movs	r3, #0
 8004a58:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a60:	691b      	ldr	r3, [r3, #16]
 8004a62:	697a      	ldr	r2, [r7, #20]
 8004a64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a68:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004a6c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a74:	691b      	ldr	r3, [r3, #16]
 8004a76:	697a      	ldr	r2, [r7, #20]
 8004a78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a7c:	f043 0318 	orr.w	r3, r3, #24
 8004a80:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a88:	691b      	ldr	r3, [r3, #16]
 8004a8a:	697a      	ldr	r2, [r7, #20]
 8004a8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a90:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004a94:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004a96:	7afb      	ldrb	r3, [r7, #11]
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d10f      	bne.n	8004abc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004aa2:	461a      	mov	r2, r3
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	697a      	ldr	r2, [r7, #20]
 8004ab2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ab6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004aba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004abc:	2300      	movs	r3, #0
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	371c      	adds	r7, #28
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac8:	4770      	bx	lr
 8004aca:	bf00      	nop
 8004acc:	4f54300a 	.word	0x4f54300a

08004ad0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b085      	sub	sp, #20
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	3301      	adds	r3, #1
 8004ae0:	60fb      	str	r3, [r7, #12]
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	4a13      	ldr	r2, [pc, #76]	; (8004b34 <USB_CoreReset+0x64>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d901      	bls.n	8004aee <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004aea:	2303      	movs	r3, #3
 8004aec:	e01b      	b.n	8004b26 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	691b      	ldr	r3, [r3, #16]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	daf2      	bge.n	8004adc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004af6:	2300      	movs	r3, #0
 8004af8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	691b      	ldr	r3, [r3, #16]
 8004afe:	f043 0201 	orr.w	r2, r3, #1
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	3301      	adds	r3, #1
 8004b0a:	60fb      	str	r3, [r7, #12]
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	4a09      	ldr	r2, [pc, #36]	; (8004b34 <USB_CoreReset+0x64>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d901      	bls.n	8004b18 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004b14:	2303      	movs	r3, #3
 8004b16:	e006      	b.n	8004b26 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	691b      	ldr	r3, [r3, #16]
 8004b1c:	f003 0301 	and.w	r3, r3, #1
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d0f0      	beq.n	8004b06 <USB_CoreReset+0x36>

  return HAL_OK;
 8004b24:	2300      	movs	r3, #0
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	3714      	adds	r7, #20
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b30:	4770      	bx	lr
 8004b32:	bf00      	nop
 8004b34:	00030d40 	.word	0x00030d40

08004b38 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b084      	sub	sp, #16
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
 8004b40:	460b      	mov	r3, r1
 8004b42:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8004b44:	2010      	movs	r0, #16
 8004b46:	f001 fee3 	bl	8006910 <malloc>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d105      	bne.n	8004b60 <USBD_HID_Init+0x28>
  {
    pdev->pClassData = NULL;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2200      	movs	r2, #0
 8004b58:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8004b5c:	2302      	movs	r3, #2
 8004b5e:	e01b      	b.n	8004b98 <USBD_HID_Init+0x60>
  }

  pdev->pClassData = (void *)hhid;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	68fa      	ldr	r2, [r7, #12]
 8004b64:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	7c1b      	ldrb	r3, [r3, #16]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d103      	bne.n	8004b78 <USBD_HID_Init+0x40>
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2207      	movs	r2, #7
 8004b74:	875a      	strh	r2, [r3, #58]	; 0x3a
 8004b76:	e002      	b.n	8004b7e <USBD_HID_Init+0x46>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	220a      	movs	r2, #10
 8004b7c:	875a      	strh	r2, [r3, #58]	; 0x3a
  }

    /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8004b7e:	2310      	movs	r3, #16
 8004b80:	2203      	movs	r2, #3
 8004b82:	2181      	movs	r1, #129	; 0x81
 8004b84:	6878      	ldr	r0, [r7, #4]
 8004b86:	f001 fd5c 	bl	8006642 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2201      	movs	r2, #1
 8004b8e:	871a      	strh	r2, [r3, #56]	; 0x38

  hhid->state = HID_IDLE;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2200      	movs	r2, #0
 8004b94:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8004b96:	2300      	movs	r3, #0
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	3710      	adds	r7, #16
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}

08004ba0 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b082      	sub	sp, #8
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
 8004ba8:	460b      	mov	r3, r1
 8004baa:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8004bac:	2181      	movs	r1, #129	; 0x81
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f001 fd6d 	bl	800668e <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d009      	beq.n	8004bde <USBD_HID_DeInit+0x3e>
  {
    (void)USBD_free(pdev->pClassData);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	f001 fea5 	bl	8006920 <free>
    pdev->pClassData = NULL;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004bde:	2300      	movs	r3, #0
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	3708      	adds	r7, #8
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}

08004be8 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b086      	sub	sp, #24
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
 8004bf0:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004bf8:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	817b      	strh	r3, [r7, #10]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	781b      	ldrb	r3, [r3, #0]
 8004c06:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d045      	beq.n	8004c9a <USBD_HID_Setup+0xb2>
 8004c0e:	2b20      	cmp	r3, #32
 8004c10:	f040 80d4 	bne.w	8004dbc <USBD_HID_Setup+0x1d4>
  {
  case USB_REQ_TYPE_CLASS :
    switch (req->bRequest)
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	785b      	ldrb	r3, [r3, #1]
 8004c18:	3b02      	subs	r3, #2
 8004c1a:	2b09      	cmp	r3, #9
 8004c1c:	d835      	bhi.n	8004c8a <USBD_HID_Setup+0xa2>
 8004c1e:	a201      	add	r2, pc, #4	; (adr r2, 8004c24 <USBD_HID_Setup+0x3c>)
 8004c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c24:	08004c7b 	.word	0x08004c7b
 8004c28:	08004c5b 	.word	0x08004c5b
 8004c2c:	08004c8b 	.word	0x08004c8b
 8004c30:	08004c8b 	.word	0x08004c8b
 8004c34:	08004c8b 	.word	0x08004c8b
 8004c38:	08004c8b 	.word	0x08004c8b
 8004c3c:	08004c8b 	.word	0x08004c8b
 8004c40:	08004c8b 	.word	0x08004c8b
 8004c44:	08004c69 	.word	0x08004c69
 8004c48:	08004c4d 	.word	0x08004c4d
    {
    case HID_REQ_SET_PROTOCOL:
      hhid->Protocol = (uint8_t)(req->wValue);
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	885b      	ldrh	r3, [r3, #2]
 8004c50:	b2db      	uxtb	r3, r3
 8004c52:	461a      	mov	r2, r3
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	601a      	str	r2, [r3, #0]
      break;
 8004c58:	e01e      	b.n	8004c98 <USBD_HID_Setup+0xb0>

    case HID_REQ_GET_PROTOCOL:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2201      	movs	r2, #1
 8004c5e:	4619      	mov	r1, r3
 8004c60:	6878      	ldr	r0, [r7, #4]
 8004c62:	f001 f9b4 	bl	8005fce <USBD_CtlSendData>
      break;
 8004c66:	e017      	b.n	8004c98 <USBD_HID_Setup+0xb0>

    case HID_REQ_SET_IDLE:
      hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	885b      	ldrh	r3, [r3, #2]
 8004c6c:	0a1b      	lsrs	r3, r3, #8
 8004c6e:	b29b      	uxth	r3, r3
 8004c70:	b2db      	uxtb	r3, r3
 8004c72:	461a      	mov	r2, r3
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	605a      	str	r2, [r3, #4]
      break;
 8004c78:	e00e      	b.n	8004c98 <USBD_HID_Setup+0xb0>

    case HID_REQ_GET_IDLE:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	3304      	adds	r3, #4
 8004c7e:	2201      	movs	r2, #1
 8004c80:	4619      	mov	r1, r3
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f001 f9a3 	bl	8005fce <USBD_CtlSendData>
      break;
 8004c88:	e006      	b.n	8004c98 <USBD_HID_Setup+0xb0>

    default:
      USBD_CtlError(pdev, req);
 8004c8a:	6839      	ldr	r1, [r7, #0]
 8004c8c:	6878      	ldr	r0, [r7, #4]
 8004c8e:	f001 f92d 	bl	8005eec <USBD_CtlError>
      ret = USBD_FAIL;
 8004c92:	2303      	movs	r3, #3
 8004c94:	75fb      	strb	r3, [r7, #23]
      break;
 8004c96:	bf00      	nop
    }
    break;
 8004c98:	e097      	b.n	8004dca <USBD_HID_Setup+0x1e2>
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	785b      	ldrb	r3, [r3, #1]
 8004c9e:	2b0b      	cmp	r3, #11
 8004ca0:	f200 8083 	bhi.w	8004daa <USBD_HID_Setup+0x1c2>
 8004ca4:	a201      	add	r2, pc, #4	; (adr r2, 8004cac <USBD_HID_Setup+0xc4>)
 8004ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004caa:	bf00      	nop
 8004cac:	08004cdd 	.word	0x08004cdd
 8004cb0:	08004db9 	.word	0x08004db9
 8004cb4:	08004dab 	.word	0x08004dab
 8004cb8:	08004dab 	.word	0x08004dab
 8004cbc:	08004dab 	.word	0x08004dab
 8004cc0:	08004dab 	.word	0x08004dab
 8004cc4:	08004d05 	.word	0x08004d05
 8004cc8:	08004dab 	.word	0x08004dab
 8004ccc:	08004dab 	.word	0x08004dab
 8004cd0:	08004dab 	.word	0x08004dab
 8004cd4:	08004d5d 	.word	0x08004d5d
 8004cd8:	08004d85 	.word	0x08004d85
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004ce2:	2b03      	cmp	r3, #3
 8004ce4:	d107      	bne.n	8004cf6 <USBD_HID_Setup+0x10e>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004ce6:	f107 030a 	add.w	r3, r7, #10
 8004cea:	2202      	movs	r2, #2
 8004cec:	4619      	mov	r1, r3
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f001 f96d 	bl	8005fce <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8004cf4:	e061      	b.n	8004dba <USBD_HID_Setup+0x1d2>
        USBD_CtlError(pdev, req);
 8004cf6:	6839      	ldr	r1, [r7, #0]
 8004cf8:	6878      	ldr	r0, [r7, #4]
 8004cfa:	f001 f8f7 	bl	8005eec <USBD_CtlError>
        ret = USBD_FAIL;
 8004cfe:	2303      	movs	r3, #3
 8004d00:	75fb      	strb	r3, [r7, #23]
      break;
 8004d02:	e05a      	b.n	8004dba <USBD_HID_Setup+0x1d2>

    case USB_REQ_GET_DESCRIPTOR:
      if ((req->wValue >> 8) == HID_REPORT_DESC)
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	885b      	ldrh	r3, [r3, #2]
 8004d08:	0a1b      	lsrs	r3, r3, #8
 8004d0a:	b29b      	uxth	r3, r3
 8004d0c:	2b22      	cmp	r3, #34	; 0x22
 8004d0e:	d108      	bne.n	8004d22 <USBD_HID_Setup+0x13a>
      {
        len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	88db      	ldrh	r3, [r3, #6]
 8004d14:	2b43      	cmp	r3, #67	; 0x43
 8004d16:	bf28      	it	cs
 8004d18:	2343      	movcs	r3, #67	; 0x43
 8004d1a:	82bb      	strh	r3, [r7, #20]
        pbuf = HID_MOUSE_ReportDesc;
 8004d1c:	4b2d      	ldr	r3, [pc, #180]	; (8004dd4 <USBD_HID_Setup+0x1ec>)
 8004d1e:	613b      	str	r3, [r7, #16]
 8004d20:	e015      	b.n	8004d4e <USBD_HID_Setup+0x166>
      }
      else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	885b      	ldrh	r3, [r3, #2]
 8004d26:	0a1b      	lsrs	r3, r3, #8
 8004d28:	b29b      	uxth	r3, r3
 8004d2a:	2b21      	cmp	r3, #33	; 0x21
 8004d2c:	d108      	bne.n	8004d40 <USBD_HID_Setup+0x158>
      {
        pbuf = USBD_HID_Desc;
 8004d2e:	4b2a      	ldr	r3, [pc, #168]	; (8004dd8 <USBD_HID_Setup+0x1f0>)
 8004d30:	613b      	str	r3, [r7, #16]
        len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	88db      	ldrh	r3, [r3, #6]
 8004d36:	2b09      	cmp	r3, #9
 8004d38:	bf28      	it	cs
 8004d3a:	2309      	movcs	r3, #9
 8004d3c:	82bb      	strh	r3, [r7, #20]
 8004d3e:	e006      	b.n	8004d4e <USBD_HID_Setup+0x166>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8004d40:	6839      	ldr	r1, [r7, #0]
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f001 f8d2 	bl	8005eec <USBD_CtlError>
        ret = USBD_FAIL;
 8004d48:	2303      	movs	r3, #3
 8004d4a:	75fb      	strb	r3, [r7, #23]
        break;
 8004d4c:	e035      	b.n	8004dba <USBD_HID_Setup+0x1d2>
      }
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8004d4e:	8abb      	ldrh	r3, [r7, #20]
 8004d50:	461a      	mov	r2, r3
 8004d52:	6939      	ldr	r1, [r7, #16]
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	f001 f93a 	bl	8005fce <USBD_CtlSendData>
      break;
 8004d5a:	e02e      	b.n	8004dba <USBD_HID_Setup+0x1d2>

    case USB_REQ_GET_INTERFACE :
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004d62:	2b03      	cmp	r3, #3
 8004d64:	d107      	bne.n	8004d76 <USBD_HID_Setup+0x18e>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	3308      	adds	r3, #8
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	4619      	mov	r1, r3
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f001 f92d 	bl	8005fce <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8004d74:	e021      	b.n	8004dba <USBD_HID_Setup+0x1d2>
        USBD_CtlError(pdev, req);
 8004d76:	6839      	ldr	r1, [r7, #0]
 8004d78:	6878      	ldr	r0, [r7, #4]
 8004d7a:	f001 f8b7 	bl	8005eec <USBD_CtlError>
        ret = USBD_FAIL;
 8004d7e:	2303      	movs	r3, #3
 8004d80:	75fb      	strb	r3, [r7, #23]
      break;
 8004d82:	e01a      	b.n	8004dba <USBD_HID_Setup+0x1d2>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004d8a:	2b03      	cmp	r3, #3
 8004d8c:	d106      	bne.n	8004d9c <USBD_HID_Setup+0x1b4>
      {
        hhid->AltSetting = (uint8_t)(req->wValue);
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	885b      	ldrh	r3, [r3, #2]
 8004d92:	b2db      	uxtb	r3, r3
 8004d94:	461a      	mov	r2, r3
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	609a      	str	r2, [r3, #8]
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8004d9a:	e00e      	b.n	8004dba <USBD_HID_Setup+0x1d2>
        USBD_CtlError(pdev, req);
 8004d9c:	6839      	ldr	r1, [r7, #0]
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	f001 f8a4 	bl	8005eec <USBD_CtlError>
        ret = USBD_FAIL;
 8004da4:	2303      	movs	r3, #3
 8004da6:	75fb      	strb	r3, [r7, #23]
      break;
 8004da8:	e007      	b.n	8004dba <USBD_HID_Setup+0x1d2>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8004daa:	6839      	ldr	r1, [r7, #0]
 8004dac:	6878      	ldr	r0, [r7, #4]
 8004dae:	f001 f89d 	bl	8005eec <USBD_CtlError>
      ret = USBD_FAIL;
 8004db2:	2303      	movs	r3, #3
 8004db4:	75fb      	strb	r3, [r7, #23]
      break;
 8004db6:	e000      	b.n	8004dba <USBD_HID_Setup+0x1d2>
      break;
 8004db8:	bf00      	nop
    }
    break;
 8004dba:	e006      	b.n	8004dca <USBD_HID_Setup+0x1e2>

  default:
    USBD_CtlError(pdev, req);
 8004dbc:	6839      	ldr	r1, [r7, #0]
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f001 f894 	bl	8005eec <USBD_CtlError>
    ret = USBD_FAIL;
 8004dc4:	2303      	movs	r3, #3
 8004dc6:	75fb      	strb	r3, [r7, #23]
    break;
 8004dc8:	bf00      	nop
  }

  return (uint8_t)ret;
 8004dca:	7dfb      	ldrb	r3, [r7, #23]
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3718      	adds	r7, #24
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}
 8004dd4:	20000118 	.word	0x20000118
 8004dd8:	20000100 	.word	0x20000100

08004ddc <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b086      	sub	sp, #24
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	60f8      	str	r0, [r7, #12]
 8004de4:	60b9      	str	r1, [r7, #8]
 8004de6:	4613      	mov	r3, r2
 8004de8:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004df0:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004df8:	2b03      	cmp	r3, #3
 8004dfa:	d10c      	bne.n	8004e16 <USBD_HID_SendReport+0x3a>
  {
    if (hhid->state == HID_IDLE)
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	7b1b      	ldrb	r3, [r3, #12]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d108      	bne.n	8004e16 <USBD_HID_SendReport+0x3a>
    {
      hhid->state = HID_BUSY;
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	2201      	movs	r2, #1
 8004e08:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HID_EPIN_ADDR, report, len);
 8004e0a:	88fb      	ldrh	r3, [r7, #6]
 8004e0c:	68ba      	ldr	r2, [r7, #8]
 8004e0e:	2181      	movs	r1, #129	; 0x81
 8004e10:	68f8      	ldr	r0, [r7, #12]
 8004e12:	f001 fce4 	bl	80067de <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 8004e16:	2300      	movs	r3, #0
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	3718      	adds	r7, #24
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd80      	pop	{r7, pc}

08004e20 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b083      	sub	sp, #12
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgFSDesc);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	223b      	movs	r2, #59	; 0x3b
 8004e2c:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgFSDesc;
 8004e2e:	4b03      	ldr	r3, [pc, #12]	; (8004e3c <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	370c      	adds	r7, #12
 8004e34:	46bd      	mov	sp, r7
 8004e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3a:	4770      	bx	lr
 8004e3c:	2000004c 	.word	0x2000004c

08004e40 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8004e40:	b480      	push	{r7}
 8004e42:	b083      	sub	sp, #12
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgHSDesc);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	223b      	movs	r2, #59	; 0x3b
 8004e4c:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgHSDesc;
 8004e4e:	4b03      	ldr	r3, [pc, #12]	; (8004e5c <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	370c      	adds	r7, #12
 8004e54:	46bd      	mov	sp, r7
 8004e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5a:	4770      	bx	lr
 8004e5c:	20000088 	.word	0x20000088

08004e60 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b083      	sub	sp, #12
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_OtherSpeedCfgDesc);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	223b      	movs	r2, #59	; 0x3b
 8004e6c:	801a      	strh	r2, [r3, #0]

  return USBD_HID_OtherSpeedCfgDesc;
 8004e6e:	4b03      	ldr	r3, [pc, #12]	; (8004e7c <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	370c      	adds	r7, #12
 8004e74:	46bd      	mov	sp, r7
 8004e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7a:	4770      	bx	lr
 8004e7c:	200000c4 	.word	0x200000c4

08004e80 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b083      	sub	sp, #12
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
 8004e88:	460b      	mov	r3, r1
 8004e8a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004e92:	2200      	movs	r2, #0
 8004e94:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8004e96:	2300      	movs	r3, #0
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	370c      	adds	r7, #12
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea2:	4770      	bx	lr

08004ea4 <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b083      	sub	sp, #12
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	220a      	movs	r2, #10
 8004eb0:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 8004eb2:	4b03      	ldr	r3, [pc, #12]	; (8004ec0 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	370c      	adds	r7, #12
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebe:	4770      	bx	lr
 8004ec0:	2000010c 	.word	0x2000010c

08004ec4 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b086      	sub	sp, #24
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	60f8      	str	r0, [r7, #12]
 8004ecc:	60b9      	str	r1, [r7, #8]
 8004ece:	4613      	mov	r3, r2
 8004ed0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d101      	bne.n	8004edc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8004ed8:	2303      	movs	r3, #3
 8004eda:	e025      	b.n	8004f28 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d003      	beq.n	8004eee <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d003      	beq.n	8004f00 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2200      	movs	r2, #0
 8004efc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d003      	beq.n	8004f0e <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	68ba      	ldr	r2, [r7, #8]
 8004f0a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2201      	movs	r2, #1
 8004f12:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	79fa      	ldrb	r2, [r7, #7]
 8004f1a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8004f1c:	68f8      	ldr	r0, [r7, #12]
 8004f1e:	f001 fb29 	bl	8006574 <USBD_LL_Init>
 8004f22:	4603      	mov	r3, r0
 8004f24:	75fb      	strb	r3, [r7, #23]

  return ret;
 8004f26:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	3718      	adds	r7, #24
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bd80      	pop	{r7, pc}

08004f30 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b084      	sub	sp, #16
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
 8004f38:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d101      	bne.n	8004f48 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8004f44:	2303      	movs	r3, #3
 8004f46:	e010      	b.n	8004f6a <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	683a      	ldr	r2, [r7, #0]
 8004f4c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f58:	f107 020e 	add.w	r2, r7, #14
 8004f5c:	4610      	mov	r0, r2
 8004f5e:	4798      	blx	r3
 8004f60:	4602      	mov	r2, r0
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8004f68:	2300      	movs	r3, #0
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3710      	adds	r7, #16
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}

08004f72 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004f72:	b580      	push	{r7, lr}
 8004f74:	b082      	sub	sp, #8
 8004f76:	af00      	add	r7, sp, #0
 8004f78:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	f001 fb46 	bl	800660c <USBD_LL_Start>
 8004f80:	4603      	mov	r3, r0
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	3708      	adds	r7, #8
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}

08004f8a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8004f8a:	b480      	push	{r7}
 8004f8c:	b083      	sub	sp, #12
 8004f8e:	af00      	add	r7, sp, #0
 8004f90:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004f92:	2300      	movs	r3, #0
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	370c      	adds	r7, #12
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9e:	4770      	bx	lr

08004fa0 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b084      	sub	sp, #16
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
 8004fa8:	460b      	mov	r3, r1
 8004faa:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8004fac:	2303      	movs	r3, #3
 8004fae:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d009      	beq.n	8004fce <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	78fa      	ldrb	r2, [r7, #3]
 8004fc4:	4611      	mov	r1, r2
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	4798      	blx	r3
 8004fca:	4603      	mov	r3, r0
 8004fcc:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8004fce:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	3710      	adds	r7, #16
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bd80      	pop	{r7, pc}

08004fd8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b082      	sub	sp, #8
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
 8004fe0:	460b      	mov	r3, r1
 8004fe2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d007      	beq.n	8004ffe <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	78fa      	ldrb	r2, [r7, #3]
 8004ff8:	4611      	mov	r1, r2
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	4798      	blx	r3
  }

  return USBD_OK;
 8004ffe:	2300      	movs	r3, #0
}
 8005000:	4618      	mov	r0, r3
 8005002:	3708      	adds	r7, #8
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}

08005008 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b084      	sub	sp, #16
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
 8005010:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005018:	6839      	ldr	r1, [r7, #0]
 800501a:	4618      	mov	r0, r3
 800501c:	f000 ff2c 	bl	8005e78 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2201      	movs	r2, #1
 8005024:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800502e:	461a      	mov	r2, r3
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800503c:	f003 031f 	and.w	r3, r3, #31
 8005040:	2b01      	cmp	r3, #1
 8005042:	d00e      	beq.n	8005062 <USBD_LL_SetupStage+0x5a>
 8005044:	2b01      	cmp	r3, #1
 8005046:	d302      	bcc.n	800504e <USBD_LL_SetupStage+0x46>
 8005048:	2b02      	cmp	r3, #2
 800504a:	d014      	beq.n	8005076 <USBD_LL_SetupStage+0x6e>
 800504c:	e01d      	b.n	800508a <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005054:	4619      	mov	r1, r3
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f000 fa18 	bl	800548c <USBD_StdDevReq>
 800505c:	4603      	mov	r3, r0
 800505e:	73fb      	strb	r3, [r7, #15]
      break;
 8005060:	e020      	b.n	80050a4 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005068:	4619      	mov	r1, r3
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f000 fa7c 	bl	8005568 <USBD_StdItfReq>
 8005070:	4603      	mov	r3, r0
 8005072:	73fb      	strb	r3, [r7, #15]
      break;
 8005074:	e016      	b.n	80050a4 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800507c:	4619      	mov	r1, r3
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f000 fab8 	bl	80055f4 <USBD_StdEPReq>
 8005084:	4603      	mov	r3, r0
 8005086:	73fb      	strb	r3, [r7, #15]
      break;
 8005088:	e00c      	b.n	80050a4 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005090:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005094:	b2db      	uxtb	r3, r3
 8005096:	4619      	mov	r1, r3
 8005098:	6878      	ldr	r0, [r7, #4]
 800509a:	f001 fb17 	bl	80066cc <USBD_LL_StallEP>
 800509e:	4603      	mov	r3, r0
 80050a0:	73fb      	strb	r3, [r7, #15]
      break;
 80050a2:	bf00      	nop
  }

  return ret;
 80050a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80050a6:	4618      	mov	r0, r3
 80050a8:	3710      	adds	r7, #16
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}

080050ae <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80050ae:	b580      	push	{r7, lr}
 80050b0:	b086      	sub	sp, #24
 80050b2:	af00      	add	r7, sp, #0
 80050b4:	60f8      	str	r0, [r7, #12]
 80050b6:	460b      	mov	r3, r1
 80050b8:	607a      	str	r2, [r7, #4]
 80050ba:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80050bc:	7afb      	ldrb	r3, [r7, #11]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d137      	bne.n	8005132 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80050c8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80050d0:	2b03      	cmp	r3, #3
 80050d2:	d14a      	bne.n	800516a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	689a      	ldr	r2, [r3, #8]
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	68db      	ldr	r3, [r3, #12]
 80050dc:	429a      	cmp	r2, r3
 80050de:	d913      	bls.n	8005108 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	689a      	ldr	r2, [r3, #8]
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	68db      	ldr	r3, [r3, #12]
 80050e8:	1ad2      	subs	r2, r2, r3
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	68da      	ldr	r2, [r3, #12]
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	689b      	ldr	r3, [r3, #8]
 80050f6:	4293      	cmp	r3, r2
 80050f8:	bf28      	it	cs
 80050fa:	4613      	movcs	r3, r2
 80050fc:	461a      	mov	r2, r3
 80050fe:	6879      	ldr	r1, [r7, #4]
 8005100:	68f8      	ldr	r0, [r7, #12]
 8005102:	f000 ff90 	bl	8006026 <USBD_CtlContinueRx>
 8005106:	e030      	b.n	800516a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800510e:	691b      	ldr	r3, [r3, #16]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d00a      	beq.n	800512a <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800511a:	2b03      	cmp	r3, #3
 800511c:	d105      	bne.n	800512a <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005124:	691b      	ldr	r3, [r3, #16]
 8005126:	68f8      	ldr	r0, [r7, #12]
 8005128:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800512a:	68f8      	ldr	r0, [r7, #12]
 800512c:	f000 ff8c 	bl	8006048 <USBD_CtlSendStatus>
 8005130:	e01b      	b.n	800516a <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005138:	699b      	ldr	r3, [r3, #24]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d013      	beq.n	8005166 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8005144:	2b03      	cmp	r3, #3
 8005146:	d10e      	bne.n	8005166 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800514e:	699b      	ldr	r3, [r3, #24]
 8005150:	7afa      	ldrb	r2, [r7, #11]
 8005152:	4611      	mov	r1, r2
 8005154:	68f8      	ldr	r0, [r7, #12]
 8005156:	4798      	blx	r3
 8005158:	4603      	mov	r3, r0
 800515a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800515c:	7dfb      	ldrb	r3, [r7, #23]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d003      	beq.n	800516a <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8005162:	7dfb      	ldrb	r3, [r7, #23]
 8005164:	e002      	b.n	800516c <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005166:	2303      	movs	r3, #3
 8005168:	e000      	b.n	800516c <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800516a:	2300      	movs	r3, #0
}
 800516c:	4618      	mov	r0, r3
 800516e:	3718      	adds	r7, #24
 8005170:	46bd      	mov	sp, r7
 8005172:	bd80      	pop	{r7, pc}

08005174 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b086      	sub	sp, #24
 8005178:	af00      	add	r7, sp, #0
 800517a:	60f8      	str	r0, [r7, #12]
 800517c:	460b      	mov	r3, r1
 800517e:	607a      	str	r2, [r7, #4]
 8005180:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005182:	7afb      	ldrb	r3, [r7, #11]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d16a      	bne.n	800525e <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	3314      	adds	r3, #20
 800518c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005194:	2b02      	cmp	r3, #2
 8005196:	d155      	bne.n	8005244 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	689a      	ldr	r2, [r3, #8]
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	68db      	ldr	r3, [r3, #12]
 80051a0:	429a      	cmp	r2, r3
 80051a2:	d914      	bls.n	80051ce <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	689a      	ldr	r2, [r3, #8]
 80051a8:	693b      	ldr	r3, [r7, #16]
 80051aa:	68db      	ldr	r3, [r3, #12]
 80051ac:	1ad2      	subs	r2, r2, r3
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	461a      	mov	r2, r3
 80051b8:	6879      	ldr	r1, [r7, #4]
 80051ba:	68f8      	ldr	r0, [r7, #12]
 80051bc:	f000 ff22 	bl	8006004 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80051c0:	2300      	movs	r3, #0
 80051c2:	2200      	movs	r2, #0
 80051c4:	2100      	movs	r1, #0
 80051c6:	68f8      	ldr	r0, [r7, #12]
 80051c8:	f001 fb2a 	bl	8006820 <USBD_LL_PrepareReceive>
 80051cc:	e03a      	b.n	8005244 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	68da      	ldr	r2, [r3, #12]
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	429a      	cmp	r2, r3
 80051d8:	d11c      	bne.n	8005214 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	685a      	ldr	r2, [r3, #4]
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80051e2:	429a      	cmp	r2, r3
 80051e4:	d316      	bcc.n	8005214 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	685a      	ldr	r2, [r3, #4]
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80051f0:	429a      	cmp	r2, r3
 80051f2:	d20f      	bcs.n	8005214 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80051f4:	2200      	movs	r2, #0
 80051f6:	2100      	movs	r1, #0
 80051f8:	68f8      	ldr	r0, [r7, #12]
 80051fa:	f000 ff03 	bl	8006004 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2200      	movs	r2, #0
 8005202:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005206:	2300      	movs	r3, #0
 8005208:	2200      	movs	r2, #0
 800520a:	2100      	movs	r1, #0
 800520c:	68f8      	ldr	r0, [r7, #12]
 800520e:	f001 fb07 	bl	8006820 <USBD_LL_PrepareReceive>
 8005212:	e017      	b.n	8005244 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800521a:	68db      	ldr	r3, [r3, #12]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d00a      	beq.n	8005236 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005226:	2b03      	cmp	r3, #3
 8005228:	d105      	bne.n	8005236 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005230:	68db      	ldr	r3, [r3, #12]
 8005232:	68f8      	ldr	r0, [r7, #12]
 8005234:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005236:	2180      	movs	r1, #128	; 0x80
 8005238:	68f8      	ldr	r0, [r7, #12]
 800523a:	f001 fa47 	bl	80066cc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800523e:	68f8      	ldr	r0, [r7, #12]
 8005240:	f000 ff15 	bl	800606e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800524a:	2b01      	cmp	r3, #1
 800524c:	d123      	bne.n	8005296 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800524e:	68f8      	ldr	r0, [r7, #12]
 8005250:	f7ff fe9b 	bl	8004f8a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2200      	movs	r2, #0
 8005258:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800525c:	e01b      	b.n	8005296 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005264:	695b      	ldr	r3, [r3, #20]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d013      	beq.n	8005292 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8005270:	2b03      	cmp	r3, #3
 8005272:	d10e      	bne.n	8005292 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800527a:	695b      	ldr	r3, [r3, #20]
 800527c:	7afa      	ldrb	r2, [r7, #11]
 800527e:	4611      	mov	r1, r2
 8005280:	68f8      	ldr	r0, [r7, #12]
 8005282:	4798      	blx	r3
 8005284:	4603      	mov	r3, r0
 8005286:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8005288:	7dfb      	ldrb	r3, [r7, #23]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d003      	beq.n	8005296 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800528e:	7dfb      	ldrb	r3, [r7, #23]
 8005290:	e002      	b.n	8005298 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005292:	2303      	movs	r3, #3
 8005294:	e000      	b.n	8005298 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8005296:	2300      	movs	r3, #0
}
 8005298:	4618      	mov	r0, r3
 800529a:	3718      	adds	r7, #24
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}

080052a0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b082      	sub	sp, #8
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2201      	movs	r2, #1
 80052ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2200      	movs	r2, #0
 80052b4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2200      	movs	r2, #0
 80052bc:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2200      	movs	r2, #0
 80052c2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d009      	beq.n	80052e4 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	687a      	ldr	r2, [r7, #4]
 80052da:	6852      	ldr	r2, [r2, #4]
 80052dc:	b2d2      	uxtb	r2, r2
 80052de:	4611      	mov	r1, r2
 80052e0:	6878      	ldr	r0, [r7, #4]
 80052e2:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80052e4:	2308      	movs	r3, #8
 80052e6:	2200      	movs	r2, #0
 80052e8:	2100      	movs	r1, #0
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f001 f9a9 	bl	8006642 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2201      	movs	r2, #1
 80052f4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2208      	movs	r2, #8
 80052fc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005300:	2308      	movs	r3, #8
 8005302:	2200      	movs	r2, #0
 8005304:	2180      	movs	r1, #128	; 0x80
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	f001 f99b 	bl	8006642 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2201      	movs	r2, #1
 8005310:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2208      	movs	r2, #8
 8005316:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8005318:	2300      	movs	r3, #0
}
 800531a:	4618      	mov	r0, r3
 800531c:	3708      	adds	r7, #8
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}

08005322 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005322:	b480      	push	{r7}
 8005324:	b083      	sub	sp, #12
 8005326:	af00      	add	r7, sp, #0
 8005328:	6078      	str	r0, [r7, #4]
 800532a:	460b      	mov	r3, r1
 800532c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	78fa      	ldrb	r2, [r7, #3]
 8005332:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005334:	2300      	movs	r3, #0
}
 8005336:	4618      	mov	r0, r3
 8005338:	370c      	adds	r7, #12
 800533a:	46bd      	mov	sp, r7
 800533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005340:	4770      	bx	lr

08005342 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005342:	b480      	push	{r7}
 8005344:	b083      	sub	sp, #12
 8005346:	af00      	add	r7, sp, #0
 8005348:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2204      	movs	r2, #4
 800535a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800535e:	2300      	movs	r3, #0
}
 8005360:	4618      	mov	r0, r3
 8005362:	370c      	adds	r7, #12
 8005364:	46bd      	mov	sp, r7
 8005366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536a:	4770      	bx	lr

0800536c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800536c:	b480      	push	{r7}
 800536e:	b083      	sub	sp, #12
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800537a:	2b04      	cmp	r3, #4
 800537c:	d105      	bne.n	800538a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800538a:	2300      	movs	r3, #0
}
 800538c:	4618      	mov	r0, r3
 800538e:	370c      	adds	r7, #12
 8005390:	46bd      	mov	sp, r7
 8005392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005396:	4770      	bx	lr

08005398 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b082      	sub	sp, #8
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80053a6:	2b03      	cmp	r3, #3
 80053a8:	d10b      	bne.n	80053c2 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053b0:	69db      	ldr	r3, [r3, #28]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d005      	beq.n	80053c2 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053bc:	69db      	ldr	r3, [r3, #28]
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80053c2:	2300      	movs	r3, #0
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	3708      	adds	r7, #8
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}

080053cc <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b083      	sub	sp, #12
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
 80053d4:	460b      	mov	r3, r1
 80053d6:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80053d8:	2300      	movs	r3, #0
}
 80053da:	4618      	mov	r0, r3
 80053dc:	370c      	adds	r7, #12
 80053de:	46bd      	mov	sp, r7
 80053e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e4:	4770      	bx	lr

080053e6 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80053e6:	b480      	push	{r7}
 80053e8:	b083      	sub	sp, #12
 80053ea:	af00      	add	r7, sp, #0
 80053ec:	6078      	str	r0, [r7, #4]
 80053ee:	460b      	mov	r3, r1
 80053f0:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80053f2:	2300      	movs	r3, #0
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	370c      	adds	r7, #12
 80053f8:	46bd      	mov	sp, r7
 80053fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fe:	4770      	bx	lr

08005400 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005400:	b480      	push	{r7}
 8005402:	b083      	sub	sp, #12
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005408:	2300      	movs	r3, #0
}
 800540a:	4618      	mov	r0, r3
 800540c:	370c      	adds	r7, #12
 800540e:	46bd      	mov	sp, r7
 8005410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005414:	4770      	bx	lr

08005416 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005416:	b580      	push	{r7, lr}
 8005418:	b082      	sub	sp, #8
 800541a:	af00      	add	r7, sp, #0
 800541c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2201      	movs	r2, #1
 8005422:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800542c:	2b00      	cmp	r3, #0
 800542e:	d009      	beq.n	8005444 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	687a      	ldr	r2, [r7, #4]
 800543a:	6852      	ldr	r2, [r2, #4]
 800543c:	b2d2      	uxtb	r2, r2
 800543e:	4611      	mov	r1, r2
 8005440:	6878      	ldr	r0, [r7, #4]
 8005442:	4798      	blx	r3
  }

  return USBD_OK;
 8005444:	2300      	movs	r3, #0
}
 8005446:	4618      	mov	r0, r3
 8005448:	3708      	adds	r7, #8
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}

0800544e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800544e:	b480      	push	{r7}
 8005450:	b087      	sub	sp, #28
 8005452:	af00      	add	r7, sp, #0
 8005454:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	781b      	ldrb	r3, [r3, #0]
 800545e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	3301      	adds	r3, #1
 8005464:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	781b      	ldrb	r3, [r3, #0]
 800546a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800546c:	8a3b      	ldrh	r3, [r7, #16]
 800546e:	021b      	lsls	r3, r3, #8
 8005470:	b21a      	sxth	r2, r3
 8005472:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005476:	4313      	orrs	r3, r2
 8005478:	b21b      	sxth	r3, r3
 800547a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800547c:	89fb      	ldrh	r3, [r7, #14]
}
 800547e:	4618      	mov	r0, r3
 8005480:	371c      	adds	r7, #28
 8005482:	46bd      	mov	sp, r7
 8005484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005488:	4770      	bx	lr
	...

0800548c <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b084      	sub	sp, #16
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
 8005494:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005496:	2300      	movs	r3, #0
 8005498:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	781b      	ldrb	r3, [r3, #0]
 800549e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80054a2:	2b20      	cmp	r3, #32
 80054a4:	d004      	beq.n	80054b0 <USBD_StdDevReq+0x24>
 80054a6:	2b40      	cmp	r3, #64	; 0x40
 80054a8:	d002      	beq.n	80054b0 <USBD_StdDevReq+0x24>
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d00a      	beq.n	80054c4 <USBD_StdDevReq+0x38>
 80054ae:	e050      	b.n	8005552 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054b6:	689b      	ldr	r3, [r3, #8]
 80054b8:	6839      	ldr	r1, [r7, #0]
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	4798      	blx	r3
 80054be:	4603      	mov	r3, r0
 80054c0:	73fb      	strb	r3, [r7, #15]
    break;
 80054c2:	e04b      	b.n	800555c <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	785b      	ldrb	r3, [r3, #1]
 80054c8:	2b09      	cmp	r3, #9
 80054ca:	d83c      	bhi.n	8005546 <USBD_StdDevReq+0xba>
 80054cc:	a201      	add	r2, pc, #4	; (adr r2, 80054d4 <USBD_StdDevReq+0x48>)
 80054ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054d2:	bf00      	nop
 80054d4:	08005529 	.word	0x08005529
 80054d8:	0800553d 	.word	0x0800553d
 80054dc:	08005547 	.word	0x08005547
 80054e0:	08005533 	.word	0x08005533
 80054e4:	08005547 	.word	0x08005547
 80054e8:	08005507 	.word	0x08005507
 80054ec:	080054fd 	.word	0x080054fd
 80054f0:	08005547 	.word	0x08005547
 80054f4:	0800551f 	.word	0x0800551f
 80054f8:	08005511 	.word	0x08005511
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 80054fc:	6839      	ldr	r1, [r7, #0]
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	f000 f9ce 	bl	80058a0 <USBD_GetDescriptor>
      break;
 8005504:	e024      	b.n	8005550 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8005506:	6839      	ldr	r1, [r7, #0]
 8005508:	6878      	ldr	r0, [r7, #4]
 800550a:	f000 fb33 	bl	8005b74 <USBD_SetAddress>
      break;
 800550e:	e01f      	b.n	8005550 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8005510:	6839      	ldr	r1, [r7, #0]
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f000 fb70 	bl	8005bf8 <USBD_SetConfig>
 8005518:	4603      	mov	r3, r0
 800551a:	73fb      	strb	r3, [r7, #15]
      break;
 800551c:	e018      	b.n	8005550 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800551e:	6839      	ldr	r1, [r7, #0]
 8005520:	6878      	ldr	r0, [r7, #4]
 8005522:	f000 fc0d 	bl	8005d40 <USBD_GetConfig>
      break;
 8005526:	e013      	b.n	8005550 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8005528:	6839      	ldr	r1, [r7, #0]
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f000 fc3c 	bl	8005da8 <USBD_GetStatus>
      break;
 8005530:	e00e      	b.n	8005550 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8005532:	6839      	ldr	r1, [r7, #0]
 8005534:	6878      	ldr	r0, [r7, #4]
 8005536:	f000 fc6a 	bl	8005e0e <USBD_SetFeature>
      break;
 800553a:	e009      	b.n	8005550 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800553c:	6839      	ldr	r1, [r7, #0]
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f000 fc79 	bl	8005e36 <USBD_ClrFeature>
      break;
 8005544:	e004      	b.n	8005550 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8005546:	6839      	ldr	r1, [r7, #0]
 8005548:	6878      	ldr	r0, [r7, #4]
 800554a:	f000 fccf 	bl	8005eec <USBD_CtlError>
      break;
 800554e:	bf00      	nop
    }
    break;
 8005550:	e004      	b.n	800555c <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8005552:	6839      	ldr	r1, [r7, #0]
 8005554:	6878      	ldr	r0, [r7, #4]
 8005556:	f000 fcc9 	bl	8005eec <USBD_CtlError>
    break;
 800555a:	bf00      	nop
  }

  return ret;
 800555c:	7bfb      	ldrb	r3, [r7, #15]
}
 800555e:	4618      	mov	r0, r3
 8005560:	3710      	adds	r7, #16
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}
 8005566:	bf00      	nop

08005568 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b084      	sub	sp, #16
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
 8005570:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005572:	2300      	movs	r3, #0
 8005574:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	781b      	ldrb	r3, [r3, #0]
 800557a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800557e:	2b20      	cmp	r3, #32
 8005580:	d003      	beq.n	800558a <USBD_StdItfReq+0x22>
 8005582:	2b40      	cmp	r3, #64	; 0x40
 8005584:	d001      	beq.n	800558a <USBD_StdItfReq+0x22>
 8005586:	2b00      	cmp	r3, #0
 8005588:	d12a      	bne.n	80055e0 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005590:	3b01      	subs	r3, #1
 8005592:	2b02      	cmp	r3, #2
 8005594:	d81d      	bhi.n	80055d2 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	889b      	ldrh	r3, [r3, #4]
 800559a:	b2db      	uxtb	r3, r3
 800559c:	2b01      	cmp	r3, #1
 800559e:	d813      	bhi.n	80055c8 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055a6:	689b      	ldr	r3, [r3, #8]
 80055a8:	6839      	ldr	r1, [r7, #0]
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	4798      	blx	r3
 80055ae:	4603      	mov	r3, r0
 80055b0:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	88db      	ldrh	r3, [r3, #6]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d110      	bne.n	80055dc <USBD_StdItfReq+0x74>
 80055ba:	7bfb      	ldrb	r3, [r7, #15]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d10d      	bne.n	80055dc <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 80055c0:	6878      	ldr	r0, [r7, #4]
 80055c2:	f000 fd41 	bl	8006048 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 80055c6:	e009      	b.n	80055dc <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 80055c8:	6839      	ldr	r1, [r7, #0]
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f000 fc8e 	bl	8005eec <USBD_CtlError>
      break;
 80055d0:	e004      	b.n	80055dc <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 80055d2:	6839      	ldr	r1, [r7, #0]
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	f000 fc89 	bl	8005eec <USBD_CtlError>
      break;
 80055da:	e000      	b.n	80055de <USBD_StdItfReq+0x76>
      break;
 80055dc:	bf00      	nop
    }
    break;
 80055de:	e004      	b.n	80055ea <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 80055e0:	6839      	ldr	r1, [r7, #0]
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	f000 fc82 	bl	8005eec <USBD_CtlError>
    break;
 80055e8:	bf00      	nop
  }

  return ret;
 80055ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	3710      	adds	r7, #16
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bd80      	pop	{r7, pc}

080055f4 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b084      	sub	sp, #16
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
 80055fc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80055fe:	2300      	movs	r3, #0
 8005600:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	889b      	ldrh	r3, [r3, #4]
 8005606:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	781b      	ldrb	r3, [r3, #0]
 800560c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005610:	2b20      	cmp	r3, #32
 8005612:	d004      	beq.n	800561e <USBD_StdEPReq+0x2a>
 8005614:	2b40      	cmp	r3, #64	; 0x40
 8005616:	d002      	beq.n	800561e <USBD_StdEPReq+0x2a>
 8005618:	2b00      	cmp	r3, #0
 800561a:	d00a      	beq.n	8005632 <USBD_StdEPReq+0x3e>
 800561c:	e135      	b.n	800588a <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005624:	689b      	ldr	r3, [r3, #8]
 8005626:	6839      	ldr	r1, [r7, #0]
 8005628:	6878      	ldr	r0, [r7, #4]
 800562a:	4798      	blx	r3
 800562c:	4603      	mov	r3, r0
 800562e:	73fb      	strb	r3, [r7, #15]
    break;
 8005630:	e130      	b.n	8005894 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	785b      	ldrb	r3, [r3, #1]
 8005636:	2b01      	cmp	r3, #1
 8005638:	d03e      	beq.n	80056b8 <USBD_StdEPReq+0xc4>
 800563a:	2b03      	cmp	r3, #3
 800563c:	d002      	beq.n	8005644 <USBD_StdEPReq+0x50>
 800563e:	2b00      	cmp	r3, #0
 8005640:	d077      	beq.n	8005732 <USBD_StdEPReq+0x13e>
 8005642:	e11c      	b.n	800587e <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800564a:	2b02      	cmp	r3, #2
 800564c:	d002      	beq.n	8005654 <USBD_StdEPReq+0x60>
 800564e:	2b03      	cmp	r3, #3
 8005650:	d015      	beq.n	800567e <USBD_StdEPReq+0x8a>
 8005652:	e02b      	b.n	80056ac <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005654:	7bbb      	ldrb	r3, [r7, #14]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d00c      	beq.n	8005674 <USBD_StdEPReq+0x80>
 800565a:	7bbb      	ldrb	r3, [r7, #14]
 800565c:	2b80      	cmp	r3, #128	; 0x80
 800565e:	d009      	beq.n	8005674 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8005660:	7bbb      	ldrb	r3, [r7, #14]
 8005662:	4619      	mov	r1, r3
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	f001 f831 	bl	80066cc <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800566a:	2180      	movs	r1, #128	; 0x80
 800566c:	6878      	ldr	r0, [r7, #4]
 800566e:	f001 f82d 	bl	80066cc <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8005672:	e020      	b.n	80056b6 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8005674:	6839      	ldr	r1, [r7, #0]
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f000 fc38 	bl	8005eec <USBD_CtlError>
        break;
 800567c:	e01b      	b.n	80056b6 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	885b      	ldrh	r3, [r3, #2]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d10e      	bne.n	80056a4 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005686:	7bbb      	ldrb	r3, [r7, #14]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d00b      	beq.n	80056a4 <USBD_StdEPReq+0xb0>
 800568c:	7bbb      	ldrb	r3, [r7, #14]
 800568e:	2b80      	cmp	r3, #128	; 0x80
 8005690:	d008      	beq.n	80056a4 <USBD_StdEPReq+0xb0>
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	88db      	ldrh	r3, [r3, #6]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d104      	bne.n	80056a4 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800569a:	7bbb      	ldrb	r3, [r7, #14]
 800569c:	4619      	mov	r1, r3
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f001 f814 	bl	80066cc <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	f000 fccf 	bl	8006048 <USBD_CtlSendStatus>

        break;
 80056aa:	e004      	b.n	80056b6 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 80056ac:	6839      	ldr	r1, [r7, #0]
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f000 fc1c 	bl	8005eec <USBD_CtlError>
        break;
 80056b4:	bf00      	nop
      }
      break;
 80056b6:	e0e7      	b.n	8005888 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80056be:	2b02      	cmp	r3, #2
 80056c0:	d002      	beq.n	80056c8 <USBD_StdEPReq+0xd4>
 80056c2:	2b03      	cmp	r3, #3
 80056c4:	d015      	beq.n	80056f2 <USBD_StdEPReq+0xfe>
 80056c6:	e02d      	b.n	8005724 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80056c8:	7bbb      	ldrb	r3, [r7, #14]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d00c      	beq.n	80056e8 <USBD_StdEPReq+0xf4>
 80056ce:	7bbb      	ldrb	r3, [r7, #14]
 80056d0:	2b80      	cmp	r3, #128	; 0x80
 80056d2:	d009      	beq.n	80056e8 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80056d4:	7bbb      	ldrb	r3, [r7, #14]
 80056d6:	4619      	mov	r1, r3
 80056d8:	6878      	ldr	r0, [r7, #4]
 80056da:	f000 fff7 	bl	80066cc <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80056de:	2180      	movs	r1, #128	; 0x80
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	f000 fff3 	bl	80066cc <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80056e6:	e023      	b.n	8005730 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 80056e8:	6839      	ldr	r1, [r7, #0]
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f000 fbfe 	bl	8005eec <USBD_CtlError>
        break;
 80056f0:	e01e      	b.n	8005730 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	885b      	ldrh	r3, [r3, #2]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d119      	bne.n	800572e <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 80056fa:	7bbb      	ldrb	r3, [r7, #14]
 80056fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005700:	2b00      	cmp	r3, #0
 8005702:	d004      	beq.n	800570e <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005704:	7bbb      	ldrb	r3, [r7, #14]
 8005706:	4619      	mov	r1, r3
 8005708:	6878      	ldr	r0, [r7, #4]
 800570a:	f000 fffe 	bl	800670a <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f000 fc9a 	bl	8006048 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800571a:	689b      	ldr	r3, [r3, #8]
 800571c:	6839      	ldr	r1, [r7, #0]
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	4798      	blx	r3
        }
        break;
 8005722:	e004      	b.n	800572e <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8005724:	6839      	ldr	r1, [r7, #0]
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	f000 fbe0 	bl	8005eec <USBD_CtlError>
        break;
 800572c:	e000      	b.n	8005730 <USBD_StdEPReq+0x13c>
        break;
 800572e:	bf00      	nop
      }
      break;
 8005730:	e0aa      	b.n	8005888 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005738:	2b02      	cmp	r3, #2
 800573a:	d002      	beq.n	8005742 <USBD_StdEPReq+0x14e>
 800573c:	2b03      	cmp	r3, #3
 800573e:	d032      	beq.n	80057a6 <USBD_StdEPReq+0x1b2>
 8005740:	e097      	b.n	8005872 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005742:	7bbb      	ldrb	r3, [r7, #14]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d007      	beq.n	8005758 <USBD_StdEPReq+0x164>
 8005748:	7bbb      	ldrb	r3, [r7, #14]
 800574a:	2b80      	cmp	r3, #128	; 0x80
 800574c:	d004      	beq.n	8005758 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 800574e:	6839      	ldr	r1, [r7, #0]
 8005750:	6878      	ldr	r0, [r7, #4]
 8005752:	f000 fbcb 	bl	8005eec <USBD_CtlError>
          break;
 8005756:	e091      	b.n	800587c <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005758:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800575c:	2b00      	cmp	r3, #0
 800575e:	da0b      	bge.n	8005778 <USBD_StdEPReq+0x184>
 8005760:	7bbb      	ldrb	r3, [r7, #14]
 8005762:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005766:	4613      	mov	r3, r2
 8005768:	009b      	lsls	r3, r3, #2
 800576a:	4413      	add	r3, r2
 800576c:	009b      	lsls	r3, r3, #2
 800576e:	3310      	adds	r3, #16
 8005770:	687a      	ldr	r2, [r7, #4]
 8005772:	4413      	add	r3, r2
 8005774:	3304      	adds	r3, #4
 8005776:	e00b      	b.n	8005790 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8005778:	7bbb      	ldrb	r3, [r7, #14]
 800577a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800577e:	4613      	mov	r3, r2
 8005780:	009b      	lsls	r3, r3, #2
 8005782:	4413      	add	r3, r2
 8005784:	009b      	lsls	r3, r3, #2
 8005786:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800578a:	687a      	ldr	r2, [r7, #4]
 800578c:	4413      	add	r3, r2
 800578e:	3304      	adds	r3, #4
 8005790:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	2200      	movs	r2, #0
 8005796:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	2202      	movs	r2, #2
 800579c:	4619      	mov	r1, r3
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f000 fc15 	bl	8005fce <USBD_CtlSendData>
        break;
 80057a4:	e06a      	b.n	800587c <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 80057a6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	da11      	bge.n	80057d2 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80057ae:	7bbb      	ldrb	r3, [r7, #14]
 80057b0:	f003 020f 	and.w	r2, r3, #15
 80057b4:	6879      	ldr	r1, [r7, #4]
 80057b6:	4613      	mov	r3, r2
 80057b8:	009b      	lsls	r3, r3, #2
 80057ba:	4413      	add	r3, r2
 80057bc:	009b      	lsls	r3, r3, #2
 80057be:	440b      	add	r3, r1
 80057c0:	3324      	adds	r3, #36	; 0x24
 80057c2:	881b      	ldrh	r3, [r3, #0]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d117      	bne.n	80057f8 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 80057c8:	6839      	ldr	r1, [r7, #0]
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f000 fb8e 	bl	8005eec <USBD_CtlError>
            break;
 80057d0:	e054      	b.n	800587c <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80057d2:	7bbb      	ldrb	r3, [r7, #14]
 80057d4:	f003 020f 	and.w	r2, r3, #15
 80057d8:	6879      	ldr	r1, [r7, #4]
 80057da:	4613      	mov	r3, r2
 80057dc:	009b      	lsls	r3, r3, #2
 80057de:	4413      	add	r3, r2
 80057e0:	009b      	lsls	r3, r3, #2
 80057e2:	440b      	add	r3, r1
 80057e4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80057e8:	881b      	ldrh	r3, [r3, #0]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d104      	bne.n	80057f8 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 80057ee:	6839      	ldr	r1, [r7, #0]
 80057f0:	6878      	ldr	r0, [r7, #4]
 80057f2:	f000 fb7b 	bl	8005eec <USBD_CtlError>
            break;
 80057f6:	e041      	b.n	800587c <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80057f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	da0b      	bge.n	8005818 <USBD_StdEPReq+0x224>
 8005800:	7bbb      	ldrb	r3, [r7, #14]
 8005802:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005806:	4613      	mov	r3, r2
 8005808:	009b      	lsls	r3, r3, #2
 800580a:	4413      	add	r3, r2
 800580c:	009b      	lsls	r3, r3, #2
 800580e:	3310      	adds	r3, #16
 8005810:	687a      	ldr	r2, [r7, #4]
 8005812:	4413      	add	r3, r2
 8005814:	3304      	adds	r3, #4
 8005816:	e00b      	b.n	8005830 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8005818:	7bbb      	ldrb	r3, [r7, #14]
 800581a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800581e:	4613      	mov	r3, r2
 8005820:	009b      	lsls	r3, r3, #2
 8005822:	4413      	add	r3, r2
 8005824:	009b      	lsls	r3, r3, #2
 8005826:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800582a:	687a      	ldr	r2, [r7, #4]
 800582c:	4413      	add	r3, r2
 800582e:	3304      	adds	r3, #4
 8005830:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005832:	7bbb      	ldrb	r3, [r7, #14]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d002      	beq.n	800583e <USBD_StdEPReq+0x24a>
 8005838:	7bbb      	ldrb	r3, [r7, #14]
 800583a:	2b80      	cmp	r3, #128	; 0x80
 800583c:	d103      	bne.n	8005846 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	2200      	movs	r2, #0
 8005842:	601a      	str	r2, [r3, #0]
 8005844:	e00e      	b.n	8005864 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8005846:	7bbb      	ldrb	r3, [r7, #14]
 8005848:	4619      	mov	r1, r3
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f000 ff7c 	bl	8006748 <USBD_LL_IsStallEP>
 8005850:	4603      	mov	r3, r0
 8005852:	2b00      	cmp	r3, #0
 8005854:	d003      	beq.n	800585e <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	2201      	movs	r2, #1
 800585a:	601a      	str	r2, [r3, #0]
 800585c:	e002      	b.n	8005864 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	2200      	movs	r2, #0
 8005862:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	2202      	movs	r2, #2
 8005868:	4619      	mov	r1, r3
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f000 fbaf 	bl	8005fce <USBD_CtlSendData>
          break;
 8005870:	e004      	b.n	800587c <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8005872:	6839      	ldr	r1, [r7, #0]
 8005874:	6878      	ldr	r0, [r7, #4]
 8005876:	f000 fb39 	bl	8005eec <USBD_CtlError>
        break;
 800587a:	bf00      	nop
      }
      break;
 800587c:	e004      	b.n	8005888 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 800587e:	6839      	ldr	r1, [r7, #0]
 8005880:	6878      	ldr	r0, [r7, #4]
 8005882:	f000 fb33 	bl	8005eec <USBD_CtlError>
      break;
 8005886:	bf00      	nop
    }
    break;
 8005888:	e004      	b.n	8005894 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 800588a:	6839      	ldr	r1, [r7, #0]
 800588c:	6878      	ldr	r0, [r7, #4]
 800588e:	f000 fb2d 	bl	8005eec <USBD_CtlError>
    break;
 8005892:	bf00      	nop
  }

  return ret;
 8005894:	7bfb      	ldrb	r3, [r7, #15]
}
 8005896:	4618      	mov	r0, r3
 8005898:	3710      	adds	r7, #16
 800589a:	46bd      	mov	sp, r7
 800589c:	bd80      	pop	{r7, pc}
	...

080058a0 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b084      	sub	sp, #16
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
 80058a8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80058aa:	2300      	movs	r3, #0
 80058ac:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80058ae:	2300      	movs	r3, #0
 80058b0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80058b2:	2300      	movs	r3, #0
 80058b4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	885b      	ldrh	r3, [r3, #2]
 80058ba:	0a1b      	lsrs	r3, r3, #8
 80058bc:	b29b      	uxth	r3, r3
 80058be:	3b01      	subs	r3, #1
 80058c0:	2b06      	cmp	r3, #6
 80058c2:	f200 8128 	bhi.w	8005b16 <USBD_GetDescriptor+0x276>
 80058c6:	a201      	add	r2, pc, #4	; (adr r2, 80058cc <USBD_GetDescriptor+0x2c>)
 80058c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058cc:	080058e9 	.word	0x080058e9
 80058d0:	08005901 	.word	0x08005901
 80058d4:	08005941 	.word	0x08005941
 80058d8:	08005b17 	.word	0x08005b17
 80058dc:	08005b17 	.word	0x08005b17
 80058e0:	08005ab7 	.word	0x08005ab7
 80058e4:	08005ae3 	.word	0x08005ae3
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	687a      	ldr	r2, [r7, #4]
 80058f2:	7c12      	ldrb	r2, [r2, #16]
 80058f4:	f107 0108 	add.w	r1, r7, #8
 80058f8:	4610      	mov	r0, r2
 80058fa:	4798      	blx	r3
 80058fc:	60f8      	str	r0, [r7, #12]
    break;
 80058fe:	e112      	b.n	8005b26 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	7c1b      	ldrb	r3, [r3, #16]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d10d      	bne.n	8005924 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800590e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005910:	f107 0208 	add.w	r2, r7, #8
 8005914:	4610      	mov	r0, r2
 8005916:	4798      	blx	r3
 8005918:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	3301      	adds	r3, #1
 800591e:	2202      	movs	r2, #2
 8005920:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8005922:	e100      	b.n	8005b26 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800592a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800592c:	f107 0208 	add.w	r2, r7, #8
 8005930:	4610      	mov	r0, r2
 8005932:	4798      	blx	r3
 8005934:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	3301      	adds	r3, #1
 800593a:	2202      	movs	r2, #2
 800593c:	701a      	strb	r2, [r3, #0]
    break;
 800593e:	e0f2      	b.n	8005b26 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	885b      	ldrh	r3, [r3, #2]
 8005944:	b2db      	uxtb	r3, r3
 8005946:	2b05      	cmp	r3, #5
 8005948:	f200 80ac 	bhi.w	8005aa4 <USBD_GetDescriptor+0x204>
 800594c:	a201      	add	r2, pc, #4	; (adr r2, 8005954 <USBD_GetDescriptor+0xb4>)
 800594e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005952:	bf00      	nop
 8005954:	0800596d 	.word	0x0800596d
 8005958:	080059a1 	.word	0x080059a1
 800595c:	080059d5 	.word	0x080059d5
 8005960:	08005a09 	.word	0x08005a09
 8005964:	08005a3d 	.word	0x08005a3d
 8005968:	08005a71 	.word	0x08005a71
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d00b      	beq.n	8005990 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	687a      	ldr	r2, [r7, #4]
 8005982:	7c12      	ldrb	r2, [r2, #16]
 8005984:	f107 0108 	add.w	r1, r7, #8
 8005988:	4610      	mov	r0, r2
 800598a:	4798      	blx	r3
 800598c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800598e:	e091      	b.n	8005ab4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005990:	6839      	ldr	r1, [r7, #0]
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f000 faaa 	bl	8005eec <USBD_CtlError>
        err++;
 8005998:	7afb      	ldrb	r3, [r7, #11]
 800599a:	3301      	adds	r3, #1
 800599c:	72fb      	strb	r3, [r7, #11]
      break;
 800599e:	e089      	b.n	8005ab4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80059a6:	689b      	ldr	r3, [r3, #8]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d00b      	beq.n	80059c4 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80059b2:	689b      	ldr	r3, [r3, #8]
 80059b4:	687a      	ldr	r2, [r7, #4]
 80059b6:	7c12      	ldrb	r2, [r2, #16]
 80059b8:	f107 0108 	add.w	r1, r7, #8
 80059bc:	4610      	mov	r0, r2
 80059be:	4798      	blx	r3
 80059c0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80059c2:	e077      	b.n	8005ab4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80059c4:	6839      	ldr	r1, [r7, #0]
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	f000 fa90 	bl	8005eec <USBD_CtlError>
        err++;
 80059cc:	7afb      	ldrb	r3, [r7, #11]
 80059ce:	3301      	adds	r3, #1
 80059d0:	72fb      	strb	r3, [r7, #11]
      break;
 80059d2:	e06f      	b.n	8005ab4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80059da:	68db      	ldr	r3, [r3, #12]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d00b      	beq.n	80059f8 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80059e6:	68db      	ldr	r3, [r3, #12]
 80059e8:	687a      	ldr	r2, [r7, #4]
 80059ea:	7c12      	ldrb	r2, [r2, #16]
 80059ec:	f107 0108 	add.w	r1, r7, #8
 80059f0:	4610      	mov	r0, r2
 80059f2:	4798      	blx	r3
 80059f4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80059f6:	e05d      	b.n	8005ab4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80059f8:	6839      	ldr	r1, [r7, #0]
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	f000 fa76 	bl	8005eec <USBD_CtlError>
        err++;
 8005a00:	7afb      	ldrb	r3, [r7, #11]
 8005a02:	3301      	adds	r3, #1
 8005a04:	72fb      	strb	r3, [r7, #11]
      break;
 8005a06:	e055      	b.n	8005ab4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a0e:	691b      	ldr	r3, [r3, #16]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d00b      	beq.n	8005a2c <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a1a:	691b      	ldr	r3, [r3, #16]
 8005a1c:	687a      	ldr	r2, [r7, #4]
 8005a1e:	7c12      	ldrb	r2, [r2, #16]
 8005a20:	f107 0108 	add.w	r1, r7, #8
 8005a24:	4610      	mov	r0, r2
 8005a26:	4798      	blx	r3
 8005a28:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005a2a:	e043      	b.n	8005ab4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005a2c:	6839      	ldr	r1, [r7, #0]
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f000 fa5c 	bl	8005eec <USBD_CtlError>
        err++;
 8005a34:	7afb      	ldrb	r3, [r7, #11]
 8005a36:	3301      	adds	r3, #1
 8005a38:	72fb      	strb	r3, [r7, #11]
      break;
 8005a3a:	e03b      	b.n	8005ab4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a42:	695b      	ldr	r3, [r3, #20]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d00b      	beq.n	8005a60 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a4e:	695b      	ldr	r3, [r3, #20]
 8005a50:	687a      	ldr	r2, [r7, #4]
 8005a52:	7c12      	ldrb	r2, [r2, #16]
 8005a54:	f107 0108 	add.w	r1, r7, #8
 8005a58:	4610      	mov	r0, r2
 8005a5a:	4798      	blx	r3
 8005a5c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005a5e:	e029      	b.n	8005ab4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005a60:	6839      	ldr	r1, [r7, #0]
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f000 fa42 	bl	8005eec <USBD_CtlError>
        err++;
 8005a68:	7afb      	ldrb	r3, [r7, #11]
 8005a6a:	3301      	adds	r3, #1
 8005a6c:	72fb      	strb	r3, [r7, #11]
      break;
 8005a6e:	e021      	b.n	8005ab4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a76:	699b      	ldr	r3, [r3, #24]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d00b      	beq.n	8005a94 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a82:	699b      	ldr	r3, [r3, #24]
 8005a84:	687a      	ldr	r2, [r7, #4]
 8005a86:	7c12      	ldrb	r2, [r2, #16]
 8005a88:	f107 0108 	add.w	r1, r7, #8
 8005a8c:	4610      	mov	r0, r2
 8005a8e:	4798      	blx	r3
 8005a90:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005a92:	e00f      	b.n	8005ab4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005a94:	6839      	ldr	r1, [r7, #0]
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f000 fa28 	bl	8005eec <USBD_CtlError>
        err++;
 8005a9c:	7afb      	ldrb	r3, [r7, #11]
 8005a9e:	3301      	adds	r3, #1
 8005aa0:	72fb      	strb	r3, [r7, #11]
      break;
 8005aa2:	e007      	b.n	8005ab4 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8005aa4:	6839      	ldr	r1, [r7, #0]
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	f000 fa20 	bl	8005eec <USBD_CtlError>
      err++;
 8005aac:	7afb      	ldrb	r3, [r7, #11]
 8005aae:	3301      	adds	r3, #1
 8005ab0:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8005ab2:	bf00      	nop
    }
    break;
 8005ab4:	e037      	b.n	8005b26 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	7c1b      	ldrb	r3, [r3, #16]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d109      	bne.n	8005ad2 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ac4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ac6:	f107 0208 	add.w	r2, r7, #8
 8005aca:	4610      	mov	r0, r2
 8005acc:	4798      	blx	r3
 8005ace:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8005ad0:	e029      	b.n	8005b26 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8005ad2:	6839      	ldr	r1, [r7, #0]
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f000 fa09 	bl	8005eec <USBD_CtlError>
      err++;
 8005ada:	7afb      	ldrb	r3, [r7, #11]
 8005adc:	3301      	adds	r3, #1
 8005ade:	72fb      	strb	r3, [r7, #11]
    break;
 8005ae0:	e021      	b.n	8005b26 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	7c1b      	ldrb	r3, [r3, #16]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d10d      	bne.n	8005b06 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005af2:	f107 0208 	add.w	r2, r7, #8
 8005af6:	4610      	mov	r0, r2
 8005af8:	4798      	blx	r3
 8005afa:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	3301      	adds	r3, #1
 8005b00:	2207      	movs	r2, #7
 8005b02:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8005b04:	e00f      	b.n	8005b26 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8005b06:	6839      	ldr	r1, [r7, #0]
 8005b08:	6878      	ldr	r0, [r7, #4]
 8005b0a:	f000 f9ef 	bl	8005eec <USBD_CtlError>
      err++;
 8005b0e:	7afb      	ldrb	r3, [r7, #11]
 8005b10:	3301      	adds	r3, #1
 8005b12:	72fb      	strb	r3, [r7, #11]
    break;
 8005b14:	e007      	b.n	8005b26 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8005b16:	6839      	ldr	r1, [r7, #0]
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	f000 f9e7 	bl	8005eec <USBD_CtlError>
    err++;
 8005b1e:	7afb      	ldrb	r3, [r7, #11]
 8005b20:	3301      	adds	r3, #1
 8005b22:	72fb      	strb	r3, [r7, #11]
    break;
 8005b24:	bf00      	nop
  }

  if (err != 0U)
 8005b26:	7afb      	ldrb	r3, [r7, #11]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d11e      	bne.n	8005b6a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	88db      	ldrh	r3, [r3, #6]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d016      	beq.n	8005b62 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8005b34:	893b      	ldrh	r3, [r7, #8]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d00e      	beq.n	8005b58 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	88da      	ldrh	r2, [r3, #6]
 8005b3e:	893b      	ldrh	r3, [r7, #8]
 8005b40:	4293      	cmp	r3, r2
 8005b42:	bf28      	it	cs
 8005b44:	4613      	movcs	r3, r2
 8005b46:	b29b      	uxth	r3, r3
 8005b48:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8005b4a:	893b      	ldrh	r3, [r7, #8]
 8005b4c:	461a      	mov	r2, r3
 8005b4e:	68f9      	ldr	r1, [r7, #12]
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	f000 fa3c 	bl	8005fce <USBD_CtlSendData>
 8005b56:	e009      	b.n	8005b6c <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8005b58:	6839      	ldr	r1, [r7, #0]
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f000 f9c6 	bl	8005eec <USBD_CtlError>
 8005b60:	e004      	b.n	8005b6c <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f000 fa70 	bl	8006048 <USBD_CtlSendStatus>
 8005b68:	e000      	b.n	8005b6c <USBD_GetDescriptor+0x2cc>
    return;
 8005b6a:	bf00      	nop
    }
  }
}
 8005b6c:	3710      	adds	r7, #16
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bd80      	pop	{r7, pc}
 8005b72:	bf00      	nop

08005b74 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b084      	sub	sp, #16
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
 8005b7c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	889b      	ldrh	r3, [r3, #4]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d130      	bne.n	8005be8 <USBD_SetAddress+0x74>
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	88db      	ldrh	r3, [r3, #6]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d12c      	bne.n	8005be8 <USBD_SetAddress+0x74>
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	885b      	ldrh	r3, [r3, #2]
 8005b92:	2b7f      	cmp	r3, #127	; 0x7f
 8005b94:	d828      	bhi.n	8005be8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	885b      	ldrh	r3, [r3, #2]
 8005b9a:	b2db      	uxtb	r3, r3
 8005b9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ba0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ba8:	2b03      	cmp	r3, #3
 8005baa:	d104      	bne.n	8005bb6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8005bac:	6839      	ldr	r1, [r7, #0]
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f000 f99c 	bl	8005eec <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005bb4:	e01c      	b.n	8005bf0 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	7bfa      	ldrb	r2, [r7, #15]
 8005bba:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005bbe:	7bfb      	ldrb	r3, [r7, #15]
 8005bc0:	4619      	mov	r1, r3
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f000 fdec 	bl	80067a0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8005bc8:	6878      	ldr	r0, [r7, #4]
 8005bca:	f000 fa3d 	bl	8006048 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005bce:	7bfb      	ldrb	r3, [r7, #15]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d004      	beq.n	8005bde <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2202      	movs	r2, #2
 8005bd8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005bdc:	e008      	b.n	8005bf0 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2201      	movs	r2, #1
 8005be2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005be6:	e003      	b.n	8005bf0 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005be8:	6839      	ldr	r1, [r7, #0]
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f000 f97e 	bl	8005eec <USBD_CtlError>
  }
}
 8005bf0:	bf00      	nop
 8005bf2:	3710      	adds	r7, #16
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bd80      	pop	{r7, pc}

08005bf8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b084      	sub	sp, #16
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
 8005c00:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005c02:	2300      	movs	r3, #0
 8005c04:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	885b      	ldrh	r3, [r3, #2]
 8005c0a:	b2da      	uxtb	r2, r3
 8005c0c:	4b4b      	ldr	r3, [pc, #300]	; (8005d3c <USBD_SetConfig+0x144>)
 8005c0e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005c10:	4b4a      	ldr	r3, [pc, #296]	; (8005d3c <USBD_SetConfig+0x144>)
 8005c12:	781b      	ldrb	r3, [r3, #0]
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	d905      	bls.n	8005c24 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8005c18:	6839      	ldr	r1, [r7, #0]
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f000 f966 	bl	8005eec <USBD_CtlError>
    return USBD_FAIL;
 8005c20:	2303      	movs	r3, #3
 8005c22:	e087      	b.n	8005d34 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c2a:	2b02      	cmp	r3, #2
 8005c2c:	d002      	beq.n	8005c34 <USBD_SetConfig+0x3c>
 8005c2e:	2b03      	cmp	r3, #3
 8005c30:	d025      	beq.n	8005c7e <USBD_SetConfig+0x86>
 8005c32:	e071      	b.n	8005d18 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8005c34:	4b41      	ldr	r3, [pc, #260]	; (8005d3c <USBD_SetConfig+0x144>)
 8005c36:	781b      	ldrb	r3, [r3, #0]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d01c      	beq.n	8005c76 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8005c3c:	4b3f      	ldr	r3, [pc, #252]	; (8005d3c <USBD_SetConfig+0x144>)
 8005c3e:	781b      	ldrb	r3, [r3, #0]
 8005c40:	461a      	mov	r2, r3
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8005c46:	4b3d      	ldr	r3, [pc, #244]	; (8005d3c <USBD_SetConfig+0x144>)
 8005c48:	781b      	ldrb	r3, [r3, #0]
 8005c4a:	4619      	mov	r1, r3
 8005c4c:	6878      	ldr	r0, [r7, #4]
 8005c4e:	f7ff f9a7 	bl	8004fa0 <USBD_SetClassConfig>
 8005c52:	4603      	mov	r3, r0
 8005c54:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8005c56:	7bfb      	ldrb	r3, [r7, #15]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d004      	beq.n	8005c66 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8005c5c:	6839      	ldr	r1, [r7, #0]
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f000 f944 	bl	8005eec <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8005c64:	e065      	b.n	8005d32 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	f000 f9ee 	bl	8006048 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2203      	movs	r2, #3
 8005c70:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8005c74:	e05d      	b.n	8005d32 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	f000 f9e6 	bl	8006048 <USBD_CtlSendStatus>
    break;
 8005c7c:	e059      	b.n	8005d32 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8005c7e:	4b2f      	ldr	r3, [pc, #188]	; (8005d3c <USBD_SetConfig+0x144>)
 8005c80:	781b      	ldrb	r3, [r3, #0]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d112      	bne.n	8005cac <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2202      	movs	r2, #2
 8005c8a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8005c8e:	4b2b      	ldr	r3, [pc, #172]	; (8005d3c <USBD_SetConfig+0x144>)
 8005c90:	781b      	ldrb	r3, [r3, #0]
 8005c92:	461a      	mov	r2, r3
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005c98:	4b28      	ldr	r3, [pc, #160]	; (8005d3c <USBD_SetConfig+0x144>)
 8005c9a:	781b      	ldrb	r3, [r3, #0]
 8005c9c:	4619      	mov	r1, r3
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f7ff f99a 	bl	8004fd8 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8005ca4:	6878      	ldr	r0, [r7, #4]
 8005ca6:	f000 f9cf 	bl	8006048 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8005caa:	e042      	b.n	8005d32 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8005cac:	4b23      	ldr	r3, [pc, #140]	; (8005d3c <USBD_SetConfig+0x144>)
 8005cae:	781b      	ldrb	r3, [r3, #0]
 8005cb0:	461a      	mov	r2, r3
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	685b      	ldr	r3, [r3, #4]
 8005cb6:	429a      	cmp	r2, r3
 8005cb8:	d02a      	beq.n	8005d10 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	685b      	ldr	r3, [r3, #4]
 8005cbe:	b2db      	uxtb	r3, r3
 8005cc0:	4619      	mov	r1, r3
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f7ff f988 	bl	8004fd8 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8005cc8:	4b1c      	ldr	r3, [pc, #112]	; (8005d3c <USBD_SetConfig+0x144>)
 8005cca:	781b      	ldrb	r3, [r3, #0]
 8005ccc:	461a      	mov	r2, r3
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8005cd2:	4b1a      	ldr	r3, [pc, #104]	; (8005d3c <USBD_SetConfig+0x144>)
 8005cd4:	781b      	ldrb	r3, [r3, #0]
 8005cd6:	4619      	mov	r1, r3
 8005cd8:	6878      	ldr	r0, [r7, #4]
 8005cda:	f7ff f961 	bl	8004fa0 <USBD_SetClassConfig>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8005ce2:	7bfb      	ldrb	r3, [r7, #15]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d00f      	beq.n	8005d08 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8005ce8:	6839      	ldr	r1, [r7, #0]
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f000 f8fe 	bl	8005eec <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	b2db      	uxtb	r3, r3
 8005cf6:	4619      	mov	r1, r3
 8005cf8:	6878      	ldr	r0, [r7, #4]
 8005cfa:	f7ff f96d 	bl	8004fd8 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2202      	movs	r2, #2
 8005d02:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8005d06:	e014      	b.n	8005d32 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8005d08:	6878      	ldr	r0, [r7, #4]
 8005d0a:	f000 f99d 	bl	8006048 <USBD_CtlSendStatus>
    break;
 8005d0e:	e010      	b.n	8005d32 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	f000 f999 	bl	8006048 <USBD_CtlSendStatus>
    break;
 8005d16:	e00c      	b.n	8005d32 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8005d18:	6839      	ldr	r1, [r7, #0]
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f000 f8e6 	bl	8005eec <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005d20:	4b06      	ldr	r3, [pc, #24]	; (8005d3c <USBD_SetConfig+0x144>)
 8005d22:	781b      	ldrb	r3, [r3, #0]
 8005d24:	4619      	mov	r1, r3
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	f7ff f956 	bl	8004fd8 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8005d2c:	2303      	movs	r3, #3
 8005d2e:	73fb      	strb	r3, [r7, #15]
    break;
 8005d30:	bf00      	nop
  }

  return ret;
 8005d32:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	3710      	adds	r7, #16
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	bd80      	pop	{r7, pc}
 8005d3c:	20000264 	.word	0x20000264

08005d40 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b082      	sub	sp, #8
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
 8005d48:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	88db      	ldrh	r3, [r3, #6]
 8005d4e:	2b01      	cmp	r3, #1
 8005d50:	d004      	beq.n	8005d5c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8005d52:	6839      	ldr	r1, [r7, #0]
 8005d54:	6878      	ldr	r0, [r7, #4]
 8005d56:	f000 f8c9 	bl	8005eec <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8005d5a:	e021      	b.n	8005da0 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d62:	2b01      	cmp	r3, #1
 8005d64:	db17      	blt.n	8005d96 <USBD_GetConfig+0x56>
 8005d66:	2b02      	cmp	r3, #2
 8005d68:	dd02      	ble.n	8005d70 <USBD_GetConfig+0x30>
 8005d6a:	2b03      	cmp	r3, #3
 8005d6c:	d00b      	beq.n	8005d86 <USBD_GetConfig+0x46>
 8005d6e:	e012      	b.n	8005d96 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2200      	movs	r2, #0
 8005d74:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	3308      	adds	r3, #8
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	4619      	mov	r1, r3
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	f000 f925 	bl	8005fce <USBD_CtlSendData>
      break;
 8005d84:	e00c      	b.n	8005da0 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	3304      	adds	r3, #4
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	4619      	mov	r1, r3
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f000 f91d 	bl	8005fce <USBD_CtlSendData>
      break;
 8005d94:	e004      	b.n	8005da0 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8005d96:	6839      	ldr	r1, [r7, #0]
 8005d98:	6878      	ldr	r0, [r7, #4]
 8005d9a:	f000 f8a7 	bl	8005eec <USBD_CtlError>
      break;
 8005d9e:	bf00      	nop
}
 8005da0:	bf00      	nop
 8005da2:	3708      	adds	r7, #8
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd80      	pop	{r7, pc}

08005da8 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b082      	sub	sp, #8
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
 8005db0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005db8:	3b01      	subs	r3, #1
 8005dba:	2b02      	cmp	r3, #2
 8005dbc:	d81e      	bhi.n	8005dfc <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	88db      	ldrh	r3, [r3, #6]
 8005dc2:	2b02      	cmp	r3, #2
 8005dc4:	d004      	beq.n	8005dd0 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8005dc6:	6839      	ldr	r1, [r7, #0]
 8005dc8:	6878      	ldr	r0, [r7, #4]
 8005dca:	f000 f88f 	bl	8005eec <USBD_CtlError>
      break;
 8005dce:	e01a      	b.n	8005e06 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d005      	beq.n	8005dec <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	68db      	ldr	r3, [r3, #12]
 8005de4:	f043 0202 	orr.w	r2, r3, #2
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	330c      	adds	r3, #12
 8005df0:	2202      	movs	r2, #2
 8005df2:	4619      	mov	r1, r3
 8005df4:	6878      	ldr	r0, [r7, #4]
 8005df6:	f000 f8ea 	bl	8005fce <USBD_CtlSendData>
    break;
 8005dfa:	e004      	b.n	8005e06 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8005dfc:	6839      	ldr	r1, [r7, #0]
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f000 f874 	bl	8005eec <USBD_CtlError>
    break;
 8005e04:	bf00      	nop
  }
}
 8005e06:	bf00      	nop
 8005e08:	3708      	adds	r7, #8
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}

08005e0e <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005e0e:	b580      	push	{r7, lr}
 8005e10:	b082      	sub	sp, #8
 8005e12:	af00      	add	r7, sp, #0
 8005e14:	6078      	str	r0, [r7, #4]
 8005e16:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	885b      	ldrh	r3, [r3, #2]
 8005e1c:	2b01      	cmp	r3, #1
 8005e1e:	d106      	bne.n	8005e2e <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2201      	movs	r2, #1
 8005e24:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8005e28:	6878      	ldr	r0, [r7, #4]
 8005e2a:	f000 f90d 	bl	8006048 <USBD_CtlSendStatus>
  }
}
 8005e2e:	bf00      	nop
 8005e30:	3708      	adds	r7, #8
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}

08005e36 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005e36:	b580      	push	{r7, lr}
 8005e38:	b082      	sub	sp, #8
 8005e3a:	af00      	add	r7, sp, #0
 8005e3c:	6078      	str	r0, [r7, #4]
 8005e3e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e46:	3b01      	subs	r3, #1
 8005e48:	2b02      	cmp	r3, #2
 8005e4a:	d80b      	bhi.n	8005e64 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	885b      	ldrh	r3, [r3, #2]
 8005e50:	2b01      	cmp	r3, #1
 8005e52:	d10c      	bne.n	8005e6e <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2200      	movs	r2, #0
 8005e58:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8005e5c:	6878      	ldr	r0, [r7, #4]
 8005e5e:	f000 f8f3 	bl	8006048 <USBD_CtlSendStatus>
      }
      break;
 8005e62:	e004      	b.n	8005e6e <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8005e64:	6839      	ldr	r1, [r7, #0]
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f000 f840 	bl	8005eec <USBD_CtlError>
      break;
 8005e6c:	e000      	b.n	8005e70 <USBD_ClrFeature+0x3a>
      break;
 8005e6e:	bf00      	nop
  }
}
 8005e70:	bf00      	nop
 8005e72:	3708      	adds	r7, #8
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}

08005e78 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b084      	sub	sp, #16
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
 8005e80:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	781a      	ldrb	r2, [r3, #0]
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	3301      	adds	r3, #1
 8005e92:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	781a      	ldrb	r2, [r3, #0]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	3301      	adds	r3, #1
 8005ea0:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8005ea2:	68f8      	ldr	r0, [r7, #12]
 8005ea4:	f7ff fad3 	bl	800544e <SWAPBYTE>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	461a      	mov	r2, r3
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	3301      	adds	r3, #1
 8005eb4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	3301      	adds	r3, #1
 8005eba:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8005ebc:	68f8      	ldr	r0, [r7, #12]
 8005ebe:	f7ff fac6 	bl	800544e <SWAPBYTE>
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	461a      	mov	r2, r3
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	3301      	adds	r3, #1
 8005ece:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	3301      	adds	r3, #1
 8005ed4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8005ed6:	68f8      	ldr	r0, [r7, #12]
 8005ed8:	f7ff fab9 	bl	800544e <SWAPBYTE>
 8005edc:	4603      	mov	r3, r0
 8005ede:	461a      	mov	r2, r3
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	80da      	strh	r2, [r3, #6]
}
 8005ee4:	bf00      	nop
 8005ee6:	3710      	adds	r7, #16
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bd80      	pop	{r7, pc}

08005eec <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b082      	sub	sp, #8
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
 8005ef4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8005ef6:	2180      	movs	r1, #128	; 0x80
 8005ef8:	6878      	ldr	r0, [r7, #4]
 8005efa:	f000 fbe7 	bl	80066cc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8005efe:	2100      	movs	r1, #0
 8005f00:	6878      	ldr	r0, [r7, #4]
 8005f02:	f000 fbe3 	bl	80066cc <USBD_LL_StallEP>
}
 8005f06:	bf00      	nop
 8005f08:	3708      	adds	r7, #8
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bd80      	pop	{r7, pc}

08005f0e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8005f0e:	b580      	push	{r7, lr}
 8005f10:	b086      	sub	sp, #24
 8005f12:	af00      	add	r7, sp, #0
 8005f14:	60f8      	str	r0, [r7, #12]
 8005f16:	60b9      	str	r1, [r7, #8]
 8005f18:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d036      	beq.n	8005f92 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8005f28:	6938      	ldr	r0, [r7, #16]
 8005f2a:	f000 f836 	bl	8005f9a <USBD_GetLen>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	3301      	adds	r3, #1
 8005f32:	b29b      	uxth	r3, r3
 8005f34:	005b      	lsls	r3, r3, #1
 8005f36:	b29a      	uxth	r2, r3
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8005f3c:	7dfb      	ldrb	r3, [r7, #23]
 8005f3e:	68ba      	ldr	r2, [r7, #8]
 8005f40:	4413      	add	r3, r2
 8005f42:	687a      	ldr	r2, [r7, #4]
 8005f44:	7812      	ldrb	r2, [r2, #0]
 8005f46:	701a      	strb	r2, [r3, #0]
  idx++;
 8005f48:	7dfb      	ldrb	r3, [r7, #23]
 8005f4a:	3301      	adds	r3, #1
 8005f4c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8005f4e:	7dfb      	ldrb	r3, [r7, #23]
 8005f50:	68ba      	ldr	r2, [r7, #8]
 8005f52:	4413      	add	r3, r2
 8005f54:	2203      	movs	r2, #3
 8005f56:	701a      	strb	r2, [r3, #0]
  idx++;
 8005f58:	7dfb      	ldrb	r3, [r7, #23]
 8005f5a:	3301      	adds	r3, #1
 8005f5c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8005f5e:	e013      	b.n	8005f88 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8005f60:	7dfb      	ldrb	r3, [r7, #23]
 8005f62:	68ba      	ldr	r2, [r7, #8]
 8005f64:	4413      	add	r3, r2
 8005f66:	693a      	ldr	r2, [r7, #16]
 8005f68:	7812      	ldrb	r2, [r2, #0]
 8005f6a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8005f6c:	693b      	ldr	r3, [r7, #16]
 8005f6e:	3301      	adds	r3, #1
 8005f70:	613b      	str	r3, [r7, #16]
    idx++;
 8005f72:	7dfb      	ldrb	r3, [r7, #23]
 8005f74:	3301      	adds	r3, #1
 8005f76:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8005f78:	7dfb      	ldrb	r3, [r7, #23]
 8005f7a:	68ba      	ldr	r2, [r7, #8]
 8005f7c:	4413      	add	r3, r2
 8005f7e:	2200      	movs	r2, #0
 8005f80:	701a      	strb	r2, [r3, #0]
    idx++;
 8005f82:	7dfb      	ldrb	r3, [r7, #23]
 8005f84:	3301      	adds	r3, #1
 8005f86:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8005f88:	693b      	ldr	r3, [r7, #16]
 8005f8a:	781b      	ldrb	r3, [r3, #0]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d1e7      	bne.n	8005f60 <USBD_GetString+0x52>
 8005f90:	e000      	b.n	8005f94 <USBD_GetString+0x86>
    return;
 8005f92:	bf00      	nop
  }
}
 8005f94:	3718      	adds	r7, #24
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}

08005f9a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8005f9a:	b480      	push	{r7}
 8005f9c:	b085      	sub	sp, #20
 8005f9e:	af00      	add	r7, sp, #0
 8005fa0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8005faa:	e005      	b.n	8005fb8 <USBD_GetLen+0x1e>
  {
    len++;
 8005fac:	7bfb      	ldrb	r3, [r7, #15]
 8005fae:	3301      	adds	r3, #1
 8005fb0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	3301      	adds	r3, #1
 8005fb6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	781b      	ldrb	r3, [r3, #0]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d1f5      	bne.n	8005fac <USBD_GetLen+0x12>
  }

  return len;
 8005fc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	3714      	adds	r7, #20
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fcc:	4770      	bx	lr

08005fce <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8005fce:	b580      	push	{r7, lr}
 8005fd0:	b084      	sub	sp, #16
 8005fd2:	af00      	add	r7, sp, #0
 8005fd4:	60f8      	str	r0, [r7, #12]
 8005fd6:	60b9      	str	r1, [r7, #8]
 8005fd8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	2202      	movs	r2, #2
 8005fde:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	687a      	ldr	r2, [r7, #4]
 8005fe6:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	687a      	ldr	r2, [r7, #4]
 8005fec:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	68ba      	ldr	r2, [r7, #8]
 8005ff2:	2100      	movs	r1, #0
 8005ff4:	68f8      	ldr	r0, [r7, #12]
 8005ff6:	f000 fbf2 	bl	80067de <USBD_LL_Transmit>

  return USBD_OK;
 8005ffa:	2300      	movs	r3, #0
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	3710      	adds	r7, #16
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}

08006004 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b084      	sub	sp, #16
 8006008:	af00      	add	r7, sp, #0
 800600a:	60f8      	str	r0, [r7, #12]
 800600c:	60b9      	str	r1, [r7, #8]
 800600e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	68ba      	ldr	r2, [r7, #8]
 8006014:	2100      	movs	r1, #0
 8006016:	68f8      	ldr	r0, [r7, #12]
 8006018:	f000 fbe1 	bl	80067de <USBD_LL_Transmit>

  return USBD_OK;
 800601c:	2300      	movs	r3, #0
}
 800601e:	4618      	mov	r0, r3
 8006020:	3710      	adds	r7, #16
 8006022:	46bd      	mov	sp, r7
 8006024:	bd80      	pop	{r7, pc}

08006026 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006026:	b580      	push	{r7, lr}
 8006028:	b084      	sub	sp, #16
 800602a:	af00      	add	r7, sp, #0
 800602c:	60f8      	str	r0, [r7, #12]
 800602e:	60b9      	str	r1, [r7, #8]
 8006030:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	68ba      	ldr	r2, [r7, #8]
 8006036:	2100      	movs	r1, #0
 8006038:	68f8      	ldr	r0, [r7, #12]
 800603a:	f000 fbf1 	bl	8006820 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800603e:	2300      	movs	r3, #0
}
 8006040:	4618      	mov	r0, r3
 8006042:	3710      	adds	r7, #16
 8006044:	46bd      	mov	sp, r7
 8006046:	bd80      	pop	{r7, pc}

08006048 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b082      	sub	sp, #8
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2204      	movs	r2, #4
 8006054:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006058:	2300      	movs	r3, #0
 800605a:	2200      	movs	r2, #0
 800605c:	2100      	movs	r1, #0
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	f000 fbbd 	bl	80067de <USBD_LL_Transmit>

  return USBD_OK;
 8006064:	2300      	movs	r3, #0
}
 8006066:	4618      	mov	r0, r3
 8006068:	3708      	adds	r7, #8
 800606a:	46bd      	mov	sp, r7
 800606c:	bd80      	pop	{r7, pc}

0800606e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800606e:	b580      	push	{r7, lr}
 8006070:	b082      	sub	sp, #8
 8006072:	af00      	add	r7, sp, #0
 8006074:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2205      	movs	r2, #5
 800607a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800607e:	2300      	movs	r3, #0
 8006080:	2200      	movs	r2, #0
 8006082:	2100      	movs	r1, #0
 8006084:	6878      	ldr	r0, [r7, #4]
 8006086:	f000 fbcb 	bl	8006820 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800608a:	2300      	movs	r3, #0
}
 800608c:	4618      	mov	r0, r3
 800608e:	3708      	adds	r7, #8
 8006090:	46bd      	mov	sp, r7
 8006092:	bd80      	pop	{r7, pc}

08006094 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006098:	2200      	movs	r2, #0
 800609a:	490e      	ldr	r1, [pc, #56]	; (80060d4 <MX_USB_DEVICE_Init+0x40>)
 800609c:	480e      	ldr	r0, [pc, #56]	; (80060d8 <MX_USB_DEVICE_Init+0x44>)
 800609e:	f7fe ff11 	bl	8004ec4 <USBD_Init>
 80060a2:	4603      	mov	r3, r0
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d001      	beq.n	80060ac <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80060a8:	f7fa fe84 	bl	8000db4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 80060ac:	490b      	ldr	r1, [pc, #44]	; (80060dc <MX_USB_DEVICE_Init+0x48>)
 80060ae:	480a      	ldr	r0, [pc, #40]	; (80060d8 <MX_USB_DEVICE_Init+0x44>)
 80060b0:	f7fe ff3e 	bl	8004f30 <USBD_RegisterClass>
 80060b4:	4603      	mov	r3, r0
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d001      	beq.n	80060be <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80060ba:	f7fa fe7b 	bl	8000db4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80060be:	4806      	ldr	r0, [pc, #24]	; (80060d8 <MX_USB_DEVICE_Init+0x44>)
 80060c0:	f7fe ff57 	bl	8004f72 <USBD_Start>
 80060c4:	4603      	mov	r3, r0
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d001      	beq.n	80060ce <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 80060ca:	f7fa fe73 	bl	8000db4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80060ce:	bf00      	nop
 80060d0:	bd80      	pop	{r7, pc}
 80060d2:	bf00      	nop
 80060d4:	2000015c 	.word	0x2000015c
 80060d8:	20000274 	.word	0x20000274
 80060dc:	20000014 	.word	0x20000014

080060e0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b083      	sub	sp, #12
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	4603      	mov	r3, r0
 80060e8:	6039      	str	r1, [r7, #0]
 80060ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	2212      	movs	r2, #18
 80060f0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80060f2:	4b03      	ldr	r3, [pc, #12]	; (8006100 <USBD_FS_DeviceDescriptor+0x20>)
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	370c      	adds	r7, #12
 80060f8:	46bd      	mov	sp, r7
 80060fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fe:	4770      	bx	lr
 8006100:	20000178 	.word	0x20000178

08006104 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006104:	b480      	push	{r7}
 8006106:	b083      	sub	sp, #12
 8006108:	af00      	add	r7, sp, #0
 800610a:	4603      	mov	r3, r0
 800610c:	6039      	str	r1, [r7, #0]
 800610e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	2204      	movs	r2, #4
 8006114:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006116:	4b03      	ldr	r3, [pc, #12]	; (8006124 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006118:	4618      	mov	r0, r3
 800611a:	370c      	adds	r7, #12
 800611c:	46bd      	mov	sp, r7
 800611e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006122:	4770      	bx	lr
 8006124:	2000018c 	.word	0x2000018c

08006128 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b082      	sub	sp, #8
 800612c:	af00      	add	r7, sp, #0
 800612e:	4603      	mov	r3, r0
 8006130:	6039      	str	r1, [r7, #0]
 8006132:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006134:	79fb      	ldrb	r3, [r7, #7]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d105      	bne.n	8006146 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800613a:	683a      	ldr	r2, [r7, #0]
 800613c:	4907      	ldr	r1, [pc, #28]	; (800615c <USBD_FS_ProductStrDescriptor+0x34>)
 800613e:	4808      	ldr	r0, [pc, #32]	; (8006160 <USBD_FS_ProductStrDescriptor+0x38>)
 8006140:	f7ff fee5 	bl	8005f0e <USBD_GetString>
 8006144:	e004      	b.n	8006150 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006146:	683a      	ldr	r2, [r7, #0]
 8006148:	4904      	ldr	r1, [pc, #16]	; (800615c <USBD_FS_ProductStrDescriptor+0x34>)
 800614a:	4805      	ldr	r0, [pc, #20]	; (8006160 <USBD_FS_ProductStrDescriptor+0x38>)
 800614c:	f7ff fedf 	bl	8005f0e <USBD_GetString>
  }
  return USBD_StrDesc;
 8006150:	4b02      	ldr	r3, [pc, #8]	; (800615c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006152:	4618      	mov	r0, r3
 8006154:	3708      	adds	r7, #8
 8006156:	46bd      	mov	sp, r7
 8006158:	bd80      	pop	{r7, pc}
 800615a:	bf00      	nop
 800615c:	20000544 	.word	0x20000544
 8006160:	08006acc 	.word	0x08006acc

08006164 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b082      	sub	sp, #8
 8006168:	af00      	add	r7, sp, #0
 800616a:	4603      	mov	r3, r0
 800616c:	6039      	str	r1, [r7, #0]
 800616e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006170:	683a      	ldr	r2, [r7, #0]
 8006172:	4904      	ldr	r1, [pc, #16]	; (8006184 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006174:	4804      	ldr	r0, [pc, #16]	; (8006188 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006176:	f7ff feca 	bl	8005f0e <USBD_GetString>
  return USBD_StrDesc;
 800617a:	4b02      	ldr	r3, [pc, #8]	; (8006184 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800617c:	4618      	mov	r0, r3
 800617e:	3708      	adds	r7, #8
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}
 8006184:	20000544 	.word	0x20000544
 8006188:	08006ae4 	.word	0x08006ae4

0800618c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b082      	sub	sp, #8
 8006190:	af00      	add	r7, sp, #0
 8006192:	4603      	mov	r3, r0
 8006194:	6039      	str	r1, [r7, #0]
 8006196:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	221a      	movs	r2, #26
 800619c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800619e:	f000 f843 	bl	8006228 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80061a2:	4b02      	ldr	r3, [pc, #8]	; (80061ac <USBD_FS_SerialStrDescriptor+0x20>)
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	3708      	adds	r7, #8
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bd80      	pop	{r7, pc}
 80061ac:	20000190 	.word	0x20000190

080061b0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b082      	sub	sp, #8
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	4603      	mov	r3, r0
 80061b8:	6039      	str	r1, [r7, #0]
 80061ba:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80061bc:	79fb      	ldrb	r3, [r7, #7]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d105      	bne.n	80061ce <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80061c2:	683a      	ldr	r2, [r7, #0]
 80061c4:	4907      	ldr	r1, [pc, #28]	; (80061e4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80061c6:	4808      	ldr	r0, [pc, #32]	; (80061e8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80061c8:	f7ff fea1 	bl	8005f0e <USBD_GetString>
 80061cc:	e004      	b.n	80061d8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80061ce:	683a      	ldr	r2, [r7, #0]
 80061d0:	4904      	ldr	r1, [pc, #16]	; (80061e4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80061d2:	4805      	ldr	r0, [pc, #20]	; (80061e8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80061d4:	f7ff fe9b 	bl	8005f0e <USBD_GetString>
  }
  return USBD_StrDesc;
 80061d8:	4b02      	ldr	r3, [pc, #8]	; (80061e4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80061da:	4618      	mov	r0, r3
 80061dc:	3708      	adds	r7, #8
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}
 80061e2:	bf00      	nop
 80061e4:	20000544 	.word	0x20000544
 80061e8:	08006af8 	.word	0x08006af8

080061ec <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b082      	sub	sp, #8
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	4603      	mov	r3, r0
 80061f4:	6039      	str	r1, [r7, #0]
 80061f6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80061f8:	79fb      	ldrb	r3, [r7, #7]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d105      	bne.n	800620a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80061fe:	683a      	ldr	r2, [r7, #0]
 8006200:	4907      	ldr	r1, [pc, #28]	; (8006220 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006202:	4808      	ldr	r0, [pc, #32]	; (8006224 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006204:	f7ff fe83 	bl	8005f0e <USBD_GetString>
 8006208:	e004      	b.n	8006214 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800620a:	683a      	ldr	r2, [r7, #0]
 800620c:	4904      	ldr	r1, [pc, #16]	; (8006220 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800620e:	4805      	ldr	r0, [pc, #20]	; (8006224 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006210:	f7ff fe7d 	bl	8005f0e <USBD_GetString>
  }
  return USBD_StrDesc;
 8006214:	4b02      	ldr	r3, [pc, #8]	; (8006220 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006216:	4618      	mov	r0, r3
 8006218:	3708      	adds	r7, #8
 800621a:	46bd      	mov	sp, r7
 800621c:	bd80      	pop	{r7, pc}
 800621e:	bf00      	nop
 8006220:	20000544 	.word	0x20000544
 8006224:	08006b04 	.word	0x08006b04

08006228 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b084      	sub	sp, #16
 800622c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800622e:	4b0f      	ldr	r3, [pc, #60]	; (800626c <Get_SerialNum+0x44>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006234:	4b0e      	ldr	r3, [pc, #56]	; (8006270 <Get_SerialNum+0x48>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800623a:	4b0e      	ldr	r3, [pc, #56]	; (8006274 <Get_SerialNum+0x4c>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006240:	68fa      	ldr	r2, [r7, #12]
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	4413      	add	r3, r2
 8006246:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d009      	beq.n	8006262 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800624e:	2208      	movs	r2, #8
 8006250:	4909      	ldr	r1, [pc, #36]	; (8006278 <Get_SerialNum+0x50>)
 8006252:	68f8      	ldr	r0, [r7, #12]
 8006254:	f000 f814 	bl	8006280 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006258:	2204      	movs	r2, #4
 800625a:	4908      	ldr	r1, [pc, #32]	; (800627c <Get_SerialNum+0x54>)
 800625c:	68b8      	ldr	r0, [r7, #8]
 800625e:	f000 f80f 	bl	8006280 <IntToUnicode>
  }
}
 8006262:	bf00      	nop
 8006264:	3710      	adds	r7, #16
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}
 800626a:	bf00      	nop
 800626c:	1fff7a10 	.word	0x1fff7a10
 8006270:	1fff7a14 	.word	0x1fff7a14
 8006274:	1fff7a18 	.word	0x1fff7a18
 8006278:	20000192 	.word	0x20000192
 800627c:	200001a2 	.word	0x200001a2

08006280 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006280:	b480      	push	{r7}
 8006282:	b087      	sub	sp, #28
 8006284:	af00      	add	r7, sp, #0
 8006286:	60f8      	str	r0, [r7, #12]
 8006288:	60b9      	str	r1, [r7, #8]
 800628a:	4613      	mov	r3, r2
 800628c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800628e:	2300      	movs	r3, #0
 8006290:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006292:	2300      	movs	r3, #0
 8006294:	75fb      	strb	r3, [r7, #23]
 8006296:	e027      	b.n	80062e8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	0f1b      	lsrs	r3, r3, #28
 800629c:	2b09      	cmp	r3, #9
 800629e:	d80b      	bhi.n	80062b8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	0f1b      	lsrs	r3, r3, #28
 80062a4:	b2da      	uxtb	r2, r3
 80062a6:	7dfb      	ldrb	r3, [r7, #23]
 80062a8:	005b      	lsls	r3, r3, #1
 80062aa:	4619      	mov	r1, r3
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	440b      	add	r3, r1
 80062b0:	3230      	adds	r2, #48	; 0x30
 80062b2:	b2d2      	uxtb	r2, r2
 80062b4:	701a      	strb	r2, [r3, #0]
 80062b6:	e00a      	b.n	80062ce <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	0f1b      	lsrs	r3, r3, #28
 80062bc:	b2da      	uxtb	r2, r3
 80062be:	7dfb      	ldrb	r3, [r7, #23]
 80062c0:	005b      	lsls	r3, r3, #1
 80062c2:	4619      	mov	r1, r3
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	440b      	add	r3, r1
 80062c8:	3237      	adds	r2, #55	; 0x37
 80062ca:	b2d2      	uxtb	r2, r2
 80062cc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	011b      	lsls	r3, r3, #4
 80062d2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80062d4:	7dfb      	ldrb	r3, [r7, #23]
 80062d6:	005b      	lsls	r3, r3, #1
 80062d8:	3301      	adds	r3, #1
 80062da:	68ba      	ldr	r2, [r7, #8]
 80062dc:	4413      	add	r3, r2
 80062de:	2200      	movs	r2, #0
 80062e0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80062e2:	7dfb      	ldrb	r3, [r7, #23]
 80062e4:	3301      	adds	r3, #1
 80062e6:	75fb      	strb	r3, [r7, #23]
 80062e8:	7dfa      	ldrb	r2, [r7, #23]
 80062ea:	79fb      	ldrb	r3, [r7, #7]
 80062ec:	429a      	cmp	r2, r3
 80062ee:	d3d3      	bcc.n	8006298 <IntToUnicode+0x18>
  }
}
 80062f0:	bf00      	nop
 80062f2:	371c      	adds	r7, #28
 80062f4:	46bd      	mov	sp, r7
 80062f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fa:	4770      	bx	lr

080062fc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b08a      	sub	sp, #40	; 0x28
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006304:	f107 0314 	add.w	r3, r7, #20
 8006308:	2200      	movs	r2, #0
 800630a:	601a      	str	r2, [r3, #0]
 800630c:	605a      	str	r2, [r3, #4]
 800630e:	609a      	str	r2, [r3, #8]
 8006310:	60da      	str	r2, [r3, #12]
 8006312:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800631c:	d13a      	bne.n	8006394 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800631e:	2300      	movs	r3, #0
 8006320:	613b      	str	r3, [r7, #16]
 8006322:	4b1e      	ldr	r3, [pc, #120]	; (800639c <HAL_PCD_MspInit+0xa0>)
 8006324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006326:	4a1d      	ldr	r2, [pc, #116]	; (800639c <HAL_PCD_MspInit+0xa0>)
 8006328:	f043 0301 	orr.w	r3, r3, #1
 800632c:	6313      	str	r3, [r2, #48]	; 0x30
 800632e:	4b1b      	ldr	r3, [pc, #108]	; (800639c <HAL_PCD_MspInit+0xa0>)
 8006330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006332:	f003 0301 	and.w	r3, r3, #1
 8006336:	613b      	str	r3, [r7, #16]
 8006338:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800633a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800633e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006340:	2302      	movs	r3, #2
 8006342:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006344:	2300      	movs	r3, #0
 8006346:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006348:	2303      	movs	r3, #3
 800634a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800634c:	230a      	movs	r3, #10
 800634e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006350:	f107 0314 	add.w	r3, r7, #20
 8006354:	4619      	mov	r1, r3
 8006356:	4812      	ldr	r0, [pc, #72]	; (80063a0 <HAL_PCD_MspInit+0xa4>)
 8006358:	f7fb f9a8 	bl	80016ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800635c:	4b0f      	ldr	r3, [pc, #60]	; (800639c <HAL_PCD_MspInit+0xa0>)
 800635e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006360:	4a0e      	ldr	r2, [pc, #56]	; (800639c <HAL_PCD_MspInit+0xa0>)
 8006362:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006366:	6353      	str	r3, [r2, #52]	; 0x34
 8006368:	2300      	movs	r3, #0
 800636a:	60fb      	str	r3, [r7, #12]
 800636c:	4b0b      	ldr	r3, [pc, #44]	; (800639c <HAL_PCD_MspInit+0xa0>)
 800636e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006370:	4a0a      	ldr	r2, [pc, #40]	; (800639c <HAL_PCD_MspInit+0xa0>)
 8006372:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006376:	6453      	str	r3, [r2, #68]	; 0x44
 8006378:	4b08      	ldr	r3, [pc, #32]	; (800639c <HAL_PCD_MspInit+0xa0>)
 800637a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800637c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006380:	60fb      	str	r3, [r7, #12]
 8006382:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006384:	2200      	movs	r2, #0
 8006386:	2100      	movs	r1, #0
 8006388:	2043      	movs	r0, #67	; 0x43
 800638a:	f7fb f958 	bl	800163e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800638e:	2043      	movs	r0, #67	; 0x43
 8006390:	f7fb f971 	bl	8001676 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006394:	bf00      	nop
 8006396:	3728      	adds	r7, #40	; 0x28
 8006398:	46bd      	mov	sp, r7
 800639a:	bd80      	pop	{r7, pc}
 800639c:	40023800 	.word	0x40023800
 80063a0:	40020000 	.word	0x40020000

080063a4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b082      	sub	sp, #8
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80063b8:	4619      	mov	r1, r3
 80063ba:	4610      	mov	r0, r2
 80063bc:	f7fe fe24 	bl	8005008 <USBD_LL_SetupStage>
}
 80063c0:	bf00      	nop
 80063c2:	3708      	adds	r7, #8
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bd80      	pop	{r7, pc}

080063c8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b082      	sub	sp, #8
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
 80063d0:	460b      	mov	r3, r1
 80063d2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80063da:	78fa      	ldrb	r2, [r7, #3]
 80063dc:	6879      	ldr	r1, [r7, #4]
 80063de:	4613      	mov	r3, r2
 80063e0:	00db      	lsls	r3, r3, #3
 80063e2:	1a9b      	subs	r3, r3, r2
 80063e4:	009b      	lsls	r3, r3, #2
 80063e6:	440b      	add	r3, r1
 80063e8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80063ec:	681a      	ldr	r2, [r3, #0]
 80063ee:	78fb      	ldrb	r3, [r7, #3]
 80063f0:	4619      	mov	r1, r3
 80063f2:	f7fe fe5c 	bl	80050ae <USBD_LL_DataOutStage>
}
 80063f6:	bf00      	nop
 80063f8:	3708      	adds	r7, #8
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bd80      	pop	{r7, pc}

080063fe <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80063fe:	b580      	push	{r7, lr}
 8006400:	b082      	sub	sp, #8
 8006402:	af00      	add	r7, sp, #0
 8006404:	6078      	str	r0, [r7, #4]
 8006406:	460b      	mov	r3, r1
 8006408:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8006410:	78fa      	ldrb	r2, [r7, #3]
 8006412:	6879      	ldr	r1, [r7, #4]
 8006414:	4613      	mov	r3, r2
 8006416:	00db      	lsls	r3, r3, #3
 8006418:	1a9b      	subs	r3, r3, r2
 800641a:	009b      	lsls	r3, r3, #2
 800641c:	440b      	add	r3, r1
 800641e:	3348      	adds	r3, #72	; 0x48
 8006420:	681a      	ldr	r2, [r3, #0]
 8006422:	78fb      	ldrb	r3, [r7, #3]
 8006424:	4619      	mov	r1, r3
 8006426:	f7fe fea5 	bl	8005174 <USBD_LL_DataInStage>
}
 800642a:	bf00      	nop
 800642c:	3708      	adds	r7, #8
 800642e:	46bd      	mov	sp, r7
 8006430:	bd80      	pop	{r7, pc}

08006432 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006432:	b580      	push	{r7, lr}
 8006434:	b082      	sub	sp, #8
 8006436:	af00      	add	r7, sp, #0
 8006438:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006440:	4618      	mov	r0, r3
 8006442:	f7fe ffa9 	bl	8005398 <USBD_LL_SOF>
}
 8006446:	bf00      	nop
 8006448:	3708      	adds	r7, #8
 800644a:	46bd      	mov	sp, r7
 800644c:	bd80      	pop	{r7, pc}

0800644e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800644e:	b580      	push	{r7, lr}
 8006450:	b084      	sub	sp, #16
 8006452:	af00      	add	r7, sp, #0
 8006454:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006456:	2301      	movs	r3, #1
 8006458:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	68db      	ldr	r3, [r3, #12]
 800645e:	2b02      	cmp	r3, #2
 8006460:	d001      	beq.n	8006466 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8006462:	f7fa fca7 	bl	8000db4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800646c:	7bfa      	ldrb	r2, [r7, #15]
 800646e:	4611      	mov	r1, r2
 8006470:	4618      	mov	r0, r3
 8006472:	f7fe ff56 	bl	8005322 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800647c:	4618      	mov	r0, r3
 800647e:	f7fe ff0f 	bl	80052a0 <USBD_LL_Reset>
}
 8006482:	bf00      	nop
 8006484:	3710      	adds	r7, #16
 8006486:	46bd      	mov	sp, r7
 8006488:	bd80      	pop	{r7, pc}
	...

0800648c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b082      	sub	sp, #8
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800649a:	4618      	mov	r0, r3
 800649c:	f7fe ff51 	bl	8005342 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	687a      	ldr	r2, [r7, #4]
 80064ac:	6812      	ldr	r2, [r2, #0]
 80064ae:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80064b2:	f043 0301 	orr.w	r3, r3, #1
 80064b6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6a1b      	ldr	r3, [r3, #32]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d005      	beq.n	80064cc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80064c0:	4b04      	ldr	r3, [pc, #16]	; (80064d4 <HAL_PCD_SuspendCallback+0x48>)
 80064c2:	691b      	ldr	r3, [r3, #16]
 80064c4:	4a03      	ldr	r2, [pc, #12]	; (80064d4 <HAL_PCD_SuspendCallback+0x48>)
 80064c6:	f043 0306 	orr.w	r3, r3, #6
 80064ca:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80064cc:	bf00      	nop
 80064ce:	3708      	adds	r7, #8
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bd80      	pop	{r7, pc}
 80064d4:	e000ed00 	.word	0xe000ed00

080064d8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b082      	sub	sp, #8
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80064e6:	4618      	mov	r0, r3
 80064e8:	f7fe ff40 	bl	800536c <USBD_LL_Resume>
}
 80064ec:	bf00      	nop
 80064ee:	3708      	adds	r7, #8
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}

080064f4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b082      	sub	sp, #8
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
 80064fc:	460b      	mov	r3, r1
 80064fe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006506:	78fa      	ldrb	r2, [r7, #3]
 8006508:	4611      	mov	r1, r2
 800650a:	4618      	mov	r0, r3
 800650c:	f7fe ff6b 	bl	80053e6 <USBD_LL_IsoOUTIncomplete>
}
 8006510:	bf00      	nop
 8006512:	3708      	adds	r7, #8
 8006514:	46bd      	mov	sp, r7
 8006516:	bd80      	pop	{r7, pc}

08006518 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b082      	sub	sp, #8
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
 8006520:	460b      	mov	r3, r1
 8006522:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800652a:	78fa      	ldrb	r2, [r7, #3]
 800652c:	4611      	mov	r1, r2
 800652e:	4618      	mov	r0, r3
 8006530:	f7fe ff4c 	bl	80053cc <USBD_LL_IsoINIncomplete>
}
 8006534:	bf00      	nop
 8006536:	3708      	adds	r7, #8
 8006538:	46bd      	mov	sp, r7
 800653a:	bd80      	pop	{r7, pc}

0800653c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b082      	sub	sp, #8
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800654a:	4618      	mov	r0, r3
 800654c:	f7fe ff58 	bl	8005400 <USBD_LL_DevConnected>
}
 8006550:	bf00      	nop
 8006552:	3708      	adds	r7, #8
 8006554:	46bd      	mov	sp, r7
 8006556:	bd80      	pop	{r7, pc}

08006558 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b082      	sub	sp, #8
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006566:	4618      	mov	r0, r3
 8006568:	f7fe ff55 	bl	8005416 <USBD_LL_DevDisconnected>
}
 800656c:	bf00      	nop
 800656e:	3708      	adds	r7, #8
 8006570:	46bd      	mov	sp, r7
 8006572:	bd80      	pop	{r7, pc}

08006574 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b082      	sub	sp, #8
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	781b      	ldrb	r3, [r3, #0]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d13c      	bne.n	80065fe <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8006584:	4a20      	ldr	r2, [pc, #128]	; (8006608 <USBD_LL_Init+0x94>)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	4a1e      	ldr	r2, [pc, #120]	; (8006608 <USBD_LL_Init+0x94>)
 8006590:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006594:	4b1c      	ldr	r3, [pc, #112]	; (8006608 <USBD_LL_Init+0x94>)
 8006596:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800659a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800659c:	4b1a      	ldr	r3, [pc, #104]	; (8006608 <USBD_LL_Init+0x94>)
 800659e:	2204      	movs	r2, #4
 80065a0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80065a2:	4b19      	ldr	r3, [pc, #100]	; (8006608 <USBD_LL_Init+0x94>)
 80065a4:	2202      	movs	r2, #2
 80065a6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80065a8:	4b17      	ldr	r3, [pc, #92]	; (8006608 <USBD_LL_Init+0x94>)
 80065aa:	2200      	movs	r2, #0
 80065ac:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80065ae:	4b16      	ldr	r3, [pc, #88]	; (8006608 <USBD_LL_Init+0x94>)
 80065b0:	2202      	movs	r2, #2
 80065b2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80065b4:	4b14      	ldr	r3, [pc, #80]	; (8006608 <USBD_LL_Init+0x94>)
 80065b6:	2200      	movs	r2, #0
 80065b8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80065ba:	4b13      	ldr	r3, [pc, #76]	; (8006608 <USBD_LL_Init+0x94>)
 80065bc:	2200      	movs	r2, #0
 80065be:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80065c0:	4b11      	ldr	r3, [pc, #68]	; (8006608 <USBD_LL_Init+0x94>)
 80065c2:	2200      	movs	r2, #0
 80065c4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80065c6:	4b10      	ldr	r3, [pc, #64]	; (8006608 <USBD_LL_Init+0x94>)
 80065c8:	2200      	movs	r2, #0
 80065ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80065cc:	4b0e      	ldr	r3, [pc, #56]	; (8006608 <USBD_LL_Init+0x94>)
 80065ce:	2200      	movs	r2, #0
 80065d0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80065d2:	480d      	ldr	r0, [pc, #52]	; (8006608 <USBD_LL_Init+0x94>)
 80065d4:	f7fb fa1d 	bl	8001a12 <HAL_PCD_Init>
 80065d8:	4603      	mov	r3, r0
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d001      	beq.n	80065e2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80065de:	f7fa fbe9 	bl	8000db4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80065e2:	2180      	movs	r1, #128	; 0x80
 80065e4:	4808      	ldr	r0, [pc, #32]	; (8006608 <USBD_LL_Init+0x94>)
 80065e6:	f7fc fb62 	bl	8002cae <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80065ea:	2240      	movs	r2, #64	; 0x40
 80065ec:	2100      	movs	r1, #0
 80065ee:	4806      	ldr	r0, [pc, #24]	; (8006608 <USBD_LL_Init+0x94>)
 80065f0:	f7fc fb16 	bl	8002c20 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80065f4:	2280      	movs	r2, #128	; 0x80
 80065f6:	2101      	movs	r1, #1
 80065f8:	4803      	ldr	r0, [pc, #12]	; (8006608 <USBD_LL_Init+0x94>)
 80065fa:	f7fc fb11 	bl	8002c20 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80065fe:	2300      	movs	r3, #0
}
 8006600:	4618      	mov	r0, r3
 8006602:	3708      	adds	r7, #8
 8006604:	46bd      	mov	sp, r7
 8006606:	bd80      	pop	{r7, pc}
 8006608:	20000744 	.word	0x20000744

0800660c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b084      	sub	sp, #16
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006614:	2300      	movs	r3, #0
 8006616:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006618:	2300      	movs	r3, #0
 800661a:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006622:	4618      	mov	r0, r3
 8006624:	f7fb fb12 	bl	8001c4c <HAL_PCD_Start>
 8006628:	4603      	mov	r3, r0
 800662a:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 800662c:	7bfb      	ldrb	r3, [r7, #15]
 800662e:	4618      	mov	r0, r3
 8006630:	f000 f918 	bl	8006864 <USBD_Get_USB_Status>
 8006634:	4603      	mov	r3, r0
 8006636:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8006638:	7bbb      	ldrb	r3, [r7, #14]
}
 800663a:	4618      	mov	r0, r3
 800663c:	3710      	adds	r7, #16
 800663e:	46bd      	mov	sp, r7
 8006640:	bd80      	pop	{r7, pc}

08006642 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006642:	b580      	push	{r7, lr}
 8006644:	b084      	sub	sp, #16
 8006646:	af00      	add	r7, sp, #0
 8006648:	6078      	str	r0, [r7, #4]
 800664a:	4608      	mov	r0, r1
 800664c:	4611      	mov	r1, r2
 800664e:	461a      	mov	r2, r3
 8006650:	4603      	mov	r3, r0
 8006652:	70fb      	strb	r3, [r7, #3]
 8006654:	460b      	mov	r3, r1
 8006656:	70bb      	strb	r3, [r7, #2]
 8006658:	4613      	mov	r3, r2
 800665a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800665c:	2300      	movs	r3, #0
 800665e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006660:	2300      	movs	r3, #0
 8006662:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800666a:	78bb      	ldrb	r3, [r7, #2]
 800666c:	883a      	ldrh	r2, [r7, #0]
 800666e:	78f9      	ldrb	r1, [r7, #3]
 8006670:	f7fb fef6 	bl	8002460 <HAL_PCD_EP_Open>
 8006674:	4603      	mov	r3, r0
 8006676:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006678:	7bfb      	ldrb	r3, [r7, #15]
 800667a:	4618      	mov	r0, r3
 800667c:	f000 f8f2 	bl	8006864 <USBD_Get_USB_Status>
 8006680:	4603      	mov	r3, r0
 8006682:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8006684:	7bbb      	ldrb	r3, [r7, #14]
}
 8006686:	4618      	mov	r0, r3
 8006688:	3710      	adds	r7, #16
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}

0800668e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800668e:	b580      	push	{r7, lr}
 8006690:	b084      	sub	sp, #16
 8006692:	af00      	add	r7, sp, #0
 8006694:	6078      	str	r0, [r7, #4]
 8006696:	460b      	mov	r3, r1
 8006698:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800669a:	2300      	movs	r3, #0
 800669c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800669e:	2300      	movs	r3, #0
 80066a0:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80066a8:	78fa      	ldrb	r2, [r7, #3]
 80066aa:	4611      	mov	r1, r2
 80066ac:	4618      	mov	r0, r3
 80066ae:	f7fb ff3f 	bl	8002530 <HAL_PCD_EP_Close>
 80066b2:	4603      	mov	r3, r0
 80066b4:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 80066b6:	7bfb      	ldrb	r3, [r7, #15]
 80066b8:	4618      	mov	r0, r3
 80066ba:	f000 f8d3 	bl	8006864 <USBD_Get_USB_Status>
 80066be:	4603      	mov	r3, r0
 80066c0:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 80066c2:	7bbb      	ldrb	r3, [r7, #14]
}
 80066c4:	4618      	mov	r0, r3
 80066c6:	3710      	adds	r7, #16
 80066c8:	46bd      	mov	sp, r7
 80066ca:	bd80      	pop	{r7, pc}

080066cc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b084      	sub	sp, #16
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
 80066d4:	460b      	mov	r3, r1
 80066d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80066d8:	2300      	movs	r3, #0
 80066da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80066dc:	2300      	movs	r3, #0
 80066de:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80066e6:	78fa      	ldrb	r2, [r7, #3]
 80066e8:	4611      	mov	r1, r2
 80066ea:	4618      	mov	r0, r3
 80066ec:	f7fb ffff 	bl	80026ee <HAL_PCD_EP_SetStall>
 80066f0:	4603      	mov	r3, r0
 80066f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80066f4:	7bfb      	ldrb	r3, [r7, #15]
 80066f6:	4618      	mov	r0, r3
 80066f8:	f000 f8b4 	bl	8006864 <USBD_Get_USB_Status>
 80066fc:	4603      	mov	r3, r0
 80066fe:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8006700:	7bbb      	ldrb	r3, [r7, #14]
}
 8006702:	4618      	mov	r0, r3
 8006704:	3710      	adds	r7, #16
 8006706:	46bd      	mov	sp, r7
 8006708:	bd80      	pop	{r7, pc}

0800670a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800670a:	b580      	push	{r7, lr}
 800670c:	b084      	sub	sp, #16
 800670e:	af00      	add	r7, sp, #0
 8006710:	6078      	str	r0, [r7, #4]
 8006712:	460b      	mov	r3, r1
 8006714:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006716:	2300      	movs	r3, #0
 8006718:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800671a:	2300      	movs	r3, #0
 800671c:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006724:	78fa      	ldrb	r2, [r7, #3]
 8006726:	4611      	mov	r1, r2
 8006728:	4618      	mov	r0, r3
 800672a:	f7fc f844 	bl	80027b6 <HAL_PCD_EP_ClrStall>
 800672e:	4603      	mov	r3, r0
 8006730:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 8006732:	7bfb      	ldrb	r3, [r7, #15]
 8006734:	4618      	mov	r0, r3
 8006736:	f000 f895 	bl	8006864 <USBD_Get_USB_Status>
 800673a:	4603      	mov	r3, r0
 800673c:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 800673e:	7bbb      	ldrb	r3, [r7, #14]
}
 8006740:	4618      	mov	r0, r3
 8006742:	3710      	adds	r7, #16
 8006744:	46bd      	mov	sp, r7
 8006746:	bd80      	pop	{r7, pc}

08006748 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006748:	b480      	push	{r7}
 800674a:	b085      	sub	sp, #20
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
 8006750:	460b      	mov	r3, r1
 8006752:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800675a:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800675c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006760:	2b00      	cmp	r3, #0
 8006762:	da0b      	bge.n	800677c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8006764:	78fb      	ldrb	r3, [r7, #3]
 8006766:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800676a:	68f9      	ldr	r1, [r7, #12]
 800676c:	4613      	mov	r3, r2
 800676e:	00db      	lsls	r3, r3, #3
 8006770:	1a9b      	subs	r3, r3, r2
 8006772:	009b      	lsls	r3, r3, #2
 8006774:	440b      	add	r3, r1
 8006776:	333e      	adds	r3, #62	; 0x3e
 8006778:	781b      	ldrb	r3, [r3, #0]
 800677a:	e00b      	b.n	8006794 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800677c:	78fb      	ldrb	r3, [r7, #3]
 800677e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006782:	68f9      	ldr	r1, [r7, #12]
 8006784:	4613      	mov	r3, r2
 8006786:	00db      	lsls	r3, r3, #3
 8006788:	1a9b      	subs	r3, r3, r2
 800678a:	009b      	lsls	r3, r3, #2
 800678c:	440b      	add	r3, r1
 800678e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006792:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006794:	4618      	mov	r0, r3
 8006796:	3714      	adds	r7, #20
 8006798:	46bd      	mov	sp, r7
 800679a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679e:	4770      	bx	lr

080067a0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b084      	sub	sp, #16
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
 80067a8:	460b      	mov	r3, r1
 80067aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80067ac:	2300      	movs	r3, #0
 80067ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80067b0:	2300      	movs	r3, #0
 80067b2:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80067ba:	78fa      	ldrb	r2, [r7, #3]
 80067bc:	4611      	mov	r1, r2
 80067be:	4618      	mov	r0, r3
 80067c0:	f7fb fe29 	bl	8002416 <HAL_PCD_SetAddress>
 80067c4:	4603      	mov	r3, r0
 80067c6:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 80067c8:	7bfb      	ldrb	r3, [r7, #15]
 80067ca:	4618      	mov	r0, r3
 80067cc:	f000 f84a 	bl	8006864 <USBD_Get_USB_Status>
 80067d0:	4603      	mov	r3, r0
 80067d2:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 80067d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	3710      	adds	r7, #16
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}

080067de <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80067de:	b580      	push	{r7, lr}
 80067e0:	b086      	sub	sp, #24
 80067e2:	af00      	add	r7, sp, #0
 80067e4:	60f8      	str	r0, [r7, #12]
 80067e6:	607a      	str	r2, [r7, #4]
 80067e8:	603b      	str	r3, [r7, #0]
 80067ea:	460b      	mov	r3, r1
 80067ec:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80067ee:	2300      	movs	r3, #0
 80067f0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80067f2:	2300      	movs	r3, #0
 80067f4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80067fc:	7af9      	ldrb	r1, [r7, #11]
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	687a      	ldr	r2, [r7, #4]
 8006802:	f7fb ff2a 	bl	800265a <HAL_PCD_EP_Transmit>
 8006806:	4603      	mov	r3, r0
 8006808:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 800680a:	7dfb      	ldrb	r3, [r7, #23]
 800680c:	4618      	mov	r0, r3
 800680e:	f000 f829 	bl	8006864 <USBD_Get_USB_Status>
 8006812:	4603      	mov	r3, r0
 8006814:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8006816:	7dbb      	ldrb	r3, [r7, #22]
}
 8006818:	4618      	mov	r0, r3
 800681a:	3718      	adds	r7, #24
 800681c:	46bd      	mov	sp, r7
 800681e:	bd80      	pop	{r7, pc}

08006820 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b086      	sub	sp, #24
 8006824:	af00      	add	r7, sp, #0
 8006826:	60f8      	str	r0, [r7, #12]
 8006828:	607a      	str	r2, [r7, #4]
 800682a:	603b      	str	r3, [r7, #0]
 800682c:	460b      	mov	r3, r1
 800682e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006830:	2300      	movs	r3, #0
 8006832:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006834:	2300      	movs	r3, #0
 8006836:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800683e:	7af9      	ldrb	r1, [r7, #11]
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	687a      	ldr	r2, [r7, #4]
 8006844:	f7fb febe 	bl	80025c4 <HAL_PCD_EP_Receive>
 8006848:	4603      	mov	r3, r0
 800684a:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 800684c:	7dfb      	ldrb	r3, [r7, #23]
 800684e:	4618      	mov	r0, r3
 8006850:	f000 f808 	bl	8006864 <USBD_Get_USB_Status>
 8006854:	4603      	mov	r3, r0
 8006856:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 8006858:	7dbb      	ldrb	r3, [r7, #22]
}
 800685a:	4618      	mov	r0, r3
 800685c:	3718      	adds	r7, #24
 800685e:	46bd      	mov	sp, r7
 8006860:	bd80      	pop	{r7, pc}
	...

08006864 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006864:	b480      	push	{r7}
 8006866:	b085      	sub	sp, #20
 8006868:	af00      	add	r7, sp, #0
 800686a:	4603      	mov	r3, r0
 800686c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800686e:	2300      	movs	r3, #0
 8006870:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006872:	79fb      	ldrb	r3, [r7, #7]
 8006874:	2b03      	cmp	r3, #3
 8006876:	d817      	bhi.n	80068a8 <USBD_Get_USB_Status+0x44>
 8006878:	a201      	add	r2, pc, #4	; (adr r2, 8006880 <USBD_Get_USB_Status+0x1c>)
 800687a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800687e:	bf00      	nop
 8006880:	08006891 	.word	0x08006891
 8006884:	08006897 	.word	0x08006897
 8006888:	0800689d 	.word	0x0800689d
 800688c:	080068a3 	.word	0x080068a3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8006890:	2300      	movs	r3, #0
 8006892:	73fb      	strb	r3, [r7, #15]
    break;
 8006894:	e00b      	b.n	80068ae <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006896:	2303      	movs	r3, #3
 8006898:	73fb      	strb	r3, [r7, #15]
    break;
 800689a:	e008      	b.n	80068ae <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800689c:	2301      	movs	r3, #1
 800689e:	73fb      	strb	r3, [r7, #15]
    break;
 80068a0:	e005      	b.n	80068ae <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80068a2:	2303      	movs	r3, #3
 80068a4:	73fb      	strb	r3, [r7, #15]
    break;
 80068a6:	e002      	b.n	80068ae <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80068a8:	2303      	movs	r3, #3
 80068aa:	73fb      	strb	r3, [r7, #15]
    break;
 80068ac:	bf00      	nop
  }
  return usb_status;
 80068ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80068b0:	4618      	mov	r0, r3
 80068b2:	3714      	adds	r7, #20
 80068b4:	46bd      	mov	sp, r7
 80068b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ba:	4770      	bx	lr

080068bc <__errno>:
 80068bc:	4b01      	ldr	r3, [pc, #4]	; (80068c4 <__errno+0x8>)
 80068be:	6818      	ldr	r0, [r3, #0]
 80068c0:	4770      	bx	lr
 80068c2:	bf00      	nop
 80068c4:	200001ac 	.word	0x200001ac

080068c8 <__libc_init_array>:
 80068c8:	b570      	push	{r4, r5, r6, lr}
 80068ca:	4e0d      	ldr	r6, [pc, #52]	; (8006900 <__libc_init_array+0x38>)
 80068cc:	4c0d      	ldr	r4, [pc, #52]	; (8006904 <__libc_init_array+0x3c>)
 80068ce:	1ba4      	subs	r4, r4, r6
 80068d0:	10a4      	asrs	r4, r4, #2
 80068d2:	2500      	movs	r5, #0
 80068d4:	42a5      	cmp	r5, r4
 80068d6:	d109      	bne.n	80068ec <__libc_init_array+0x24>
 80068d8:	4e0b      	ldr	r6, [pc, #44]	; (8006908 <__libc_init_array+0x40>)
 80068da:	4c0c      	ldr	r4, [pc, #48]	; (800690c <__libc_init_array+0x44>)
 80068dc:	f000 f8ea 	bl	8006ab4 <_init>
 80068e0:	1ba4      	subs	r4, r4, r6
 80068e2:	10a4      	asrs	r4, r4, #2
 80068e4:	2500      	movs	r5, #0
 80068e6:	42a5      	cmp	r5, r4
 80068e8:	d105      	bne.n	80068f6 <__libc_init_array+0x2e>
 80068ea:	bd70      	pop	{r4, r5, r6, pc}
 80068ec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80068f0:	4798      	blx	r3
 80068f2:	3501      	adds	r5, #1
 80068f4:	e7ee      	b.n	80068d4 <__libc_init_array+0xc>
 80068f6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80068fa:	4798      	blx	r3
 80068fc:	3501      	adds	r5, #1
 80068fe:	e7f2      	b.n	80068e6 <__libc_init_array+0x1e>
 8006900:	08006bb8 	.word	0x08006bb8
 8006904:	08006bb8 	.word	0x08006bb8
 8006908:	08006bb8 	.word	0x08006bb8
 800690c:	08006bbc 	.word	0x08006bbc

08006910 <malloc>:
 8006910:	4b02      	ldr	r3, [pc, #8]	; (800691c <malloc+0xc>)
 8006912:	4601      	mov	r1, r0
 8006914:	6818      	ldr	r0, [r3, #0]
 8006916:	f000 b861 	b.w	80069dc <_malloc_r>
 800691a:	bf00      	nop
 800691c:	200001ac 	.word	0x200001ac

08006920 <free>:
 8006920:	4b02      	ldr	r3, [pc, #8]	; (800692c <free+0xc>)
 8006922:	4601      	mov	r1, r0
 8006924:	6818      	ldr	r0, [r3, #0]
 8006926:	f000 b80b 	b.w	8006940 <_free_r>
 800692a:	bf00      	nop
 800692c:	200001ac 	.word	0x200001ac

08006930 <memset>:
 8006930:	4402      	add	r2, r0
 8006932:	4603      	mov	r3, r0
 8006934:	4293      	cmp	r3, r2
 8006936:	d100      	bne.n	800693a <memset+0xa>
 8006938:	4770      	bx	lr
 800693a:	f803 1b01 	strb.w	r1, [r3], #1
 800693e:	e7f9      	b.n	8006934 <memset+0x4>

08006940 <_free_r>:
 8006940:	b538      	push	{r3, r4, r5, lr}
 8006942:	4605      	mov	r5, r0
 8006944:	2900      	cmp	r1, #0
 8006946:	d045      	beq.n	80069d4 <_free_r+0x94>
 8006948:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800694c:	1f0c      	subs	r4, r1, #4
 800694e:	2b00      	cmp	r3, #0
 8006950:	bfb8      	it	lt
 8006952:	18e4      	addlt	r4, r4, r3
 8006954:	f000 f8ac 	bl	8006ab0 <__malloc_lock>
 8006958:	4a1f      	ldr	r2, [pc, #124]	; (80069d8 <_free_r+0x98>)
 800695a:	6813      	ldr	r3, [r2, #0]
 800695c:	4610      	mov	r0, r2
 800695e:	b933      	cbnz	r3, 800696e <_free_r+0x2e>
 8006960:	6063      	str	r3, [r4, #4]
 8006962:	6014      	str	r4, [r2, #0]
 8006964:	4628      	mov	r0, r5
 8006966:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800696a:	f000 b8a2 	b.w	8006ab2 <__malloc_unlock>
 800696e:	42a3      	cmp	r3, r4
 8006970:	d90c      	bls.n	800698c <_free_r+0x4c>
 8006972:	6821      	ldr	r1, [r4, #0]
 8006974:	1862      	adds	r2, r4, r1
 8006976:	4293      	cmp	r3, r2
 8006978:	bf04      	itt	eq
 800697a:	681a      	ldreq	r2, [r3, #0]
 800697c:	685b      	ldreq	r3, [r3, #4]
 800697e:	6063      	str	r3, [r4, #4]
 8006980:	bf04      	itt	eq
 8006982:	1852      	addeq	r2, r2, r1
 8006984:	6022      	streq	r2, [r4, #0]
 8006986:	6004      	str	r4, [r0, #0]
 8006988:	e7ec      	b.n	8006964 <_free_r+0x24>
 800698a:	4613      	mov	r3, r2
 800698c:	685a      	ldr	r2, [r3, #4]
 800698e:	b10a      	cbz	r2, 8006994 <_free_r+0x54>
 8006990:	42a2      	cmp	r2, r4
 8006992:	d9fa      	bls.n	800698a <_free_r+0x4a>
 8006994:	6819      	ldr	r1, [r3, #0]
 8006996:	1858      	adds	r0, r3, r1
 8006998:	42a0      	cmp	r0, r4
 800699a:	d10b      	bne.n	80069b4 <_free_r+0x74>
 800699c:	6820      	ldr	r0, [r4, #0]
 800699e:	4401      	add	r1, r0
 80069a0:	1858      	adds	r0, r3, r1
 80069a2:	4282      	cmp	r2, r0
 80069a4:	6019      	str	r1, [r3, #0]
 80069a6:	d1dd      	bne.n	8006964 <_free_r+0x24>
 80069a8:	6810      	ldr	r0, [r2, #0]
 80069aa:	6852      	ldr	r2, [r2, #4]
 80069ac:	605a      	str	r2, [r3, #4]
 80069ae:	4401      	add	r1, r0
 80069b0:	6019      	str	r1, [r3, #0]
 80069b2:	e7d7      	b.n	8006964 <_free_r+0x24>
 80069b4:	d902      	bls.n	80069bc <_free_r+0x7c>
 80069b6:	230c      	movs	r3, #12
 80069b8:	602b      	str	r3, [r5, #0]
 80069ba:	e7d3      	b.n	8006964 <_free_r+0x24>
 80069bc:	6820      	ldr	r0, [r4, #0]
 80069be:	1821      	adds	r1, r4, r0
 80069c0:	428a      	cmp	r2, r1
 80069c2:	bf04      	itt	eq
 80069c4:	6811      	ldreq	r1, [r2, #0]
 80069c6:	6852      	ldreq	r2, [r2, #4]
 80069c8:	6062      	str	r2, [r4, #4]
 80069ca:	bf04      	itt	eq
 80069cc:	1809      	addeq	r1, r1, r0
 80069ce:	6021      	streq	r1, [r4, #0]
 80069d0:	605c      	str	r4, [r3, #4]
 80069d2:	e7c7      	b.n	8006964 <_free_r+0x24>
 80069d4:	bd38      	pop	{r3, r4, r5, pc}
 80069d6:	bf00      	nop
 80069d8:	20000268 	.word	0x20000268

080069dc <_malloc_r>:
 80069dc:	b570      	push	{r4, r5, r6, lr}
 80069de:	1ccd      	adds	r5, r1, #3
 80069e0:	f025 0503 	bic.w	r5, r5, #3
 80069e4:	3508      	adds	r5, #8
 80069e6:	2d0c      	cmp	r5, #12
 80069e8:	bf38      	it	cc
 80069ea:	250c      	movcc	r5, #12
 80069ec:	2d00      	cmp	r5, #0
 80069ee:	4606      	mov	r6, r0
 80069f0:	db01      	blt.n	80069f6 <_malloc_r+0x1a>
 80069f2:	42a9      	cmp	r1, r5
 80069f4:	d903      	bls.n	80069fe <_malloc_r+0x22>
 80069f6:	230c      	movs	r3, #12
 80069f8:	6033      	str	r3, [r6, #0]
 80069fa:	2000      	movs	r0, #0
 80069fc:	bd70      	pop	{r4, r5, r6, pc}
 80069fe:	f000 f857 	bl	8006ab0 <__malloc_lock>
 8006a02:	4a21      	ldr	r2, [pc, #132]	; (8006a88 <_malloc_r+0xac>)
 8006a04:	6814      	ldr	r4, [r2, #0]
 8006a06:	4621      	mov	r1, r4
 8006a08:	b991      	cbnz	r1, 8006a30 <_malloc_r+0x54>
 8006a0a:	4c20      	ldr	r4, [pc, #128]	; (8006a8c <_malloc_r+0xb0>)
 8006a0c:	6823      	ldr	r3, [r4, #0]
 8006a0e:	b91b      	cbnz	r3, 8006a18 <_malloc_r+0x3c>
 8006a10:	4630      	mov	r0, r6
 8006a12:	f000 f83d 	bl	8006a90 <_sbrk_r>
 8006a16:	6020      	str	r0, [r4, #0]
 8006a18:	4629      	mov	r1, r5
 8006a1a:	4630      	mov	r0, r6
 8006a1c:	f000 f838 	bl	8006a90 <_sbrk_r>
 8006a20:	1c43      	adds	r3, r0, #1
 8006a22:	d124      	bne.n	8006a6e <_malloc_r+0x92>
 8006a24:	230c      	movs	r3, #12
 8006a26:	6033      	str	r3, [r6, #0]
 8006a28:	4630      	mov	r0, r6
 8006a2a:	f000 f842 	bl	8006ab2 <__malloc_unlock>
 8006a2e:	e7e4      	b.n	80069fa <_malloc_r+0x1e>
 8006a30:	680b      	ldr	r3, [r1, #0]
 8006a32:	1b5b      	subs	r3, r3, r5
 8006a34:	d418      	bmi.n	8006a68 <_malloc_r+0x8c>
 8006a36:	2b0b      	cmp	r3, #11
 8006a38:	d90f      	bls.n	8006a5a <_malloc_r+0x7e>
 8006a3a:	600b      	str	r3, [r1, #0]
 8006a3c:	50cd      	str	r5, [r1, r3]
 8006a3e:	18cc      	adds	r4, r1, r3
 8006a40:	4630      	mov	r0, r6
 8006a42:	f000 f836 	bl	8006ab2 <__malloc_unlock>
 8006a46:	f104 000b 	add.w	r0, r4, #11
 8006a4a:	1d23      	adds	r3, r4, #4
 8006a4c:	f020 0007 	bic.w	r0, r0, #7
 8006a50:	1ac3      	subs	r3, r0, r3
 8006a52:	d0d3      	beq.n	80069fc <_malloc_r+0x20>
 8006a54:	425a      	negs	r2, r3
 8006a56:	50e2      	str	r2, [r4, r3]
 8006a58:	e7d0      	b.n	80069fc <_malloc_r+0x20>
 8006a5a:	428c      	cmp	r4, r1
 8006a5c:	684b      	ldr	r3, [r1, #4]
 8006a5e:	bf16      	itet	ne
 8006a60:	6063      	strne	r3, [r4, #4]
 8006a62:	6013      	streq	r3, [r2, #0]
 8006a64:	460c      	movne	r4, r1
 8006a66:	e7eb      	b.n	8006a40 <_malloc_r+0x64>
 8006a68:	460c      	mov	r4, r1
 8006a6a:	6849      	ldr	r1, [r1, #4]
 8006a6c:	e7cc      	b.n	8006a08 <_malloc_r+0x2c>
 8006a6e:	1cc4      	adds	r4, r0, #3
 8006a70:	f024 0403 	bic.w	r4, r4, #3
 8006a74:	42a0      	cmp	r0, r4
 8006a76:	d005      	beq.n	8006a84 <_malloc_r+0xa8>
 8006a78:	1a21      	subs	r1, r4, r0
 8006a7a:	4630      	mov	r0, r6
 8006a7c:	f000 f808 	bl	8006a90 <_sbrk_r>
 8006a80:	3001      	adds	r0, #1
 8006a82:	d0cf      	beq.n	8006a24 <_malloc_r+0x48>
 8006a84:	6025      	str	r5, [r4, #0]
 8006a86:	e7db      	b.n	8006a40 <_malloc_r+0x64>
 8006a88:	20000268 	.word	0x20000268
 8006a8c:	2000026c 	.word	0x2000026c

08006a90 <_sbrk_r>:
 8006a90:	b538      	push	{r3, r4, r5, lr}
 8006a92:	4c06      	ldr	r4, [pc, #24]	; (8006aac <_sbrk_r+0x1c>)
 8006a94:	2300      	movs	r3, #0
 8006a96:	4605      	mov	r5, r0
 8006a98:	4608      	mov	r0, r1
 8006a9a:	6023      	str	r3, [r4, #0]
 8006a9c:	f7fa fbf4 	bl	8001288 <_sbrk>
 8006aa0:	1c43      	adds	r3, r0, #1
 8006aa2:	d102      	bne.n	8006aaa <_sbrk_r+0x1a>
 8006aa4:	6823      	ldr	r3, [r4, #0]
 8006aa6:	b103      	cbz	r3, 8006aaa <_sbrk_r+0x1a>
 8006aa8:	602b      	str	r3, [r5, #0]
 8006aaa:	bd38      	pop	{r3, r4, r5, pc}
 8006aac:	20000b4c 	.word	0x20000b4c

08006ab0 <__malloc_lock>:
 8006ab0:	4770      	bx	lr

08006ab2 <__malloc_unlock>:
 8006ab2:	4770      	bx	lr

08006ab4 <_init>:
 8006ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ab6:	bf00      	nop
 8006ab8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006aba:	bc08      	pop	{r3}
 8006abc:	469e      	mov	lr, r3
 8006abe:	4770      	bx	lr

08006ac0 <_fini>:
 8006ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ac2:	bf00      	nop
 8006ac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ac6:	bc08      	pop	{r3}
 8006ac8:	469e      	mov	lr, r3
 8006aca:	4770      	bx	lr

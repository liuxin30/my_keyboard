
my-keyboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006908  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08006aa0  08006aa0  00016aa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b84  08006b84  00020210  2**0
                  CONTENTS
  4 .ARM          00000008  08006b84  08006b84  00016b84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006b8c  08006b8c  00020210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b8c  08006b8c  00016b8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006b90  08006b90  00016b90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  08006b94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000940  20000210  08006da4  00020210  2**2
                  ALLOC
 10 ._user_heap_stack 00000800  20000b50  08006da4  00020b50  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013b96  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000311a  00000000  00000000  00033dd6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c08  00000000  00000000  00036ef0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a80  00000000  00000000  00037af8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000195f3  00000000  00000000  00038578  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e981  00000000  00000000  00051b6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00087c36  00000000  00000000  000604ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e8122  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002fa8  00000000  00000000  000e81a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000210 	.word	0x20000210
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08006a88 	.word	0x08006a88

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000214 	.word	0x20000214
 80001d4:	08006a88 	.word	0x08006a88

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <IS_NOEVENT>:

/* Rules for No Event:
 * 1) (time == 0) to handle (keyevent_t){} as empty event
 * 2) Matrix(255, 255) to make TICK event available
 */
static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 && event.key.col == 255); }
 80004d8:	b480      	push	{r7}
 80004da:	b083      	sub	sp, #12
 80004dc:	af00      	add	r7, sp, #0
 80004de:	463b      	mov	r3, r7
 80004e0:	e883 0003 	stmia.w	r3, {r0, r1}
 80004e4:	88bb      	ldrh	r3, [r7, #4]
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d005      	beq.n	80004f6 <IS_NOEVENT+0x1e>
 80004ea:	787b      	ldrb	r3, [r7, #1]
 80004ec:	2bff      	cmp	r3, #255	; 0xff
 80004ee:	d104      	bne.n	80004fa <IS_NOEVENT+0x22>
 80004f0:	783b      	ldrb	r3, [r7, #0]
 80004f2:	2bff      	cmp	r3, #255	; 0xff
 80004f4:	d101      	bne.n	80004fa <IS_NOEVENT+0x22>
 80004f6:	2301      	movs	r3, #1
 80004f8:	e000      	b.n	80004fc <IS_NOEVENT+0x24>
 80004fa:	2300      	movs	r3, #0
 80004fc:	f003 0301 	and.w	r3, r3, #1
 8000500:	b2db      	uxtb	r3, r3
 8000502:	4618      	mov	r0, r3
 8000504:	370c      	adds	r7, #12
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr
	...

08000510 <send_keyboard_report>:
//report_keyboard_t keyboard_report = {};
static report_keyboard_t *keyboard_report = &(report_keyboard_t){};

extern USBD_HandleTypeDef hUsbDeviceFS;

void send_keyboard_report(void) {
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
//    keyboard_report->mods  = real_mods;
//    keyboard_report->mods |= weak_mods;

    USBD_HID_SendReport(&hUsbDeviceFS, keyboard_report, 8);
 8000514:	4b04      	ldr	r3, [pc, #16]	; (8000528 <send_keyboard_report+0x18>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	2208      	movs	r2, #8
 800051a:	4619      	mov	r1, r3
 800051c:	4803      	ldr	r0, [pc, #12]	; (800052c <send_keyboard_report+0x1c>)
 800051e:	f004 fc47 	bl	8004db0 <USBD_HID_SendReport>
}
 8000522:	bf00      	nop
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	20000000 	.word	0x20000000
 800052c:	20000274 	.word	0x20000274

08000530 <clear>:

void clear(void){
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
	if(press == 0)
 8000536:	4b09      	ldr	r3, [pc, #36]	; (800055c <clear+0x2c>)
 8000538:	781b      	ldrb	r3, [r3, #0]
 800053a:	2b00      	cmp	r3, #0
 800053c:	d109      	bne.n	8000552 <clear+0x22>
	{
		uint8_t report[8] = {0,0,0,0,0,0,0,0};
 800053e:	463b      	mov	r3, r7
 8000540:	2200      	movs	r2, #0
 8000542:	601a      	str	r2, [r3, #0]
 8000544:	605a      	str	r2, [r3, #4]
	    USBD_HID_SendReport(&hUsbDeviceFS, report, 8);
 8000546:	463b      	mov	r3, r7
 8000548:	2208      	movs	r2, #8
 800054a:	4619      	mov	r1, r3
 800054c:	4804      	ldr	r0, [pc, #16]	; (8000560 <clear+0x30>)
 800054e:	f004 fc2f 	bl	8004db0 <USBD_HID_SendReport>
	}


}
 8000552:	bf00      	nop
 8000554:	3708      	adds	r7, #8
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	2000022d 	.word	0x2000022d
 8000560:	20000274 	.word	0x20000274

08000564 <action_exec>:


void action_exec(keyevent_t event)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b084      	sub	sp, #16
 8000568:	af00      	add	r7, sp, #0
 800056a:	463b      	mov	r3, r7
 800056c:	e883 0003 	stmia.w	r3, {r0, r1}

    if (IS_NOEVENT(event)) { return; }
 8000570:	463b      	mov	r3, r7
 8000572:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000576:	f7ff ffaf 	bl	80004d8 <IS_NOEVENT>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d115      	bne.n	80005ac <action_exec+0x48>
    uint8_t layer = 0;
 8000580:	2300      	movs	r3, #0
 8000582:	73fb      	strb	r3, [r7, #15]

    action_t action = action_for_key(layer, event.key);
 8000584:	7bfb      	ldrb	r3, [r7, #15]
 8000586:	6839      	ldr	r1, [r7, #0]
 8000588:	4618      	mov	r0, r3
 800058a:	f000 fdbd 	bl	8001108 <action_for_key>
 800058e:	4603      	mov	r3, r0
 8000590:	81bb      	strh	r3, [r7, #12]
    //dprint("ACTION: "); debug_action(action);

    if (event.pressed) {
 8000592:	78bb      	ldrb	r3, [r7, #2]
 8000594:	2b00      	cmp	r3, #0
 8000596:	d004      	beq.n	80005a2 <action_exec+0x3e>
        register_code(action.key.code);
 8000598:	7b3b      	ldrb	r3, [r7, #12]
 800059a:	4618      	mov	r0, r3
 800059c:	f000 f80a 	bl	80005b4 <register_code>
 80005a0:	e005      	b.n	80005ae <action_exec+0x4a>

    } 
    else {
        unregister_code(action.key.code);
 80005a2:	7b3b      	ldrb	r3, [r7, #12]
 80005a4:	4618      	mov	r0, r3
 80005a6:	f000 f837 	bl	8000618 <unregister_code>
 80005aa:	e000      	b.n	80005ae <action_exec+0x4a>
    if (IS_NOEVENT(event)) { return; }
 80005ac:	bf00      	nop

    }

}
 80005ae:	3710      	adds	r7, #16
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}

080005b4 <register_code>:

/*
 * Utilities for actions.
 */
void register_code(uint8_t code)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	4603      	mov	r3, r0
 80005bc:	71fb      	strb	r3, [r7, #7]
    if (code == KC_NO) {
 80005be:	79fb      	ldrb	r3, [r7, #7]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d025      	beq.n	8000610 <register_code+0x5c>
        return;
    }
    else if IS_KEY(code) {
 80005c4:	79fb      	ldrb	r3, [r7, #7]
 80005c6:	2b03      	cmp	r3, #3
 80005c8:	d902      	bls.n	80005d0 <register_code+0x1c>
 80005ca:	79fb      	ldrb	r3, [r7, #7]
 80005cc:	2ba4      	cmp	r3, #164	; 0xa4
 80005ce:	d905      	bls.n	80005dc <register_code+0x28>
 80005d0:	79fb      	ldrb	r3, [r7, #7]
 80005d2:	2baf      	cmp	r3, #175	; 0xaf
 80005d4:	d909      	bls.n	80005ea <register_code+0x36>
 80005d6:	79fb      	ldrb	r3, [r7, #7]
 80005d8:	2bdd      	cmp	r3, #221	; 0xdd
 80005da:	d806      	bhi.n	80005ea <register_code+0x36>
        add_key(code);
 80005dc:	79fb      	ldrb	r3, [r7, #7]
 80005de:	4618      	mov	r0, r3
 80005e0:	f000 f84c 	bl	800067c <add_key>
        send_keyboard_report();
 80005e4:	f7ff ff94 	bl	8000510 <send_keyboard_report>
 80005e8:	e013      	b.n	8000612 <register_code+0x5e>
    }
    else if IS_MOD(code) {
 80005ea:	79fb      	ldrb	r3, [r7, #7]
 80005ec:	2bdf      	cmp	r3, #223	; 0xdf
 80005ee:	d910      	bls.n	8000612 <register_code+0x5e>
 80005f0:	79fb      	ldrb	r3, [r7, #7]
 80005f2:	2be7      	cmp	r3, #231	; 0xe7
 80005f4:	d80d      	bhi.n	8000612 <register_code+0x5e>
        add_mods(MOD_BIT(code));
 80005f6:	79fb      	ldrb	r3, [r7, #7]
 80005f8:	f003 0307 	and.w	r3, r3, #7
 80005fc:	2201      	movs	r2, #1
 80005fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000602:	b2db      	uxtb	r3, r3
 8000604:	4618      	mov	r0, r3
 8000606:	f000 f9e1 	bl	80009cc <add_mods>
        send_keyboard_report();
 800060a:	f7ff ff81 	bl	8000510 <send_keyboard_report>
 800060e:	e000      	b.n	8000612 <register_code+0x5e>
        return;
 8000610:	bf00      	nop
    }
}
 8000612:	3708      	adds	r7, #8
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}

08000618 <unregister_code>:

void unregister_code(uint8_t code)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
 800061e:	4603      	mov	r3, r0
 8000620:	71fb      	strb	r3, [r7, #7]
    if (code == KC_NO) {
 8000622:	79fb      	ldrb	r3, [r7, #7]
 8000624:	2b00      	cmp	r3, #0
 8000626:	d025      	beq.n	8000674 <unregister_code+0x5c>
        return;
    }
    else if IS_KEY(code) {
 8000628:	79fb      	ldrb	r3, [r7, #7]
 800062a:	2b03      	cmp	r3, #3
 800062c:	d902      	bls.n	8000634 <unregister_code+0x1c>
 800062e:	79fb      	ldrb	r3, [r7, #7]
 8000630:	2ba4      	cmp	r3, #164	; 0xa4
 8000632:	d905      	bls.n	8000640 <unregister_code+0x28>
 8000634:	79fb      	ldrb	r3, [r7, #7]
 8000636:	2baf      	cmp	r3, #175	; 0xaf
 8000638:	d909      	bls.n	800064e <unregister_code+0x36>
 800063a:	79fb      	ldrb	r3, [r7, #7]
 800063c:	2bdd      	cmp	r3, #221	; 0xdd
 800063e:	d806      	bhi.n	800064e <unregister_code+0x36>
        del_key(code);
 8000640:	79fb      	ldrb	r3, [r7, #7]
 8000642:	4618      	mov	r0, r3
 8000644:	f000 f928 	bl	8000898 <del_key>
        send_keyboard_report();
 8000648:	f7ff ff62 	bl	8000510 <send_keyboard_report>
 800064c:	e013      	b.n	8000676 <unregister_code+0x5e>
    }
    else if IS_MOD(code) {
 800064e:	79fb      	ldrb	r3, [r7, #7]
 8000650:	2bdf      	cmp	r3, #223	; 0xdf
 8000652:	d910      	bls.n	8000676 <unregister_code+0x5e>
 8000654:	79fb      	ldrb	r3, [r7, #7]
 8000656:	2be7      	cmp	r3, #231	; 0xe7
 8000658:	d80d      	bhi.n	8000676 <unregister_code+0x5e>
        del_mods(MOD_BIT(code));
 800065a:	79fb      	ldrb	r3, [r7, #7]
 800065c:	f003 0307 	and.w	r3, r3, #7
 8000660:	2201      	movs	r2, #1
 8000662:	fa02 f303 	lsl.w	r3, r2, r3
 8000666:	b2db      	uxtb	r3, r3
 8000668:	4618      	mov	r0, r3
 800066a:	f000 f9cb 	bl	8000a04 <del_mods>
        send_keyboard_report();
 800066e:	f7ff ff4f 	bl	8000510 <send_keyboard_report>
 8000672:	e000      	b.n	8000676 <unregister_code+0x5e>
        return;
 8000674:	bf00      	nop
    }
}
 8000676:	3708      	adds	r7, #8
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}

0800067c <add_key>:
 */


/* local functions */
void add_key(uint8_t code)
{
 800067c:	b480      	push	{r7}
 800067e:	b085      	sub	sp, #20
 8000680:	af00      	add	r7, sp, #0
 8000682:	4603      	mov	r3, r0
 8000684:	71fb      	strb	r3, [r7, #7]
    int8_t i = cb_head;
 8000686:	4b7f      	ldr	r3, [pc, #508]	; (8000884 <add_key+0x208>)
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	73fb      	strb	r3, [r7, #15]
    int8_t empty = -1;
 800068c:	23ff      	movs	r3, #255	; 0xff
 800068e:	73bb      	strb	r3, [r7, #14]
    if (cb_count) {
 8000690:	4b7d      	ldr	r3, [pc, #500]	; (8000888 <add_key+0x20c>)
 8000692:	f993 3000 	ldrsb.w	r3, [r3]
 8000696:	2b00      	cmp	r3, #0
 8000698:	f000 80ca 	beq.w	8000830 <add_key+0x1b4>
        do {
            if (keyboard_report->keys[i] == code) {
 800069c:	4b7b      	ldr	r3, [pc, #492]	; (800088c <add_key+0x210>)
 800069e:	681a      	ldr	r2, [r3, #0]
 80006a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006a4:	4413      	add	r3, r2
 80006a6:	789b      	ldrb	r3, [r3, #2]
 80006a8:	79fa      	ldrb	r2, [r7, #7]
 80006aa:	429a      	cmp	r2, r3
 80006ac:	f000 80e3 	beq.w	8000876 <add_key+0x1fa>
                return;
            }
            if (empty == -1 && keyboard_report->keys[i] == 0) {
 80006b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80006b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006b8:	d109      	bne.n	80006ce <add_key+0x52>
 80006ba:	4b74      	ldr	r3, [pc, #464]	; (800088c <add_key+0x210>)
 80006bc:	681a      	ldr	r2, [r3, #0]
 80006be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006c2:	4413      	add	r3, r2
 80006c4:	789b      	ldrb	r3, [r3, #2]
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d101      	bne.n	80006ce <add_key+0x52>
                empty = i;
 80006ca:	7bfb      	ldrb	r3, [r7, #15]
 80006cc:	73bb      	strb	r3, [r7, #14]
            }
            i = RO_INC(i);
 80006ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006d2:	1c5a      	adds	r2, r3, #1
 80006d4:	4b6e      	ldr	r3, [pc, #440]	; (8000890 <add_key+0x214>)
 80006d6:	fb83 3102 	smull	r3, r1, r3, r2
 80006da:	17d3      	asrs	r3, r2, #31
 80006dc:	1ac9      	subs	r1, r1, r3
 80006de:	460b      	mov	r3, r1
 80006e0:	005b      	lsls	r3, r3, #1
 80006e2:	440b      	add	r3, r1
 80006e4:	005b      	lsls	r3, r3, #1
 80006e6:	1ad1      	subs	r1, r2, r3
 80006e8:	460b      	mov	r3, r1
 80006ea:	73fb      	strb	r3, [r7, #15]
        } while (i != cb_tail);
 80006ec:	4b69      	ldr	r3, [pc, #420]	; (8000894 <add_key+0x218>)
 80006ee:	f993 3000 	ldrsb.w	r3, [r3]
 80006f2:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80006f6:	429a      	cmp	r2, r3
 80006f8:	d1d0      	bne.n	800069c <add_key+0x20>
        if (i == cb_tail) {
 80006fa:	4b66      	ldr	r3, [pc, #408]	; (8000894 <add_key+0x218>)
 80006fc:	f993 3000 	ldrsb.w	r3, [r3]
 8000700:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8000704:	429a      	cmp	r2, r3
 8000706:	f040 8093 	bne.w	8000830 <add_key+0x1b4>
            if (cb_tail == cb_head) {
 800070a:	4b62      	ldr	r3, [pc, #392]	; (8000894 <add_key+0x218>)
 800070c:	f993 2000 	ldrsb.w	r2, [r3]
 8000710:	4b5c      	ldr	r3, [pc, #368]	; (8000884 <add_key+0x208>)
 8000712:	f993 3000 	ldrsb.w	r3, [r3]
 8000716:	429a      	cmp	r2, r3
 8000718:	f040 808a 	bne.w	8000830 <add_key+0x1b4>
                // buffer is full
                if (empty == -1) {
 800071c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000720:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000724:	d11a      	bne.n	800075c <add_key+0xe0>
                    // pop head when has no empty space
                    cb_head = RO_INC(cb_head);
 8000726:	4b57      	ldr	r3, [pc, #348]	; (8000884 <add_key+0x208>)
 8000728:	f993 3000 	ldrsb.w	r3, [r3]
 800072c:	1c5a      	adds	r2, r3, #1
 800072e:	4b58      	ldr	r3, [pc, #352]	; (8000890 <add_key+0x214>)
 8000730:	fb83 3102 	smull	r3, r1, r3, r2
 8000734:	17d3      	asrs	r3, r2, #31
 8000736:	1ac9      	subs	r1, r1, r3
 8000738:	460b      	mov	r3, r1
 800073a:	005b      	lsls	r3, r3, #1
 800073c:	440b      	add	r3, r1
 800073e:	005b      	lsls	r3, r3, #1
 8000740:	1ad1      	subs	r1, r2, r3
 8000742:	b24a      	sxtb	r2, r1
 8000744:	4b4f      	ldr	r3, [pc, #316]	; (8000884 <add_key+0x208>)
 8000746:	701a      	strb	r2, [r3, #0]
                    cb_count--;
 8000748:	4b4f      	ldr	r3, [pc, #316]	; (8000888 <add_key+0x20c>)
 800074a:	f993 3000 	ldrsb.w	r3, [r3]
 800074e:	b2db      	uxtb	r3, r3
 8000750:	3b01      	subs	r3, #1
 8000752:	b2db      	uxtb	r3, r3
 8000754:	b25a      	sxtb	r2, r3
 8000756:	4b4c      	ldr	r3, [pc, #304]	; (8000888 <add_key+0x20c>)
 8000758:	701a      	strb	r2, [r3, #0]
 800075a:	e069      	b.n	8000830 <add_key+0x1b4>
                }
                else {
                    // left shift when has empty space
                    uint8_t offset = 1;
 800075c:	2301      	movs	r3, #1
 800075e:	737b      	strb	r3, [r7, #13]
                    i = RO_INC(empty);
 8000760:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000764:	1c5a      	adds	r2, r3, #1
 8000766:	4b4a      	ldr	r3, [pc, #296]	; (8000890 <add_key+0x214>)
 8000768:	fb83 3102 	smull	r3, r1, r3, r2
 800076c:	17d3      	asrs	r3, r2, #31
 800076e:	1ac9      	subs	r1, r1, r3
 8000770:	460b      	mov	r3, r1
 8000772:	005b      	lsls	r3, r3, #1
 8000774:	440b      	add	r3, r1
 8000776:	005b      	lsls	r3, r3, #1
 8000778:	1ad1      	subs	r1, r2, r3
 800077a:	460b      	mov	r3, r1
 800077c:	73fb      	strb	r3, [r7, #15]
                    do {
                        if (keyboard_report->keys[i] != 0) {
 800077e:	4b43      	ldr	r3, [pc, #268]	; (800088c <add_key+0x210>)
 8000780:	681a      	ldr	r2, [r3, #0]
 8000782:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000786:	4413      	add	r3, r2
 8000788:	789b      	ldrb	r3, [r3, #2]
 800078a:	2b00      	cmp	r3, #0
 800078c:	d023      	beq.n	80007d6 <add_key+0x15a>
                            keyboard_report->keys[empty] = keyboard_report->keys[i];
 800078e:	4b3f      	ldr	r3, [pc, #252]	; (800088c <add_key+0x210>)
 8000790:	6818      	ldr	r0, [r3, #0]
 8000792:	f997 100f 	ldrsb.w	r1, [r7, #15]
 8000796:	4b3d      	ldr	r3, [pc, #244]	; (800088c <add_key+0x210>)
 8000798:	681a      	ldr	r2, [r3, #0]
 800079a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800079e:	4401      	add	r1, r0
 80007a0:	7889      	ldrb	r1, [r1, #2]
 80007a2:	4413      	add	r3, r2
 80007a4:	460a      	mov	r2, r1
 80007a6:	709a      	strb	r2, [r3, #2]
                            keyboard_report->keys[i] = 0;
 80007a8:	4b38      	ldr	r3, [pc, #224]	; (800088c <add_key+0x210>)
 80007aa:	681a      	ldr	r2, [r3, #0]
 80007ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007b0:	4413      	add	r3, r2
 80007b2:	2200      	movs	r2, #0
 80007b4:	709a      	strb	r2, [r3, #2]
                            empty = RO_INC(empty);
 80007b6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80007ba:	1c5a      	adds	r2, r3, #1
 80007bc:	4b34      	ldr	r3, [pc, #208]	; (8000890 <add_key+0x214>)
 80007be:	fb83 3102 	smull	r3, r1, r3, r2
 80007c2:	17d3      	asrs	r3, r2, #31
 80007c4:	1ac9      	subs	r1, r1, r3
 80007c6:	460b      	mov	r3, r1
 80007c8:	005b      	lsls	r3, r3, #1
 80007ca:	440b      	add	r3, r1
 80007cc:	005b      	lsls	r3, r3, #1
 80007ce:	1ad1      	subs	r1, r2, r3
 80007d0:	460b      	mov	r3, r1
 80007d2:	73bb      	strb	r3, [r7, #14]
 80007d4:	e002      	b.n	80007dc <add_key+0x160>
                        }
                        else {
                            offset++;
 80007d6:	7b7b      	ldrb	r3, [r7, #13]
 80007d8:	3301      	adds	r3, #1
 80007da:	737b      	strb	r3, [r7, #13]
                        }
                        i = RO_INC(i);
 80007dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007e0:	1c5a      	adds	r2, r3, #1
 80007e2:	4b2b      	ldr	r3, [pc, #172]	; (8000890 <add_key+0x214>)
 80007e4:	fb83 3102 	smull	r3, r1, r3, r2
 80007e8:	17d3      	asrs	r3, r2, #31
 80007ea:	1ac9      	subs	r1, r1, r3
 80007ec:	460b      	mov	r3, r1
 80007ee:	005b      	lsls	r3, r3, #1
 80007f0:	440b      	add	r3, r1
 80007f2:	005b      	lsls	r3, r3, #1
 80007f4:	1ad1      	subs	r1, r2, r3
 80007f6:	460b      	mov	r3, r1
 80007f8:	73fb      	strb	r3, [r7, #15]
                    } while (i != cb_tail);
 80007fa:	4b26      	ldr	r3, [pc, #152]	; (8000894 <add_key+0x218>)
 80007fc:	f993 3000 	ldrsb.w	r3, [r3]
 8000800:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8000804:	429a      	cmp	r2, r3
 8000806:	d1ba      	bne.n	800077e <add_key+0x102>
                    cb_tail = RO_SUB(cb_tail, offset);
 8000808:	4b22      	ldr	r3, [pc, #136]	; (8000894 <add_key+0x218>)
 800080a:	f993 3000 	ldrsb.w	r3, [r3]
 800080e:	461a      	mov	r2, r3
 8000810:	7b7b      	ldrb	r3, [r7, #13]
 8000812:	1ad3      	subs	r3, r2, r3
 8000814:	1d9a      	adds	r2, r3, #6
 8000816:	4b1e      	ldr	r3, [pc, #120]	; (8000890 <add_key+0x214>)
 8000818:	fb83 3102 	smull	r3, r1, r3, r2
 800081c:	17d3      	asrs	r3, r2, #31
 800081e:	1ac9      	subs	r1, r1, r3
 8000820:	460b      	mov	r3, r1
 8000822:	005b      	lsls	r3, r3, #1
 8000824:	440b      	add	r3, r1
 8000826:	005b      	lsls	r3, r3, #1
 8000828:	1ad1      	subs	r1, r2, r3
 800082a:	b24a      	sxtb	r2, r1
 800082c:	4b19      	ldr	r3, [pc, #100]	; (8000894 <add_key+0x218>)
 800082e:	701a      	strb	r2, [r3, #0]
                }
            }
        }
    }
    // add to tail
    keyboard_report->keys[cb_tail] = code;
 8000830:	4b16      	ldr	r3, [pc, #88]	; (800088c <add_key+0x210>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4a17      	ldr	r2, [pc, #92]	; (8000894 <add_key+0x218>)
 8000836:	f992 2000 	ldrsb.w	r2, [r2]
 800083a:	4413      	add	r3, r2
 800083c:	79fa      	ldrb	r2, [r7, #7]
 800083e:	709a      	strb	r2, [r3, #2]
    cb_tail = RO_INC(cb_tail);
 8000840:	4b14      	ldr	r3, [pc, #80]	; (8000894 <add_key+0x218>)
 8000842:	f993 3000 	ldrsb.w	r3, [r3]
 8000846:	1c5a      	adds	r2, r3, #1
 8000848:	4b11      	ldr	r3, [pc, #68]	; (8000890 <add_key+0x214>)
 800084a:	fb83 3102 	smull	r3, r1, r3, r2
 800084e:	17d3      	asrs	r3, r2, #31
 8000850:	1ac9      	subs	r1, r1, r3
 8000852:	460b      	mov	r3, r1
 8000854:	005b      	lsls	r3, r3, #1
 8000856:	440b      	add	r3, r1
 8000858:	005b      	lsls	r3, r3, #1
 800085a:	1ad1      	subs	r1, r2, r3
 800085c:	b24a      	sxtb	r2, r1
 800085e:	4b0d      	ldr	r3, [pc, #52]	; (8000894 <add_key+0x218>)
 8000860:	701a      	strb	r2, [r3, #0]
    cb_count++;
 8000862:	4b09      	ldr	r3, [pc, #36]	; (8000888 <add_key+0x20c>)
 8000864:	f993 3000 	ldrsb.w	r3, [r3]
 8000868:	b2db      	uxtb	r3, r3
 800086a:	3301      	adds	r3, #1
 800086c:	b2db      	uxtb	r3, r3
 800086e:	b25a      	sxtb	r2, r3
 8000870:	4b05      	ldr	r3, [pc, #20]	; (8000888 <add_key+0x20c>)
 8000872:	701a      	strb	r2, [r3, #0]
 8000874:	e000      	b.n	8000878 <add_key+0x1fc>
                return;
 8000876:	bf00      	nop
}
 8000878:	3714      	adds	r7, #20
 800087a:	46bd      	mov	sp, r7
 800087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000880:	4770      	bx	lr
 8000882:	bf00      	nop
 8000884:	2000022e 	.word	0x2000022e
 8000888:	20000230 	.word	0x20000230
 800088c:	20000000 	.word	0x20000000
 8000890:	2aaaaaab 	.word	0x2aaaaaab
 8000894:	2000022f 	.word	0x2000022f

08000898 <del_key>:

void del_key(uint8_t code)
{
 8000898:	b480      	push	{r7}
 800089a:	b085      	sub	sp, #20
 800089c:	af00      	add	r7, sp, #0
 800089e:	4603      	mov	r3, r0
 80008a0:	71fb      	strb	r3, [r7, #7]
    uint8_t i = cb_head;
 80008a2:	4b45      	ldr	r3, [pc, #276]	; (80009b8 <del_key+0x120>)
 80008a4:	f993 3000 	ldrsb.w	r3, [r3]
 80008a8:	73fb      	strb	r3, [r7, #15]
    if (cb_count) {
 80008aa:	4b44      	ldr	r3, [pc, #272]	; (80009bc <del_key+0x124>)
 80008ac:	f993 3000 	ldrsb.w	r3, [r3]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d07a      	beq.n	80009aa <del_key+0x112>
        do {
            if (keyboard_report->keys[i] == code) {
 80008b4:	4b42      	ldr	r3, [pc, #264]	; (80009c0 <del_key+0x128>)
 80008b6:	681a      	ldr	r2, [r3, #0]
 80008b8:	7bfb      	ldrb	r3, [r7, #15]
 80008ba:	4413      	add	r3, r2
 80008bc:	789b      	ldrb	r3, [r3, #2]
 80008be:	79fa      	ldrb	r2, [r7, #7]
 80008c0:	429a      	cmp	r2, r3
 80008c2:	d15c      	bne.n	800097e <del_key+0xe6>
                keyboard_report->keys[i] = 0;
 80008c4:	4b3e      	ldr	r3, [pc, #248]	; (80009c0 <del_key+0x128>)
 80008c6:	681a      	ldr	r2, [r3, #0]
 80008c8:	7bfb      	ldrb	r3, [r7, #15]
 80008ca:	4413      	add	r3, r2
 80008cc:	2200      	movs	r2, #0
 80008ce:	709a      	strb	r2, [r3, #2]
                cb_count--;
 80008d0:	4b3a      	ldr	r3, [pc, #232]	; (80009bc <del_key+0x124>)
 80008d2:	f993 3000 	ldrsb.w	r3, [r3]
 80008d6:	b2db      	uxtb	r3, r3
 80008d8:	3b01      	subs	r3, #1
 80008da:	b2db      	uxtb	r3, r3
 80008dc:	b25a      	sxtb	r2, r3
 80008de:	4b37      	ldr	r3, [pc, #220]	; (80009bc <del_key+0x124>)
 80008e0:	701a      	strb	r2, [r3, #0]
                if (cb_count == 0) {
 80008e2:	4b36      	ldr	r3, [pc, #216]	; (80009bc <del_key+0x124>)
 80008e4:	f993 3000 	ldrsb.w	r3, [r3]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d107      	bne.n	80008fc <del_key+0x64>
                    // reset head and tail
                    cb_tail = cb_head = 0;
 80008ec:	4b32      	ldr	r3, [pc, #200]	; (80009b8 <del_key+0x120>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	701a      	strb	r2, [r3, #0]
 80008f2:	4b31      	ldr	r3, [pc, #196]	; (80009b8 <del_key+0x120>)
 80008f4:	f993 2000 	ldrsb.w	r2, [r3]
 80008f8:	4b32      	ldr	r3, [pc, #200]	; (80009c4 <del_key+0x12c>)
 80008fa:	701a      	strb	r2, [r3, #0]
                }
                if (i == RO_DEC(cb_tail)) {
 80008fc:	7bf8      	ldrb	r0, [r7, #15]
 80008fe:	4b31      	ldr	r3, [pc, #196]	; (80009c4 <del_key+0x12c>)
 8000900:	f993 3000 	ldrsb.w	r3, [r3]
 8000904:	1d59      	adds	r1, r3, #5
 8000906:	4b30      	ldr	r3, [pc, #192]	; (80009c8 <del_key+0x130>)
 8000908:	fb83 3201 	smull	r3, r2, r3, r1
 800090c:	17cb      	asrs	r3, r1, #31
 800090e:	1ad2      	subs	r2, r2, r3
 8000910:	4613      	mov	r3, r2
 8000912:	005b      	lsls	r3, r3, #1
 8000914:	4413      	add	r3, r2
 8000916:	005b      	lsls	r3, r3, #1
 8000918:	1aca      	subs	r2, r1, r3
 800091a:	4290      	cmp	r0, r2
 800091c:	d144      	bne.n	80009a8 <del_key+0x110>
                    // left shift when next to tail
                    do {
                        cb_tail = RO_DEC(cb_tail);
 800091e:	4b29      	ldr	r3, [pc, #164]	; (80009c4 <del_key+0x12c>)
 8000920:	f993 3000 	ldrsb.w	r3, [r3]
 8000924:	1d5a      	adds	r2, r3, #5
 8000926:	4b28      	ldr	r3, [pc, #160]	; (80009c8 <del_key+0x130>)
 8000928:	fb83 3102 	smull	r3, r1, r3, r2
 800092c:	17d3      	asrs	r3, r2, #31
 800092e:	1ac9      	subs	r1, r1, r3
 8000930:	460b      	mov	r3, r1
 8000932:	005b      	lsls	r3, r3, #1
 8000934:	440b      	add	r3, r1
 8000936:	005b      	lsls	r3, r3, #1
 8000938:	1ad1      	subs	r1, r2, r3
 800093a:	b24a      	sxtb	r2, r1
 800093c:	4b21      	ldr	r3, [pc, #132]	; (80009c4 <del_key+0x12c>)
 800093e:	701a      	strb	r2, [r3, #0]
                        if (keyboard_report->keys[RO_DEC(cb_tail)] != 0) {
 8000940:	4b1f      	ldr	r3, [pc, #124]	; (80009c0 <del_key+0x128>)
 8000942:	6818      	ldr	r0, [r3, #0]
 8000944:	4b1f      	ldr	r3, [pc, #124]	; (80009c4 <del_key+0x12c>)
 8000946:	f993 3000 	ldrsb.w	r3, [r3]
 800094a:	1d59      	adds	r1, r3, #5
 800094c:	4b1e      	ldr	r3, [pc, #120]	; (80009c8 <del_key+0x130>)
 800094e:	fb83 3201 	smull	r3, r2, r3, r1
 8000952:	17cb      	asrs	r3, r1, #31
 8000954:	1ad2      	subs	r2, r2, r3
 8000956:	4613      	mov	r3, r2
 8000958:	005b      	lsls	r3, r3, #1
 800095a:	4413      	add	r3, r2
 800095c:	005b      	lsls	r3, r3, #1
 800095e:	1aca      	subs	r2, r1, r3
 8000960:	1883      	adds	r3, r0, r2
 8000962:	789b      	ldrb	r3, [r3, #2]
 8000964:	2b00      	cmp	r3, #0
 8000966:	d108      	bne.n	800097a <del_key+0xe2>
                            break;
                        }
                    } while (cb_tail != cb_head);
 8000968:	4b16      	ldr	r3, [pc, #88]	; (80009c4 <del_key+0x12c>)
 800096a:	f993 2000 	ldrsb.w	r2, [r3]
 800096e:	4b12      	ldr	r3, [pc, #72]	; (80009b8 <del_key+0x120>)
 8000970:	f993 3000 	ldrsb.w	r3, [r3]
 8000974:	429a      	cmp	r2, r3
 8000976:	d1d2      	bne.n	800091e <del_key+0x86>
                }
                break;
 8000978:	e016      	b.n	80009a8 <del_key+0x110>
                            break;
 800097a:	bf00      	nop
                break;
 800097c:	e014      	b.n	80009a8 <del_key+0x110>
            }
            i = RO_INC(i);
 800097e:	7bfb      	ldrb	r3, [r7, #15]
 8000980:	1c5a      	adds	r2, r3, #1
 8000982:	4b11      	ldr	r3, [pc, #68]	; (80009c8 <del_key+0x130>)
 8000984:	fb83 3102 	smull	r3, r1, r3, r2
 8000988:	17d3      	asrs	r3, r2, #31
 800098a:	1ac9      	subs	r1, r1, r3
 800098c:	460b      	mov	r3, r1
 800098e:	005b      	lsls	r3, r3, #1
 8000990:	440b      	add	r3, r1
 8000992:	005b      	lsls	r3, r3, #1
 8000994:	1ad1      	subs	r1, r2, r3
 8000996:	460b      	mov	r3, r1
 8000998:	73fb      	strb	r3, [r7, #15]
        } while (i != cb_tail);
 800099a:	7bfb      	ldrb	r3, [r7, #15]
 800099c:	4a09      	ldr	r2, [pc, #36]	; (80009c4 <del_key+0x12c>)
 800099e:	f992 2000 	ldrsb.w	r2, [r2]
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d186      	bne.n	80008b4 <del_key+0x1c>
    }
}
 80009a6:	e000      	b.n	80009aa <del_key+0x112>
                break;
 80009a8:	bf00      	nop
}
 80009aa:	bf00      	nop
 80009ac:	3714      	adds	r7, #20
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	2000022e 	.word	0x2000022e
 80009bc:	20000230 	.word	0x20000230
 80009c0:	20000000 	.word	0x20000000
 80009c4:	2000022f 	.word	0x2000022f
 80009c8:	2aaaaaab 	.word	0x2aaaaaab

080009cc <add_mods>:


/* modifier */
uint8_t get_mods(void) { return real_mods; }
void add_mods(uint8_t mods) {
 80009cc:	b480      	push	{r7}
 80009ce:	b083      	sub	sp, #12
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	4603      	mov	r3, r0
 80009d4:	71fb      	strb	r3, [r7, #7]
	real_mods |= mods;
 80009d6:	4b09      	ldr	r3, [pc, #36]	; (80009fc <add_mods+0x30>)
 80009d8:	781a      	ldrb	r2, [r3, #0]
 80009da:	79fb      	ldrb	r3, [r7, #7]
 80009dc:	4313      	orrs	r3, r2
 80009de:	b2da      	uxtb	r2, r3
 80009e0:	4b06      	ldr	r3, [pc, #24]	; (80009fc <add_mods+0x30>)
 80009e2:	701a      	strb	r2, [r3, #0]
	keyboard_report->mods  = real_mods;
 80009e4:	4b06      	ldr	r3, [pc, #24]	; (8000a00 <add_mods+0x34>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4a04      	ldr	r2, [pc, #16]	; (80009fc <add_mods+0x30>)
 80009ea:	7812      	ldrb	r2, [r2, #0]
 80009ec:	701a      	strb	r2, [r3, #0]
}
 80009ee:	bf00      	nop
 80009f0:	370c      	adds	r7, #12
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop
 80009fc:	2000022c 	.word	0x2000022c
 8000a00:	20000000 	.word	0x20000000

08000a04 <del_mods>:
void del_mods(uint8_t mods) {
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	71fb      	strb	r3, [r7, #7]
	real_mods &= ~mods;
 8000a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a12:	43db      	mvns	r3, r3
 8000a14:	b25a      	sxtb	r2, r3
 8000a16:	4b09      	ldr	r3, [pc, #36]	; (8000a3c <del_mods+0x38>)
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	b25b      	sxtb	r3, r3
 8000a1c:	4013      	ands	r3, r2
 8000a1e:	b25b      	sxtb	r3, r3
 8000a20:	b2da      	uxtb	r2, r3
 8000a22:	4b06      	ldr	r3, [pc, #24]	; (8000a3c <del_mods+0x38>)
 8000a24:	701a      	strb	r2, [r3, #0]
	keyboard_report->mods  = real_mods;
 8000a26:	4b06      	ldr	r3, [pc, #24]	; (8000a40 <del_mods+0x3c>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	4a04      	ldr	r2, [pc, #16]	; (8000a3c <del_mods+0x38>)
 8000a2c:	7812      	ldrb	r2, [r2, #0]
 8000a2e:	701a      	strb	r2, [r3, #0]
}
 8000a30:	bf00      	nop
 8000a32:	370c      	adds	r7, #12
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr
 8000a3c:	2000022c 	.word	0x2000022c
 8000a40:	20000000 	.word	0x20000000

08000a44 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b08a      	sub	sp, #40	; 0x28
 8000a48:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a4a:	f107 0314 	add.w	r3, r7, #20
 8000a4e:	2200      	movs	r2, #0
 8000a50:	601a      	str	r2, [r3, #0]
 8000a52:	605a      	str	r2, [r3, #4]
 8000a54:	609a      	str	r2, [r3, #8]
 8000a56:	60da      	str	r2, [r3, #12]
 8000a58:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	613b      	str	r3, [r7, #16]
 8000a5e:	4b51      	ldr	r3, [pc, #324]	; (8000ba4 <MX_GPIO_Init+0x160>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	4a50      	ldr	r2, [pc, #320]	; (8000ba4 <MX_GPIO_Init+0x160>)
 8000a64:	f043 0304 	orr.w	r3, r3, #4
 8000a68:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6a:	4b4e      	ldr	r3, [pc, #312]	; (8000ba4 <MX_GPIO_Init+0x160>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	f003 0304 	and.w	r3, r3, #4
 8000a72:	613b      	str	r3, [r7, #16]
 8000a74:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	60fb      	str	r3, [r7, #12]
 8000a7a:	4b4a      	ldr	r3, [pc, #296]	; (8000ba4 <MX_GPIO_Init+0x160>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	4a49      	ldr	r2, [pc, #292]	; (8000ba4 <MX_GPIO_Init+0x160>)
 8000a80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a84:	6313      	str	r3, [r2, #48]	; 0x30
 8000a86:	4b47      	ldr	r3, [pc, #284]	; (8000ba4 <MX_GPIO_Init+0x160>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a8e:	60fb      	str	r3, [r7, #12]
 8000a90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a92:	2300      	movs	r3, #0
 8000a94:	60bb      	str	r3, [r7, #8]
 8000a96:	4b43      	ldr	r3, [pc, #268]	; (8000ba4 <MX_GPIO_Init+0x160>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	4a42      	ldr	r2, [pc, #264]	; (8000ba4 <MX_GPIO_Init+0x160>)
 8000a9c:	f043 0301 	orr.w	r3, r3, #1
 8000aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa2:	4b40      	ldr	r3, [pc, #256]	; (8000ba4 <MX_GPIO_Init+0x160>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	f003 0301 	and.w	r3, r3, #1
 8000aaa:	60bb      	str	r3, [r7, #8]
 8000aac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aae:	2300      	movs	r3, #0
 8000ab0:	607b      	str	r3, [r7, #4]
 8000ab2:	4b3c      	ldr	r3, [pc, #240]	; (8000ba4 <MX_GPIO_Init+0x160>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	4a3b      	ldr	r2, [pc, #236]	; (8000ba4 <MX_GPIO_Init+0x160>)
 8000ab8:	f043 0302 	orr.w	r3, r3, #2
 8000abc:	6313      	str	r3, [r2, #48]	; 0x30
 8000abe:	4b39      	ldr	r3, [pc, #228]	; (8000ba4 <MX_GPIO_Init+0x160>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	f003 0302 	and.w	r3, r3, #2
 8000ac6:	607b      	str	r3, [r7, #4]
 8000ac8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ROW4_Pin|ROW3_Pin|ROW2_Pin|ROW1_Pin 
 8000aca:	2200      	movs	r2, #0
 8000acc:	211f      	movs	r1, #31
 8000ace:	4836      	ldr	r0, [pc, #216]	; (8000ba8 <MX_GPIO_Init+0x164>)
 8000ad0:	f000 ff70 	bl	80019b4 <HAL_GPIO_WritePin>
                          |ROW0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAPLED_GPIO_Port, CAPLED_Pin, GPIO_PIN_RESET);
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ada:	4834      	ldr	r0, [pc, #208]	; (8000bac <MX_GPIO_Init+0x168>)
 8000adc:	f000 ff6a 	bl	80019b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000ae0:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000ae4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ae6:	2303      	movs	r3, #3
 8000ae8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aea:	2300      	movs	r3, #0
 8000aec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aee:	f107 0314 	add.w	r3, r7, #20
 8000af2:	4619      	mov	r1, r3
 8000af4:	482e      	ldr	r0, [pc, #184]	; (8000bb0 <MX_GPIO_Init+0x16c>)
 8000af6:	f000 fdc3 	bl	8001680 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin 
                           PAPin */
  GPIO_InitStruct.Pin = ROW4_Pin|ROW3_Pin|ROW2_Pin|ROW1_Pin 
 8000afa:	231f      	movs	r3, #31
 8000afc:	617b      	str	r3, [r7, #20]
                          |ROW0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000afe:	2301      	movs	r3, #1
 8000b00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b02:	2302      	movs	r3, #2
 8000b04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b06:	2300      	movs	r3, #0
 8000b08:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b0a:	f107 0314 	add.w	r3, r7, #20
 8000b0e:	4619      	mov	r1, r3
 8000b10:	4825      	ldr	r0, [pc, #148]	; (8000ba8 <MX_GPIO_Init+0x164>)
 8000b12:	f000 fdb5 	bl	8001680 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = COL0_Pin|COL1_Pin|COL2_Pin;
 8000b16:	23e0      	movs	r3, #224	; 0xe0
 8000b18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b1e:	2302      	movs	r3, #2
 8000b20:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b22:	f107 0314 	add.w	r3, r7, #20
 8000b26:	4619      	mov	r1, r3
 8000b28:	481f      	ldr	r0, [pc, #124]	; (8000ba8 <MX_GPIO_Init+0x164>)
 8000b2a:	f000 fda9 	bl	8001680 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin 
                           PBPin PBPin PBPin PBPin 
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = COL3_Pin|COL4_Pin|COL5_Pin|COL6_Pin 
 8000b2e:	f248 53ff 	movw	r3, #34303	; 0x85ff
 8000b32:	617b      	str	r3, [r7, #20]
                          |COL7_Pin|COL8_Pin|COL9_Pin|COL10_Pin 
                          |COL11_Pin|COL12_Pin|COL13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b34:	2300      	movs	r3, #0
 8000b36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b38:	2302      	movs	r3, #2
 8000b3a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b3c:	f107 0314 	add.w	r3, r7, #20
 8000b40:	4619      	mov	r1, r3
 8000b42:	481a      	ldr	r0, [pc, #104]	; (8000bac <MX_GPIO_Init+0x168>)
 8000b44:	f000 fd9c 	bl	8001680 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8000b48:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000b4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b4e:	2303      	movs	r3, #3
 8000b50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b52:	2300      	movs	r3, #0
 8000b54:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b56:	f107 0314 	add.w	r3, r7, #20
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	4813      	ldr	r0, [pc, #76]	; (8000bac <MX_GPIO_Init+0x168>)
 8000b5e:	f000 fd8f 	bl	8001680 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15;
 8000b62:	f44f 4307 	mov.w	r3, #34560	; 0x8700
 8000b66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b68:	2303      	movs	r3, #3
 8000b6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b70:	f107 0314 	add.w	r3, r7, #20
 8000b74:	4619      	mov	r1, r3
 8000b76:	480c      	ldr	r0, [pc, #48]	; (8000ba8 <MX_GPIO_Init+0x164>)
 8000b78:	f000 fd82 	bl	8001680 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CAPLED_Pin;
 8000b7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b82:	2301      	movs	r3, #1
 8000b84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b86:	2302      	movs	r3, #2
 8000b88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CAPLED_GPIO_Port, &GPIO_InitStruct);
 8000b8e:	f107 0314 	add.w	r3, r7, #20
 8000b92:	4619      	mov	r1, r3
 8000b94:	4805      	ldr	r0, [pc, #20]	; (8000bac <MX_GPIO_Init+0x168>)
 8000b96:	f000 fd73 	bl	8001680 <HAL_GPIO_Init>

}
 8000b9a:	bf00      	nop
 8000b9c:	3728      	adds	r7, #40	; 0x28
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	40023800 	.word	0x40023800
 8000ba8:	40020000 	.word	0x40020000
 8000bac:	40020400 	.word	0x40020400
 8000bb0:	40020800 	.word	0x40020800

08000bb4 <keyboard_init>:
{
    matrix_setup();
}

void keyboard_init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
    matrix_init();
 8000bb8:	f000 f8e6 	bl	8000d88 <matrix_init>
}
 8000bbc:	bf00      	nop
 8000bbe:	bd80      	pop	{r7, pc}

08000bc0 <keyboard_task>:
/*
 * Do keyboard routine jobs: scan matrix, light LEDs, ...
 * This is repeatedly called as fast as possible.
 */
void keyboard_task(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b084      	sub	sp, #16
 8000bc4:	af00      	add	r7, sp, #0
	static matrix_row_t matrix_prev[MATRIX_ROWS];
    matrix_row_t matrix_row = 0;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	813b      	strh	r3, [r7, #8]
    matrix_row_t matrix_change = 0;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	80fb      	strh	r3, [r7, #6]
    uint8_t is_null = 0;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	73fb      	strb	r3, [r7, #15]

    matrix_scan();
 8000bd2:	f000 f8f9 	bl	8000dc8 <matrix_scan>
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	73bb      	strb	r3, [r7, #14]
 8000bda:	e046      	b.n	8000c6a <keyboard_task+0xaa>
        matrix_row = matrix_get_row(r);
 8000bdc:	7bbb      	ldrb	r3, [r7, #14]
 8000bde:	4618      	mov	r0, r3
 8000be0:	f000 f952 	bl	8000e88 <matrix_get_row>
 8000be4:	4603      	mov	r3, r0
 8000be6:	813b      	strh	r3, [r7, #8]
        matrix_change = matrix_row ^ matrix_prev[r];
 8000be8:	7bbb      	ldrb	r3, [r7, #14]
 8000bea:	4a26      	ldr	r2, [pc, #152]	; (8000c84 <keyboard_task+0xc4>)
 8000bec:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000bf0:	893b      	ldrh	r3, [r7, #8]
 8000bf2:	4053      	eors	r3, r2
 8000bf4:	80fb      	strh	r3, [r7, #6]
        if (matrix_change) {
 8000bf6:	88fb      	ldrh	r3, [r7, #6]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d02d      	beq.n	8000c58 <keyboard_task+0x98>
        	matrix_prev[r] = matrix_row;
 8000bfc:	7bbb      	ldrb	r3, [r7, #14]
 8000bfe:	4921      	ldr	r1, [pc, #132]	; (8000c84 <keyboard_task+0xc4>)
 8000c00:	893a      	ldrh	r2, [r7, #8]
 8000c02:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
            matrix_row_t col_mask = 1;
 8000c06:	2301      	movs	r3, #1
 8000c08:	81bb      	strh	r3, [r7, #12]
            for (uint8_t c = 0; c < MATRIX_COLS; c++, col_mask <<= 1 ) {
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	72fb      	strb	r3, [r7, #11]
 8000c0e:	e020      	b.n	8000c52 <keyboard_task+0x92>
                if (matrix_change & col_mask) {
 8000c10:	88fa      	ldrh	r2, [r7, #6]
 8000c12:	89bb      	ldrh	r3, [r7, #12]
 8000c14:	4013      	ands	r3, r2
 8000c16:	b29b      	uxth	r3, r3
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d014      	beq.n	8000c46 <keyboard_task+0x86>
                    keyevent_t e = (keyevent_t){
 8000c1c:	7afb      	ldrb	r3, [r7, #11]
 8000c1e:	703b      	strb	r3, [r7, #0]
 8000c20:	7bbb      	ldrb	r3, [r7, #14]
 8000c22:	707b      	strb	r3, [r7, #1]
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & col_mask),
 8000c24:	893a      	ldrh	r2, [r7, #8]
 8000c26:	89bb      	ldrh	r3, [r7, #12]
 8000c28:	4013      	ands	r3, r2
 8000c2a:	b29b      	uxth	r3, r3
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	bf14      	ite	ne
 8000c30:	2301      	movne	r3, #1
 8000c32:	2300      	moveq	r3, #0
 8000c34:	b2db      	uxtb	r3, r3
                    keyevent_t e = (keyevent_t){
 8000c36:	70bb      	strb	r3, [r7, #2]
 8000c38:	2301      	movs	r3, #1
 8000c3a:	80bb      	strh	r3, [r7, #4]
                        .time = 1/* time should not be 0 */
                    };
                    action_exec(e);
 8000c3c:	463b      	mov	r3, r7
 8000c3e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000c42:	f7ff fc8f 	bl	8000564 <action_exec>
            for (uint8_t c = 0; c < MATRIX_COLS; c++, col_mask <<= 1 ) {
 8000c46:	7afb      	ldrb	r3, [r7, #11]
 8000c48:	3301      	adds	r3, #1
 8000c4a:	72fb      	strb	r3, [r7, #11]
 8000c4c:	89bb      	ldrh	r3, [r7, #12]
 8000c4e:	005b      	lsls	r3, r3, #1
 8000c50:	81bb      	strh	r3, [r7, #12]
 8000c52:	7afb      	ldrb	r3, [r7, #11]
 8000c54:	2b0d      	cmp	r3, #13
 8000c56:	d9db      	bls.n	8000c10 <keyboard_task+0x50>
                    // process a key per task call
                    //goto MATRIX_LOOP_END;
                }
            }
        }
        if(matrix_row == 0){
 8000c58:	893b      	ldrh	r3, [r7, #8]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d102      	bne.n	8000c64 <keyboard_task+0xa4>
        	is_null++;
 8000c5e:	7bfb      	ldrb	r3, [r7, #15]
 8000c60:	3301      	adds	r3, #1
 8000c62:	73fb      	strb	r3, [r7, #15]
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
 8000c64:	7bbb      	ldrb	r3, [r7, #14]
 8000c66:	3301      	adds	r3, #1
 8000c68:	73bb      	strb	r3, [r7, #14]
 8000c6a:	7bbb      	ldrb	r3, [r7, #14]
 8000c6c:	2b04      	cmp	r3, #4
 8000c6e:	d9b5      	bls.n	8000bdc <keyboard_task+0x1c>
        }
    }
    if(is_null == 5){
 8000c70:	7bfb      	ldrb	r3, [r7, #15]
 8000c72:	2b05      	cmp	r3, #5
 8000c74:	d101      	bne.n	8000c7a <keyboard_task+0xba>
    	clear();
 8000c76:	f7ff fc5b 	bl	8000530 <clear>
    }
    // call with pseudo tick event when no real key event.
    //action_exec(TICK);

}
 8000c7a:	bf00      	nop
 8000c7c:	3710      	adds	r7, #16
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	2000023c 	.word	0x2000023c

08000c88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c8c:	f000 fb52 	bl	8001334 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c90:	f000 f80a 	bl	8000ca8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c94:	f7ff fed6 	bl	8000a44 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000c98:	f005 f9e6 	bl	8006068 <MX_USB_DEVICE_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  keyboard_init();
 8000c9c:	f7ff ff8a 	bl	8000bb4 <keyboard_init>
	  keyboard_task();
 8000ca0:	f7ff ff8e 	bl	8000bc0 <keyboard_task>
	  keyboard_init();
 8000ca4:	e7fa      	b.n	8000c9c <main+0x14>
	...

08000ca8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b094      	sub	sp, #80	; 0x50
 8000cac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cae:	f107 0320 	add.w	r3, r7, #32
 8000cb2:	2230      	movs	r2, #48	; 0x30
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f005 fe24 	bl	8006904 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cbc:	f107 030c 	add.w	r3, r7, #12
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]
 8000cc4:	605a      	str	r2, [r3, #4]
 8000cc6:	609a      	str	r2, [r3, #8]
 8000cc8:	60da      	str	r2, [r3, #12]
 8000cca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ccc:	2300      	movs	r3, #0
 8000cce:	60bb      	str	r3, [r7, #8]
 8000cd0:	4b27      	ldr	r3, [pc, #156]	; (8000d70 <SystemClock_Config+0xc8>)
 8000cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd4:	4a26      	ldr	r2, [pc, #152]	; (8000d70 <SystemClock_Config+0xc8>)
 8000cd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cda:	6413      	str	r3, [r2, #64]	; 0x40
 8000cdc:	4b24      	ldr	r3, [pc, #144]	; (8000d70 <SystemClock_Config+0xc8>)
 8000cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ce4:	60bb      	str	r3, [r7, #8]
 8000ce6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ce8:	2300      	movs	r3, #0
 8000cea:	607b      	str	r3, [r7, #4]
 8000cec:	4b21      	ldr	r3, [pc, #132]	; (8000d74 <SystemClock_Config+0xcc>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a20      	ldr	r2, [pc, #128]	; (8000d74 <SystemClock_Config+0xcc>)
 8000cf2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000cf6:	6013      	str	r3, [r2, #0]
 8000cf8:	4b1e      	ldr	r3, [pc, #120]	; (8000d74 <SystemClock_Config+0xcc>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d00:	607b      	str	r3, [r7, #4]
 8000d02:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d04:	2301      	movs	r3, #1
 8000d06:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d08:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d0c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d0e:	2302      	movs	r3, #2
 8000d10:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d12:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d16:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000d18:	2319      	movs	r3, #25
 8000d1a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000d1c:	23c0      	movs	r3, #192	; 0xc0
 8000d1e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d20:	2302      	movs	r3, #2
 8000d22:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d24:	2304      	movs	r3, #4
 8000d26:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d28:	f107 0320 	add.w	r3, r7, #32
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f001 ffc5 	bl	8002cbc <HAL_RCC_OscConfig>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000d38:	f000 f81e 	bl	8000d78 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d3c:	230f      	movs	r3, #15
 8000d3e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d40:	2302      	movs	r3, #2
 8000d42:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d44:	2300      	movs	r3, #0
 8000d46:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d4c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000d52:	f107 030c 	add.w	r3, r7, #12
 8000d56:	2103      	movs	r1, #3
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f002 fa1f 	bl	800319c <HAL_RCC_ClockConfig>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000d64:	f000 f808 	bl	8000d78 <Error_Handler>
  }
}
 8000d68:	bf00      	nop
 8000d6a:	3750      	adds	r7, #80	; 0x50
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	40023800 	.word	0x40023800
 8000d74:	40007000 	.word	0x40007000

08000d78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000d7c:	bf00      	nop
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
	...

08000d88 <matrix_init>:
#define LED_OFF()   do { palClearPad(GPIOB, 1); } while (0)
#define LED_TGL()   do { palTogglePad(GPIOB, 1); } while (0)
#endif

void matrix_init(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b083      	sub	sp, #12
 8000d8c:	af00      	add	r7, sp, #0
    // initialize row and col
//    init_rows();
//    init_cols();

    // initialize matrix state: all keys off
    for (uint8_t i=0; i < MATRIX_ROWS; i++) {
 8000d8e:	2300      	movs	r3, #0
 8000d90:	71fb      	strb	r3, [r7, #7]
 8000d92:	e00c      	b.n	8000dae <matrix_init+0x26>
        matrix[i] = 0;
 8000d94:	79fb      	ldrb	r3, [r7, #7]
 8000d96:	4a0a      	ldr	r2, [pc, #40]	; (8000dc0 <matrix_init+0x38>)
 8000d98:	2100      	movs	r1, #0
 8000d9a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        matrix_debouncing[i] = 0;
 8000d9e:	79fb      	ldrb	r3, [r7, #7]
 8000da0:	4a08      	ldr	r2, [pc, #32]	; (8000dc4 <matrix_init+0x3c>)
 8000da2:	2100      	movs	r1, #0
 8000da4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (uint8_t i=0; i < MATRIX_ROWS; i++) {
 8000da8:	79fb      	ldrb	r3, [r7, #7]
 8000daa:	3301      	adds	r3, #1
 8000dac:	71fb      	strb	r3, [r7, #7]
 8000dae:	79fb      	ldrb	r3, [r7, #7]
 8000db0:	2b04      	cmp	r3, #4
 8000db2:	d9ef      	bls.n	8000d94 <matrix_init+0xc>
    }


}
 8000db4:	bf00      	nop
 8000db6:	370c      	adds	r7, #12
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr
 8000dc0:	20000248 	.word	0x20000248
 8000dc4:	20000254 	.word	0x20000254

08000dc8 <matrix_scan>:

uint8_t matrix_scan(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0

    for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
 8000dce:	2300      	movs	r3, #0
 8000dd0:	71fb      	strb	r3, [r7, #7]
 8000dd2:	e028      	b.n	8000e26 <matrix_scan+0x5e>
    	select_row(i);
 8000dd4:	79fb      	ldrb	r3, [r7, #7]
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f000 f95c 	bl	8001094 <select_row>
    	HAL_Delay(1); // without this wait read unstable value.
 8000ddc:	2001      	movs	r0, #1
 8000dde:	f000 fb1b 	bl	8001418 <HAL_Delay>
        matrix_row_t cols = read_cols();
 8000de2:	f000 f863 	bl	8000eac <read_cols>
 8000de6:	4603      	mov	r3, r0
 8000de8:	80bb      	strh	r3, [r7, #4]
        if (matrix_debouncing[i] != cols) {
 8000dea:	79fb      	ldrb	r3, [r7, #7]
 8000dec:	4a23      	ldr	r2, [pc, #140]	; (8000e7c <matrix_scan+0xb4>)
 8000dee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000df2:	88ba      	ldrh	r2, [r7, #4]
 8000df4:	429a      	cmp	r2, r3
 8000df6:	d00f      	beq.n	8000e18 <matrix_scan+0x50>
            matrix_debouncing[i] = cols;
 8000df8:	79fb      	ldrb	r3, [r7, #7]
 8000dfa:	4920      	ldr	r1, [pc, #128]	; (8000e7c <matrix_scan+0xb4>)
 8000dfc:	88ba      	ldrh	r2, [r7, #4]
 8000dfe:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
            matrix[i] = matrix_debouncing[i];
 8000e02:	79fa      	ldrb	r2, [r7, #7]
 8000e04:	79fb      	ldrb	r3, [r7, #7]
 8000e06:	491d      	ldr	r1, [pc, #116]	; (8000e7c <matrix_scan+0xb4>)
 8000e08:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8000e0c:	4a1c      	ldr	r2, [pc, #112]	; (8000e80 <matrix_scan+0xb8>)
 8000e0e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

            debouncing = DEBOUNCE;
 8000e12:	4b1c      	ldr	r3, [pc, #112]	; (8000e84 <matrix_scan+0xbc>)
 8000e14:	2205      	movs	r2, #5
 8000e16:	701a      	strb	r2, [r3, #0]
        }
        unselect_rows(i);
 8000e18:	79fb      	ldrb	r3, [r7, #7]
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f000 f900 	bl	8001020 <unselect_rows>
    for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
 8000e20:	79fb      	ldrb	r3, [r7, #7]
 8000e22:	3301      	adds	r3, #1
 8000e24:	71fb      	strb	r3, [r7, #7]
 8000e26:	79fb      	ldrb	r3, [r7, #7]
 8000e28:	2b04      	cmp	r3, #4
 8000e2a:	d9d3      	bls.n	8000dd4 <matrix_scan+0xc>
    }

    if (debouncing) {
 8000e2c:	4b15      	ldr	r3, [pc, #84]	; (8000e84 <matrix_scan+0xbc>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d01e      	beq.n	8000e72 <matrix_scan+0xaa>
        if (--debouncing) {
 8000e34:	4b13      	ldr	r3, [pc, #76]	; (8000e84 <matrix_scan+0xbc>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	3b01      	subs	r3, #1
 8000e3a:	b2da      	uxtb	r2, r3
 8000e3c:	4b11      	ldr	r3, [pc, #68]	; (8000e84 <matrix_scan+0xbc>)
 8000e3e:	701a      	strb	r2, [r3, #0]
 8000e40:	4b10      	ldr	r3, [pc, #64]	; (8000e84 <matrix_scan+0xbc>)
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d003      	beq.n	8000e50 <matrix_scan+0x88>
        	HAL_Delay(1);
 8000e48:	2001      	movs	r0, #1
 8000e4a:	f000 fae5 	bl	8001418 <HAL_Delay>
 8000e4e:	e010      	b.n	8000e72 <matrix_scan+0xaa>
        } else {
            for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
 8000e50:	2300      	movs	r3, #0
 8000e52:	71bb      	strb	r3, [r7, #6]
 8000e54:	e00a      	b.n	8000e6c <matrix_scan+0xa4>
                matrix[i] = matrix_debouncing[i];
 8000e56:	79ba      	ldrb	r2, [r7, #6]
 8000e58:	79bb      	ldrb	r3, [r7, #6]
 8000e5a:	4908      	ldr	r1, [pc, #32]	; (8000e7c <matrix_scan+0xb4>)
 8000e5c:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8000e60:	4a07      	ldr	r2, [pc, #28]	; (8000e80 <matrix_scan+0xb8>)
 8000e62:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
 8000e66:	79bb      	ldrb	r3, [r7, #6]
 8000e68:	3301      	adds	r3, #1
 8000e6a:	71bb      	strb	r3, [r7, #6]
 8000e6c:	79bb      	ldrb	r3, [r7, #6]
 8000e6e:	2b04      	cmp	r3, #4
 8000e70:	d9f1      	bls.n	8000e56 <matrix_scan+0x8e>
            }
        }
    }

    return 1;
 8000e72:	2301      	movs	r3, #1
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	3708      	adds	r7, #8
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	20000254 	.word	0x20000254
 8000e80:	20000248 	.word	0x20000248
 8000e84:	20000004 	.word	0x20000004

08000e88 <matrix_get_row>:
    return (matrix[row] & ((matrix_row_t)1<<col));
}


inline matrix_row_t matrix_get_row(uint8_t row)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b083      	sub	sp, #12
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	4603      	mov	r3, r0
 8000e90:	71fb      	strb	r3, [r7, #7]
    return matrix[row];
 8000e92:	79fb      	ldrb	r3, [r7, #7]
 8000e94:	4a04      	ldr	r2, [pc, #16]	; (8000ea8 <matrix_get_row+0x20>)
 8000e96:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	370c      	adds	r7, #12
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	20000248 	.word	0x20000248

08000eac <read_cols>:
//
/* Returns status of switches(1:on, 0:off)
    读取每列的电平，如果检测到高电平，则视为该列的键被按下
*/
matrix_row_t read_cols(void)
{
 8000eac:	b598      	push	{r3, r4, r7, lr}
 8000eae:	af00      	add	r7, sp, #0
    return ((HAL_GPIO_ReadPin(COL0_GPIO_Port, COL0_Pin)==1) ? (1<<0):0) |
 8000eb0:	2120      	movs	r1, #32
 8000eb2:	4859      	ldr	r0, [pc, #356]	; (8001018 <read_cols+0x16c>)
 8000eb4:	f000 fd66 	bl	8001984 <HAL_GPIO_ReadPin>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b01      	cmp	r3, #1
 8000ebc:	bf0c      	ite	eq
 8000ebe:	2301      	moveq	r3, #1
 8000ec0:	2300      	movne	r3, #0
 8000ec2:	b2db      	uxtb	r3, r3
 8000ec4:	b21c      	sxth	r4, r3
           ((HAL_GPIO_ReadPin(COL1_GPIO_Port, COL1_Pin)==1) ? (1<<1):0) |
 8000ec6:	2140      	movs	r1, #64	; 0x40
 8000ec8:	4853      	ldr	r0, [pc, #332]	; (8001018 <read_cols+0x16c>)
 8000eca:	f000 fd5b 	bl	8001984 <HAL_GPIO_ReadPin>
 8000ece:	4603      	mov	r3, r0
    return ((HAL_GPIO_ReadPin(COL0_GPIO_Port, COL0_Pin)==1) ? (1<<0):0) |
 8000ed0:	2b01      	cmp	r3, #1
 8000ed2:	d101      	bne.n	8000ed8 <read_cols+0x2c>
 8000ed4:	2302      	movs	r3, #2
 8000ed6:	e000      	b.n	8000eda <read_cols+0x2e>
 8000ed8:	2300      	movs	r3, #0
 8000eda:	4323      	orrs	r3, r4
 8000edc:	b21c      	sxth	r4, r3
           ((HAL_GPIO_ReadPin(COL2_GPIO_Port, COL2_Pin)==1) ? (1<<2):0) |
 8000ede:	2180      	movs	r1, #128	; 0x80
 8000ee0:	484d      	ldr	r0, [pc, #308]	; (8001018 <read_cols+0x16c>)
 8000ee2:	f000 fd4f 	bl	8001984 <HAL_GPIO_ReadPin>
 8000ee6:	4603      	mov	r3, r0
           ((HAL_GPIO_ReadPin(COL1_GPIO_Port, COL1_Pin)==1) ? (1<<1):0) |
 8000ee8:	2b01      	cmp	r3, #1
 8000eea:	d101      	bne.n	8000ef0 <read_cols+0x44>
 8000eec:	2304      	movs	r3, #4
 8000eee:	e000      	b.n	8000ef2 <read_cols+0x46>
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	4323      	orrs	r3, r4
 8000ef4:	b21c      	sxth	r4, r3
           ((HAL_GPIO_ReadPin(COL3_GPIO_Port, COL3_Pin)==1) ? (1<<3):0) |
 8000ef6:	2101      	movs	r1, #1
 8000ef8:	4848      	ldr	r0, [pc, #288]	; (800101c <read_cols+0x170>)
 8000efa:	f000 fd43 	bl	8001984 <HAL_GPIO_ReadPin>
 8000efe:	4603      	mov	r3, r0
           ((HAL_GPIO_ReadPin(COL2_GPIO_Port, COL2_Pin)==1) ? (1<<2):0) |
 8000f00:	2b01      	cmp	r3, #1
 8000f02:	d101      	bne.n	8000f08 <read_cols+0x5c>
 8000f04:	2308      	movs	r3, #8
 8000f06:	e000      	b.n	8000f0a <read_cols+0x5e>
 8000f08:	2300      	movs	r3, #0
 8000f0a:	4323      	orrs	r3, r4
 8000f0c:	b21c      	sxth	r4, r3
           ((HAL_GPIO_ReadPin(COL4_GPIO_Port, COL4_Pin)==1) ? (1<<4):0) |
 8000f0e:	2102      	movs	r1, #2
 8000f10:	4842      	ldr	r0, [pc, #264]	; (800101c <read_cols+0x170>)
 8000f12:	f000 fd37 	bl	8001984 <HAL_GPIO_ReadPin>
 8000f16:	4603      	mov	r3, r0
           ((HAL_GPIO_ReadPin(COL3_GPIO_Port, COL3_Pin)==1) ? (1<<3):0) |
 8000f18:	2b01      	cmp	r3, #1
 8000f1a:	d101      	bne.n	8000f20 <read_cols+0x74>
 8000f1c:	2310      	movs	r3, #16
 8000f1e:	e000      	b.n	8000f22 <read_cols+0x76>
 8000f20:	2300      	movs	r3, #0
 8000f22:	4323      	orrs	r3, r4
 8000f24:	b21c      	sxth	r4, r3
           ((HAL_GPIO_ReadPin(COL5_GPIO_Port, COL5_Pin)==1) ? (1<<5):0) |
 8000f26:	2104      	movs	r1, #4
 8000f28:	483c      	ldr	r0, [pc, #240]	; (800101c <read_cols+0x170>)
 8000f2a:	f000 fd2b 	bl	8001984 <HAL_GPIO_ReadPin>
 8000f2e:	4603      	mov	r3, r0
           ((HAL_GPIO_ReadPin(COL4_GPIO_Port, COL4_Pin)==1) ? (1<<4):0) |
 8000f30:	2b01      	cmp	r3, #1
 8000f32:	d101      	bne.n	8000f38 <read_cols+0x8c>
 8000f34:	2320      	movs	r3, #32
 8000f36:	e000      	b.n	8000f3a <read_cols+0x8e>
 8000f38:	2300      	movs	r3, #0
 8000f3a:	4323      	orrs	r3, r4
 8000f3c:	b21c      	sxth	r4, r3
           ((HAL_GPIO_ReadPin(COL6_GPIO_Port, COL6_Pin)==1) ? (1<<6):0) |
 8000f3e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f42:	4836      	ldr	r0, [pc, #216]	; (800101c <read_cols+0x170>)
 8000f44:	f000 fd1e 	bl	8001984 <HAL_GPIO_ReadPin>
 8000f48:	4603      	mov	r3, r0
           ((HAL_GPIO_ReadPin(COL5_GPIO_Port, COL5_Pin)==1) ? (1<<5):0) |
 8000f4a:	2b01      	cmp	r3, #1
 8000f4c:	d101      	bne.n	8000f52 <read_cols+0xa6>
 8000f4e:	2340      	movs	r3, #64	; 0x40
 8000f50:	e000      	b.n	8000f54 <read_cols+0xa8>
 8000f52:	2300      	movs	r3, #0
 8000f54:	4323      	orrs	r3, r4
 8000f56:	b21c      	sxth	r4, r3
           ((HAL_GPIO_ReadPin(COL7_GPIO_Port, COL7_Pin)==1) ? (1<<7):0) |
 8000f58:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f5c:	482f      	ldr	r0, [pc, #188]	; (800101c <read_cols+0x170>)
 8000f5e:	f000 fd11 	bl	8001984 <HAL_GPIO_ReadPin>
 8000f62:	4603      	mov	r3, r0
           ((HAL_GPIO_ReadPin(COL6_GPIO_Port, COL6_Pin)==1) ? (1<<6):0) |
 8000f64:	2b01      	cmp	r3, #1
 8000f66:	d101      	bne.n	8000f6c <read_cols+0xc0>
 8000f68:	2380      	movs	r3, #128	; 0x80
 8000f6a:	e000      	b.n	8000f6e <read_cols+0xc2>
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	4323      	orrs	r3, r4
 8000f70:	b21c      	sxth	r4, r3
           ((HAL_GPIO_ReadPin(COL8_GPIO_Port, COL8_Pin)==1) ? (1<<8):0) |
 8000f72:	2108      	movs	r1, #8
 8000f74:	4829      	ldr	r0, [pc, #164]	; (800101c <read_cols+0x170>)
 8000f76:	f000 fd05 	bl	8001984 <HAL_GPIO_ReadPin>
 8000f7a:	4603      	mov	r3, r0
           ((HAL_GPIO_ReadPin(COL7_GPIO_Port, COL7_Pin)==1) ? (1<<7):0) |
 8000f7c:	2b01      	cmp	r3, #1
 8000f7e:	d102      	bne.n	8000f86 <read_cols+0xda>
 8000f80:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f84:	e000      	b.n	8000f88 <read_cols+0xdc>
 8000f86:	2300      	movs	r3, #0
 8000f88:	4323      	orrs	r3, r4
 8000f8a:	b21c      	sxth	r4, r3
           ((HAL_GPIO_ReadPin(COL9_GPIO_Port, COL9_Pin)==1) ? (1<<9):0) |
 8000f8c:	2110      	movs	r1, #16
 8000f8e:	4823      	ldr	r0, [pc, #140]	; (800101c <read_cols+0x170>)
 8000f90:	f000 fcf8 	bl	8001984 <HAL_GPIO_ReadPin>
 8000f94:	4603      	mov	r3, r0
           ((HAL_GPIO_ReadPin(COL8_GPIO_Port, COL8_Pin)==1) ? (1<<8):0) |
 8000f96:	2b01      	cmp	r3, #1
 8000f98:	d102      	bne.n	8000fa0 <read_cols+0xf4>
 8000f9a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f9e:	e000      	b.n	8000fa2 <read_cols+0xf6>
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	4323      	orrs	r3, r4
 8000fa4:	b21c      	sxth	r4, r3
           ((HAL_GPIO_ReadPin(COL10_GPIO_Port, COL10_Pin)==1) ? (1<<10):0) |
 8000fa6:	2120      	movs	r1, #32
 8000fa8:	481c      	ldr	r0, [pc, #112]	; (800101c <read_cols+0x170>)
 8000faa:	f000 fceb 	bl	8001984 <HAL_GPIO_ReadPin>
 8000fae:	4603      	mov	r3, r0
           ((HAL_GPIO_ReadPin(COL9_GPIO_Port, COL9_Pin)==1) ? (1<<9):0) |
 8000fb0:	2b01      	cmp	r3, #1
 8000fb2:	d102      	bne.n	8000fba <read_cols+0x10e>
 8000fb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fb8:	e000      	b.n	8000fbc <read_cols+0x110>
 8000fba:	2300      	movs	r3, #0
 8000fbc:	4323      	orrs	r3, r4
 8000fbe:	b21c      	sxth	r4, r3
           ((HAL_GPIO_ReadPin(COL11_GPIO_Port, COL11_Pin)==1) ? (1<<11):0) |
 8000fc0:	2140      	movs	r1, #64	; 0x40
 8000fc2:	4816      	ldr	r0, [pc, #88]	; (800101c <read_cols+0x170>)
 8000fc4:	f000 fcde 	bl	8001984 <HAL_GPIO_ReadPin>
 8000fc8:	4603      	mov	r3, r0
           ((HAL_GPIO_ReadPin(COL10_GPIO_Port, COL10_Pin)==1) ? (1<<10):0) |
 8000fca:	2b01      	cmp	r3, #1
 8000fcc:	d102      	bne.n	8000fd4 <read_cols+0x128>
 8000fce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000fd2:	e000      	b.n	8000fd6 <read_cols+0x12a>
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	4323      	orrs	r3, r4
 8000fd8:	b21c      	sxth	r4, r3
           ((HAL_GPIO_ReadPin(COL12_GPIO_Port, COL12_Pin)==1) ? (1<<12):0) |
 8000fda:	2180      	movs	r1, #128	; 0x80
 8000fdc:	480f      	ldr	r0, [pc, #60]	; (800101c <read_cols+0x170>)
 8000fde:	f000 fcd1 	bl	8001984 <HAL_GPIO_ReadPin>
 8000fe2:	4603      	mov	r3, r0
           ((HAL_GPIO_ReadPin(COL11_GPIO_Port, COL11_Pin)==1) ? (1<<11):0) |
 8000fe4:	2b01      	cmp	r3, #1
 8000fe6:	d102      	bne.n	8000fee <read_cols+0x142>
 8000fe8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fec:	e000      	b.n	8000ff0 <read_cols+0x144>
 8000fee:	2300      	movs	r3, #0
 8000ff0:	4323      	orrs	r3, r4
 8000ff2:	b21c      	sxth	r4, r3
           ((HAL_GPIO_ReadPin(COL13_GPIO_Port, COL13_Pin)==1) ? (1<<13):0);
 8000ff4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ff8:	4808      	ldr	r0, [pc, #32]	; (800101c <read_cols+0x170>)
 8000ffa:	f000 fcc3 	bl	8001984 <HAL_GPIO_ReadPin>
 8000ffe:	4603      	mov	r3, r0
           ((HAL_GPIO_ReadPin(COL12_GPIO_Port, COL12_Pin)==1) ? (1<<12):0) |
 8001000:	2b01      	cmp	r3, #1
 8001002:	d102      	bne.n	800100a <read_cols+0x15e>
 8001004:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001008:	e000      	b.n	800100c <read_cols+0x160>
 800100a:	2300      	movs	r3, #0
 800100c:	4323      	orrs	r3, r4
 800100e:	b21b      	sxth	r3, r3
 8001010:	b29b      	uxth	r3, r3
}
 8001012:	4618      	mov	r0, r3
 8001014:	bd98      	pop	{r3, r4, r7, pc}
 8001016:	bf00      	nop
 8001018:	40020000 	.word	0x40020000
 800101c:	40020400 	.word	0x40020400

08001020 <unselect_rows>:

/* Row pin configuration
    复位每行的电平为低电平
 */
static void unselect_rows(uint8_t row)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	71fb      	strb	r3, [r7, #7]
//    HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, GPIO_PIN_RESET);
//    HAL_GPIO_WritePin(ROW1_GPIO_Port, ROW1_Pin, GPIO_PIN_RESET);
//    HAL_GPIO_WritePin(ROW2_GPIO_Port, ROW2_Pin, GPIO_PIN_RESET);
//    HAL_GPIO_WritePin(ROW3_GPIO_Port, ROW3_Pin, GPIO_PIN_RESET);
//    HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW4_Pin, GPIO_PIN_RESET);
	switch (row) {
 800102a:	79fb      	ldrb	r3, [r7, #7]
 800102c:	2b04      	cmp	r3, #4
 800102e:	d82b      	bhi.n	8001088 <unselect_rows+0x68>
 8001030:	a201      	add	r2, pc, #4	; (adr r2, 8001038 <unselect_rows+0x18>)
 8001032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001036:	bf00      	nop
 8001038:	0800104d 	.word	0x0800104d
 800103c:	08001059 	.word	0x08001059
 8001040:	08001065 	.word	0x08001065
 8001044:	08001071 	.word	0x08001071
 8001048:	0800107d 	.word	0x0800107d
		case 0:
			HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, GPIO_PIN_RESET);
 800104c:	2200      	movs	r2, #0
 800104e:	2110      	movs	r1, #16
 8001050:	480f      	ldr	r0, [pc, #60]	; (8001090 <unselect_rows+0x70>)
 8001052:	f000 fcaf 	bl	80019b4 <HAL_GPIO_WritePin>
			break;
 8001056:	e017      	b.n	8001088 <unselect_rows+0x68>
		case 1:
			HAL_GPIO_WritePin(ROW1_GPIO_Port, ROW1_Pin, GPIO_PIN_RESET);
 8001058:	2200      	movs	r2, #0
 800105a:	2108      	movs	r1, #8
 800105c:	480c      	ldr	r0, [pc, #48]	; (8001090 <unselect_rows+0x70>)
 800105e:	f000 fca9 	bl	80019b4 <HAL_GPIO_WritePin>
			break;
 8001062:	e011      	b.n	8001088 <unselect_rows+0x68>
		case 2:
			HAL_GPIO_WritePin(ROW2_GPIO_Port, ROW2_Pin, GPIO_PIN_RESET);
 8001064:	2200      	movs	r2, #0
 8001066:	2104      	movs	r1, #4
 8001068:	4809      	ldr	r0, [pc, #36]	; (8001090 <unselect_rows+0x70>)
 800106a:	f000 fca3 	bl	80019b4 <HAL_GPIO_WritePin>
			break;
 800106e:	e00b      	b.n	8001088 <unselect_rows+0x68>
		case 3:
			HAL_GPIO_WritePin(ROW3_GPIO_Port, ROW3_Pin, GPIO_PIN_RESET);
 8001070:	2200      	movs	r2, #0
 8001072:	2102      	movs	r1, #2
 8001074:	4806      	ldr	r0, [pc, #24]	; (8001090 <unselect_rows+0x70>)
 8001076:	f000 fc9d 	bl	80019b4 <HAL_GPIO_WritePin>
			break;
 800107a:	e005      	b.n	8001088 <unselect_rows+0x68>
		case 4:
			HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW4_Pin, GPIO_PIN_RESET);
 800107c:	2200      	movs	r2, #0
 800107e:	2101      	movs	r1, #1
 8001080:	4803      	ldr	r0, [pc, #12]	; (8001090 <unselect_rows+0x70>)
 8001082:	f000 fc97 	bl	80019b4 <HAL_GPIO_WritePin>
			break;
 8001086:	bf00      	nop
	}
}
 8001088:	bf00      	nop
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	40020000 	.word	0x40020000

08001094 <select_row>:

/* 设置每行的输出电平为高电平*/
static void select_row(uint8_t row)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	4603      	mov	r3, r0
 800109c:	71fb      	strb	r3, [r7, #7]
    // Output low to select
    switch (row) {
 800109e:	79fb      	ldrb	r3, [r7, #7]
 80010a0:	2b04      	cmp	r3, #4
 80010a2:	d82b      	bhi.n	80010fc <select_row+0x68>
 80010a4:	a201      	add	r2, pc, #4	; (adr r2, 80010ac <select_row+0x18>)
 80010a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010aa:	bf00      	nop
 80010ac:	080010c1 	.word	0x080010c1
 80010b0:	080010cd 	.word	0x080010cd
 80010b4:	080010d9 	.word	0x080010d9
 80010b8:	080010e5 	.word	0x080010e5
 80010bc:	080010f1 	.word	0x080010f1
        case 0:
        	HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, GPIO_PIN_SET);
 80010c0:	2201      	movs	r2, #1
 80010c2:	2110      	movs	r1, #16
 80010c4:	480f      	ldr	r0, [pc, #60]	; (8001104 <select_row+0x70>)
 80010c6:	f000 fc75 	bl	80019b4 <HAL_GPIO_WritePin>
            break;
 80010ca:	e017      	b.n	80010fc <select_row+0x68>
        case 1:
        	HAL_GPIO_WritePin(ROW1_GPIO_Port, ROW1_Pin, GPIO_PIN_SET);
 80010cc:	2201      	movs	r2, #1
 80010ce:	2108      	movs	r1, #8
 80010d0:	480c      	ldr	r0, [pc, #48]	; (8001104 <select_row+0x70>)
 80010d2:	f000 fc6f 	bl	80019b4 <HAL_GPIO_WritePin>
            break;
 80010d6:	e011      	b.n	80010fc <select_row+0x68>
        case 2:
        	HAL_GPIO_WritePin(ROW2_GPIO_Port, ROW2_Pin, GPIO_PIN_SET);
 80010d8:	2201      	movs	r2, #1
 80010da:	2104      	movs	r1, #4
 80010dc:	4809      	ldr	r0, [pc, #36]	; (8001104 <select_row+0x70>)
 80010de:	f000 fc69 	bl	80019b4 <HAL_GPIO_WritePin>
            break;
 80010e2:	e00b      	b.n	80010fc <select_row+0x68>
        case 3:
        	HAL_GPIO_WritePin(ROW3_GPIO_Port, ROW3_Pin, GPIO_PIN_SET);
 80010e4:	2201      	movs	r2, #1
 80010e6:	2102      	movs	r1, #2
 80010e8:	4806      	ldr	r0, [pc, #24]	; (8001104 <select_row+0x70>)
 80010ea:	f000 fc63 	bl	80019b4 <HAL_GPIO_WritePin>
            break;
 80010ee:	e005      	b.n	80010fc <select_row+0x68>
        case 4:
        	HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW4_Pin, GPIO_PIN_SET);
 80010f0:	2201      	movs	r2, #1
 80010f2:	2101      	movs	r1, #1
 80010f4:	4803      	ldr	r0, [pc, #12]	; (8001104 <select_row+0x70>)
 80010f6:	f000 fc5d 	bl	80019b4 <HAL_GPIO_WritePin>
            break;
 80010fa:	bf00      	nop
    }
}
 80010fc:	bf00      	nop
 80010fe:	3708      	adds	r7, #8
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	40020000 	.word	0x40020000

08001108 <action_for_key>:
};


/* converts key to action */
action_t action_for_key(uint8_t layer, keypos_t key)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af00      	add	r7, sp, #0
 800110e:	4603      	mov	r3, r0
 8001110:	8039      	strh	r1, [r7, #0]
 8001112:	71fb      	strb	r3, [r7, #7]
    uint8_t keycode = keymap_key_to_keycode(layer, key);
 8001114:	79fb      	ldrb	r3, [r7, #7]
 8001116:	6839      	ldr	r1, [r7, #0]
 8001118:	4618      	mov	r0, r3
 800111a:	f000 f80b 	bl	8001134 <keymap_key_to_keycode>
 800111e:	4603      	mov	r3, r0
 8001120:	73fb      	strb	r3, [r7, #15]

    return keycode_to_action(keycode);
 8001122:	7bfb      	ldrb	r3, [r7, #15]
 8001124:	4618      	mov	r0, r3
 8001126:	f000 f823 	bl	8001170 <keycode_to_action>
 800112a:	4603      	mov	r3, r0
}
 800112c:	4618      	mov	r0, r3
 800112e:	3710      	adds	r7, #16
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}

08001134 <keymap_key_to_keycode>:

/* translates key to keycode */
uint8_t keymap_key_to_keycode(uint8_t layer, keypos_t key)
{
 8001134:	b490      	push	{r4, r7}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	4603      	mov	r3, r0
 800113c:	8039      	strh	r1, [r7, #0]
 800113e:	71fb      	strb	r3, [r7, #7]
    return keymaps[(layer)][(key.row)][(key.col)];
 8001140:	79fa      	ldrb	r2, [r7, #7]
 8001142:	787b      	ldrb	r3, [r7, #1]
 8001144:	4618      	mov	r0, r3
 8001146:	783b      	ldrb	r3, [r7, #0]
 8001148:	461c      	mov	r4, r3
 800114a:	4908      	ldr	r1, [pc, #32]	; (800116c <keymap_key_to_keycode+0x38>)
 800114c:	4603      	mov	r3, r0
 800114e:	00db      	lsls	r3, r3, #3
 8001150:	1a1b      	subs	r3, r3, r0
 8001152:	005b      	lsls	r3, r3, #1
 8001154:	2046      	movs	r0, #70	; 0x46
 8001156:	fb00 f202 	mul.w	r2, r0, r2
 800115a:	4413      	add	r3, r2
 800115c:	440b      	add	r3, r1
 800115e:	4423      	add	r3, r4
 8001160:	781b      	ldrb	r3, [r3, #0]
}
 8001162:	4618      	mov	r0, r3
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bc90      	pop	{r4, r7}
 800116a:	4770      	bx	lr
 800116c:	08006ae8 	.word	0x08006ae8

08001170 <keycode_to_action>:

/* translates keycode to action */
action_t keycode_to_action(uint8_t keycode)
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	4603      	mov	r3, r0
 8001178:	71fb      	strb	r3, [r7, #7]
    if(KC_A <= keycode && keycode <= KC_RGUI){
 800117a:	79fb      	ldrb	r3, [r7, #7]
 800117c:	2b03      	cmp	r3, #3
 800117e:	d905      	bls.n	800118c <keycode_to_action+0x1c>
 8001180:	79fb      	ldrb	r3, [r7, #7]
 8001182:	2be7      	cmp	r3, #231	; 0xe7
 8001184:	d802      	bhi.n	800118c <keycode_to_action+0x1c>
        return (action_t)ACTION_KEY(keycode);
 8001186:	79fb      	ldrb	r3, [r7, #7]
 8001188:	b29b      	uxth	r3, r3
 800118a:	e000      	b.n	800118e <keycode_to_action+0x1e>
    }
    else{
        return (action_t)ACTION_NO;
 800118c:	2300      	movs	r3, #0
    }
}
 800118e:	4618      	mov	r0, r3
 8001190:	370c      	adds	r7, #12
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
	...

0800119c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011a2:	2300      	movs	r3, #0
 80011a4:	607b      	str	r3, [r7, #4]
 80011a6:	4b10      	ldr	r3, [pc, #64]	; (80011e8 <HAL_MspInit+0x4c>)
 80011a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011aa:	4a0f      	ldr	r2, [pc, #60]	; (80011e8 <HAL_MspInit+0x4c>)
 80011ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011b0:	6453      	str	r3, [r2, #68]	; 0x44
 80011b2:	4b0d      	ldr	r3, [pc, #52]	; (80011e8 <HAL_MspInit+0x4c>)
 80011b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011ba:	607b      	str	r3, [r7, #4]
 80011bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011be:	2300      	movs	r3, #0
 80011c0:	603b      	str	r3, [r7, #0]
 80011c2:	4b09      	ldr	r3, [pc, #36]	; (80011e8 <HAL_MspInit+0x4c>)
 80011c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c6:	4a08      	ldr	r2, [pc, #32]	; (80011e8 <HAL_MspInit+0x4c>)
 80011c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011cc:	6413      	str	r3, [r2, #64]	; 0x40
 80011ce:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <HAL_MspInit+0x4c>)
 80011d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011d6:	603b      	str	r3, [r7, #0]
 80011d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011da:	bf00      	nop
 80011dc:	370c      	adds	r7, #12
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	40023800 	.word	0x40023800

080011ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80011f0:	bf00      	nop
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr

080011fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011fa:	b480      	push	{r7}
 80011fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011fe:	e7fe      	b.n	80011fe <HardFault_Handler+0x4>

08001200 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001204:	e7fe      	b.n	8001204 <MemManage_Handler+0x4>

08001206 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001206:	b480      	push	{r7}
 8001208:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800120a:	e7fe      	b.n	800120a <BusFault_Handler+0x4>

0800120c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001210:	e7fe      	b.n	8001210 <UsageFault_Handler+0x4>

08001212 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001212:	b480      	push	{r7}
 8001214:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001216:	bf00      	nop
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr

08001220 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001224:	bf00      	nop
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr

0800122e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800122e:	b480      	push	{r7}
 8001230:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001232:	bf00      	nop
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr

0800123c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001240:	f000 f8ca 	bl	80013d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001244:	bf00      	nop
 8001246:	bd80      	pop	{r7, pc}

08001248 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800124c:	4802      	ldr	r0, [pc, #8]	; (8001258 <OTG_FS_IRQHandler+0x10>)
 800124e:	f000 fd1a 	bl	8001c86 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001252:	bf00      	nop
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	20000744 	.word	0x20000744

0800125c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001264:	4b11      	ldr	r3, [pc, #68]	; (80012ac <_sbrk+0x50>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d102      	bne.n	8001272 <_sbrk+0x16>
		heap_end = &end;
 800126c:	4b0f      	ldr	r3, [pc, #60]	; (80012ac <_sbrk+0x50>)
 800126e:	4a10      	ldr	r2, [pc, #64]	; (80012b0 <_sbrk+0x54>)
 8001270:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001272:	4b0e      	ldr	r3, [pc, #56]	; (80012ac <_sbrk+0x50>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001278:	4b0c      	ldr	r3, [pc, #48]	; (80012ac <_sbrk+0x50>)
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	4413      	add	r3, r2
 8001280:	466a      	mov	r2, sp
 8001282:	4293      	cmp	r3, r2
 8001284:	d907      	bls.n	8001296 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001286:	f005 fb03 	bl	8006890 <__errno>
 800128a:	4602      	mov	r2, r0
 800128c:	230c      	movs	r3, #12
 800128e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001290:	f04f 33ff 	mov.w	r3, #4294967295
 8001294:	e006      	b.n	80012a4 <_sbrk+0x48>
	}

	heap_end += incr;
 8001296:	4b05      	ldr	r3, [pc, #20]	; (80012ac <_sbrk+0x50>)
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4413      	add	r3, r2
 800129e:	4a03      	ldr	r2, [pc, #12]	; (80012ac <_sbrk+0x50>)
 80012a0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80012a2:	68fb      	ldr	r3, [r7, #12]
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	3710      	adds	r7, #16
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	20000260 	.word	0x20000260
 80012b0:	20000b50 	.word	0x20000b50

080012b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012b8:	4b08      	ldr	r3, [pc, #32]	; (80012dc <SystemInit+0x28>)
 80012ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012be:	4a07      	ldr	r2, [pc, #28]	; (80012dc <SystemInit+0x28>)
 80012c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80012c8:	4b04      	ldr	r3, [pc, #16]	; (80012dc <SystemInit+0x28>)
 80012ca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80012ce:	609a      	str	r2, [r3, #8]
#endif
}
 80012d0:	bf00      	nop
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	e000ed00 	.word	0xe000ed00

080012e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80012e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001318 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80012e4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80012e6:	e003      	b.n	80012f0 <LoopCopyDataInit>

080012e8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80012e8:	4b0c      	ldr	r3, [pc, #48]	; (800131c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80012ea:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80012ec:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80012ee:	3104      	adds	r1, #4

080012f0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80012f0:	480b      	ldr	r0, [pc, #44]	; (8001320 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80012f2:	4b0c      	ldr	r3, [pc, #48]	; (8001324 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80012f4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80012f6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80012f8:	d3f6      	bcc.n	80012e8 <CopyDataInit>
  ldr  r2, =_sbss
 80012fa:	4a0b      	ldr	r2, [pc, #44]	; (8001328 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80012fc:	e002      	b.n	8001304 <LoopFillZerobss>

080012fe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80012fe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001300:	f842 3b04 	str.w	r3, [r2], #4

08001304 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001304:	4b09      	ldr	r3, [pc, #36]	; (800132c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001306:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001308:	d3f9      	bcc.n	80012fe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800130a:	f7ff ffd3 	bl	80012b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800130e:	f005 fac5 	bl	800689c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001312:	f7ff fcb9 	bl	8000c88 <main>
  bx  lr    
 8001316:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001318:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800131c:	08006b94 	.word	0x08006b94
  ldr  r0, =_sdata
 8001320:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001324:	20000210 	.word	0x20000210
  ldr  r2, =_sbss
 8001328:	20000210 	.word	0x20000210
  ldr  r3, = _ebss
 800132c:	20000b50 	.word	0x20000b50

08001330 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001330:	e7fe      	b.n	8001330 <ADC_IRQHandler>
	...

08001334 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001338:	4b0e      	ldr	r3, [pc, #56]	; (8001374 <HAL_Init+0x40>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a0d      	ldr	r2, [pc, #52]	; (8001374 <HAL_Init+0x40>)
 800133e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001342:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001344:	4b0b      	ldr	r3, [pc, #44]	; (8001374 <HAL_Init+0x40>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a0a      	ldr	r2, [pc, #40]	; (8001374 <HAL_Init+0x40>)
 800134a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800134e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001350:	4b08      	ldr	r3, [pc, #32]	; (8001374 <HAL_Init+0x40>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a07      	ldr	r2, [pc, #28]	; (8001374 <HAL_Init+0x40>)
 8001356:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800135a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800135c:	2003      	movs	r0, #3
 800135e:	f000 f94d 	bl	80015fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001362:	2000      	movs	r0, #0
 8001364:	f000 f808 	bl	8001378 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001368:	f7ff ff18 	bl	800119c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800136c:	2300      	movs	r3, #0
}
 800136e:	4618      	mov	r0, r3
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	40023c00 	.word	0x40023c00

08001378 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001380:	4b12      	ldr	r3, [pc, #72]	; (80013cc <HAL_InitTick+0x54>)
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	4b12      	ldr	r3, [pc, #72]	; (80013d0 <HAL_InitTick+0x58>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	4619      	mov	r1, r3
 800138a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800138e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001392:	fbb2 f3f3 	udiv	r3, r2, r3
 8001396:	4618      	mov	r0, r3
 8001398:	f000 f965 	bl	8001666 <HAL_SYSTICK_Config>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
 80013a4:	e00e      	b.n	80013c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2b0f      	cmp	r3, #15
 80013aa:	d80a      	bhi.n	80013c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013ac:	2200      	movs	r2, #0
 80013ae:	6879      	ldr	r1, [r7, #4]
 80013b0:	f04f 30ff 	mov.w	r0, #4294967295
 80013b4:	f000 f92d 	bl	8001612 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013b8:	4a06      	ldr	r2, [pc, #24]	; (80013d4 <HAL_InitTick+0x5c>)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013be:	2300      	movs	r3, #0
 80013c0:	e000      	b.n	80013c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3708      	adds	r7, #8
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	20000008 	.word	0x20000008
 80013d0:	20000010 	.word	0x20000010
 80013d4:	2000000c 	.word	0x2000000c

080013d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013dc:	4b06      	ldr	r3, [pc, #24]	; (80013f8 <HAL_IncTick+0x20>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	461a      	mov	r2, r3
 80013e2:	4b06      	ldr	r3, [pc, #24]	; (80013fc <HAL_IncTick+0x24>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4413      	add	r3, r2
 80013e8:	4a04      	ldr	r2, [pc, #16]	; (80013fc <HAL_IncTick+0x24>)
 80013ea:	6013      	str	r3, [r2, #0]
}
 80013ec:	bf00      	nop
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	20000010 	.word	0x20000010
 80013fc:	20000270 	.word	0x20000270

08001400 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  return uwTick;
 8001404:	4b03      	ldr	r3, [pc, #12]	; (8001414 <HAL_GetTick+0x14>)
 8001406:	681b      	ldr	r3, [r3, #0]
}
 8001408:	4618      	mov	r0, r3
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	20000270 	.word	0x20000270

08001418 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b084      	sub	sp, #16
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001420:	f7ff ffee 	bl	8001400 <HAL_GetTick>
 8001424:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001430:	d005      	beq.n	800143e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001432:	4b09      	ldr	r3, [pc, #36]	; (8001458 <HAL_Delay+0x40>)
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	461a      	mov	r2, r3
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	4413      	add	r3, r2
 800143c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800143e:	bf00      	nop
 8001440:	f7ff ffde 	bl	8001400 <HAL_GetTick>
 8001444:	4602      	mov	r2, r0
 8001446:	68bb      	ldr	r3, [r7, #8]
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	68fa      	ldr	r2, [r7, #12]
 800144c:	429a      	cmp	r2, r3
 800144e:	d8f7      	bhi.n	8001440 <HAL_Delay+0x28>
  {
  }
}
 8001450:	bf00      	nop
 8001452:	3710      	adds	r7, #16
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	20000010 	.word	0x20000010

0800145c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800145c:	b480      	push	{r7}
 800145e:	b085      	sub	sp, #20
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	f003 0307 	and.w	r3, r3, #7
 800146a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800146c:	4b0c      	ldr	r3, [pc, #48]	; (80014a0 <__NVIC_SetPriorityGrouping+0x44>)
 800146e:	68db      	ldr	r3, [r3, #12]
 8001470:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001472:	68ba      	ldr	r2, [r7, #8]
 8001474:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001478:	4013      	ands	r3, r2
 800147a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001484:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001488:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800148c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800148e:	4a04      	ldr	r2, [pc, #16]	; (80014a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	60d3      	str	r3, [r2, #12]
}
 8001494:	bf00      	nop
 8001496:	3714      	adds	r7, #20
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr
 80014a0:	e000ed00 	.word	0xe000ed00

080014a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014a8:	4b04      	ldr	r3, [pc, #16]	; (80014bc <__NVIC_GetPriorityGrouping+0x18>)
 80014aa:	68db      	ldr	r3, [r3, #12]
 80014ac:	0a1b      	lsrs	r3, r3, #8
 80014ae:	f003 0307 	and.w	r3, r3, #7
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr
 80014bc:	e000ed00 	.word	0xe000ed00

080014c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	4603      	mov	r3, r0
 80014c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	db0b      	blt.n	80014ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014d2:	79fb      	ldrb	r3, [r7, #7]
 80014d4:	f003 021f 	and.w	r2, r3, #31
 80014d8:	4907      	ldr	r1, [pc, #28]	; (80014f8 <__NVIC_EnableIRQ+0x38>)
 80014da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014de:	095b      	lsrs	r3, r3, #5
 80014e0:	2001      	movs	r0, #1
 80014e2:	fa00 f202 	lsl.w	r2, r0, r2
 80014e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014ea:	bf00      	nop
 80014ec:	370c      	adds	r7, #12
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	e000e100 	.word	0xe000e100

080014fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	4603      	mov	r3, r0
 8001504:	6039      	str	r1, [r7, #0]
 8001506:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001508:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800150c:	2b00      	cmp	r3, #0
 800150e:	db0a      	blt.n	8001526 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	b2da      	uxtb	r2, r3
 8001514:	490c      	ldr	r1, [pc, #48]	; (8001548 <__NVIC_SetPriority+0x4c>)
 8001516:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800151a:	0112      	lsls	r2, r2, #4
 800151c:	b2d2      	uxtb	r2, r2
 800151e:	440b      	add	r3, r1
 8001520:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001524:	e00a      	b.n	800153c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	b2da      	uxtb	r2, r3
 800152a:	4908      	ldr	r1, [pc, #32]	; (800154c <__NVIC_SetPriority+0x50>)
 800152c:	79fb      	ldrb	r3, [r7, #7]
 800152e:	f003 030f 	and.w	r3, r3, #15
 8001532:	3b04      	subs	r3, #4
 8001534:	0112      	lsls	r2, r2, #4
 8001536:	b2d2      	uxtb	r2, r2
 8001538:	440b      	add	r3, r1
 800153a:	761a      	strb	r2, [r3, #24]
}
 800153c:	bf00      	nop
 800153e:	370c      	adds	r7, #12
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr
 8001548:	e000e100 	.word	0xe000e100
 800154c:	e000ed00 	.word	0xe000ed00

08001550 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001550:	b480      	push	{r7}
 8001552:	b089      	sub	sp, #36	; 0x24
 8001554:	af00      	add	r7, sp, #0
 8001556:	60f8      	str	r0, [r7, #12]
 8001558:	60b9      	str	r1, [r7, #8]
 800155a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	f003 0307 	and.w	r3, r3, #7
 8001562:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001564:	69fb      	ldr	r3, [r7, #28]
 8001566:	f1c3 0307 	rsb	r3, r3, #7
 800156a:	2b04      	cmp	r3, #4
 800156c:	bf28      	it	cs
 800156e:	2304      	movcs	r3, #4
 8001570:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001572:	69fb      	ldr	r3, [r7, #28]
 8001574:	3304      	adds	r3, #4
 8001576:	2b06      	cmp	r3, #6
 8001578:	d902      	bls.n	8001580 <NVIC_EncodePriority+0x30>
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	3b03      	subs	r3, #3
 800157e:	e000      	b.n	8001582 <NVIC_EncodePriority+0x32>
 8001580:	2300      	movs	r3, #0
 8001582:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001584:	f04f 32ff 	mov.w	r2, #4294967295
 8001588:	69bb      	ldr	r3, [r7, #24]
 800158a:	fa02 f303 	lsl.w	r3, r2, r3
 800158e:	43da      	mvns	r2, r3
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	401a      	ands	r2, r3
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001598:	f04f 31ff 	mov.w	r1, #4294967295
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	fa01 f303 	lsl.w	r3, r1, r3
 80015a2:	43d9      	mvns	r1, r3
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015a8:	4313      	orrs	r3, r2
         );
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3724      	adds	r7, #36	; 0x24
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
	...

080015b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	3b01      	subs	r3, #1
 80015c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015c8:	d301      	bcc.n	80015ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015ca:	2301      	movs	r3, #1
 80015cc:	e00f      	b.n	80015ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015ce:	4a0a      	ldr	r2, [pc, #40]	; (80015f8 <SysTick_Config+0x40>)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	3b01      	subs	r3, #1
 80015d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015d6:	210f      	movs	r1, #15
 80015d8:	f04f 30ff 	mov.w	r0, #4294967295
 80015dc:	f7ff ff8e 	bl	80014fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015e0:	4b05      	ldr	r3, [pc, #20]	; (80015f8 <SysTick_Config+0x40>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015e6:	4b04      	ldr	r3, [pc, #16]	; (80015f8 <SysTick_Config+0x40>)
 80015e8:	2207      	movs	r2, #7
 80015ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015ec:	2300      	movs	r3, #0
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3708      	adds	r7, #8
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	e000e010 	.word	0xe000e010

080015fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001604:	6878      	ldr	r0, [r7, #4]
 8001606:	f7ff ff29 	bl	800145c <__NVIC_SetPriorityGrouping>
}
 800160a:	bf00      	nop
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}

08001612 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001612:	b580      	push	{r7, lr}
 8001614:	b086      	sub	sp, #24
 8001616:	af00      	add	r7, sp, #0
 8001618:	4603      	mov	r3, r0
 800161a:	60b9      	str	r1, [r7, #8]
 800161c:	607a      	str	r2, [r7, #4]
 800161e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001620:	2300      	movs	r3, #0
 8001622:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001624:	f7ff ff3e 	bl	80014a4 <__NVIC_GetPriorityGrouping>
 8001628:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800162a:	687a      	ldr	r2, [r7, #4]
 800162c:	68b9      	ldr	r1, [r7, #8]
 800162e:	6978      	ldr	r0, [r7, #20]
 8001630:	f7ff ff8e 	bl	8001550 <NVIC_EncodePriority>
 8001634:	4602      	mov	r2, r0
 8001636:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800163a:	4611      	mov	r1, r2
 800163c:	4618      	mov	r0, r3
 800163e:	f7ff ff5d 	bl	80014fc <__NVIC_SetPriority>
}
 8001642:	bf00      	nop
 8001644:	3718      	adds	r7, #24
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}

0800164a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800164a:	b580      	push	{r7, lr}
 800164c:	b082      	sub	sp, #8
 800164e:	af00      	add	r7, sp, #0
 8001650:	4603      	mov	r3, r0
 8001652:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001654:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001658:	4618      	mov	r0, r3
 800165a:	f7ff ff31 	bl	80014c0 <__NVIC_EnableIRQ>
}
 800165e:	bf00      	nop
 8001660:	3708      	adds	r7, #8
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}

08001666 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001666:	b580      	push	{r7, lr}
 8001668:	b082      	sub	sp, #8
 800166a:	af00      	add	r7, sp, #0
 800166c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800166e:	6878      	ldr	r0, [r7, #4]
 8001670:	f7ff ffa2 	bl	80015b8 <SysTick_Config>
 8001674:	4603      	mov	r3, r0
}
 8001676:	4618      	mov	r0, r3
 8001678:	3708      	adds	r7, #8
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
	...

08001680 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001680:	b480      	push	{r7}
 8001682:	b089      	sub	sp, #36	; 0x24
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800168a:	2300      	movs	r3, #0
 800168c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800168e:	2300      	movs	r3, #0
 8001690:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001692:	2300      	movs	r3, #0
 8001694:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001696:	2300      	movs	r3, #0
 8001698:	61fb      	str	r3, [r7, #28]
 800169a:	e159      	b.n	8001950 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800169c:	2201      	movs	r2, #1
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	fa02 f303 	lsl.w	r3, r2, r3
 80016a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	697a      	ldr	r2, [r7, #20]
 80016ac:	4013      	ands	r3, r2
 80016ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80016b0:	693a      	ldr	r2, [r7, #16]
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	429a      	cmp	r2, r3
 80016b6:	f040 8148 	bne.w	800194a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d00b      	beq.n	80016da <HAL_GPIO_Init+0x5a>
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	2b02      	cmp	r3, #2
 80016c8:	d007      	beq.n	80016da <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016ce:	2b11      	cmp	r3, #17
 80016d0:	d003      	beq.n	80016da <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	2b12      	cmp	r3, #18
 80016d8:	d130      	bne.n	800173c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016e0:	69fb      	ldr	r3, [r7, #28]
 80016e2:	005b      	lsls	r3, r3, #1
 80016e4:	2203      	movs	r2, #3
 80016e6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ea:	43db      	mvns	r3, r3
 80016ec:	69ba      	ldr	r2, [r7, #24]
 80016ee:	4013      	ands	r3, r2
 80016f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	68da      	ldr	r2, [r3, #12]
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	005b      	lsls	r3, r3, #1
 80016fa:	fa02 f303 	lsl.w	r3, r2, r3
 80016fe:	69ba      	ldr	r2, [r7, #24]
 8001700:	4313      	orrs	r3, r2
 8001702:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	69ba      	ldr	r2, [r7, #24]
 8001708:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001710:	2201      	movs	r2, #1
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	fa02 f303 	lsl.w	r3, r2, r3
 8001718:	43db      	mvns	r3, r3
 800171a:	69ba      	ldr	r2, [r7, #24]
 800171c:	4013      	ands	r3, r2
 800171e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	091b      	lsrs	r3, r3, #4
 8001726:	f003 0201 	and.w	r2, r3, #1
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	fa02 f303 	lsl.w	r3, r2, r3
 8001730:	69ba      	ldr	r2, [r7, #24]
 8001732:	4313      	orrs	r3, r2
 8001734:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	69ba      	ldr	r2, [r7, #24]
 800173a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001742:	69fb      	ldr	r3, [r7, #28]
 8001744:	005b      	lsls	r3, r3, #1
 8001746:	2203      	movs	r2, #3
 8001748:	fa02 f303 	lsl.w	r3, r2, r3
 800174c:	43db      	mvns	r3, r3
 800174e:	69ba      	ldr	r2, [r7, #24]
 8001750:	4013      	ands	r3, r2
 8001752:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	689a      	ldr	r2, [r3, #8]
 8001758:	69fb      	ldr	r3, [r7, #28]
 800175a:	005b      	lsls	r3, r3, #1
 800175c:	fa02 f303 	lsl.w	r3, r2, r3
 8001760:	69ba      	ldr	r2, [r7, #24]
 8001762:	4313      	orrs	r3, r2
 8001764:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	69ba      	ldr	r2, [r7, #24]
 800176a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	2b02      	cmp	r3, #2
 8001772:	d003      	beq.n	800177c <HAL_GPIO_Init+0xfc>
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	2b12      	cmp	r3, #18
 800177a:	d123      	bne.n	80017c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800177c:	69fb      	ldr	r3, [r7, #28]
 800177e:	08da      	lsrs	r2, r3, #3
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	3208      	adds	r2, #8
 8001784:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001788:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	f003 0307 	and.w	r3, r3, #7
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	220f      	movs	r2, #15
 8001794:	fa02 f303 	lsl.w	r3, r2, r3
 8001798:	43db      	mvns	r3, r3
 800179a:	69ba      	ldr	r2, [r7, #24]
 800179c:	4013      	ands	r3, r2
 800179e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	691a      	ldr	r2, [r3, #16]
 80017a4:	69fb      	ldr	r3, [r7, #28]
 80017a6:	f003 0307 	and.w	r3, r3, #7
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	fa02 f303 	lsl.w	r3, r2, r3
 80017b0:	69ba      	ldr	r2, [r7, #24]
 80017b2:	4313      	orrs	r3, r2
 80017b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	08da      	lsrs	r2, r3, #3
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	3208      	adds	r2, #8
 80017be:	69b9      	ldr	r1, [r7, #24]
 80017c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	005b      	lsls	r3, r3, #1
 80017ce:	2203      	movs	r2, #3
 80017d0:	fa02 f303 	lsl.w	r3, r2, r3
 80017d4:	43db      	mvns	r3, r3
 80017d6:	69ba      	ldr	r2, [r7, #24]
 80017d8:	4013      	ands	r3, r2
 80017da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f003 0203 	and.w	r2, r3, #3
 80017e4:	69fb      	ldr	r3, [r7, #28]
 80017e6:	005b      	lsls	r3, r3, #1
 80017e8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ec:	69ba      	ldr	r2, [r7, #24]
 80017ee:	4313      	orrs	r3, r2
 80017f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	69ba      	ldr	r2, [r7, #24]
 80017f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001800:	2b00      	cmp	r3, #0
 8001802:	f000 80a2 	beq.w	800194a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001806:	2300      	movs	r3, #0
 8001808:	60fb      	str	r3, [r7, #12]
 800180a:	4b56      	ldr	r3, [pc, #344]	; (8001964 <HAL_GPIO_Init+0x2e4>)
 800180c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800180e:	4a55      	ldr	r2, [pc, #340]	; (8001964 <HAL_GPIO_Init+0x2e4>)
 8001810:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001814:	6453      	str	r3, [r2, #68]	; 0x44
 8001816:	4b53      	ldr	r3, [pc, #332]	; (8001964 <HAL_GPIO_Init+0x2e4>)
 8001818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800181a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800181e:	60fb      	str	r3, [r7, #12]
 8001820:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001822:	4a51      	ldr	r2, [pc, #324]	; (8001968 <HAL_GPIO_Init+0x2e8>)
 8001824:	69fb      	ldr	r3, [r7, #28]
 8001826:	089b      	lsrs	r3, r3, #2
 8001828:	3302      	adds	r3, #2
 800182a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800182e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	f003 0303 	and.w	r3, r3, #3
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	220f      	movs	r2, #15
 800183a:	fa02 f303 	lsl.w	r3, r2, r3
 800183e:	43db      	mvns	r3, r3
 8001840:	69ba      	ldr	r2, [r7, #24]
 8001842:	4013      	ands	r3, r2
 8001844:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4a48      	ldr	r2, [pc, #288]	; (800196c <HAL_GPIO_Init+0x2ec>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d019      	beq.n	8001882 <HAL_GPIO_Init+0x202>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	4a47      	ldr	r2, [pc, #284]	; (8001970 <HAL_GPIO_Init+0x2f0>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d013      	beq.n	800187e <HAL_GPIO_Init+0x1fe>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	4a46      	ldr	r2, [pc, #280]	; (8001974 <HAL_GPIO_Init+0x2f4>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d00d      	beq.n	800187a <HAL_GPIO_Init+0x1fa>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4a45      	ldr	r2, [pc, #276]	; (8001978 <HAL_GPIO_Init+0x2f8>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d007      	beq.n	8001876 <HAL_GPIO_Init+0x1f6>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4a44      	ldr	r2, [pc, #272]	; (800197c <HAL_GPIO_Init+0x2fc>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d101      	bne.n	8001872 <HAL_GPIO_Init+0x1f2>
 800186e:	2304      	movs	r3, #4
 8001870:	e008      	b.n	8001884 <HAL_GPIO_Init+0x204>
 8001872:	2307      	movs	r3, #7
 8001874:	e006      	b.n	8001884 <HAL_GPIO_Init+0x204>
 8001876:	2303      	movs	r3, #3
 8001878:	e004      	b.n	8001884 <HAL_GPIO_Init+0x204>
 800187a:	2302      	movs	r3, #2
 800187c:	e002      	b.n	8001884 <HAL_GPIO_Init+0x204>
 800187e:	2301      	movs	r3, #1
 8001880:	e000      	b.n	8001884 <HAL_GPIO_Init+0x204>
 8001882:	2300      	movs	r3, #0
 8001884:	69fa      	ldr	r2, [r7, #28]
 8001886:	f002 0203 	and.w	r2, r2, #3
 800188a:	0092      	lsls	r2, r2, #2
 800188c:	4093      	lsls	r3, r2
 800188e:	69ba      	ldr	r2, [r7, #24]
 8001890:	4313      	orrs	r3, r2
 8001892:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001894:	4934      	ldr	r1, [pc, #208]	; (8001968 <HAL_GPIO_Init+0x2e8>)
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	089b      	lsrs	r3, r3, #2
 800189a:	3302      	adds	r3, #2
 800189c:	69ba      	ldr	r2, [r7, #24]
 800189e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018a2:	4b37      	ldr	r3, [pc, #220]	; (8001980 <HAL_GPIO_Init+0x300>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	43db      	mvns	r3, r3
 80018ac:	69ba      	ldr	r2, [r7, #24]
 80018ae:	4013      	ands	r3, r2
 80018b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d003      	beq.n	80018c6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80018be:	69ba      	ldr	r2, [r7, #24]
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	4313      	orrs	r3, r2
 80018c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80018c6:	4a2e      	ldr	r2, [pc, #184]	; (8001980 <HAL_GPIO_Init+0x300>)
 80018c8:	69bb      	ldr	r3, [r7, #24]
 80018ca:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80018cc:	4b2c      	ldr	r3, [pc, #176]	; (8001980 <HAL_GPIO_Init+0x300>)
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	43db      	mvns	r3, r3
 80018d6:	69ba      	ldr	r2, [r7, #24]
 80018d8:	4013      	ands	r3, r2
 80018da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d003      	beq.n	80018f0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80018e8:	69ba      	ldr	r2, [r7, #24]
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	4313      	orrs	r3, r2
 80018ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80018f0:	4a23      	ldr	r2, [pc, #140]	; (8001980 <HAL_GPIO_Init+0x300>)
 80018f2:	69bb      	ldr	r3, [r7, #24]
 80018f4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018f6:	4b22      	ldr	r3, [pc, #136]	; (8001980 <HAL_GPIO_Init+0x300>)
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	43db      	mvns	r3, r3
 8001900:	69ba      	ldr	r2, [r7, #24]
 8001902:	4013      	ands	r3, r2
 8001904:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d003      	beq.n	800191a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001912:	69ba      	ldr	r2, [r7, #24]
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	4313      	orrs	r3, r2
 8001918:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800191a:	4a19      	ldr	r2, [pc, #100]	; (8001980 <HAL_GPIO_Init+0x300>)
 800191c:	69bb      	ldr	r3, [r7, #24]
 800191e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001920:	4b17      	ldr	r3, [pc, #92]	; (8001980 <HAL_GPIO_Init+0x300>)
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	43db      	mvns	r3, r3
 800192a:	69ba      	ldr	r2, [r7, #24]
 800192c:	4013      	ands	r3, r2
 800192e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001938:	2b00      	cmp	r3, #0
 800193a:	d003      	beq.n	8001944 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800193c:	69ba      	ldr	r2, [r7, #24]
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	4313      	orrs	r3, r2
 8001942:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001944:	4a0e      	ldr	r2, [pc, #56]	; (8001980 <HAL_GPIO_Init+0x300>)
 8001946:	69bb      	ldr	r3, [r7, #24]
 8001948:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	3301      	adds	r3, #1
 800194e:	61fb      	str	r3, [r7, #28]
 8001950:	69fb      	ldr	r3, [r7, #28]
 8001952:	2b0f      	cmp	r3, #15
 8001954:	f67f aea2 	bls.w	800169c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001958:	bf00      	nop
 800195a:	3724      	adds	r7, #36	; 0x24
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr
 8001964:	40023800 	.word	0x40023800
 8001968:	40013800 	.word	0x40013800
 800196c:	40020000 	.word	0x40020000
 8001970:	40020400 	.word	0x40020400
 8001974:	40020800 	.word	0x40020800
 8001978:	40020c00 	.word	0x40020c00
 800197c:	40021000 	.word	0x40021000
 8001980:	40013c00 	.word	0x40013c00

08001984 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001984:	b480      	push	{r7}
 8001986:	b085      	sub	sp, #20
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
 800198c:	460b      	mov	r3, r1
 800198e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	691a      	ldr	r2, [r3, #16]
 8001994:	887b      	ldrh	r3, [r7, #2]
 8001996:	4013      	ands	r3, r2
 8001998:	2b00      	cmp	r3, #0
 800199a:	d002      	beq.n	80019a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800199c:	2301      	movs	r3, #1
 800199e:	73fb      	strb	r3, [r7, #15]
 80019a0:	e001      	b.n	80019a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80019a2:	2300      	movs	r3, #0
 80019a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80019a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	3714      	adds	r7, #20
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr

080019b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	460b      	mov	r3, r1
 80019be:	807b      	strh	r3, [r7, #2]
 80019c0:	4613      	mov	r3, r2
 80019c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019c4:	787b      	ldrb	r3, [r7, #1]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d003      	beq.n	80019d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019ca:	887a      	ldrh	r2, [r7, #2]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80019d0:	e003      	b.n	80019da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80019d2:	887b      	ldrh	r3, [r7, #2]
 80019d4:	041a      	lsls	r2, r3, #16
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	619a      	str	r2, [r3, #24]
}
 80019da:	bf00      	nop
 80019dc:	370c      	adds	r7, #12
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr

080019e6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80019e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019e8:	b08f      	sub	sp, #60	; 0x3c
 80019ea:	af0a      	add	r7, sp, #40	; 0x28
 80019ec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d101      	bne.n	80019f8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80019f4:	2301      	movs	r3, #1
 80019f6:	e10f      	b.n	8001c18 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d106      	bne.n	8001a18 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f004 fc5c 	bl	80062d0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2203      	movs	r2, #3
 8001a1c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d102      	bne.n	8001a32 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4618      	mov	r0, r3
 8001a38:	f001 fe69 	bl	800370e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	603b      	str	r3, [r7, #0]
 8001a42:	687e      	ldr	r6, [r7, #4]
 8001a44:	466d      	mov	r5, sp
 8001a46:	f106 0410 	add.w	r4, r6, #16
 8001a4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a52:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001a56:	e885 0003 	stmia.w	r5, {r0, r1}
 8001a5a:	1d33      	adds	r3, r6, #4
 8001a5c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a5e:	6838      	ldr	r0, [r7, #0]
 8001a60:	f001 fd40 	bl	80034e4 <USB_CoreInit>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d005      	beq.n	8001a76 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2202      	movs	r2, #2
 8001a6e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e0d0      	b.n	8001c18 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	2100      	movs	r1, #0
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f001 fe57 	bl	8003730 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a82:	2300      	movs	r3, #0
 8001a84:	73fb      	strb	r3, [r7, #15]
 8001a86:	e04a      	b.n	8001b1e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001a88:	7bfa      	ldrb	r2, [r7, #15]
 8001a8a:	6879      	ldr	r1, [r7, #4]
 8001a8c:	4613      	mov	r3, r2
 8001a8e:	00db      	lsls	r3, r3, #3
 8001a90:	1a9b      	subs	r3, r3, r2
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	440b      	add	r3, r1
 8001a96:	333d      	adds	r3, #61	; 0x3d
 8001a98:	2201      	movs	r2, #1
 8001a9a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001a9c:	7bfa      	ldrb	r2, [r7, #15]
 8001a9e:	6879      	ldr	r1, [r7, #4]
 8001aa0:	4613      	mov	r3, r2
 8001aa2:	00db      	lsls	r3, r3, #3
 8001aa4:	1a9b      	subs	r3, r3, r2
 8001aa6:	009b      	lsls	r3, r3, #2
 8001aa8:	440b      	add	r3, r1
 8001aaa:	333c      	adds	r3, #60	; 0x3c
 8001aac:	7bfa      	ldrb	r2, [r7, #15]
 8001aae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001ab0:	7bfa      	ldrb	r2, [r7, #15]
 8001ab2:	7bfb      	ldrb	r3, [r7, #15]
 8001ab4:	b298      	uxth	r0, r3
 8001ab6:	6879      	ldr	r1, [r7, #4]
 8001ab8:	4613      	mov	r3, r2
 8001aba:	00db      	lsls	r3, r3, #3
 8001abc:	1a9b      	subs	r3, r3, r2
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	440b      	add	r3, r1
 8001ac2:	3342      	adds	r3, #66	; 0x42
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001ac8:	7bfa      	ldrb	r2, [r7, #15]
 8001aca:	6879      	ldr	r1, [r7, #4]
 8001acc:	4613      	mov	r3, r2
 8001ace:	00db      	lsls	r3, r3, #3
 8001ad0:	1a9b      	subs	r3, r3, r2
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	440b      	add	r3, r1
 8001ad6:	333f      	adds	r3, #63	; 0x3f
 8001ad8:	2200      	movs	r2, #0
 8001ada:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001adc:	7bfa      	ldrb	r2, [r7, #15]
 8001ade:	6879      	ldr	r1, [r7, #4]
 8001ae0:	4613      	mov	r3, r2
 8001ae2:	00db      	lsls	r3, r3, #3
 8001ae4:	1a9b      	subs	r3, r3, r2
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	440b      	add	r3, r1
 8001aea:	3344      	adds	r3, #68	; 0x44
 8001aec:	2200      	movs	r2, #0
 8001aee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001af0:	7bfa      	ldrb	r2, [r7, #15]
 8001af2:	6879      	ldr	r1, [r7, #4]
 8001af4:	4613      	mov	r3, r2
 8001af6:	00db      	lsls	r3, r3, #3
 8001af8:	1a9b      	subs	r3, r3, r2
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	440b      	add	r3, r1
 8001afe:	3348      	adds	r3, #72	; 0x48
 8001b00:	2200      	movs	r2, #0
 8001b02:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001b04:	7bfa      	ldrb	r2, [r7, #15]
 8001b06:	6879      	ldr	r1, [r7, #4]
 8001b08:	4613      	mov	r3, r2
 8001b0a:	00db      	lsls	r3, r3, #3
 8001b0c:	1a9b      	subs	r3, r3, r2
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	440b      	add	r3, r1
 8001b12:	3350      	adds	r3, #80	; 0x50
 8001b14:	2200      	movs	r2, #0
 8001b16:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b18:	7bfb      	ldrb	r3, [r7, #15]
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	73fb      	strb	r3, [r7, #15]
 8001b1e:	7bfa      	ldrb	r2, [r7, #15]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d3af      	bcc.n	8001a88 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b28:	2300      	movs	r3, #0
 8001b2a:	73fb      	strb	r3, [r7, #15]
 8001b2c:	e044      	b.n	8001bb8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001b2e:	7bfa      	ldrb	r2, [r7, #15]
 8001b30:	6879      	ldr	r1, [r7, #4]
 8001b32:	4613      	mov	r3, r2
 8001b34:	00db      	lsls	r3, r3, #3
 8001b36:	1a9b      	subs	r3, r3, r2
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	440b      	add	r3, r1
 8001b3c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001b40:	2200      	movs	r2, #0
 8001b42:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001b44:	7bfa      	ldrb	r2, [r7, #15]
 8001b46:	6879      	ldr	r1, [r7, #4]
 8001b48:	4613      	mov	r3, r2
 8001b4a:	00db      	lsls	r3, r3, #3
 8001b4c:	1a9b      	subs	r3, r3, r2
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	440b      	add	r3, r1
 8001b52:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001b56:	7bfa      	ldrb	r2, [r7, #15]
 8001b58:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001b5a:	7bfa      	ldrb	r2, [r7, #15]
 8001b5c:	6879      	ldr	r1, [r7, #4]
 8001b5e:	4613      	mov	r3, r2
 8001b60:	00db      	lsls	r3, r3, #3
 8001b62:	1a9b      	subs	r3, r3, r2
 8001b64:	009b      	lsls	r3, r3, #2
 8001b66:	440b      	add	r3, r1
 8001b68:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001b70:	7bfa      	ldrb	r2, [r7, #15]
 8001b72:	6879      	ldr	r1, [r7, #4]
 8001b74:	4613      	mov	r3, r2
 8001b76:	00db      	lsls	r3, r3, #3
 8001b78:	1a9b      	subs	r3, r3, r2
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	440b      	add	r3, r1
 8001b7e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001b82:	2200      	movs	r2, #0
 8001b84:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001b86:	7bfa      	ldrb	r2, [r7, #15]
 8001b88:	6879      	ldr	r1, [r7, #4]
 8001b8a:	4613      	mov	r3, r2
 8001b8c:	00db      	lsls	r3, r3, #3
 8001b8e:	1a9b      	subs	r3, r3, r2
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	440b      	add	r3, r1
 8001b94:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001b98:	2200      	movs	r2, #0
 8001b9a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001b9c:	7bfa      	ldrb	r2, [r7, #15]
 8001b9e:	6879      	ldr	r1, [r7, #4]
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	00db      	lsls	r3, r3, #3
 8001ba4:	1a9b      	subs	r3, r3, r2
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	440b      	add	r3, r1
 8001baa:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001bae:	2200      	movs	r2, #0
 8001bb0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bb2:	7bfb      	ldrb	r3, [r7, #15]
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	73fb      	strb	r3, [r7, #15]
 8001bb8:	7bfa      	ldrb	r2, [r7, #15]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	d3b5      	bcc.n	8001b2e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	603b      	str	r3, [r7, #0]
 8001bc8:	687e      	ldr	r6, [r7, #4]
 8001bca:	466d      	mov	r5, sp
 8001bcc:	f106 0410 	add.w	r4, r6, #16
 8001bd0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bd2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bd4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bd6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bd8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001bdc:	e885 0003 	stmia.w	r5, {r0, r1}
 8001be0:	1d33      	adds	r3, r6, #4
 8001be2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001be4:	6838      	ldr	r0, [r7, #0]
 8001be6:	f001 fdcd 	bl	8003784 <USB_DevInit>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d005      	beq.n	8001bfc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2202      	movs	r2, #2
 8001bf4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e00d      	b.n	8001c18 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2201      	movs	r2, #1
 8001c08:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4618      	mov	r0, r3
 8001c12:	f002 fe0c 	bl	800482e <USB_DevDisconnect>

  return HAL_OK;
 8001c16:	2300      	movs	r3, #0
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	3714      	adds	r7, #20
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001c20 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b084      	sub	sp, #16
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d101      	bne.n	8001c3c <HAL_PCD_Start+0x1c>
 8001c38:	2302      	movs	r3, #2
 8001c3a:	e020      	b.n	8001c7e <HAL_PCD_Start+0x5e>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2201      	movs	r2, #1
 8001c40:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d109      	bne.n	8001c60 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d005      	beq.n	8001c60 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c58:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4618      	mov	r0, r3
 8001c66:	f002 fdca 	bl	80047fe <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f001 fd3c 	bl	80036ec <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2200      	movs	r2, #0
 8001c78:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001c7c:	2300      	movs	r3, #0
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3710      	adds	r7, #16
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}

08001c86 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001c86:	b590      	push	{r4, r7, lr}
 8001c88:	b08d      	sub	sp, #52	; 0x34
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001c94:	6a3b      	ldr	r3, [r7, #32]
 8001c96:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f002 fe71 	bl	8004984 <USB_GetMode>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	f040 839d 	bne.w	80023e4 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f002 fdd5 	bl	800485e <USB_ReadInterrupts>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	f000 8393 	beq.w	80023e2 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f002 fdcc 	bl	800485e <USB_ReadInterrupts>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	f003 0302 	and.w	r3, r3, #2
 8001ccc:	2b02      	cmp	r3, #2
 8001cce:	d107      	bne.n	8001ce0 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	695a      	ldr	r2, [r3, #20]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f002 0202 	and.w	r2, r2, #2
 8001cde:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f002 fdba 	bl	800485e <USB_ReadInterrupts>
 8001cea:	4603      	mov	r3, r0
 8001cec:	f003 0310 	and.w	r3, r3, #16
 8001cf0:	2b10      	cmp	r3, #16
 8001cf2:	d161      	bne.n	8001db8 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	699a      	ldr	r2, [r3, #24]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f022 0210 	bic.w	r2, r2, #16
 8001d02:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001d04:	6a3b      	ldr	r3, [r7, #32]
 8001d06:	6a1b      	ldr	r3, [r3, #32]
 8001d08:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001d0a:	69bb      	ldr	r3, [r7, #24]
 8001d0c:	f003 020f 	and.w	r2, r3, #15
 8001d10:	4613      	mov	r3, r2
 8001d12:	00db      	lsls	r3, r3, #3
 8001d14:	1a9b      	subs	r3, r3, r2
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001d1c:	687a      	ldr	r2, [r7, #4]
 8001d1e:	4413      	add	r3, r2
 8001d20:	3304      	adds	r3, #4
 8001d22:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001d24:	69bb      	ldr	r3, [r7, #24]
 8001d26:	0c5b      	lsrs	r3, r3, #17
 8001d28:	f003 030f 	and.w	r3, r3, #15
 8001d2c:	2b02      	cmp	r3, #2
 8001d2e:	d124      	bne.n	8001d7a <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001d30:	69ba      	ldr	r2, [r7, #24]
 8001d32:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001d36:	4013      	ands	r3, r2
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d035      	beq.n	8001da8 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001d40:	69bb      	ldr	r3, [r7, #24]
 8001d42:	091b      	lsrs	r3, r3, #4
 8001d44:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001d46:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001d4a:	b29b      	uxth	r3, r3
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	6a38      	ldr	r0, [r7, #32]
 8001d50:	f002 fc32 	bl	80045b8 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	68da      	ldr	r2, [r3, #12]
 8001d58:	69bb      	ldr	r3, [r7, #24]
 8001d5a:	091b      	lsrs	r3, r3, #4
 8001d5c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001d60:	441a      	add	r2, r3
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	699a      	ldr	r2, [r3, #24]
 8001d6a:	69bb      	ldr	r3, [r7, #24]
 8001d6c:	091b      	lsrs	r3, r3, #4
 8001d6e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001d72:	441a      	add	r2, r3
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	619a      	str	r2, [r3, #24]
 8001d78:	e016      	b.n	8001da8 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001d7a:	69bb      	ldr	r3, [r7, #24]
 8001d7c:	0c5b      	lsrs	r3, r3, #17
 8001d7e:	f003 030f 	and.w	r3, r3, #15
 8001d82:	2b06      	cmp	r3, #6
 8001d84:	d110      	bne.n	8001da8 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001d8c:	2208      	movs	r2, #8
 8001d8e:	4619      	mov	r1, r3
 8001d90:	6a38      	ldr	r0, [r7, #32]
 8001d92:	f002 fc11 	bl	80045b8 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	699a      	ldr	r2, [r3, #24]
 8001d9a:	69bb      	ldr	r3, [r7, #24]
 8001d9c:	091b      	lsrs	r3, r3, #4
 8001d9e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001da2:	441a      	add	r2, r3
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	699a      	ldr	r2, [r3, #24]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f042 0210 	orr.w	r2, r2, #16
 8001db6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f002 fd4e 	bl	800485e <USB_ReadInterrupts>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001dc8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001dcc:	d16e      	bne.n	8001eac <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f002 fd54 	bl	8004884 <USB_ReadDevAllOutEpInterrupt>
 8001ddc:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001dde:	e062      	b.n	8001ea6 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001de2:	f003 0301 	and.w	r3, r3, #1
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d057      	beq.n	8001e9a <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001df0:	b2d2      	uxtb	r2, r2
 8001df2:	4611      	mov	r1, r2
 8001df4:	4618      	mov	r0, r3
 8001df6:	f002 fd79 	bl	80048ec <USB_ReadDevOutEPInterrupt>
 8001dfa:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	f003 0301 	and.w	r3, r3, #1
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d00c      	beq.n	8001e20 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e08:	015a      	lsls	r2, r3, #5
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	4413      	add	r3, r2
 8001e0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e12:	461a      	mov	r2, r3
 8001e14:	2301      	movs	r3, #1
 8001e16:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001e18:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f000 fd98 	bl	8002950 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	f003 0308 	and.w	r3, r3, #8
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d00c      	beq.n	8001e44 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2c:	015a      	lsls	r2, r3, #5
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	4413      	add	r3, r2
 8001e32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e36:	461a      	mov	r2, r3
 8001e38:	2308      	movs	r3, #8
 8001e3a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001e3c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f000 fe92 	bl	8002b68 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	f003 0310 	and.w	r3, r3, #16
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d008      	beq.n	8001e60 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e50:	015a      	lsls	r2, r3, #5
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	4413      	add	r3, r2
 8001e56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	2310      	movs	r3, #16
 8001e5e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	f003 0320 	and.w	r3, r3, #32
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d008      	beq.n	8001e7c <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e6c:	015a      	lsls	r2, r3, #5
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	4413      	add	r3, r2
 8001e72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e76:	461a      	mov	r2, r3
 8001e78:	2320      	movs	r3, #32
 8001e7a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d009      	beq.n	8001e9a <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e88:	015a      	lsls	r2, r3, #5
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	4413      	add	r3, r2
 8001e8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e92:	461a      	mov	r2, r3
 8001e94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e98:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9c:	3301      	adds	r3, #1
 8001e9e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ea2:	085b      	lsrs	r3, r3, #1
 8001ea4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d199      	bne.n	8001de0 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f002 fcd4 	bl	800485e <USB_ReadInterrupts>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ebc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001ec0:	f040 80c0 	bne.w	8002044 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f002 fcf5 	bl	80048b8 <USB_ReadDevAllInEpInterrupt>
 8001ece:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001ed4:	e0b2      	b.n	800203c <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ed8:	f003 0301 	and.w	r3, r3, #1
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	f000 80a7 	beq.w	8002030 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ee8:	b2d2      	uxtb	r2, r2
 8001eea:	4611      	mov	r1, r2
 8001eec:	4618      	mov	r0, r3
 8001eee:	f002 fd1b 	bl	8004928 <USB_ReadDevInEPInterrupt>
 8001ef2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	f003 0301 	and.w	r3, r3, #1
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d057      	beq.n	8001fae <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f00:	f003 030f 	and.w	r3, r3, #15
 8001f04:	2201      	movs	r2, #1
 8001f06:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001f0c:	69fb      	ldr	r3, [r7, #28]
 8001f0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	43db      	mvns	r3, r3
 8001f18:	69f9      	ldr	r1, [r7, #28]
 8001f1a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001f1e:	4013      	ands	r3, r2
 8001f20:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f24:	015a      	lsls	r2, r3, #5
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	4413      	add	r3, r2
 8001f2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f2e:	461a      	mov	r2, r3
 8001f30:	2301      	movs	r3, #1
 8001f32:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	691b      	ldr	r3, [r3, #16]
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d132      	bne.n	8001fa2 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001f3c:	6879      	ldr	r1, [r7, #4]
 8001f3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f40:	4613      	mov	r3, r2
 8001f42:	00db      	lsls	r3, r3, #3
 8001f44:	1a9b      	subs	r3, r3, r2
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	440b      	add	r3, r1
 8001f4a:	3348      	adds	r3, #72	; 0x48
 8001f4c:	6819      	ldr	r1, [r3, #0]
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f52:	4613      	mov	r3, r2
 8001f54:	00db      	lsls	r3, r3, #3
 8001f56:	1a9b      	subs	r3, r3, r2
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	4403      	add	r3, r0
 8001f5c:	3344      	adds	r3, #68	; 0x44
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4419      	add	r1, r3
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f66:	4613      	mov	r3, r2
 8001f68:	00db      	lsls	r3, r3, #3
 8001f6a:	1a9b      	subs	r3, r3, r2
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	4403      	add	r3, r0
 8001f70:	3348      	adds	r3, #72	; 0x48
 8001f72:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d113      	bne.n	8001fa2 <HAL_PCD_IRQHandler+0x31c>
 8001f7a:	6879      	ldr	r1, [r7, #4]
 8001f7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f7e:	4613      	mov	r3, r2
 8001f80:	00db      	lsls	r3, r3, #3
 8001f82:	1a9b      	subs	r3, r3, r2
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	440b      	add	r3, r1
 8001f88:	3350      	adds	r3, #80	; 0x50
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d108      	bne.n	8001fa2 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6818      	ldr	r0, [r3, #0]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	2101      	movs	r1, #1
 8001f9e:	f002 fd23 	bl	80049e8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	f004 fa12 	bl	80063d2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	f003 0308 	and.w	r3, r3, #8
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d008      	beq.n	8001fca <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fba:	015a      	lsls	r2, r3, #5
 8001fbc:	69fb      	ldr	r3, [r7, #28]
 8001fbe:	4413      	add	r3, r2
 8001fc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001fc4:	461a      	mov	r2, r3
 8001fc6:	2308      	movs	r3, #8
 8001fc8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	f003 0310 	and.w	r3, r3, #16
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d008      	beq.n	8001fe6 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd6:	015a      	lsls	r2, r3, #5
 8001fd8:	69fb      	ldr	r3, [r7, #28]
 8001fda:	4413      	add	r3, r2
 8001fdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	2310      	movs	r3, #16
 8001fe4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d008      	beq.n	8002002 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff2:	015a      	lsls	r2, r3, #5
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	4413      	add	r3, r2
 8001ff8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	2340      	movs	r3, #64	; 0x40
 8002000:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	f003 0302 	and.w	r3, r3, #2
 8002008:	2b00      	cmp	r3, #0
 800200a:	d008      	beq.n	800201e <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800200c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800200e:	015a      	lsls	r2, r3, #5
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	4413      	add	r3, r2
 8002014:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002018:	461a      	mov	r2, r3
 800201a:	2302      	movs	r3, #2
 800201c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002024:	2b00      	cmp	r3, #0
 8002026:	d003      	beq.n	8002030 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002028:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f000 fc03 	bl	8002836 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002032:	3301      	adds	r3, #1
 8002034:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002038:	085b      	lsrs	r3, r3, #1
 800203a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800203c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800203e:	2b00      	cmp	r3, #0
 8002040:	f47f af49 	bne.w	8001ed6 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4618      	mov	r0, r3
 800204a:	f002 fc08 	bl	800485e <USB_ReadInterrupts>
 800204e:	4603      	mov	r3, r0
 8002050:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002054:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002058:	d122      	bne.n	80020a0 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	69fa      	ldr	r2, [r7, #28]
 8002064:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002068:	f023 0301 	bic.w	r3, r3, #1
 800206c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002074:	2b01      	cmp	r3, #1
 8002076:	d108      	bne.n	800208a <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2200      	movs	r2, #0
 800207c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002080:	2100      	movs	r1, #0
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f000 fe0e 	bl	8002ca4 <HAL_PCDEx_LPM_Callback>
 8002088:	e002      	b.n	8002090 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f004 fa0e 	bl	80064ac <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	695a      	ldr	r2, [r3, #20]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800209e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4618      	mov	r0, r3
 80020a6:	f002 fbda 	bl	800485e <USB_ReadInterrupts>
 80020aa:	4603      	mov	r3, r0
 80020ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80020b4:	d112      	bne.n	80020dc <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	f003 0301 	and.w	r3, r3, #1
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d102      	bne.n	80020cc <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f004 f9ca 	bl	8006460 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	695a      	ldr	r2, [r3, #20]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80020da:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4618      	mov	r0, r3
 80020e2:	f002 fbbc 	bl	800485e <USB_ReadInterrupts>
 80020e6:	4603      	mov	r3, r0
 80020e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020f0:	f040 80c7 	bne.w	8002282 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	69fa      	ldr	r2, [r7, #28]
 80020fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002102:	f023 0301 	bic.w	r3, r3, #1
 8002106:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	2110      	movs	r1, #16
 800210e:	4618      	mov	r0, r3
 8002110:	f001 fc9c 	bl	8003a4c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002114:	2300      	movs	r3, #0
 8002116:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002118:	e056      	b.n	80021c8 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800211a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800211c:	015a      	lsls	r2, r3, #5
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	4413      	add	r3, r2
 8002122:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002126:	461a      	mov	r2, r3
 8002128:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800212c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800212e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002130:	015a      	lsls	r2, r3, #5
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	4413      	add	r3, r2
 8002136:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800213e:	0151      	lsls	r1, r2, #5
 8002140:	69fa      	ldr	r2, [r7, #28]
 8002142:	440a      	add	r2, r1
 8002144:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002148:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800214c:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800214e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002150:	015a      	lsls	r2, r3, #5
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	4413      	add	r3, r2
 8002156:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800215e:	0151      	lsls	r1, r2, #5
 8002160:	69fa      	ldr	r2, [r7, #28]
 8002162:	440a      	add	r2, r1
 8002164:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002168:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800216c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800216e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002170:	015a      	lsls	r2, r3, #5
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	4413      	add	r3, r2
 8002176:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800217a:	461a      	mov	r2, r3
 800217c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002180:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002184:	015a      	lsls	r2, r3, #5
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	4413      	add	r3, r2
 800218a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002192:	0151      	lsls	r1, r2, #5
 8002194:	69fa      	ldr	r2, [r7, #28]
 8002196:	440a      	add	r2, r1
 8002198:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800219c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80021a0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80021a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021a4:	015a      	lsls	r2, r3, #5
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	4413      	add	r3, r2
 80021aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80021b2:	0151      	lsls	r1, r2, #5
 80021b4:	69fa      	ldr	r2, [r7, #28]
 80021b6:	440a      	add	r2, r1
 80021b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80021bc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80021c0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021c4:	3301      	adds	r3, #1
 80021c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80021ce:	429a      	cmp	r2, r3
 80021d0:	d3a3      	bcc.n	800211a <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021d8:	69db      	ldr	r3, [r3, #28]
 80021da:	69fa      	ldr	r2, [r7, #28]
 80021dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80021e0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80021e4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d016      	beq.n	800221c <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80021f8:	69fa      	ldr	r2, [r7, #28]
 80021fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80021fe:	f043 030b 	orr.w	r3, r3, #11
 8002202:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800220c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800220e:	69fa      	ldr	r2, [r7, #28]
 8002210:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002214:	f043 030b 	orr.w	r3, r3, #11
 8002218:	6453      	str	r3, [r2, #68]	; 0x44
 800221a:	e015      	b.n	8002248 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002222:	695b      	ldr	r3, [r3, #20]
 8002224:	69fa      	ldr	r2, [r7, #28]
 8002226:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800222a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800222e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002232:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800223a:	691b      	ldr	r3, [r3, #16]
 800223c:	69fa      	ldr	r2, [r7, #28]
 800223e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002242:	f043 030b 	orr.w	r3, r3, #11
 8002246:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	69fa      	ldr	r2, [r7, #28]
 8002252:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002256:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800225a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6818      	ldr	r0, [r3, #0]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	691b      	ldr	r3, [r3, #16]
 8002264:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800226c:	461a      	mov	r2, r3
 800226e:	f002 fbbb 	bl	80049e8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	695a      	ldr	r2, [r3, #20]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002280:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4618      	mov	r0, r3
 8002288:	f002 fae9 	bl	800485e <USB_ReadInterrupts>
 800228c:	4603      	mov	r3, r0
 800228e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002292:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002296:	d124      	bne.n	80022e2 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4618      	mov	r0, r3
 800229e:	f002 fb7f 	bl	80049a0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4618      	mov	r0, r3
 80022a8:	f001 fc31 	bl	8003b0e <USB_GetDevSpeed>
 80022ac:	4603      	mov	r3, r0
 80022ae:	461a      	mov	r2, r3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681c      	ldr	r4, [r3, #0]
 80022b8:	f001 f908 	bl	80034cc <HAL_RCC_GetHCLKFreq>
 80022bc:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	461a      	mov	r2, r3
 80022c6:	4620      	mov	r0, r4
 80022c8:	f001 f96e 	bl	80035a8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80022cc:	6878      	ldr	r0, [r7, #4]
 80022ce:	f004 f8a8 	bl	8006422 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	695a      	ldr	r2, [r3, #20]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80022e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4618      	mov	r0, r3
 80022e8:	f002 fab9 	bl	800485e <USB_ReadInterrupts>
 80022ec:	4603      	mov	r3, r0
 80022ee:	f003 0308 	and.w	r3, r3, #8
 80022f2:	2b08      	cmp	r3, #8
 80022f4:	d10a      	bne.n	800230c <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f004 f885 	bl	8006406 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	695a      	ldr	r2, [r3, #20]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f002 0208 	and.w	r2, r2, #8
 800230a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4618      	mov	r0, r3
 8002312:	f002 faa4 	bl	800485e <USB_ReadInterrupts>
 8002316:	4603      	mov	r3, r0
 8002318:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800231c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002320:	d10f      	bne.n	8002342 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002322:	2300      	movs	r3, #0
 8002324:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002328:	b2db      	uxtb	r3, r3
 800232a:	4619      	mov	r1, r3
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	f004 f8dd 	bl	80064ec <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	695a      	ldr	r2, [r3, #20]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002340:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4618      	mov	r0, r3
 8002348:	f002 fa89 	bl	800485e <USB_ReadInterrupts>
 800234c:	4603      	mov	r3, r0
 800234e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002352:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002356:	d10f      	bne.n	8002378 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002358:	2300      	movs	r3, #0
 800235a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800235c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235e:	b2db      	uxtb	r3, r3
 8002360:	4619      	mov	r1, r3
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f004 f8b0 	bl	80064c8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	695a      	ldr	r2, [r3, #20]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002376:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4618      	mov	r0, r3
 800237e:	f002 fa6e 	bl	800485e <USB_ReadInterrupts>
 8002382:	4603      	mov	r3, r0
 8002384:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002388:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800238c:	d10a      	bne.n	80023a4 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f004 f8be 	bl	8006510 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	695a      	ldr	r2, [r3, #20]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80023a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4618      	mov	r0, r3
 80023aa:	f002 fa58 	bl	800485e <USB_ReadInterrupts>
 80023ae:	4603      	mov	r3, r0
 80023b0:	f003 0304 	and.w	r3, r3, #4
 80023b4:	2b04      	cmp	r3, #4
 80023b6:	d115      	bne.n	80023e4 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80023c0:	69bb      	ldr	r3, [r7, #24]
 80023c2:	f003 0304 	and.w	r3, r3, #4
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d002      	beq.n	80023d0 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f004 f8ae 	bl	800652c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	6859      	ldr	r1, [r3, #4]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	69ba      	ldr	r2, [r7, #24]
 80023dc:	430a      	orrs	r2, r1
 80023de:	605a      	str	r2, [r3, #4]
 80023e0:	e000      	b.n	80023e4 <HAL_PCD_IRQHandler+0x75e>
      return;
 80023e2:	bf00      	nop
    }
  }
}
 80023e4:	3734      	adds	r7, #52	; 0x34
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd90      	pop	{r4, r7, pc}

080023ea <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80023ea:	b580      	push	{r7, lr}
 80023ec:	b082      	sub	sp, #8
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	6078      	str	r0, [r7, #4]
 80023f2:	460b      	mov	r3, r1
 80023f4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d101      	bne.n	8002404 <HAL_PCD_SetAddress+0x1a>
 8002400:	2302      	movs	r3, #2
 8002402:	e013      	b.n	800242c <HAL_PCD_SetAddress+0x42>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2201      	movs	r2, #1
 8002408:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	78fa      	ldrb	r2, [r7, #3]
 8002410:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	78fa      	ldrb	r2, [r7, #3]
 800241a:	4611      	mov	r1, r2
 800241c:	4618      	mov	r0, r3
 800241e:	f002 f9c8 	bl	80047b2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2200      	movs	r2, #0
 8002426:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800242a:	2300      	movs	r3, #0
}
 800242c:	4618      	mov	r0, r3
 800242e:	3708      	adds	r7, #8
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}

08002434 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b084      	sub	sp, #16
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
 800243c:	4608      	mov	r0, r1
 800243e:	4611      	mov	r1, r2
 8002440:	461a      	mov	r2, r3
 8002442:	4603      	mov	r3, r0
 8002444:	70fb      	strb	r3, [r7, #3]
 8002446:	460b      	mov	r3, r1
 8002448:	803b      	strh	r3, [r7, #0]
 800244a:	4613      	mov	r3, r2
 800244c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800244e:	2300      	movs	r3, #0
 8002450:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002452:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002456:	2b00      	cmp	r3, #0
 8002458:	da0f      	bge.n	800247a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800245a:	78fb      	ldrb	r3, [r7, #3]
 800245c:	f003 020f 	and.w	r2, r3, #15
 8002460:	4613      	mov	r3, r2
 8002462:	00db      	lsls	r3, r3, #3
 8002464:	1a9b      	subs	r3, r3, r2
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	3338      	adds	r3, #56	; 0x38
 800246a:	687a      	ldr	r2, [r7, #4]
 800246c:	4413      	add	r3, r2
 800246e:	3304      	adds	r3, #4
 8002470:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2201      	movs	r2, #1
 8002476:	705a      	strb	r2, [r3, #1]
 8002478:	e00f      	b.n	800249a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800247a:	78fb      	ldrb	r3, [r7, #3]
 800247c:	f003 020f 	and.w	r2, r3, #15
 8002480:	4613      	mov	r3, r2
 8002482:	00db      	lsls	r3, r3, #3
 8002484:	1a9b      	subs	r3, r3, r2
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800248c:	687a      	ldr	r2, [r7, #4]
 800248e:	4413      	add	r3, r2
 8002490:	3304      	adds	r3, #4
 8002492:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	2200      	movs	r2, #0
 8002498:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800249a:	78fb      	ldrb	r3, [r7, #3]
 800249c:	f003 030f 	and.w	r3, r3, #15
 80024a0:	b2da      	uxtb	r2, r3
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80024a6:	883a      	ldrh	r2, [r7, #0]
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	78ba      	ldrb	r2, [r7, #2]
 80024b0:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	785b      	ldrb	r3, [r3, #1]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d004      	beq.n	80024c4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	781b      	ldrb	r3, [r3, #0]
 80024be:	b29a      	uxth	r2, r3
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80024c4:	78bb      	ldrb	r3, [r7, #2]
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	d102      	bne.n	80024d0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2200      	movs	r2, #0
 80024ce:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d101      	bne.n	80024de <HAL_PCD_EP_Open+0xaa>
 80024da:	2302      	movs	r3, #2
 80024dc:	e00e      	b.n	80024fc <HAL_PCD_EP_Open+0xc8>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2201      	movs	r2, #1
 80024e2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	68f9      	ldr	r1, [r7, #12]
 80024ec:	4618      	mov	r0, r3
 80024ee:	f001 fb33 	bl	8003b58 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2200      	movs	r2, #0
 80024f6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80024fa:	7afb      	ldrb	r3, [r7, #11]
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	3710      	adds	r7, #16
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}

08002504 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b084      	sub	sp, #16
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	460b      	mov	r3, r1
 800250e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002510:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002514:	2b00      	cmp	r3, #0
 8002516:	da0f      	bge.n	8002538 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002518:	78fb      	ldrb	r3, [r7, #3]
 800251a:	f003 020f 	and.w	r2, r3, #15
 800251e:	4613      	mov	r3, r2
 8002520:	00db      	lsls	r3, r3, #3
 8002522:	1a9b      	subs	r3, r3, r2
 8002524:	009b      	lsls	r3, r3, #2
 8002526:	3338      	adds	r3, #56	; 0x38
 8002528:	687a      	ldr	r2, [r7, #4]
 800252a:	4413      	add	r3, r2
 800252c:	3304      	adds	r3, #4
 800252e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2201      	movs	r2, #1
 8002534:	705a      	strb	r2, [r3, #1]
 8002536:	e00f      	b.n	8002558 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002538:	78fb      	ldrb	r3, [r7, #3]
 800253a:	f003 020f 	and.w	r2, r3, #15
 800253e:	4613      	mov	r3, r2
 8002540:	00db      	lsls	r3, r3, #3
 8002542:	1a9b      	subs	r3, r3, r2
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	4413      	add	r3, r2
 800254e:	3304      	adds	r3, #4
 8002550:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2200      	movs	r2, #0
 8002556:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002558:	78fb      	ldrb	r3, [r7, #3]
 800255a:	f003 030f 	and.w	r3, r3, #15
 800255e:	b2da      	uxtb	r2, r3
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800256a:	2b01      	cmp	r3, #1
 800256c:	d101      	bne.n	8002572 <HAL_PCD_EP_Close+0x6e>
 800256e:	2302      	movs	r3, #2
 8002570:	e00e      	b.n	8002590 <HAL_PCD_EP_Close+0x8c>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2201      	movs	r2, #1
 8002576:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	68f9      	ldr	r1, [r7, #12]
 8002580:	4618      	mov	r0, r3
 8002582:	f001 fb71 	bl	8003c68 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2200      	movs	r2, #0
 800258a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800258e:	2300      	movs	r3, #0
}
 8002590:	4618      	mov	r0, r3
 8002592:	3710      	adds	r7, #16
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}

08002598 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b086      	sub	sp, #24
 800259c:	af00      	add	r7, sp, #0
 800259e:	60f8      	str	r0, [r7, #12]
 80025a0:	607a      	str	r2, [r7, #4]
 80025a2:	603b      	str	r3, [r7, #0]
 80025a4:	460b      	mov	r3, r1
 80025a6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80025a8:	7afb      	ldrb	r3, [r7, #11]
 80025aa:	f003 020f 	and.w	r2, r3, #15
 80025ae:	4613      	mov	r3, r2
 80025b0:	00db      	lsls	r3, r3, #3
 80025b2:	1a9b      	subs	r3, r3, r2
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80025ba:	68fa      	ldr	r2, [r7, #12]
 80025bc:	4413      	add	r3, r2
 80025be:	3304      	adds	r3, #4
 80025c0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	687a      	ldr	r2, [r7, #4]
 80025c6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	683a      	ldr	r2, [r7, #0]
 80025cc:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	2200      	movs	r2, #0
 80025d2:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	2200      	movs	r2, #0
 80025d8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80025da:	7afb      	ldrb	r3, [r7, #11]
 80025dc:	f003 030f 	and.w	r3, r3, #15
 80025e0:	b2da      	uxtb	r2, r3
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	691b      	ldr	r3, [r3, #16]
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d102      	bne.n	80025f4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80025f4:	7afb      	ldrb	r3, [r7, #11]
 80025f6:	f003 030f 	and.w	r3, r3, #15
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d109      	bne.n	8002612 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	6818      	ldr	r0, [r3, #0]
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	691b      	ldr	r3, [r3, #16]
 8002606:	b2db      	uxtb	r3, r3
 8002608:	461a      	mov	r2, r3
 800260a:	6979      	ldr	r1, [r7, #20]
 800260c:	f001 fe4c 	bl	80042a8 <USB_EP0StartXfer>
 8002610:	e008      	b.n	8002624 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	6818      	ldr	r0, [r3, #0]
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	691b      	ldr	r3, [r3, #16]
 800261a:	b2db      	uxtb	r3, r3
 800261c:	461a      	mov	r2, r3
 800261e:	6979      	ldr	r1, [r7, #20]
 8002620:	f001 fbfe 	bl	8003e20 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002624:	2300      	movs	r3, #0
}
 8002626:	4618      	mov	r0, r3
 8002628:	3718      	adds	r7, #24
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}

0800262e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800262e:	b580      	push	{r7, lr}
 8002630:	b086      	sub	sp, #24
 8002632:	af00      	add	r7, sp, #0
 8002634:	60f8      	str	r0, [r7, #12]
 8002636:	607a      	str	r2, [r7, #4]
 8002638:	603b      	str	r3, [r7, #0]
 800263a:	460b      	mov	r3, r1
 800263c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800263e:	7afb      	ldrb	r3, [r7, #11]
 8002640:	f003 020f 	and.w	r2, r3, #15
 8002644:	4613      	mov	r3, r2
 8002646:	00db      	lsls	r3, r3, #3
 8002648:	1a9b      	subs	r3, r3, r2
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	3338      	adds	r3, #56	; 0x38
 800264e:	68fa      	ldr	r2, [r7, #12]
 8002650:	4413      	add	r3, r2
 8002652:	3304      	adds	r3, #4
 8002654:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	687a      	ldr	r2, [r7, #4]
 800265a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	683a      	ldr	r2, [r7, #0]
 8002660:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	2200      	movs	r2, #0
 8002666:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	2201      	movs	r2, #1
 800266c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800266e:	7afb      	ldrb	r3, [r7, #11]
 8002670:	f003 030f 	and.w	r3, r3, #15
 8002674:	b2da      	uxtb	r2, r3
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	691b      	ldr	r3, [r3, #16]
 800267e:	2b01      	cmp	r3, #1
 8002680:	d102      	bne.n	8002688 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002682:	687a      	ldr	r2, [r7, #4]
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002688:	7afb      	ldrb	r3, [r7, #11]
 800268a:	f003 030f 	and.w	r3, r3, #15
 800268e:	2b00      	cmp	r3, #0
 8002690:	d109      	bne.n	80026a6 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	6818      	ldr	r0, [r3, #0]
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	691b      	ldr	r3, [r3, #16]
 800269a:	b2db      	uxtb	r3, r3
 800269c:	461a      	mov	r2, r3
 800269e:	6979      	ldr	r1, [r7, #20]
 80026a0:	f001 fe02 	bl	80042a8 <USB_EP0StartXfer>
 80026a4:	e008      	b.n	80026b8 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	6818      	ldr	r0, [r3, #0]
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	691b      	ldr	r3, [r3, #16]
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	461a      	mov	r2, r3
 80026b2:	6979      	ldr	r1, [r7, #20]
 80026b4:	f001 fbb4 	bl	8003e20 <USB_EPStartXfer>
  }

  return HAL_OK;
 80026b8:	2300      	movs	r3, #0
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3718      	adds	r7, #24
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}

080026c2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80026c2:	b580      	push	{r7, lr}
 80026c4:	b084      	sub	sp, #16
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	6078      	str	r0, [r7, #4]
 80026ca:	460b      	mov	r3, r1
 80026cc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80026ce:	78fb      	ldrb	r3, [r7, #3]
 80026d0:	f003 020f 	and.w	r2, r3, #15
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	429a      	cmp	r2, r3
 80026da:	d901      	bls.n	80026e0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	e050      	b.n	8002782 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80026e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	da0f      	bge.n	8002708 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026e8:	78fb      	ldrb	r3, [r7, #3]
 80026ea:	f003 020f 	and.w	r2, r3, #15
 80026ee:	4613      	mov	r3, r2
 80026f0:	00db      	lsls	r3, r3, #3
 80026f2:	1a9b      	subs	r3, r3, r2
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	3338      	adds	r3, #56	; 0x38
 80026f8:	687a      	ldr	r2, [r7, #4]
 80026fa:	4413      	add	r3, r2
 80026fc:	3304      	adds	r3, #4
 80026fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	2201      	movs	r2, #1
 8002704:	705a      	strb	r2, [r3, #1]
 8002706:	e00d      	b.n	8002724 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002708:	78fa      	ldrb	r2, [r7, #3]
 800270a:	4613      	mov	r3, r2
 800270c:	00db      	lsls	r3, r3, #3
 800270e:	1a9b      	subs	r3, r3, r2
 8002710:	009b      	lsls	r3, r3, #2
 8002712:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	4413      	add	r3, r2
 800271a:	3304      	adds	r3, #4
 800271c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2200      	movs	r2, #0
 8002722:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2201      	movs	r2, #1
 8002728:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800272a:	78fb      	ldrb	r3, [r7, #3]
 800272c:	f003 030f 	and.w	r3, r3, #15
 8002730:	b2da      	uxtb	r2, r3
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800273c:	2b01      	cmp	r3, #1
 800273e:	d101      	bne.n	8002744 <HAL_PCD_EP_SetStall+0x82>
 8002740:	2302      	movs	r3, #2
 8002742:	e01e      	b.n	8002782 <HAL_PCD_EP_SetStall+0xc0>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2201      	movs	r2, #1
 8002748:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	68f9      	ldr	r1, [r7, #12]
 8002752:	4618      	mov	r0, r3
 8002754:	f001 ff59 	bl	800460a <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002758:	78fb      	ldrb	r3, [r7, #3]
 800275a:	f003 030f 	and.w	r3, r3, #15
 800275e:	2b00      	cmp	r3, #0
 8002760:	d10a      	bne.n	8002778 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6818      	ldr	r0, [r3, #0]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	691b      	ldr	r3, [r3, #16]
 800276a:	b2d9      	uxtb	r1, r3
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002772:	461a      	mov	r2, r3
 8002774:	f002 f938 	bl	80049e8 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2200      	movs	r2, #0
 800277c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002780:	2300      	movs	r3, #0
}
 8002782:	4618      	mov	r0, r3
 8002784:	3710      	adds	r7, #16
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}

0800278a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800278a:	b580      	push	{r7, lr}
 800278c:	b084      	sub	sp, #16
 800278e:	af00      	add	r7, sp, #0
 8002790:	6078      	str	r0, [r7, #4]
 8002792:	460b      	mov	r3, r1
 8002794:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002796:	78fb      	ldrb	r3, [r7, #3]
 8002798:	f003 020f 	and.w	r2, r3, #15
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d901      	bls.n	80027a8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e042      	b.n	800282e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80027a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	da0f      	bge.n	80027d0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027b0:	78fb      	ldrb	r3, [r7, #3]
 80027b2:	f003 020f 	and.w	r2, r3, #15
 80027b6:	4613      	mov	r3, r2
 80027b8:	00db      	lsls	r3, r3, #3
 80027ba:	1a9b      	subs	r3, r3, r2
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	3338      	adds	r3, #56	; 0x38
 80027c0:	687a      	ldr	r2, [r7, #4]
 80027c2:	4413      	add	r3, r2
 80027c4:	3304      	adds	r3, #4
 80027c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2201      	movs	r2, #1
 80027cc:	705a      	strb	r2, [r3, #1]
 80027ce:	e00f      	b.n	80027f0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80027d0:	78fb      	ldrb	r3, [r7, #3]
 80027d2:	f003 020f 	and.w	r2, r3, #15
 80027d6:	4613      	mov	r3, r2
 80027d8:	00db      	lsls	r3, r3, #3
 80027da:	1a9b      	subs	r3, r3, r2
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80027e2:	687a      	ldr	r2, [r7, #4]
 80027e4:	4413      	add	r3, r2
 80027e6:	3304      	adds	r3, #4
 80027e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2200      	movs	r2, #0
 80027ee:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2200      	movs	r2, #0
 80027f4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80027f6:	78fb      	ldrb	r3, [r7, #3]
 80027f8:	f003 030f 	and.w	r3, r3, #15
 80027fc:	b2da      	uxtb	r2, r3
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002808:	2b01      	cmp	r3, #1
 800280a:	d101      	bne.n	8002810 <HAL_PCD_EP_ClrStall+0x86>
 800280c:	2302      	movs	r3, #2
 800280e:	e00e      	b.n	800282e <HAL_PCD_EP_ClrStall+0xa4>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2201      	movs	r2, #1
 8002814:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	68f9      	ldr	r1, [r7, #12]
 800281e:	4618      	mov	r0, r3
 8002820:	f001 ff61 	bl	80046e6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2200      	movs	r2, #0
 8002828:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800282c:	2300      	movs	r3, #0
}
 800282e:	4618      	mov	r0, r3
 8002830:	3710      	adds	r7, #16
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}

08002836 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002836:	b580      	push	{r7, lr}
 8002838:	b08a      	sub	sp, #40	; 0x28
 800283a:	af02      	add	r7, sp, #8
 800283c:	6078      	str	r0, [r7, #4]
 800283e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800284a:	683a      	ldr	r2, [r7, #0]
 800284c:	4613      	mov	r3, r2
 800284e:	00db      	lsls	r3, r3, #3
 8002850:	1a9b      	subs	r3, r3, r2
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	3338      	adds	r3, #56	; 0x38
 8002856:	687a      	ldr	r2, [r7, #4]
 8002858:	4413      	add	r3, r2
 800285a:	3304      	adds	r3, #4
 800285c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	699a      	ldr	r2, [r3, #24]
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	695b      	ldr	r3, [r3, #20]
 8002866:	429a      	cmp	r2, r3
 8002868:	d901      	bls.n	800286e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e06c      	b.n	8002948 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	695a      	ldr	r2, [r3, #20]
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	699b      	ldr	r3, [r3, #24]
 8002876:	1ad3      	subs	r3, r2, r3
 8002878:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	69fa      	ldr	r2, [r7, #28]
 8002880:	429a      	cmp	r2, r3
 8002882:	d902      	bls.n	800288a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	3303      	adds	r3, #3
 800288e:	089b      	lsrs	r3, r3, #2
 8002890:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002892:	e02b      	b.n	80028ec <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	695a      	ldr	r2, [r3, #20]
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	699b      	ldr	r3, [r3, #24]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	69fa      	ldr	r2, [r7, #28]
 80028a6:	429a      	cmp	r2, r3
 80028a8:	d902      	bls.n	80028b0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80028b0:	69fb      	ldr	r3, [r7, #28]
 80028b2:	3303      	adds	r3, #3
 80028b4:	089b      	lsrs	r3, r3, #2
 80028b6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	68d9      	ldr	r1, [r3, #12]
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	b2da      	uxtb	r2, r3
 80028c0:	69fb      	ldr	r3, [r7, #28]
 80028c2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	9300      	str	r3, [sp, #0]
 80028cc:	4603      	mov	r3, r0
 80028ce:	6978      	ldr	r0, [r7, #20]
 80028d0:	f001 fe3d 	bl	800454e <USB_WritePacket>

    ep->xfer_buff  += len;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	68da      	ldr	r2, [r3, #12]
 80028d8:	69fb      	ldr	r3, [r7, #28]
 80028da:	441a      	add	r2, r3
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	699a      	ldr	r2, [r3, #24]
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	441a      	add	r2, r3
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	015a      	lsls	r2, r3, #5
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	4413      	add	r3, r2
 80028f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028f8:	699b      	ldr	r3, [r3, #24]
 80028fa:	b29b      	uxth	r3, r3
 80028fc:	69ba      	ldr	r2, [r7, #24]
 80028fe:	429a      	cmp	r2, r3
 8002900:	d809      	bhi.n	8002916 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	699a      	ldr	r2, [r3, #24]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800290a:	429a      	cmp	r2, r3
 800290c:	d203      	bcs.n	8002916 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	695b      	ldr	r3, [r3, #20]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d1be      	bne.n	8002894 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	695a      	ldr	r2, [r3, #20]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	699b      	ldr	r3, [r3, #24]
 800291e:	429a      	cmp	r2, r3
 8002920:	d811      	bhi.n	8002946 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	f003 030f 	and.w	r3, r3, #15
 8002928:	2201      	movs	r2, #1
 800292a:	fa02 f303 	lsl.w	r3, r2, r3
 800292e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002936:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	43db      	mvns	r3, r3
 800293c:	6939      	ldr	r1, [r7, #16]
 800293e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002942:	4013      	ands	r3, r2
 8002944:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002946:	2300      	movs	r3, #0
}
 8002948:	4618      	mov	r0, r3
 800294a:	3720      	adds	r7, #32
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}

08002950 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b086      	sub	sp, #24
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
 8002958:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	333c      	adds	r3, #60	; 0x3c
 8002968:	3304      	adds	r3, #4
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	015a      	lsls	r2, r3, #5
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	4413      	add	r3, r2
 8002976:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	691b      	ldr	r3, [r3, #16]
 8002982:	2b01      	cmp	r3, #1
 8002984:	f040 80a0 	bne.w	8002ac8 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	f003 0308 	and.w	r3, r3, #8
 800298e:	2b00      	cmp	r3, #0
 8002990:	d015      	beq.n	80029be <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	4a72      	ldr	r2, [pc, #456]	; (8002b60 <PCD_EP_OutXfrComplete_int+0x210>)
 8002996:	4293      	cmp	r3, r2
 8002998:	f240 80dd 	bls.w	8002b56 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	f000 80d7 	beq.w	8002b56 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	015a      	lsls	r2, r3, #5
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	4413      	add	r3, r2
 80029b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029b4:	461a      	mov	r2, r3
 80029b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029ba:	6093      	str	r3, [r2, #8]
 80029bc:	e0cb      	b.n	8002b56 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	f003 0320 	and.w	r3, r3, #32
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d009      	beq.n	80029dc <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	015a      	lsls	r2, r3, #5
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	4413      	add	r3, r2
 80029d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029d4:	461a      	mov	r2, r3
 80029d6:	2320      	movs	r3, #32
 80029d8:	6093      	str	r3, [r2, #8]
 80029da:	e0bc      	b.n	8002b56 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	f040 80b7 	bne.w	8002b56 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	4a5d      	ldr	r2, [pc, #372]	; (8002b60 <PCD_EP_OutXfrComplete_int+0x210>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d90f      	bls.n	8002a10 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d00a      	beq.n	8002a10 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	015a      	lsls	r2, r3, #5
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	4413      	add	r3, r2
 8002a02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a06:	461a      	mov	r2, r3
 8002a08:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a0c:	6093      	str	r3, [r2, #8]
 8002a0e:	e0a2      	b.n	8002b56 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8002a10:	6879      	ldr	r1, [r7, #4]
 8002a12:	683a      	ldr	r2, [r7, #0]
 8002a14:	4613      	mov	r3, r2
 8002a16:	00db      	lsls	r3, r3, #3
 8002a18:	1a9b      	subs	r3, r3, r2
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	440b      	add	r3, r1
 8002a1e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002a22:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	0159      	lsls	r1, r3, #5
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	440b      	add	r3, r1
 8002a2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a30:	691b      	ldr	r3, [r3, #16]
 8002a32:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8002a36:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	683a      	ldr	r2, [r7, #0]
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	00db      	lsls	r3, r3, #3
 8002a40:	1a9b      	subs	r3, r3, r2
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	4403      	add	r3, r0
 8002a46:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002a4a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002a4c:	6879      	ldr	r1, [r7, #4]
 8002a4e:	683a      	ldr	r2, [r7, #0]
 8002a50:	4613      	mov	r3, r2
 8002a52:	00db      	lsls	r3, r3, #3
 8002a54:	1a9b      	subs	r3, r3, r2
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	440b      	add	r3, r1
 8002a5a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002a5e:	6819      	ldr	r1, [r3, #0]
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	683a      	ldr	r2, [r7, #0]
 8002a64:	4613      	mov	r3, r2
 8002a66:	00db      	lsls	r3, r3, #3
 8002a68:	1a9b      	subs	r3, r3, r2
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	4403      	add	r3, r0
 8002a6e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4419      	add	r1, r3
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	683a      	ldr	r2, [r7, #0]
 8002a7a:	4613      	mov	r3, r2
 8002a7c:	00db      	lsls	r3, r3, #3
 8002a7e:	1a9b      	subs	r3, r3, r2
 8002a80:	009b      	lsls	r3, r3, #2
 8002a82:	4403      	add	r3, r0
 8002a84:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002a88:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d114      	bne.n	8002aba <PCD_EP_OutXfrComplete_int+0x16a>
 8002a90:	6879      	ldr	r1, [r7, #4]
 8002a92:	683a      	ldr	r2, [r7, #0]
 8002a94:	4613      	mov	r3, r2
 8002a96:	00db      	lsls	r3, r3, #3
 8002a98:	1a9b      	subs	r3, r3, r2
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	440b      	add	r3, r1
 8002a9e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d108      	bne.n	8002aba <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6818      	ldr	r0, [r3, #0]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	2101      	movs	r1, #1
 8002ab6:	f001 ff97 	bl	80049e8 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	4619      	mov	r1, r3
 8002ac0:	6878      	ldr	r0, [r7, #4]
 8002ac2:	f003 fc6b 	bl	800639c <HAL_PCD_DataOutStageCallback>
 8002ac6:	e046      	b.n	8002b56 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	4a26      	ldr	r2, [pc, #152]	; (8002b64 <PCD_EP_OutXfrComplete_int+0x214>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d124      	bne.n	8002b1a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d00a      	beq.n	8002af0 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	015a      	lsls	r2, r3, #5
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	4413      	add	r3, r2
 8002ae2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ae6:	461a      	mov	r2, r3
 8002ae8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002aec:	6093      	str	r3, [r2, #8]
 8002aee:	e032      	b.n	8002b56 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	f003 0320 	and.w	r3, r3, #32
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d008      	beq.n	8002b0c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	015a      	lsls	r2, r3, #5
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	4413      	add	r3, r2
 8002b02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b06:	461a      	mov	r2, r3
 8002b08:	2320      	movs	r3, #32
 8002b0a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	b2db      	uxtb	r3, r3
 8002b10:	4619      	mov	r1, r3
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f003 fc42 	bl	800639c <HAL_PCD_DataOutStageCallback>
 8002b18:	e01d      	b.n	8002b56 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d114      	bne.n	8002b4a <PCD_EP_OutXfrComplete_int+0x1fa>
 8002b20:	6879      	ldr	r1, [r7, #4]
 8002b22:	683a      	ldr	r2, [r7, #0]
 8002b24:	4613      	mov	r3, r2
 8002b26:	00db      	lsls	r3, r3, #3
 8002b28:	1a9b      	subs	r3, r3, r2
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	440b      	add	r3, r1
 8002b2e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d108      	bne.n	8002b4a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6818      	ldr	r0, [r3, #0]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002b42:	461a      	mov	r2, r3
 8002b44:	2100      	movs	r1, #0
 8002b46:	f001 ff4f 	bl	80049e8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	4619      	mov	r1, r3
 8002b50:	6878      	ldr	r0, [r7, #4]
 8002b52:	f003 fc23 	bl	800639c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002b56:	2300      	movs	r3, #0
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3718      	adds	r7, #24
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	4f54300a 	.word	0x4f54300a
 8002b64:	4f54310a 	.word	0x4f54310a

08002b68 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b086      	sub	sp, #24
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	333c      	adds	r3, #60	; 0x3c
 8002b80:	3304      	adds	r3, #4
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	015a      	lsls	r2, r3, #5
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	4413      	add	r3, r2
 8002b8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	4a15      	ldr	r2, [pc, #84]	; (8002bf0 <PCD_EP_OutSetupPacket_int+0x88>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d90e      	bls.n	8002bbc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d009      	beq.n	8002bbc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	015a      	lsls	r2, r3, #5
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	4413      	add	r3, r2
 8002bb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002bba:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	f003 fbdb 	bl	8006378 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	4a0a      	ldr	r2, [pc, #40]	; (8002bf0 <PCD_EP_OutSetupPacket_int+0x88>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d90c      	bls.n	8002be4 <PCD_EP_OutSetupPacket_int+0x7c>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	691b      	ldr	r3, [r3, #16]
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d108      	bne.n	8002be4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6818      	ldr	r0, [r3, #0]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002bdc:	461a      	mov	r2, r3
 8002bde:	2101      	movs	r1, #1
 8002be0:	f001 ff02 	bl	80049e8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002be4:	2300      	movs	r3, #0
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3718      	adds	r7, #24
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	4f54300a 	.word	0x4f54300a

08002bf4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b085      	sub	sp, #20
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
 8002bfc:	460b      	mov	r3, r1
 8002bfe:	70fb      	strb	r3, [r7, #3]
 8002c00:	4613      	mov	r3, r2
 8002c02:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c0a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002c0c:	78fb      	ldrb	r3, [r7, #3]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d107      	bne.n	8002c22 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002c12:	883b      	ldrh	r3, [r7, #0]
 8002c14:	0419      	lsls	r1, r3, #16
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	68ba      	ldr	r2, [r7, #8]
 8002c1c:	430a      	orrs	r2, r1
 8002c1e:	629a      	str	r2, [r3, #40]	; 0x28
 8002c20:	e028      	b.n	8002c74 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c28:	0c1b      	lsrs	r3, r3, #16
 8002c2a:	68ba      	ldr	r2, [r7, #8]
 8002c2c:	4413      	add	r3, r2
 8002c2e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002c30:	2300      	movs	r3, #0
 8002c32:	73fb      	strb	r3, [r7, #15]
 8002c34:	e00d      	b.n	8002c52 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	7bfb      	ldrb	r3, [r7, #15]
 8002c3c:	3340      	adds	r3, #64	; 0x40
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	4413      	add	r3, r2
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	0c1b      	lsrs	r3, r3, #16
 8002c46:	68ba      	ldr	r2, [r7, #8]
 8002c48:	4413      	add	r3, r2
 8002c4a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002c4c:	7bfb      	ldrb	r3, [r7, #15]
 8002c4e:	3301      	adds	r3, #1
 8002c50:	73fb      	strb	r3, [r7, #15]
 8002c52:	7bfa      	ldrb	r2, [r7, #15]
 8002c54:	78fb      	ldrb	r3, [r7, #3]
 8002c56:	3b01      	subs	r3, #1
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d3ec      	bcc.n	8002c36 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002c5c:	883b      	ldrh	r3, [r7, #0]
 8002c5e:	0418      	lsls	r0, r3, #16
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6819      	ldr	r1, [r3, #0]
 8002c64:	78fb      	ldrb	r3, [r7, #3]
 8002c66:	3b01      	subs	r3, #1
 8002c68:	68ba      	ldr	r2, [r7, #8]
 8002c6a:	4302      	orrs	r2, r0
 8002c6c:	3340      	adds	r3, #64	; 0x40
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	440b      	add	r3, r1
 8002c72:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002c74:	2300      	movs	r3, #0
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3714      	adds	r7, #20
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr

08002c82 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002c82:	b480      	push	{r7}
 8002c84:	b083      	sub	sp, #12
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	6078      	str	r0, [r7, #4]
 8002c8a:	460b      	mov	r3, r1
 8002c8c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	887a      	ldrh	r2, [r7, #2]
 8002c94:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002c96:	2300      	movs	r3, #0
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	370c      	adds	r7, #12
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr

08002ca4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b083      	sub	sp, #12
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	460b      	mov	r3, r1
 8002cae:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002cb0:	bf00      	nop
 8002cb2:	370c      	adds	r7, #12
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr

08002cbc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b086      	sub	sp, #24
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d101      	bne.n	8002cce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e25b      	b.n	8003186 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0301 	and.w	r3, r3, #1
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d075      	beq.n	8002dc6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002cda:	4ba3      	ldr	r3, [pc, #652]	; (8002f68 <HAL_RCC_OscConfig+0x2ac>)
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	f003 030c 	and.w	r3, r3, #12
 8002ce2:	2b04      	cmp	r3, #4
 8002ce4:	d00c      	beq.n	8002d00 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ce6:	4ba0      	ldr	r3, [pc, #640]	; (8002f68 <HAL_RCC_OscConfig+0x2ac>)
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002cee:	2b08      	cmp	r3, #8
 8002cf0:	d112      	bne.n	8002d18 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cf2:	4b9d      	ldr	r3, [pc, #628]	; (8002f68 <HAL_RCC_OscConfig+0x2ac>)
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cfa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cfe:	d10b      	bne.n	8002d18 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d00:	4b99      	ldr	r3, [pc, #612]	; (8002f68 <HAL_RCC_OscConfig+0x2ac>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d05b      	beq.n	8002dc4 <HAL_RCC_OscConfig+0x108>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d157      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e236      	b.n	8003186 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d20:	d106      	bne.n	8002d30 <HAL_RCC_OscConfig+0x74>
 8002d22:	4b91      	ldr	r3, [pc, #580]	; (8002f68 <HAL_RCC_OscConfig+0x2ac>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a90      	ldr	r2, [pc, #576]	; (8002f68 <HAL_RCC_OscConfig+0x2ac>)
 8002d28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d2c:	6013      	str	r3, [r2, #0]
 8002d2e:	e01d      	b.n	8002d6c <HAL_RCC_OscConfig+0xb0>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d38:	d10c      	bne.n	8002d54 <HAL_RCC_OscConfig+0x98>
 8002d3a:	4b8b      	ldr	r3, [pc, #556]	; (8002f68 <HAL_RCC_OscConfig+0x2ac>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a8a      	ldr	r2, [pc, #552]	; (8002f68 <HAL_RCC_OscConfig+0x2ac>)
 8002d40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d44:	6013      	str	r3, [r2, #0]
 8002d46:	4b88      	ldr	r3, [pc, #544]	; (8002f68 <HAL_RCC_OscConfig+0x2ac>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a87      	ldr	r2, [pc, #540]	; (8002f68 <HAL_RCC_OscConfig+0x2ac>)
 8002d4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d50:	6013      	str	r3, [r2, #0]
 8002d52:	e00b      	b.n	8002d6c <HAL_RCC_OscConfig+0xb0>
 8002d54:	4b84      	ldr	r3, [pc, #528]	; (8002f68 <HAL_RCC_OscConfig+0x2ac>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a83      	ldr	r2, [pc, #524]	; (8002f68 <HAL_RCC_OscConfig+0x2ac>)
 8002d5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d5e:	6013      	str	r3, [r2, #0]
 8002d60:	4b81      	ldr	r3, [pc, #516]	; (8002f68 <HAL_RCC_OscConfig+0x2ac>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a80      	ldr	r2, [pc, #512]	; (8002f68 <HAL_RCC_OscConfig+0x2ac>)
 8002d66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d013      	beq.n	8002d9c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d74:	f7fe fb44 	bl	8001400 <HAL_GetTick>
 8002d78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d7a:	e008      	b.n	8002d8e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d7c:	f7fe fb40 	bl	8001400 <HAL_GetTick>
 8002d80:	4602      	mov	r2, r0
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	2b64      	cmp	r3, #100	; 0x64
 8002d88:	d901      	bls.n	8002d8e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e1fb      	b.n	8003186 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d8e:	4b76      	ldr	r3, [pc, #472]	; (8002f68 <HAL_RCC_OscConfig+0x2ac>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d0f0      	beq.n	8002d7c <HAL_RCC_OscConfig+0xc0>
 8002d9a:	e014      	b.n	8002dc6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d9c:	f7fe fb30 	bl	8001400 <HAL_GetTick>
 8002da0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002da2:	e008      	b.n	8002db6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002da4:	f7fe fb2c 	bl	8001400 <HAL_GetTick>
 8002da8:	4602      	mov	r2, r0
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	2b64      	cmp	r3, #100	; 0x64
 8002db0:	d901      	bls.n	8002db6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002db2:	2303      	movs	r3, #3
 8002db4:	e1e7      	b.n	8003186 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002db6:	4b6c      	ldr	r3, [pc, #432]	; (8002f68 <HAL_RCC_OscConfig+0x2ac>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d1f0      	bne.n	8002da4 <HAL_RCC_OscConfig+0xe8>
 8002dc2:	e000      	b.n	8002dc6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0302 	and.w	r3, r3, #2
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d063      	beq.n	8002e9a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002dd2:	4b65      	ldr	r3, [pc, #404]	; (8002f68 <HAL_RCC_OscConfig+0x2ac>)
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	f003 030c 	and.w	r3, r3, #12
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d00b      	beq.n	8002df6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dde:	4b62      	ldr	r3, [pc, #392]	; (8002f68 <HAL_RCC_OscConfig+0x2ac>)
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002de6:	2b08      	cmp	r3, #8
 8002de8:	d11c      	bne.n	8002e24 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dea:	4b5f      	ldr	r3, [pc, #380]	; (8002f68 <HAL_RCC_OscConfig+0x2ac>)
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d116      	bne.n	8002e24 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002df6:	4b5c      	ldr	r3, [pc, #368]	; (8002f68 <HAL_RCC_OscConfig+0x2ac>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0302 	and.w	r3, r3, #2
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d005      	beq.n	8002e0e <HAL_RCC_OscConfig+0x152>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	68db      	ldr	r3, [r3, #12]
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d001      	beq.n	8002e0e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e1bb      	b.n	8003186 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e0e:	4b56      	ldr	r3, [pc, #344]	; (8002f68 <HAL_RCC_OscConfig+0x2ac>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	691b      	ldr	r3, [r3, #16]
 8002e1a:	00db      	lsls	r3, r3, #3
 8002e1c:	4952      	ldr	r1, [pc, #328]	; (8002f68 <HAL_RCC_OscConfig+0x2ac>)
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e22:	e03a      	b.n	8002e9a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d020      	beq.n	8002e6e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e2c:	4b4f      	ldr	r3, [pc, #316]	; (8002f6c <HAL_RCC_OscConfig+0x2b0>)
 8002e2e:	2201      	movs	r2, #1
 8002e30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e32:	f7fe fae5 	bl	8001400 <HAL_GetTick>
 8002e36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e38:	e008      	b.n	8002e4c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e3a:	f7fe fae1 	bl	8001400 <HAL_GetTick>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	1ad3      	subs	r3, r2, r3
 8002e44:	2b02      	cmp	r3, #2
 8002e46:	d901      	bls.n	8002e4c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e48:	2303      	movs	r3, #3
 8002e4a:	e19c      	b.n	8003186 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e4c:	4b46      	ldr	r3, [pc, #280]	; (8002f68 <HAL_RCC_OscConfig+0x2ac>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0302 	and.w	r3, r3, #2
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d0f0      	beq.n	8002e3a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e58:	4b43      	ldr	r3, [pc, #268]	; (8002f68 <HAL_RCC_OscConfig+0x2ac>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	691b      	ldr	r3, [r3, #16]
 8002e64:	00db      	lsls	r3, r3, #3
 8002e66:	4940      	ldr	r1, [pc, #256]	; (8002f68 <HAL_RCC_OscConfig+0x2ac>)
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	600b      	str	r3, [r1, #0]
 8002e6c:	e015      	b.n	8002e9a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e6e:	4b3f      	ldr	r3, [pc, #252]	; (8002f6c <HAL_RCC_OscConfig+0x2b0>)
 8002e70:	2200      	movs	r2, #0
 8002e72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e74:	f7fe fac4 	bl	8001400 <HAL_GetTick>
 8002e78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e7a:	e008      	b.n	8002e8e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e7c:	f7fe fac0 	bl	8001400 <HAL_GetTick>
 8002e80:	4602      	mov	r2, r0
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	2b02      	cmp	r3, #2
 8002e88:	d901      	bls.n	8002e8e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002e8a:	2303      	movs	r3, #3
 8002e8c:	e17b      	b.n	8003186 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e8e:	4b36      	ldr	r3, [pc, #216]	; (8002f68 <HAL_RCC_OscConfig+0x2ac>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 0302 	and.w	r3, r3, #2
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d1f0      	bne.n	8002e7c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 0308 	and.w	r3, r3, #8
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d030      	beq.n	8002f08 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	695b      	ldr	r3, [r3, #20]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d016      	beq.n	8002edc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002eae:	4b30      	ldr	r3, [pc, #192]	; (8002f70 <HAL_RCC_OscConfig+0x2b4>)
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eb4:	f7fe faa4 	bl	8001400 <HAL_GetTick>
 8002eb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eba:	e008      	b.n	8002ece <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ebc:	f7fe faa0 	bl	8001400 <HAL_GetTick>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	2b02      	cmp	r3, #2
 8002ec8:	d901      	bls.n	8002ece <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	e15b      	b.n	8003186 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ece:	4b26      	ldr	r3, [pc, #152]	; (8002f68 <HAL_RCC_OscConfig+0x2ac>)
 8002ed0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ed2:	f003 0302 	and.w	r3, r3, #2
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d0f0      	beq.n	8002ebc <HAL_RCC_OscConfig+0x200>
 8002eda:	e015      	b.n	8002f08 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002edc:	4b24      	ldr	r3, [pc, #144]	; (8002f70 <HAL_RCC_OscConfig+0x2b4>)
 8002ede:	2200      	movs	r2, #0
 8002ee0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ee2:	f7fe fa8d 	bl	8001400 <HAL_GetTick>
 8002ee6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ee8:	e008      	b.n	8002efc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002eea:	f7fe fa89 	bl	8001400 <HAL_GetTick>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	2b02      	cmp	r3, #2
 8002ef6:	d901      	bls.n	8002efc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002ef8:	2303      	movs	r3, #3
 8002efa:	e144      	b.n	8003186 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002efc:	4b1a      	ldr	r3, [pc, #104]	; (8002f68 <HAL_RCC_OscConfig+0x2ac>)
 8002efe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f00:	f003 0302 	and.w	r3, r3, #2
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d1f0      	bne.n	8002eea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0304 	and.w	r3, r3, #4
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	f000 80a0 	beq.w	8003056 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f16:	2300      	movs	r3, #0
 8002f18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f1a:	4b13      	ldr	r3, [pc, #76]	; (8002f68 <HAL_RCC_OscConfig+0x2ac>)
 8002f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d10f      	bne.n	8002f46 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f26:	2300      	movs	r3, #0
 8002f28:	60bb      	str	r3, [r7, #8]
 8002f2a:	4b0f      	ldr	r3, [pc, #60]	; (8002f68 <HAL_RCC_OscConfig+0x2ac>)
 8002f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2e:	4a0e      	ldr	r2, [pc, #56]	; (8002f68 <HAL_RCC_OscConfig+0x2ac>)
 8002f30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f34:	6413      	str	r3, [r2, #64]	; 0x40
 8002f36:	4b0c      	ldr	r3, [pc, #48]	; (8002f68 <HAL_RCC_OscConfig+0x2ac>)
 8002f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f3e:	60bb      	str	r3, [r7, #8]
 8002f40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f42:	2301      	movs	r3, #1
 8002f44:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f46:	4b0b      	ldr	r3, [pc, #44]	; (8002f74 <HAL_RCC_OscConfig+0x2b8>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d121      	bne.n	8002f96 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f52:	4b08      	ldr	r3, [pc, #32]	; (8002f74 <HAL_RCC_OscConfig+0x2b8>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a07      	ldr	r2, [pc, #28]	; (8002f74 <HAL_RCC_OscConfig+0x2b8>)
 8002f58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f5e:	f7fe fa4f 	bl	8001400 <HAL_GetTick>
 8002f62:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f64:	e011      	b.n	8002f8a <HAL_RCC_OscConfig+0x2ce>
 8002f66:	bf00      	nop
 8002f68:	40023800 	.word	0x40023800
 8002f6c:	42470000 	.word	0x42470000
 8002f70:	42470e80 	.word	0x42470e80
 8002f74:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f78:	f7fe fa42 	bl	8001400 <HAL_GetTick>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	d901      	bls.n	8002f8a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	e0fd      	b.n	8003186 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f8a:	4b81      	ldr	r3, [pc, #516]	; (8003190 <HAL_RCC_OscConfig+0x4d4>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d0f0      	beq.n	8002f78 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d106      	bne.n	8002fac <HAL_RCC_OscConfig+0x2f0>
 8002f9e:	4b7d      	ldr	r3, [pc, #500]	; (8003194 <HAL_RCC_OscConfig+0x4d8>)
 8002fa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fa2:	4a7c      	ldr	r2, [pc, #496]	; (8003194 <HAL_RCC_OscConfig+0x4d8>)
 8002fa4:	f043 0301 	orr.w	r3, r3, #1
 8002fa8:	6713      	str	r3, [r2, #112]	; 0x70
 8002faa:	e01c      	b.n	8002fe6 <HAL_RCC_OscConfig+0x32a>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	2b05      	cmp	r3, #5
 8002fb2:	d10c      	bne.n	8002fce <HAL_RCC_OscConfig+0x312>
 8002fb4:	4b77      	ldr	r3, [pc, #476]	; (8003194 <HAL_RCC_OscConfig+0x4d8>)
 8002fb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fb8:	4a76      	ldr	r2, [pc, #472]	; (8003194 <HAL_RCC_OscConfig+0x4d8>)
 8002fba:	f043 0304 	orr.w	r3, r3, #4
 8002fbe:	6713      	str	r3, [r2, #112]	; 0x70
 8002fc0:	4b74      	ldr	r3, [pc, #464]	; (8003194 <HAL_RCC_OscConfig+0x4d8>)
 8002fc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fc4:	4a73      	ldr	r2, [pc, #460]	; (8003194 <HAL_RCC_OscConfig+0x4d8>)
 8002fc6:	f043 0301 	orr.w	r3, r3, #1
 8002fca:	6713      	str	r3, [r2, #112]	; 0x70
 8002fcc:	e00b      	b.n	8002fe6 <HAL_RCC_OscConfig+0x32a>
 8002fce:	4b71      	ldr	r3, [pc, #452]	; (8003194 <HAL_RCC_OscConfig+0x4d8>)
 8002fd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fd2:	4a70      	ldr	r2, [pc, #448]	; (8003194 <HAL_RCC_OscConfig+0x4d8>)
 8002fd4:	f023 0301 	bic.w	r3, r3, #1
 8002fd8:	6713      	str	r3, [r2, #112]	; 0x70
 8002fda:	4b6e      	ldr	r3, [pc, #440]	; (8003194 <HAL_RCC_OscConfig+0x4d8>)
 8002fdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fde:	4a6d      	ldr	r2, [pc, #436]	; (8003194 <HAL_RCC_OscConfig+0x4d8>)
 8002fe0:	f023 0304 	bic.w	r3, r3, #4
 8002fe4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d015      	beq.n	800301a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fee:	f7fe fa07 	bl	8001400 <HAL_GetTick>
 8002ff2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ff4:	e00a      	b.n	800300c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ff6:	f7fe fa03 	bl	8001400 <HAL_GetTick>
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	1ad3      	subs	r3, r2, r3
 8003000:	f241 3288 	movw	r2, #5000	; 0x1388
 8003004:	4293      	cmp	r3, r2
 8003006:	d901      	bls.n	800300c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003008:	2303      	movs	r3, #3
 800300a:	e0bc      	b.n	8003186 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800300c:	4b61      	ldr	r3, [pc, #388]	; (8003194 <HAL_RCC_OscConfig+0x4d8>)
 800300e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003010:	f003 0302 	and.w	r3, r3, #2
 8003014:	2b00      	cmp	r3, #0
 8003016:	d0ee      	beq.n	8002ff6 <HAL_RCC_OscConfig+0x33a>
 8003018:	e014      	b.n	8003044 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800301a:	f7fe f9f1 	bl	8001400 <HAL_GetTick>
 800301e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003020:	e00a      	b.n	8003038 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003022:	f7fe f9ed 	bl	8001400 <HAL_GetTick>
 8003026:	4602      	mov	r2, r0
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003030:	4293      	cmp	r3, r2
 8003032:	d901      	bls.n	8003038 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003034:	2303      	movs	r3, #3
 8003036:	e0a6      	b.n	8003186 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003038:	4b56      	ldr	r3, [pc, #344]	; (8003194 <HAL_RCC_OscConfig+0x4d8>)
 800303a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800303c:	f003 0302 	and.w	r3, r3, #2
 8003040:	2b00      	cmp	r3, #0
 8003042:	d1ee      	bne.n	8003022 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003044:	7dfb      	ldrb	r3, [r7, #23]
 8003046:	2b01      	cmp	r3, #1
 8003048:	d105      	bne.n	8003056 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800304a:	4b52      	ldr	r3, [pc, #328]	; (8003194 <HAL_RCC_OscConfig+0x4d8>)
 800304c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304e:	4a51      	ldr	r2, [pc, #324]	; (8003194 <HAL_RCC_OscConfig+0x4d8>)
 8003050:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003054:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	699b      	ldr	r3, [r3, #24]
 800305a:	2b00      	cmp	r3, #0
 800305c:	f000 8092 	beq.w	8003184 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003060:	4b4c      	ldr	r3, [pc, #304]	; (8003194 <HAL_RCC_OscConfig+0x4d8>)
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	f003 030c 	and.w	r3, r3, #12
 8003068:	2b08      	cmp	r3, #8
 800306a:	d05c      	beq.n	8003126 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	699b      	ldr	r3, [r3, #24]
 8003070:	2b02      	cmp	r3, #2
 8003072:	d141      	bne.n	80030f8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003074:	4b48      	ldr	r3, [pc, #288]	; (8003198 <HAL_RCC_OscConfig+0x4dc>)
 8003076:	2200      	movs	r2, #0
 8003078:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800307a:	f7fe f9c1 	bl	8001400 <HAL_GetTick>
 800307e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003080:	e008      	b.n	8003094 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003082:	f7fe f9bd 	bl	8001400 <HAL_GetTick>
 8003086:	4602      	mov	r2, r0
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	1ad3      	subs	r3, r2, r3
 800308c:	2b02      	cmp	r3, #2
 800308e:	d901      	bls.n	8003094 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003090:	2303      	movs	r3, #3
 8003092:	e078      	b.n	8003186 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003094:	4b3f      	ldr	r3, [pc, #252]	; (8003194 <HAL_RCC_OscConfig+0x4d8>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800309c:	2b00      	cmp	r3, #0
 800309e:	d1f0      	bne.n	8003082 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	69da      	ldr	r2, [r3, #28]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6a1b      	ldr	r3, [r3, #32]
 80030a8:	431a      	orrs	r2, r3
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ae:	019b      	lsls	r3, r3, #6
 80030b0:	431a      	orrs	r2, r3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030b6:	085b      	lsrs	r3, r3, #1
 80030b8:	3b01      	subs	r3, #1
 80030ba:	041b      	lsls	r3, r3, #16
 80030bc:	431a      	orrs	r2, r3
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030c2:	061b      	lsls	r3, r3, #24
 80030c4:	4933      	ldr	r1, [pc, #204]	; (8003194 <HAL_RCC_OscConfig+0x4d8>)
 80030c6:	4313      	orrs	r3, r2
 80030c8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030ca:	4b33      	ldr	r3, [pc, #204]	; (8003198 <HAL_RCC_OscConfig+0x4dc>)
 80030cc:	2201      	movs	r2, #1
 80030ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030d0:	f7fe f996 	bl	8001400 <HAL_GetTick>
 80030d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030d6:	e008      	b.n	80030ea <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030d8:	f7fe f992 	bl	8001400 <HAL_GetTick>
 80030dc:	4602      	mov	r2, r0
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	2b02      	cmp	r3, #2
 80030e4:	d901      	bls.n	80030ea <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80030e6:	2303      	movs	r3, #3
 80030e8:	e04d      	b.n	8003186 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030ea:	4b2a      	ldr	r3, [pc, #168]	; (8003194 <HAL_RCC_OscConfig+0x4d8>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d0f0      	beq.n	80030d8 <HAL_RCC_OscConfig+0x41c>
 80030f6:	e045      	b.n	8003184 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030f8:	4b27      	ldr	r3, [pc, #156]	; (8003198 <HAL_RCC_OscConfig+0x4dc>)
 80030fa:	2200      	movs	r2, #0
 80030fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030fe:	f7fe f97f 	bl	8001400 <HAL_GetTick>
 8003102:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003104:	e008      	b.n	8003118 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003106:	f7fe f97b 	bl	8001400 <HAL_GetTick>
 800310a:	4602      	mov	r2, r0
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	1ad3      	subs	r3, r2, r3
 8003110:	2b02      	cmp	r3, #2
 8003112:	d901      	bls.n	8003118 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003114:	2303      	movs	r3, #3
 8003116:	e036      	b.n	8003186 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003118:	4b1e      	ldr	r3, [pc, #120]	; (8003194 <HAL_RCC_OscConfig+0x4d8>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003120:	2b00      	cmp	r3, #0
 8003122:	d1f0      	bne.n	8003106 <HAL_RCC_OscConfig+0x44a>
 8003124:	e02e      	b.n	8003184 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	699b      	ldr	r3, [r3, #24]
 800312a:	2b01      	cmp	r3, #1
 800312c:	d101      	bne.n	8003132 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e029      	b.n	8003186 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003132:	4b18      	ldr	r3, [pc, #96]	; (8003194 <HAL_RCC_OscConfig+0x4d8>)
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	69db      	ldr	r3, [r3, #28]
 8003142:	429a      	cmp	r2, r3
 8003144:	d11c      	bne.n	8003180 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003150:	429a      	cmp	r2, r3
 8003152:	d115      	bne.n	8003180 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003154:	68fa      	ldr	r2, [r7, #12]
 8003156:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800315a:	4013      	ands	r3, r2
 800315c:	687a      	ldr	r2, [r7, #4]
 800315e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003160:	4293      	cmp	r3, r2
 8003162:	d10d      	bne.n	8003180 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800316e:	429a      	cmp	r2, r3
 8003170:	d106      	bne.n	8003180 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800317c:	429a      	cmp	r2, r3
 800317e:	d001      	beq.n	8003184 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	e000      	b.n	8003186 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003184:	2300      	movs	r3, #0
}
 8003186:	4618      	mov	r0, r3
 8003188:	3718      	adds	r7, #24
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	40007000 	.word	0x40007000
 8003194:	40023800 	.word	0x40023800
 8003198:	42470060 	.word	0x42470060

0800319c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b084      	sub	sp, #16
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
 80031a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d101      	bne.n	80031b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e0cc      	b.n	800334a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031b0:	4b68      	ldr	r3, [pc, #416]	; (8003354 <HAL_RCC_ClockConfig+0x1b8>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f003 030f 	and.w	r3, r3, #15
 80031b8:	683a      	ldr	r2, [r7, #0]
 80031ba:	429a      	cmp	r2, r3
 80031bc:	d90c      	bls.n	80031d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031be:	4b65      	ldr	r3, [pc, #404]	; (8003354 <HAL_RCC_ClockConfig+0x1b8>)
 80031c0:	683a      	ldr	r2, [r7, #0]
 80031c2:	b2d2      	uxtb	r2, r2
 80031c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031c6:	4b63      	ldr	r3, [pc, #396]	; (8003354 <HAL_RCC_ClockConfig+0x1b8>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 030f 	and.w	r3, r3, #15
 80031ce:	683a      	ldr	r2, [r7, #0]
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d001      	beq.n	80031d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	e0b8      	b.n	800334a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 0302 	and.w	r3, r3, #2
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d020      	beq.n	8003226 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 0304 	and.w	r3, r3, #4
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d005      	beq.n	80031fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031f0:	4b59      	ldr	r3, [pc, #356]	; (8003358 <HAL_RCC_ClockConfig+0x1bc>)
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	4a58      	ldr	r2, [pc, #352]	; (8003358 <HAL_RCC_ClockConfig+0x1bc>)
 80031f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80031fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f003 0308 	and.w	r3, r3, #8
 8003204:	2b00      	cmp	r3, #0
 8003206:	d005      	beq.n	8003214 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003208:	4b53      	ldr	r3, [pc, #332]	; (8003358 <HAL_RCC_ClockConfig+0x1bc>)
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	4a52      	ldr	r2, [pc, #328]	; (8003358 <HAL_RCC_ClockConfig+0x1bc>)
 800320e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003212:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003214:	4b50      	ldr	r3, [pc, #320]	; (8003358 <HAL_RCC_ClockConfig+0x1bc>)
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	494d      	ldr	r1, [pc, #308]	; (8003358 <HAL_RCC_ClockConfig+0x1bc>)
 8003222:	4313      	orrs	r3, r2
 8003224:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0301 	and.w	r3, r3, #1
 800322e:	2b00      	cmp	r3, #0
 8003230:	d044      	beq.n	80032bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	2b01      	cmp	r3, #1
 8003238:	d107      	bne.n	800324a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800323a:	4b47      	ldr	r3, [pc, #284]	; (8003358 <HAL_RCC_ClockConfig+0x1bc>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003242:	2b00      	cmp	r3, #0
 8003244:	d119      	bne.n	800327a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e07f      	b.n	800334a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	2b02      	cmp	r3, #2
 8003250:	d003      	beq.n	800325a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003256:	2b03      	cmp	r3, #3
 8003258:	d107      	bne.n	800326a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800325a:	4b3f      	ldr	r3, [pc, #252]	; (8003358 <HAL_RCC_ClockConfig+0x1bc>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003262:	2b00      	cmp	r3, #0
 8003264:	d109      	bne.n	800327a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e06f      	b.n	800334a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800326a:	4b3b      	ldr	r3, [pc, #236]	; (8003358 <HAL_RCC_ClockConfig+0x1bc>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0302 	and.w	r3, r3, #2
 8003272:	2b00      	cmp	r3, #0
 8003274:	d101      	bne.n	800327a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e067      	b.n	800334a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800327a:	4b37      	ldr	r3, [pc, #220]	; (8003358 <HAL_RCC_ClockConfig+0x1bc>)
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	f023 0203 	bic.w	r2, r3, #3
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	4934      	ldr	r1, [pc, #208]	; (8003358 <HAL_RCC_ClockConfig+0x1bc>)
 8003288:	4313      	orrs	r3, r2
 800328a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800328c:	f7fe f8b8 	bl	8001400 <HAL_GetTick>
 8003290:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003292:	e00a      	b.n	80032aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003294:	f7fe f8b4 	bl	8001400 <HAL_GetTick>
 8003298:	4602      	mov	r2, r0
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	1ad3      	subs	r3, r2, r3
 800329e:	f241 3288 	movw	r2, #5000	; 0x1388
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d901      	bls.n	80032aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032a6:	2303      	movs	r3, #3
 80032a8:	e04f      	b.n	800334a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032aa:	4b2b      	ldr	r3, [pc, #172]	; (8003358 <HAL_RCC_ClockConfig+0x1bc>)
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	f003 020c 	and.w	r2, r3, #12
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d1eb      	bne.n	8003294 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032bc:	4b25      	ldr	r3, [pc, #148]	; (8003354 <HAL_RCC_ClockConfig+0x1b8>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 030f 	and.w	r3, r3, #15
 80032c4:	683a      	ldr	r2, [r7, #0]
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d20c      	bcs.n	80032e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032ca:	4b22      	ldr	r3, [pc, #136]	; (8003354 <HAL_RCC_ClockConfig+0x1b8>)
 80032cc:	683a      	ldr	r2, [r7, #0]
 80032ce:	b2d2      	uxtb	r2, r2
 80032d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032d2:	4b20      	ldr	r3, [pc, #128]	; (8003354 <HAL_RCC_ClockConfig+0x1b8>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 030f 	and.w	r3, r3, #15
 80032da:	683a      	ldr	r2, [r7, #0]
 80032dc:	429a      	cmp	r2, r3
 80032de:	d001      	beq.n	80032e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	e032      	b.n	800334a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 0304 	and.w	r3, r3, #4
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d008      	beq.n	8003302 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032f0:	4b19      	ldr	r3, [pc, #100]	; (8003358 <HAL_RCC_ClockConfig+0x1bc>)
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	4916      	ldr	r1, [pc, #88]	; (8003358 <HAL_RCC_ClockConfig+0x1bc>)
 80032fe:	4313      	orrs	r3, r2
 8003300:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 0308 	and.w	r3, r3, #8
 800330a:	2b00      	cmp	r3, #0
 800330c:	d009      	beq.n	8003322 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800330e:	4b12      	ldr	r3, [pc, #72]	; (8003358 <HAL_RCC_ClockConfig+0x1bc>)
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	691b      	ldr	r3, [r3, #16]
 800331a:	00db      	lsls	r3, r3, #3
 800331c:	490e      	ldr	r1, [pc, #56]	; (8003358 <HAL_RCC_ClockConfig+0x1bc>)
 800331e:	4313      	orrs	r3, r2
 8003320:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003322:	f000 f821 	bl	8003368 <HAL_RCC_GetSysClockFreq>
 8003326:	4601      	mov	r1, r0
 8003328:	4b0b      	ldr	r3, [pc, #44]	; (8003358 <HAL_RCC_ClockConfig+0x1bc>)
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	091b      	lsrs	r3, r3, #4
 800332e:	f003 030f 	and.w	r3, r3, #15
 8003332:	4a0a      	ldr	r2, [pc, #40]	; (800335c <HAL_RCC_ClockConfig+0x1c0>)
 8003334:	5cd3      	ldrb	r3, [r2, r3]
 8003336:	fa21 f303 	lsr.w	r3, r1, r3
 800333a:	4a09      	ldr	r2, [pc, #36]	; (8003360 <HAL_RCC_ClockConfig+0x1c4>)
 800333c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800333e:	4b09      	ldr	r3, [pc, #36]	; (8003364 <HAL_RCC_ClockConfig+0x1c8>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4618      	mov	r0, r3
 8003344:	f7fe f818 	bl	8001378 <HAL_InitTick>

  return HAL_OK;
 8003348:	2300      	movs	r3, #0
}
 800334a:	4618      	mov	r0, r3
 800334c:	3710      	adds	r7, #16
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop
 8003354:	40023c00 	.word	0x40023c00
 8003358:	40023800 	.word	0x40023800
 800335c:	08006b74 	.word	0x08006b74
 8003360:	20000008 	.word	0x20000008
 8003364:	2000000c 	.word	0x2000000c

08003368 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003368:	b5f0      	push	{r4, r5, r6, r7, lr}
 800336a:	b085      	sub	sp, #20
 800336c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800336e:	2300      	movs	r3, #0
 8003370:	607b      	str	r3, [r7, #4]
 8003372:	2300      	movs	r3, #0
 8003374:	60fb      	str	r3, [r7, #12]
 8003376:	2300      	movs	r3, #0
 8003378:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800337a:	2300      	movs	r3, #0
 800337c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800337e:	4b50      	ldr	r3, [pc, #320]	; (80034c0 <HAL_RCC_GetSysClockFreq+0x158>)
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	f003 030c 	and.w	r3, r3, #12
 8003386:	2b04      	cmp	r3, #4
 8003388:	d007      	beq.n	800339a <HAL_RCC_GetSysClockFreq+0x32>
 800338a:	2b08      	cmp	r3, #8
 800338c:	d008      	beq.n	80033a0 <HAL_RCC_GetSysClockFreq+0x38>
 800338e:	2b00      	cmp	r3, #0
 8003390:	f040 808d 	bne.w	80034ae <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003394:	4b4b      	ldr	r3, [pc, #300]	; (80034c4 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003396:	60bb      	str	r3, [r7, #8]
       break;
 8003398:	e08c      	b.n	80034b4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800339a:	4b4b      	ldr	r3, [pc, #300]	; (80034c8 <HAL_RCC_GetSysClockFreq+0x160>)
 800339c:	60bb      	str	r3, [r7, #8]
      break;
 800339e:	e089      	b.n	80034b4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033a0:	4b47      	ldr	r3, [pc, #284]	; (80034c0 <HAL_RCC_GetSysClockFreq+0x158>)
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033a8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80033aa:	4b45      	ldr	r3, [pc, #276]	; (80034c0 <HAL_RCC_GetSysClockFreq+0x158>)
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d023      	beq.n	80033fe <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033b6:	4b42      	ldr	r3, [pc, #264]	; (80034c0 <HAL_RCC_GetSysClockFreq+0x158>)
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	099b      	lsrs	r3, r3, #6
 80033bc:	f04f 0400 	mov.w	r4, #0
 80033c0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80033c4:	f04f 0200 	mov.w	r2, #0
 80033c8:	ea03 0501 	and.w	r5, r3, r1
 80033cc:	ea04 0602 	and.w	r6, r4, r2
 80033d0:	4a3d      	ldr	r2, [pc, #244]	; (80034c8 <HAL_RCC_GetSysClockFreq+0x160>)
 80033d2:	fb02 f106 	mul.w	r1, r2, r6
 80033d6:	2200      	movs	r2, #0
 80033d8:	fb02 f205 	mul.w	r2, r2, r5
 80033dc:	440a      	add	r2, r1
 80033de:	493a      	ldr	r1, [pc, #232]	; (80034c8 <HAL_RCC_GetSysClockFreq+0x160>)
 80033e0:	fba5 0101 	umull	r0, r1, r5, r1
 80033e4:	1853      	adds	r3, r2, r1
 80033e6:	4619      	mov	r1, r3
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	f04f 0400 	mov.w	r4, #0
 80033ee:	461a      	mov	r2, r3
 80033f0:	4623      	mov	r3, r4
 80033f2:	f7fc fef1 	bl	80001d8 <__aeabi_uldivmod>
 80033f6:	4603      	mov	r3, r0
 80033f8:	460c      	mov	r4, r1
 80033fa:	60fb      	str	r3, [r7, #12]
 80033fc:	e049      	b.n	8003492 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033fe:	4b30      	ldr	r3, [pc, #192]	; (80034c0 <HAL_RCC_GetSysClockFreq+0x158>)
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	099b      	lsrs	r3, r3, #6
 8003404:	f04f 0400 	mov.w	r4, #0
 8003408:	f240 11ff 	movw	r1, #511	; 0x1ff
 800340c:	f04f 0200 	mov.w	r2, #0
 8003410:	ea03 0501 	and.w	r5, r3, r1
 8003414:	ea04 0602 	and.w	r6, r4, r2
 8003418:	4629      	mov	r1, r5
 800341a:	4632      	mov	r2, r6
 800341c:	f04f 0300 	mov.w	r3, #0
 8003420:	f04f 0400 	mov.w	r4, #0
 8003424:	0154      	lsls	r4, r2, #5
 8003426:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800342a:	014b      	lsls	r3, r1, #5
 800342c:	4619      	mov	r1, r3
 800342e:	4622      	mov	r2, r4
 8003430:	1b49      	subs	r1, r1, r5
 8003432:	eb62 0206 	sbc.w	r2, r2, r6
 8003436:	f04f 0300 	mov.w	r3, #0
 800343a:	f04f 0400 	mov.w	r4, #0
 800343e:	0194      	lsls	r4, r2, #6
 8003440:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003444:	018b      	lsls	r3, r1, #6
 8003446:	1a5b      	subs	r3, r3, r1
 8003448:	eb64 0402 	sbc.w	r4, r4, r2
 800344c:	f04f 0100 	mov.w	r1, #0
 8003450:	f04f 0200 	mov.w	r2, #0
 8003454:	00e2      	lsls	r2, r4, #3
 8003456:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800345a:	00d9      	lsls	r1, r3, #3
 800345c:	460b      	mov	r3, r1
 800345e:	4614      	mov	r4, r2
 8003460:	195b      	adds	r3, r3, r5
 8003462:	eb44 0406 	adc.w	r4, r4, r6
 8003466:	f04f 0100 	mov.w	r1, #0
 800346a:	f04f 0200 	mov.w	r2, #0
 800346e:	02a2      	lsls	r2, r4, #10
 8003470:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003474:	0299      	lsls	r1, r3, #10
 8003476:	460b      	mov	r3, r1
 8003478:	4614      	mov	r4, r2
 800347a:	4618      	mov	r0, r3
 800347c:	4621      	mov	r1, r4
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	f04f 0400 	mov.w	r4, #0
 8003484:	461a      	mov	r2, r3
 8003486:	4623      	mov	r3, r4
 8003488:	f7fc fea6 	bl	80001d8 <__aeabi_uldivmod>
 800348c:	4603      	mov	r3, r0
 800348e:	460c      	mov	r4, r1
 8003490:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003492:	4b0b      	ldr	r3, [pc, #44]	; (80034c0 <HAL_RCC_GetSysClockFreq+0x158>)
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	0c1b      	lsrs	r3, r3, #16
 8003498:	f003 0303 	and.w	r3, r3, #3
 800349c:	3301      	adds	r3, #1
 800349e:	005b      	lsls	r3, r3, #1
 80034a0:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80034a2:	68fa      	ldr	r2, [r7, #12]
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80034aa:	60bb      	str	r3, [r7, #8]
      break;
 80034ac:	e002      	b.n	80034b4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80034ae:	4b05      	ldr	r3, [pc, #20]	; (80034c4 <HAL_RCC_GetSysClockFreq+0x15c>)
 80034b0:	60bb      	str	r3, [r7, #8]
      break;
 80034b2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034b4:	68bb      	ldr	r3, [r7, #8]
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3714      	adds	r7, #20
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034be:	bf00      	nop
 80034c0:	40023800 	.word	0x40023800
 80034c4:	00f42400 	.word	0x00f42400
 80034c8:	017d7840 	.word	0x017d7840

080034cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034cc:	b480      	push	{r7}
 80034ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034d0:	4b03      	ldr	r3, [pc, #12]	; (80034e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80034d2:	681b      	ldr	r3, [r3, #0]
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr
 80034de:	bf00      	nop
 80034e0:	20000008 	.word	0x20000008

080034e4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80034e4:	b084      	sub	sp, #16
 80034e6:	b580      	push	{r7, lr}
 80034e8:	b084      	sub	sp, #16
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	6078      	str	r0, [r7, #4]
 80034ee:	f107 001c 	add.w	r0, r7, #28
 80034f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80034f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d122      	bne.n	8003542 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003500:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003510:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003514:	687a      	ldr	r2, [r7, #4]
 8003516:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003524:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003526:	2b01      	cmp	r3, #1
 8003528:	d105      	bne.n	8003536 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	68db      	ldr	r3, [r3, #12]
 800352e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f001 fab4 	bl	8004aa4 <USB_CoreReset>
 800353c:	4603      	mov	r3, r0
 800353e:	73fb      	strb	r3, [r7, #15]
 8003540:	e01a      	b.n	8003578 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	68db      	ldr	r3, [r3, #12]
 8003546:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f001 faa8 	bl	8004aa4 <USB_CoreReset>
 8003554:	4603      	mov	r3, r0
 8003556:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003558:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800355a:	2b00      	cmp	r3, #0
 800355c:	d106      	bne.n	800356c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003562:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	639a      	str	r2, [r3, #56]	; 0x38
 800356a:	e005      	b.n	8003578 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003570:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800357a:	2b01      	cmp	r3, #1
 800357c:	d10b      	bne.n	8003596 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	f043 0206 	orr.w	r2, r3, #6
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	f043 0220 	orr.w	r2, r3, #32
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003596:	7bfb      	ldrb	r3, [r7, #15]
}
 8003598:	4618      	mov	r0, r3
 800359a:	3710      	adds	r7, #16
 800359c:	46bd      	mov	sp, r7
 800359e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80035a2:	b004      	add	sp, #16
 80035a4:	4770      	bx	lr
	...

080035a8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b087      	sub	sp, #28
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	60f8      	str	r0, [r7, #12]
 80035b0:	60b9      	str	r1, [r7, #8]
 80035b2:	4613      	mov	r3, r2
 80035b4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80035b6:	79fb      	ldrb	r3, [r7, #7]
 80035b8:	2b02      	cmp	r3, #2
 80035ba:	d165      	bne.n	8003688 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	4a41      	ldr	r2, [pc, #260]	; (80036c4 <USB_SetTurnaroundTime+0x11c>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d906      	bls.n	80035d2 <USB_SetTurnaroundTime+0x2a>
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	4a40      	ldr	r2, [pc, #256]	; (80036c8 <USB_SetTurnaroundTime+0x120>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d802      	bhi.n	80035d2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80035cc:	230f      	movs	r3, #15
 80035ce:	617b      	str	r3, [r7, #20]
 80035d0:	e062      	b.n	8003698 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	4a3c      	ldr	r2, [pc, #240]	; (80036c8 <USB_SetTurnaroundTime+0x120>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d906      	bls.n	80035e8 <USB_SetTurnaroundTime+0x40>
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	4a3b      	ldr	r2, [pc, #236]	; (80036cc <USB_SetTurnaroundTime+0x124>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d802      	bhi.n	80035e8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80035e2:	230e      	movs	r3, #14
 80035e4:	617b      	str	r3, [r7, #20]
 80035e6:	e057      	b.n	8003698 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	4a38      	ldr	r2, [pc, #224]	; (80036cc <USB_SetTurnaroundTime+0x124>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d906      	bls.n	80035fe <USB_SetTurnaroundTime+0x56>
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	4a37      	ldr	r2, [pc, #220]	; (80036d0 <USB_SetTurnaroundTime+0x128>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d802      	bhi.n	80035fe <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80035f8:	230d      	movs	r3, #13
 80035fa:	617b      	str	r3, [r7, #20]
 80035fc:	e04c      	b.n	8003698 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	4a33      	ldr	r2, [pc, #204]	; (80036d0 <USB_SetTurnaroundTime+0x128>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d906      	bls.n	8003614 <USB_SetTurnaroundTime+0x6c>
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	4a32      	ldr	r2, [pc, #200]	; (80036d4 <USB_SetTurnaroundTime+0x12c>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d802      	bhi.n	8003614 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800360e:	230c      	movs	r3, #12
 8003610:	617b      	str	r3, [r7, #20]
 8003612:	e041      	b.n	8003698 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	4a2f      	ldr	r2, [pc, #188]	; (80036d4 <USB_SetTurnaroundTime+0x12c>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d906      	bls.n	800362a <USB_SetTurnaroundTime+0x82>
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	4a2e      	ldr	r2, [pc, #184]	; (80036d8 <USB_SetTurnaroundTime+0x130>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d802      	bhi.n	800362a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003624:	230b      	movs	r3, #11
 8003626:	617b      	str	r3, [r7, #20]
 8003628:	e036      	b.n	8003698 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	4a2a      	ldr	r2, [pc, #168]	; (80036d8 <USB_SetTurnaroundTime+0x130>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d906      	bls.n	8003640 <USB_SetTurnaroundTime+0x98>
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	4a29      	ldr	r2, [pc, #164]	; (80036dc <USB_SetTurnaroundTime+0x134>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d802      	bhi.n	8003640 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800363a:	230a      	movs	r3, #10
 800363c:	617b      	str	r3, [r7, #20]
 800363e:	e02b      	b.n	8003698 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	4a26      	ldr	r2, [pc, #152]	; (80036dc <USB_SetTurnaroundTime+0x134>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d906      	bls.n	8003656 <USB_SetTurnaroundTime+0xae>
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	4a25      	ldr	r2, [pc, #148]	; (80036e0 <USB_SetTurnaroundTime+0x138>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d802      	bhi.n	8003656 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003650:	2309      	movs	r3, #9
 8003652:	617b      	str	r3, [r7, #20]
 8003654:	e020      	b.n	8003698 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	4a21      	ldr	r2, [pc, #132]	; (80036e0 <USB_SetTurnaroundTime+0x138>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d906      	bls.n	800366c <USB_SetTurnaroundTime+0xc4>
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	4a20      	ldr	r2, [pc, #128]	; (80036e4 <USB_SetTurnaroundTime+0x13c>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d802      	bhi.n	800366c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003666:	2308      	movs	r3, #8
 8003668:	617b      	str	r3, [r7, #20]
 800366a:	e015      	b.n	8003698 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	4a1d      	ldr	r2, [pc, #116]	; (80036e4 <USB_SetTurnaroundTime+0x13c>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d906      	bls.n	8003682 <USB_SetTurnaroundTime+0xda>
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	4a1c      	ldr	r2, [pc, #112]	; (80036e8 <USB_SetTurnaroundTime+0x140>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d802      	bhi.n	8003682 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800367c:	2307      	movs	r3, #7
 800367e:	617b      	str	r3, [r7, #20]
 8003680:	e00a      	b.n	8003698 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003682:	2306      	movs	r3, #6
 8003684:	617b      	str	r3, [r7, #20]
 8003686:	e007      	b.n	8003698 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003688:	79fb      	ldrb	r3, [r7, #7]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d102      	bne.n	8003694 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800368e:	2309      	movs	r3, #9
 8003690:	617b      	str	r3, [r7, #20]
 8003692:	e001      	b.n	8003698 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003694:	2309      	movs	r3, #9
 8003696:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	68da      	ldr	r2, [r3, #12]
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	029b      	lsls	r3, r3, #10
 80036ac:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80036b0:	431a      	orrs	r2, r3
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80036b6:	2300      	movs	r3, #0
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	371c      	adds	r7, #28
 80036bc:	46bd      	mov	sp, r7
 80036be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c2:	4770      	bx	lr
 80036c4:	00d8acbf 	.word	0x00d8acbf
 80036c8:	00e4e1bf 	.word	0x00e4e1bf
 80036cc:	00f423ff 	.word	0x00f423ff
 80036d0:	0106737f 	.word	0x0106737f
 80036d4:	011a499f 	.word	0x011a499f
 80036d8:	01312cff 	.word	0x01312cff
 80036dc:	014ca43f 	.word	0x014ca43f
 80036e0:	016e35ff 	.word	0x016e35ff
 80036e4:	01a6ab1f 	.word	0x01a6ab1f
 80036e8:	01e847ff 	.word	0x01e847ff

080036ec <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b083      	sub	sp, #12
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	f043 0201 	orr.w	r2, r3, #1
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003700:	2300      	movs	r3, #0
}
 8003702:	4618      	mov	r0, r3
 8003704:	370c      	adds	r7, #12
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr

0800370e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800370e:	b480      	push	{r7}
 8003710:	b083      	sub	sp, #12
 8003712:	af00      	add	r7, sp, #0
 8003714:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	f023 0201 	bic.w	r2, r3, #1
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003722:	2300      	movs	r3, #0
}
 8003724:	4618      	mov	r0, r3
 8003726:	370c      	adds	r7, #12
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr

08003730 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b082      	sub	sp, #8
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
 8003738:	460b      	mov	r3, r1
 800373a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003748:	78fb      	ldrb	r3, [r7, #3]
 800374a:	2b01      	cmp	r3, #1
 800374c:	d106      	bne.n	800375c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	68db      	ldr	r3, [r3, #12]
 8003752:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	60da      	str	r2, [r3, #12]
 800375a:	e00b      	b.n	8003774 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800375c:	78fb      	ldrb	r3, [r7, #3]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d106      	bne.n	8003770 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	68db      	ldr	r3, [r3, #12]
 8003766:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	60da      	str	r2, [r3, #12]
 800376e:	e001      	b.n	8003774 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	e003      	b.n	800377c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8003774:	2032      	movs	r0, #50	; 0x32
 8003776:	f7fd fe4f 	bl	8001418 <HAL_Delay>

  return HAL_OK;
 800377a:	2300      	movs	r3, #0
}
 800377c:	4618      	mov	r0, r3
 800377e:	3708      	adds	r7, #8
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}

08003784 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003784:	b084      	sub	sp, #16
 8003786:	b580      	push	{r7, lr}
 8003788:	b086      	sub	sp, #24
 800378a:	af00      	add	r7, sp, #0
 800378c:	6078      	str	r0, [r7, #4]
 800378e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003792:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003796:	2300      	movs	r3, #0
 8003798:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800379e:	2300      	movs	r3, #0
 80037a0:	613b      	str	r3, [r7, #16]
 80037a2:	e009      	b.n	80037b8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80037a4:	687a      	ldr	r2, [r7, #4]
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	3340      	adds	r3, #64	; 0x40
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	4413      	add	r3, r2
 80037ae:	2200      	movs	r2, #0
 80037b0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	3301      	adds	r3, #1
 80037b6:	613b      	str	r3, [r7, #16]
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	2b0e      	cmp	r3, #14
 80037bc:	d9f2      	bls.n	80037a4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80037be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d11c      	bne.n	80037fe <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	68fa      	ldr	r2, [r7, #12]
 80037ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037d2:	f043 0302 	orr.w	r3, r3, #2
 80037d6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037dc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037e8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037f4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	639a      	str	r2, [r3, #56]	; 0x38
 80037fc:	e00b      	b.n	8003816 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003802:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800380e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800381c:	461a      	mov	r2, r3
 800381e:	2300      	movs	r3, #0
 8003820:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003828:	4619      	mov	r1, r3
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003830:	461a      	mov	r2, r3
 8003832:	680b      	ldr	r3, [r1, #0]
 8003834:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003838:	2b01      	cmp	r3, #1
 800383a:	d10c      	bne.n	8003856 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800383c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800383e:	2b00      	cmp	r3, #0
 8003840:	d104      	bne.n	800384c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003842:	2100      	movs	r1, #0
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	f000 f949 	bl	8003adc <USB_SetDevSpeed>
 800384a:	e008      	b.n	800385e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800384c:	2101      	movs	r1, #1
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f000 f944 	bl	8003adc <USB_SetDevSpeed>
 8003854:	e003      	b.n	800385e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003856:	2103      	movs	r1, #3
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f000 f93f 	bl	8003adc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800385e:	2110      	movs	r1, #16
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	f000 f8f3 	bl	8003a4c <USB_FlushTxFifo>
 8003866:	4603      	mov	r3, r0
 8003868:	2b00      	cmp	r3, #0
 800386a:	d001      	beq.n	8003870 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	f000 f911 	bl	8003a98 <USB_FlushRxFifo>
 8003876:	4603      	mov	r3, r0
 8003878:	2b00      	cmp	r3, #0
 800387a:	d001      	beq.n	8003880 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003886:	461a      	mov	r2, r3
 8003888:	2300      	movs	r3, #0
 800388a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003892:	461a      	mov	r2, r3
 8003894:	2300      	movs	r3, #0
 8003896:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800389e:	461a      	mov	r2, r3
 80038a0:	2300      	movs	r3, #0
 80038a2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80038a4:	2300      	movs	r3, #0
 80038a6:	613b      	str	r3, [r7, #16]
 80038a8:	e043      	b.n	8003932 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	015a      	lsls	r2, r3, #5
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	4413      	add	r3, r2
 80038b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80038bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80038c0:	d118      	bne.n	80038f4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d10a      	bne.n	80038de <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	015a      	lsls	r2, r3, #5
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	4413      	add	r3, r2
 80038d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038d4:	461a      	mov	r2, r3
 80038d6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80038da:	6013      	str	r3, [r2, #0]
 80038dc:	e013      	b.n	8003906 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	015a      	lsls	r2, r3, #5
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	4413      	add	r3, r2
 80038e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038ea:	461a      	mov	r2, r3
 80038ec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80038f0:	6013      	str	r3, [r2, #0]
 80038f2:	e008      	b.n	8003906 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	015a      	lsls	r2, r3, #5
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	4413      	add	r3, r2
 80038fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003900:	461a      	mov	r2, r3
 8003902:	2300      	movs	r3, #0
 8003904:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	015a      	lsls	r2, r3, #5
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	4413      	add	r3, r2
 800390e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003912:	461a      	mov	r2, r3
 8003914:	2300      	movs	r3, #0
 8003916:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	015a      	lsls	r2, r3, #5
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	4413      	add	r3, r2
 8003920:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003924:	461a      	mov	r2, r3
 8003926:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800392a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	3301      	adds	r3, #1
 8003930:	613b      	str	r3, [r7, #16]
 8003932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003934:	693a      	ldr	r2, [r7, #16]
 8003936:	429a      	cmp	r2, r3
 8003938:	d3b7      	bcc.n	80038aa <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800393a:	2300      	movs	r3, #0
 800393c:	613b      	str	r3, [r7, #16]
 800393e:	e043      	b.n	80039c8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	015a      	lsls	r2, r3, #5
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	4413      	add	r3, r2
 8003948:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003952:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003956:	d118      	bne.n	800398a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d10a      	bne.n	8003974 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	015a      	lsls	r2, r3, #5
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	4413      	add	r3, r2
 8003966:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800396a:	461a      	mov	r2, r3
 800396c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003970:	6013      	str	r3, [r2, #0]
 8003972:	e013      	b.n	800399c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	015a      	lsls	r2, r3, #5
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	4413      	add	r3, r2
 800397c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003980:	461a      	mov	r2, r3
 8003982:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003986:	6013      	str	r3, [r2, #0]
 8003988:	e008      	b.n	800399c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	015a      	lsls	r2, r3, #5
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	4413      	add	r3, r2
 8003992:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003996:	461a      	mov	r2, r3
 8003998:	2300      	movs	r3, #0
 800399a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	015a      	lsls	r2, r3, #5
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	4413      	add	r3, r2
 80039a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039a8:	461a      	mov	r2, r3
 80039aa:	2300      	movs	r3, #0
 80039ac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	015a      	lsls	r2, r3, #5
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	4413      	add	r3, r2
 80039b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039ba:	461a      	mov	r2, r3
 80039bc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80039c0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	3301      	adds	r3, #1
 80039c6:	613b      	str	r3, [r7, #16]
 80039c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ca:	693a      	ldr	r2, [r7, #16]
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d3b7      	bcc.n	8003940 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039d6:	691b      	ldr	r3, [r3, #16]
 80039d8:	68fa      	ldr	r2, [r7, #12]
 80039da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80039de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80039e2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2200      	movs	r2, #0
 80039e8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80039f0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80039f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d105      	bne.n	8003a04 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	699b      	ldr	r3, [r3, #24]
 80039fc:	f043 0210 	orr.w	r2, r3, #16
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	699a      	ldr	r2, [r3, #24]
 8003a08:	4b0f      	ldr	r3, [pc, #60]	; (8003a48 <USB_DevInit+0x2c4>)
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	687a      	ldr	r2, [r7, #4]
 8003a0e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003a10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d005      	beq.n	8003a22 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	699b      	ldr	r3, [r3, #24]
 8003a1a:	f043 0208 	orr.w	r2, r3, #8
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003a22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d107      	bne.n	8003a38 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	699b      	ldr	r3, [r3, #24]
 8003a2c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003a30:	f043 0304 	orr.w	r3, r3, #4
 8003a34:	687a      	ldr	r2, [r7, #4]
 8003a36:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003a38:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3718      	adds	r7, #24
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003a44:	b004      	add	sp, #16
 8003a46:	4770      	bx	lr
 8003a48:	803c3800 	.word	0x803c3800

08003a4c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b085      	sub	sp, #20
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
 8003a54:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8003a56:	2300      	movs	r3, #0
 8003a58:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	019b      	lsls	r3, r3, #6
 8003a5e:	f043 0220 	orr.w	r2, r3, #32
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	3301      	adds	r3, #1
 8003a6a:	60fb      	str	r3, [r7, #12]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	4a09      	ldr	r2, [pc, #36]	; (8003a94 <USB_FlushTxFifo+0x48>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d901      	bls.n	8003a78 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8003a74:	2303      	movs	r3, #3
 8003a76:	e006      	b.n	8003a86 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	691b      	ldr	r3, [r3, #16]
 8003a7c:	f003 0320 	and.w	r3, r3, #32
 8003a80:	2b20      	cmp	r3, #32
 8003a82:	d0f0      	beq.n	8003a66 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8003a84:	2300      	movs	r3, #0
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3714      	adds	r7, #20
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr
 8003a92:	bf00      	nop
 8003a94:	00030d40 	.word	0x00030d40

08003a98 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b085      	sub	sp, #20
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2210      	movs	r2, #16
 8003aa8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	3301      	adds	r3, #1
 8003aae:	60fb      	str	r3, [r7, #12]
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	4a09      	ldr	r2, [pc, #36]	; (8003ad8 <USB_FlushRxFifo+0x40>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d901      	bls.n	8003abc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8003ab8:	2303      	movs	r3, #3
 8003aba:	e006      	b.n	8003aca <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	691b      	ldr	r3, [r3, #16]
 8003ac0:	f003 0310 	and.w	r3, r3, #16
 8003ac4:	2b10      	cmp	r3, #16
 8003ac6:	d0f0      	beq.n	8003aaa <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8003ac8:	2300      	movs	r3, #0
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3714      	adds	r7, #20
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad4:	4770      	bx	lr
 8003ad6:	bf00      	nop
 8003ad8:	00030d40 	.word	0x00030d40

08003adc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b085      	sub	sp, #20
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
 8003ae4:	460b      	mov	r3, r1
 8003ae6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	78fb      	ldrb	r3, [r7, #3]
 8003af6:	68f9      	ldr	r1, [r7, #12]
 8003af8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003afc:	4313      	orrs	r3, r2
 8003afe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003b00:	2300      	movs	r3, #0
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3714      	adds	r7, #20
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr

08003b0e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003b0e:	b480      	push	{r7}
 8003b10:	b087      	sub	sp, #28
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	f003 0306 	and.w	r3, r3, #6
 8003b26:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d102      	bne.n	8003b34 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	75fb      	strb	r3, [r7, #23]
 8003b32:	e00a      	b.n	8003b4a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2b02      	cmp	r3, #2
 8003b38:	d002      	beq.n	8003b40 <USB_GetDevSpeed+0x32>
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2b06      	cmp	r3, #6
 8003b3e:	d102      	bne.n	8003b46 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003b40:	2302      	movs	r3, #2
 8003b42:	75fb      	strb	r3, [r7, #23]
 8003b44:	e001      	b.n	8003b4a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003b46:	230f      	movs	r3, #15
 8003b48:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003b4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	371c      	adds	r7, #28
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr

08003b58 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b085      	sub	sp, #20
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
 8003b60:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	781b      	ldrb	r3, [r3, #0]
 8003b6a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	785b      	ldrb	r3, [r3, #1]
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d13a      	bne.n	8003bea <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b7a:	69da      	ldr	r2, [r3, #28]
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	781b      	ldrb	r3, [r3, #0]
 8003b80:	f003 030f 	and.w	r3, r3, #15
 8003b84:	2101      	movs	r1, #1
 8003b86:	fa01 f303 	lsl.w	r3, r1, r3
 8003b8a:	b29b      	uxth	r3, r3
 8003b8c:	68f9      	ldr	r1, [r7, #12]
 8003b8e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003b92:	4313      	orrs	r3, r2
 8003b94:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	015a      	lsls	r2, r3, #5
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	4413      	add	r3, r2
 8003b9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d155      	bne.n	8003c58 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	015a      	lsls	r2, r3, #5
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	4413      	add	r3, r2
 8003bb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	78db      	ldrb	r3, [r3, #3]
 8003bc6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003bc8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	059b      	lsls	r3, r3, #22
 8003bce:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	68ba      	ldr	r2, [r7, #8]
 8003bd4:	0151      	lsls	r1, r2, #5
 8003bd6:	68fa      	ldr	r2, [r7, #12]
 8003bd8:	440a      	add	r2, r1
 8003bda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003bde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003be2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003be6:	6013      	str	r3, [r2, #0]
 8003be8:	e036      	b.n	8003c58 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bf0:	69da      	ldr	r2, [r3, #28]
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	781b      	ldrb	r3, [r3, #0]
 8003bf6:	f003 030f 	and.w	r3, r3, #15
 8003bfa:	2101      	movs	r1, #1
 8003bfc:	fa01 f303 	lsl.w	r3, r1, r3
 8003c00:	041b      	lsls	r3, r3, #16
 8003c02:	68f9      	ldr	r1, [r7, #12]
 8003c04:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	015a      	lsls	r2, r3, #5
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	4413      	add	r3, r2
 8003c14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d11a      	bne.n	8003c58 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	015a      	lsls	r2, r3, #5
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	4413      	add	r3, r2
 8003c2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	78db      	ldrb	r3, [r3, #3]
 8003c3c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003c3e:	430b      	orrs	r3, r1
 8003c40:	4313      	orrs	r3, r2
 8003c42:	68ba      	ldr	r2, [r7, #8]
 8003c44:	0151      	lsls	r1, r2, #5
 8003c46:	68fa      	ldr	r2, [r7, #12]
 8003c48:	440a      	add	r2, r1
 8003c4a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c56:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003c58:	2300      	movs	r3, #0
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3714      	adds	r7, #20
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr
	...

08003c68 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b085      	sub	sp, #20
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
 8003c70:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	781b      	ldrb	r3, [r3, #0]
 8003c7a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	785b      	ldrb	r3, [r3, #1]
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d161      	bne.n	8003d48 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	015a      	lsls	r2, r3, #5
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	4413      	add	r3, r2
 8003c8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003c96:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c9a:	d11f      	bne.n	8003cdc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	015a      	lsls	r2, r3, #5
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	4413      	add	r3, r2
 8003ca4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	68ba      	ldr	r2, [r7, #8]
 8003cac:	0151      	lsls	r1, r2, #5
 8003cae:	68fa      	ldr	r2, [r7, #12]
 8003cb0:	440a      	add	r2, r1
 8003cb2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003cb6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003cba:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	015a      	lsls	r2, r3, #5
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	4413      	add	r3, r2
 8003cc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	68ba      	ldr	r2, [r7, #8]
 8003ccc:	0151      	lsls	r1, r2, #5
 8003cce:	68fa      	ldr	r2, [r7, #12]
 8003cd0:	440a      	add	r2, r1
 8003cd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003cd6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003cda:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ce2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	781b      	ldrb	r3, [r3, #0]
 8003ce8:	f003 030f 	and.w	r3, r3, #15
 8003cec:	2101      	movs	r1, #1
 8003cee:	fa01 f303 	lsl.w	r3, r1, r3
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	43db      	mvns	r3, r3
 8003cf6:	68f9      	ldr	r1, [r7, #12]
 8003cf8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d06:	69da      	ldr	r2, [r3, #28]
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	781b      	ldrb	r3, [r3, #0]
 8003d0c:	f003 030f 	and.w	r3, r3, #15
 8003d10:	2101      	movs	r1, #1
 8003d12:	fa01 f303 	lsl.w	r3, r1, r3
 8003d16:	b29b      	uxth	r3, r3
 8003d18:	43db      	mvns	r3, r3
 8003d1a:	68f9      	ldr	r1, [r7, #12]
 8003d1c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d20:	4013      	ands	r3, r2
 8003d22:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	015a      	lsls	r2, r3, #5
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	4413      	add	r3, r2
 8003d2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	0159      	lsls	r1, r3, #5
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	440b      	add	r3, r1
 8003d3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d3e:	4619      	mov	r1, r3
 8003d40:	4b35      	ldr	r3, [pc, #212]	; (8003e18 <USB_DeactivateEndpoint+0x1b0>)
 8003d42:	4013      	ands	r3, r2
 8003d44:	600b      	str	r3, [r1, #0]
 8003d46:	e060      	b.n	8003e0a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	015a      	lsls	r2, r3, #5
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	4413      	add	r3, r2
 8003d50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003d5a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d5e:	d11f      	bne.n	8003da0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	015a      	lsls	r2, r3, #5
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	4413      	add	r3, r2
 8003d68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	68ba      	ldr	r2, [r7, #8]
 8003d70:	0151      	lsls	r1, r2, #5
 8003d72:	68fa      	ldr	r2, [r7, #12]
 8003d74:	440a      	add	r2, r1
 8003d76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d7a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003d7e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	015a      	lsls	r2, r3, #5
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	4413      	add	r3, r2
 8003d88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	68ba      	ldr	r2, [r7, #8]
 8003d90:	0151      	lsls	r1, r2, #5
 8003d92:	68fa      	ldr	r2, [r7, #12]
 8003d94:	440a      	add	r2, r1
 8003d96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d9a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003d9e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003da6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	781b      	ldrb	r3, [r3, #0]
 8003dac:	f003 030f 	and.w	r3, r3, #15
 8003db0:	2101      	movs	r1, #1
 8003db2:	fa01 f303 	lsl.w	r3, r1, r3
 8003db6:	041b      	lsls	r3, r3, #16
 8003db8:	43db      	mvns	r3, r3
 8003dba:	68f9      	ldr	r1, [r7, #12]
 8003dbc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dca:	69da      	ldr	r2, [r3, #28]
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	781b      	ldrb	r3, [r3, #0]
 8003dd0:	f003 030f 	and.w	r3, r3, #15
 8003dd4:	2101      	movs	r1, #1
 8003dd6:	fa01 f303 	lsl.w	r3, r1, r3
 8003dda:	041b      	lsls	r3, r3, #16
 8003ddc:	43db      	mvns	r3, r3
 8003dde:	68f9      	ldr	r1, [r7, #12]
 8003de0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003de4:	4013      	ands	r3, r2
 8003de6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	015a      	lsls	r2, r3, #5
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	4413      	add	r3, r2
 8003df0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	0159      	lsls	r1, r3, #5
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	440b      	add	r3, r1
 8003dfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e02:	4619      	mov	r1, r3
 8003e04:	4b05      	ldr	r3, [pc, #20]	; (8003e1c <USB_DeactivateEndpoint+0x1b4>)
 8003e06:	4013      	ands	r3, r2
 8003e08:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003e0a:	2300      	movs	r3, #0
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3714      	adds	r7, #20
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr
 8003e18:	ec337800 	.word	0xec337800
 8003e1c:	eff37800 	.word	0xeff37800

08003e20 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b08a      	sub	sp, #40	; 0x28
 8003e24:	af02      	add	r7, sp, #8
 8003e26:	60f8      	str	r0, [r7, #12]
 8003e28:	60b9      	str	r1, [r7, #8]
 8003e2a:	4613      	mov	r3, r2
 8003e2c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	781b      	ldrb	r3, [r3, #0]
 8003e36:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	785b      	ldrb	r3, [r3, #1]
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	f040 815c 	bne.w	80040fa <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	695b      	ldr	r3, [r3, #20]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d132      	bne.n	8003eb0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003e4a:	69bb      	ldr	r3, [r7, #24]
 8003e4c:	015a      	lsls	r2, r3, #5
 8003e4e:	69fb      	ldr	r3, [r7, #28]
 8003e50:	4413      	add	r3, r2
 8003e52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e56:	691b      	ldr	r3, [r3, #16]
 8003e58:	69ba      	ldr	r2, [r7, #24]
 8003e5a:	0151      	lsls	r1, r2, #5
 8003e5c:	69fa      	ldr	r2, [r7, #28]
 8003e5e:	440a      	add	r2, r1
 8003e60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e64:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003e68:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003e6c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003e6e:	69bb      	ldr	r3, [r7, #24]
 8003e70:	015a      	lsls	r2, r3, #5
 8003e72:	69fb      	ldr	r3, [r7, #28]
 8003e74:	4413      	add	r3, r2
 8003e76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e7a:	691b      	ldr	r3, [r3, #16]
 8003e7c:	69ba      	ldr	r2, [r7, #24]
 8003e7e:	0151      	lsls	r1, r2, #5
 8003e80:	69fa      	ldr	r2, [r7, #28]
 8003e82:	440a      	add	r2, r1
 8003e84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e88:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003e8c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003e8e:	69bb      	ldr	r3, [r7, #24]
 8003e90:	015a      	lsls	r2, r3, #5
 8003e92:	69fb      	ldr	r3, [r7, #28]
 8003e94:	4413      	add	r3, r2
 8003e96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e9a:	691b      	ldr	r3, [r3, #16]
 8003e9c:	69ba      	ldr	r2, [r7, #24]
 8003e9e:	0151      	lsls	r1, r2, #5
 8003ea0:	69fa      	ldr	r2, [r7, #28]
 8003ea2:	440a      	add	r2, r1
 8003ea4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ea8:	0cdb      	lsrs	r3, r3, #19
 8003eaa:	04db      	lsls	r3, r3, #19
 8003eac:	6113      	str	r3, [r2, #16]
 8003eae:	e074      	b.n	8003f9a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003eb0:	69bb      	ldr	r3, [r7, #24]
 8003eb2:	015a      	lsls	r2, r3, #5
 8003eb4:	69fb      	ldr	r3, [r7, #28]
 8003eb6:	4413      	add	r3, r2
 8003eb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ebc:	691b      	ldr	r3, [r3, #16]
 8003ebe:	69ba      	ldr	r2, [r7, #24]
 8003ec0:	0151      	lsls	r1, r2, #5
 8003ec2:	69fa      	ldr	r2, [r7, #28]
 8003ec4:	440a      	add	r2, r1
 8003ec6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003eca:	0cdb      	lsrs	r3, r3, #19
 8003ecc:	04db      	lsls	r3, r3, #19
 8003ece:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003ed0:	69bb      	ldr	r3, [r7, #24]
 8003ed2:	015a      	lsls	r2, r3, #5
 8003ed4:	69fb      	ldr	r3, [r7, #28]
 8003ed6:	4413      	add	r3, r2
 8003ed8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003edc:	691b      	ldr	r3, [r3, #16]
 8003ede:	69ba      	ldr	r2, [r7, #24]
 8003ee0:	0151      	lsls	r1, r2, #5
 8003ee2:	69fa      	ldr	r2, [r7, #28]
 8003ee4:	440a      	add	r2, r1
 8003ee6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003eea:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003eee:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003ef2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003ef4:	69bb      	ldr	r3, [r7, #24]
 8003ef6:	015a      	lsls	r2, r3, #5
 8003ef8:	69fb      	ldr	r3, [r7, #28]
 8003efa:	4413      	add	r3, r2
 8003efc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f00:	691a      	ldr	r2, [r3, #16]
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	6959      	ldr	r1, [r3, #20]
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	440b      	add	r3, r1
 8003f0c:	1e59      	subs	r1, r3, #1
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f16:	04d9      	lsls	r1, r3, #19
 8003f18:	4b9d      	ldr	r3, [pc, #628]	; (8004190 <USB_EPStartXfer+0x370>)
 8003f1a:	400b      	ands	r3, r1
 8003f1c:	69b9      	ldr	r1, [r7, #24]
 8003f1e:	0148      	lsls	r0, r1, #5
 8003f20:	69f9      	ldr	r1, [r7, #28]
 8003f22:	4401      	add	r1, r0
 8003f24:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003f2c:	69bb      	ldr	r3, [r7, #24]
 8003f2e:	015a      	lsls	r2, r3, #5
 8003f30:	69fb      	ldr	r3, [r7, #28]
 8003f32:	4413      	add	r3, r2
 8003f34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f38:	691a      	ldr	r2, [r3, #16]
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	695b      	ldr	r3, [r3, #20]
 8003f3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f42:	69b9      	ldr	r1, [r7, #24]
 8003f44:	0148      	lsls	r0, r1, #5
 8003f46:	69f9      	ldr	r1, [r7, #28]
 8003f48:	4401      	add	r1, r0
 8003f4a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	78db      	ldrb	r3, [r3, #3]
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d11f      	bne.n	8003f9a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003f5a:	69bb      	ldr	r3, [r7, #24]
 8003f5c:	015a      	lsls	r2, r3, #5
 8003f5e:	69fb      	ldr	r3, [r7, #28]
 8003f60:	4413      	add	r3, r2
 8003f62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f66:	691b      	ldr	r3, [r3, #16]
 8003f68:	69ba      	ldr	r2, [r7, #24]
 8003f6a:	0151      	lsls	r1, r2, #5
 8003f6c:	69fa      	ldr	r2, [r7, #28]
 8003f6e:	440a      	add	r2, r1
 8003f70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f74:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003f78:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003f7a:	69bb      	ldr	r3, [r7, #24]
 8003f7c:	015a      	lsls	r2, r3, #5
 8003f7e:	69fb      	ldr	r3, [r7, #28]
 8003f80:	4413      	add	r3, r2
 8003f82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f86:	691b      	ldr	r3, [r3, #16]
 8003f88:	69ba      	ldr	r2, [r7, #24]
 8003f8a:	0151      	lsls	r1, r2, #5
 8003f8c:	69fa      	ldr	r2, [r7, #28]
 8003f8e:	440a      	add	r2, r1
 8003f90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f94:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003f98:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8003f9a:	79fb      	ldrb	r3, [r7, #7]
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d14b      	bne.n	8004038 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	691b      	ldr	r3, [r3, #16]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d009      	beq.n	8003fbc <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003fa8:	69bb      	ldr	r3, [r7, #24]
 8003faa:	015a      	lsls	r2, r3, #5
 8003fac:	69fb      	ldr	r3, [r7, #28]
 8003fae:	4413      	add	r3, r2
 8003fb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fb4:	461a      	mov	r2, r3
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	691b      	ldr	r3, [r3, #16]
 8003fba:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	78db      	ldrb	r3, [r3, #3]
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d128      	bne.n	8004016 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003fc4:	69fb      	ldr	r3, [r7, #28]
 8003fc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d110      	bne.n	8003ff6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003fd4:	69bb      	ldr	r3, [r7, #24]
 8003fd6:	015a      	lsls	r2, r3, #5
 8003fd8:	69fb      	ldr	r3, [r7, #28]
 8003fda:	4413      	add	r3, r2
 8003fdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	69ba      	ldr	r2, [r7, #24]
 8003fe4:	0151      	lsls	r1, r2, #5
 8003fe6:	69fa      	ldr	r2, [r7, #28]
 8003fe8:	440a      	add	r2, r1
 8003fea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fee:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003ff2:	6013      	str	r3, [r2, #0]
 8003ff4:	e00f      	b.n	8004016 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003ff6:	69bb      	ldr	r3, [r7, #24]
 8003ff8:	015a      	lsls	r2, r3, #5
 8003ffa:	69fb      	ldr	r3, [r7, #28]
 8003ffc:	4413      	add	r3, r2
 8003ffe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	69ba      	ldr	r2, [r7, #24]
 8004006:	0151      	lsls	r1, r2, #5
 8004008:	69fa      	ldr	r2, [r7, #28]
 800400a:	440a      	add	r2, r1
 800400c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004010:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004014:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004016:	69bb      	ldr	r3, [r7, #24]
 8004018:	015a      	lsls	r2, r3, #5
 800401a:	69fb      	ldr	r3, [r7, #28]
 800401c:	4413      	add	r3, r2
 800401e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	69ba      	ldr	r2, [r7, #24]
 8004026:	0151      	lsls	r1, r2, #5
 8004028:	69fa      	ldr	r2, [r7, #28]
 800402a:	440a      	add	r2, r1
 800402c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004030:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004034:	6013      	str	r3, [r2, #0]
 8004036:	e12f      	b.n	8004298 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004038:	69bb      	ldr	r3, [r7, #24]
 800403a:	015a      	lsls	r2, r3, #5
 800403c:	69fb      	ldr	r3, [r7, #28]
 800403e:	4413      	add	r3, r2
 8004040:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	69ba      	ldr	r2, [r7, #24]
 8004048:	0151      	lsls	r1, r2, #5
 800404a:	69fa      	ldr	r2, [r7, #28]
 800404c:	440a      	add	r2, r1
 800404e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004052:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004056:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	78db      	ldrb	r3, [r3, #3]
 800405c:	2b01      	cmp	r3, #1
 800405e:	d015      	beq.n	800408c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	695b      	ldr	r3, [r3, #20]
 8004064:	2b00      	cmp	r3, #0
 8004066:	f000 8117 	beq.w	8004298 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800406a:	69fb      	ldr	r3, [r7, #28]
 800406c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004070:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	781b      	ldrb	r3, [r3, #0]
 8004076:	f003 030f 	and.w	r3, r3, #15
 800407a:	2101      	movs	r1, #1
 800407c:	fa01 f303 	lsl.w	r3, r1, r3
 8004080:	69f9      	ldr	r1, [r7, #28]
 8004082:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004086:	4313      	orrs	r3, r2
 8004088:	634b      	str	r3, [r1, #52]	; 0x34
 800408a:	e105      	b.n	8004298 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800408c:	69fb      	ldr	r3, [r7, #28]
 800408e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004098:	2b00      	cmp	r3, #0
 800409a:	d110      	bne.n	80040be <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800409c:	69bb      	ldr	r3, [r7, #24]
 800409e:	015a      	lsls	r2, r3, #5
 80040a0:	69fb      	ldr	r3, [r7, #28]
 80040a2:	4413      	add	r3, r2
 80040a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	69ba      	ldr	r2, [r7, #24]
 80040ac:	0151      	lsls	r1, r2, #5
 80040ae:	69fa      	ldr	r2, [r7, #28]
 80040b0:	440a      	add	r2, r1
 80040b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040b6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80040ba:	6013      	str	r3, [r2, #0]
 80040bc:	e00f      	b.n	80040de <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80040be:	69bb      	ldr	r3, [r7, #24]
 80040c0:	015a      	lsls	r2, r3, #5
 80040c2:	69fb      	ldr	r3, [r7, #28]
 80040c4:	4413      	add	r3, r2
 80040c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	69ba      	ldr	r2, [r7, #24]
 80040ce:	0151      	lsls	r1, r2, #5
 80040d0:	69fa      	ldr	r2, [r7, #28]
 80040d2:	440a      	add	r2, r1
 80040d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040dc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	68d9      	ldr	r1, [r3, #12]
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	781a      	ldrb	r2, [r3, #0]
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	695b      	ldr	r3, [r3, #20]
 80040ea:	b298      	uxth	r0, r3
 80040ec:	79fb      	ldrb	r3, [r7, #7]
 80040ee:	9300      	str	r3, [sp, #0]
 80040f0:	4603      	mov	r3, r0
 80040f2:	68f8      	ldr	r0, [r7, #12]
 80040f4:	f000 fa2b 	bl	800454e <USB_WritePacket>
 80040f8:	e0ce      	b.n	8004298 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80040fa:	69bb      	ldr	r3, [r7, #24]
 80040fc:	015a      	lsls	r2, r3, #5
 80040fe:	69fb      	ldr	r3, [r7, #28]
 8004100:	4413      	add	r3, r2
 8004102:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004106:	691b      	ldr	r3, [r3, #16]
 8004108:	69ba      	ldr	r2, [r7, #24]
 800410a:	0151      	lsls	r1, r2, #5
 800410c:	69fa      	ldr	r2, [r7, #28]
 800410e:	440a      	add	r2, r1
 8004110:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004114:	0cdb      	lsrs	r3, r3, #19
 8004116:	04db      	lsls	r3, r3, #19
 8004118:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800411a:	69bb      	ldr	r3, [r7, #24]
 800411c:	015a      	lsls	r2, r3, #5
 800411e:	69fb      	ldr	r3, [r7, #28]
 8004120:	4413      	add	r3, r2
 8004122:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004126:	691b      	ldr	r3, [r3, #16]
 8004128:	69ba      	ldr	r2, [r7, #24]
 800412a:	0151      	lsls	r1, r2, #5
 800412c:	69fa      	ldr	r2, [r7, #28]
 800412e:	440a      	add	r2, r1
 8004130:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004134:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004138:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800413c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	695b      	ldr	r3, [r3, #20]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d126      	bne.n	8004194 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004146:	69bb      	ldr	r3, [r7, #24]
 8004148:	015a      	lsls	r2, r3, #5
 800414a:	69fb      	ldr	r3, [r7, #28]
 800414c:	4413      	add	r3, r2
 800414e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004152:	691a      	ldr	r2, [r3, #16]
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800415c:	69b9      	ldr	r1, [r7, #24]
 800415e:	0148      	lsls	r0, r1, #5
 8004160:	69f9      	ldr	r1, [r7, #28]
 8004162:	4401      	add	r1, r0
 8004164:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004168:	4313      	orrs	r3, r2
 800416a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800416c:	69bb      	ldr	r3, [r7, #24]
 800416e:	015a      	lsls	r2, r3, #5
 8004170:	69fb      	ldr	r3, [r7, #28]
 8004172:	4413      	add	r3, r2
 8004174:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004178:	691b      	ldr	r3, [r3, #16]
 800417a:	69ba      	ldr	r2, [r7, #24]
 800417c:	0151      	lsls	r1, r2, #5
 800417e:	69fa      	ldr	r2, [r7, #28]
 8004180:	440a      	add	r2, r1
 8004182:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004186:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800418a:	6113      	str	r3, [r2, #16]
 800418c:	e036      	b.n	80041fc <USB_EPStartXfer+0x3dc>
 800418e:	bf00      	nop
 8004190:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	695a      	ldr	r2, [r3, #20]
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	4413      	add	r3, r2
 800419e:	1e5a      	subs	r2, r3, #1
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80041a8:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80041aa:	69bb      	ldr	r3, [r7, #24]
 80041ac:	015a      	lsls	r2, r3, #5
 80041ae:	69fb      	ldr	r3, [r7, #28]
 80041b0:	4413      	add	r3, r2
 80041b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041b6:	691a      	ldr	r2, [r3, #16]
 80041b8:	8afb      	ldrh	r3, [r7, #22]
 80041ba:	04d9      	lsls	r1, r3, #19
 80041bc:	4b39      	ldr	r3, [pc, #228]	; (80042a4 <USB_EPStartXfer+0x484>)
 80041be:	400b      	ands	r3, r1
 80041c0:	69b9      	ldr	r1, [r7, #24]
 80041c2:	0148      	lsls	r0, r1, #5
 80041c4:	69f9      	ldr	r1, [r7, #28]
 80041c6:	4401      	add	r1, r0
 80041c8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80041cc:	4313      	orrs	r3, r2
 80041ce:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80041d0:	69bb      	ldr	r3, [r7, #24]
 80041d2:	015a      	lsls	r2, r3, #5
 80041d4:	69fb      	ldr	r3, [r7, #28]
 80041d6:	4413      	add	r3, r2
 80041d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041dc:	691a      	ldr	r2, [r3, #16]
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	8af9      	ldrh	r1, [r7, #22]
 80041e4:	fb01 f303 	mul.w	r3, r1, r3
 80041e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041ec:	69b9      	ldr	r1, [r7, #24]
 80041ee:	0148      	lsls	r0, r1, #5
 80041f0:	69f9      	ldr	r1, [r7, #28]
 80041f2:	4401      	add	r1, r0
 80041f4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80041f8:	4313      	orrs	r3, r2
 80041fa:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80041fc:	79fb      	ldrb	r3, [r7, #7]
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d10d      	bne.n	800421e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	68db      	ldr	r3, [r3, #12]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d009      	beq.n	800421e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	68d9      	ldr	r1, [r3, #12]
 800420e:	69bb      	ldr	r3, [r7, #24]
 8004210:	015a      	lsls	r2, r3, #5
 8004212:	69fb      	ldr	r3, [r7, #28]
 8004214:	4413      	add	r3, r2
 8004216:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800421a:	460a      	mov	r2, r1
 800421c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	78db      	ldrb	r3, [r3, #3]
 8004222:	2b01      	cmp	r3, #1
 8004224:	d128      	bne.n	8004278 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004226:	69fb      	ldr	r3, [r7, #28]
 8004228:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004232:	2b00      	cmp	r3, #0
 8004234:	d110      	bne.n	8004258 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004236:	69bb      	ldr	r3, [r7, #24]
 8004238:	015a      	lsls	r2, r3, #5
 800423a:	69fb      	ldr	r3, [r7, #28]
 800423c:	4413      	add	r3, r2
 800423e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	69ba      	ldr	r2, [r7, #24]
 8004246:	0151      	lsls	r1, r2, #5
 8004248:	69fa      	ldr	r2, [r7, #28]
 800424a:	440a      	add	r2, r1
 800424c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004250:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004254:	6013      	str	r3, [r2, #0]
 8004256:	e00f      	b.n	8004278 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004258:	69bb      	ldr	r3, [r7, #24]
 800425a:	015a      	lsls	r2, r3, #5
 800425c:	69fb      	ldr	r3, [r7, #28]
 800425e:	4413      	add	r3, r2
 8004260:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	69ba      	ldr	r2, [r7, #24]
 8004268:	0151      	lsls	r1, r2, #5
 800426a:	69fa      	ldr	r2, [r7, #28]
 800426c:	440a      	add	r2, r1
 800426e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004272:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004276:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004278:	69bb      	ldr	r3, [r7, #24]
 800427a:	015a      	lsls	r2, r3, #5
 800427c:	69fb      	ldr	r3, [r7, #28]
 800427e:	4413      	add	r3, r2
 8004280:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	69ba      	ldr	r2, [r7, #24]
 8004288:	0151      	lsls	r1, r2, #5
 800428a:	69fa      	ldr	r2, [r7, #28]
 800428c:	440a      	add	r2, r1
 800428e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004292:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004296:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004298:	2300      	movs	r3, #0
}
 800429a:	4618      	mov	r0, r3
 800429c:	3720      	adds	r7, #32
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}
 80042a2:	bf00      	nop
 80042a4:	1ff80000 	.word	0x1ff80000

080042a8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b087      	sub	sp, #28
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	60f8      	str	r0, [r7, #12]
 80042b0:	60b9      	str	r1, [r7, #8]
 80042b2:	4613      	mov	r3, r2
 80042b4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	781b      	ldrb	r3, [r3, #0]
 80042be:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	785b      	ldrb	r3, [r3, #1]
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	f040 80cd 	bne.w	8004464 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	695b      	ldr	r3, [r3, #20]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d132      	bne.n	8004338 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	015a      	lsls	r2, r3, #5
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	4413      	add	r3, r2
 80042da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042de:	691b      	ldr	r3, [r3, #16]
 80042e0:	693a      	ldr	r2, [r7, #16]
 80042e2:	0151      	lsls	r1, r2, #5
 80042e4:	697a      	ldr	r2, [r7, #20]
 80042e6:	440a      	add	r2, r1
 80042e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042ec:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80042f0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80042f4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	015a      	lsls	r2, r3, #5
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	4413      	add	r3, r2
 80042fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004302:	691b      	ldr	r3, [r3, #16]
 8004304:	693a      	ldr	r2, [r7, #16]
 8004306:	0151      	lsls	r1, r2, #5
 8004308:	697a      	ldr	r2, [r7, #20]
 800430a:	440a      	add	r2, r1
 800430c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004310:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004314:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	015a      	lsls	r2, r3, #5
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	4413      	add	r3, r2
 800431e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004322:	691b      	ldr	r3, [r3, #16]
 8004324:	693a      	ldr	r2, [r7, #16]
 8004326:	0151      	lsls	r1, r2, #5
 8004328:	697a      	ldr	r2, [r7, #20]
 800432a:	440a      	add	r2, r1
 800432c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004330:	0cdb      	lsrs	r3, r3, #19
 8004332:	04db      	lsls	r3, r3, #19
 8004334:	6113      	str	r3, [r2, #16]
 8004336:	e04e      	b.n	80043d6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	015a      	lsls	r2, r3, #5
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	4413      	add	r3, r2
 8004340:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004344:	691b      	ldr	r3, [r3, #16]
 8004346:	693a      	ldr	r2, [r7, #16]
 8004348:	0151      	lsls	r1, r2, #5
 800434a:	697a      	ldr	r2, [r7, #20]
 800434c:	440a      	add	r2, r1
 800434e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004352:	0cdb      	lsrs	r3, r3, #19
 8004354:	04db      	lsls	r3, r3, #19
 8004356:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	015a      	lsls	r2, r3, #5
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	4413      	add	r3, r2
 8004360:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004364:	691b      	ldr	r3, [r3, #16]
 8004366:	693a      	ldr	r2, [r7, #16]
 8004368:	0151      	lsls	r1, r2, #5
 800436a:	697a      	ldr	r2, [r7, #20]
 800436c:	440a      	add	r2, r1
 800436e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004372:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004376:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800437a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	695a      	ldr	r2, [r3, #20]
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	429a      	cmp	r2, r3
 8004386:	d903      	bls.n	8004390 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	689a      	ldr	r2, [r3, #8]
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	015a      	lsls	r2, r3, #5
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	4413      	add	r3, r2
 8004398:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800439c:	691b      	ldr	r3, [r3, #16]
 800439e:	693a      	ldr	r2, [r7, #16]
 80043a0:	0151      	lsls	r1, r2, #5
 80043a2:	697a      	ldr	r2, [r7, #20]
 80043a4:	440a      	add	r2, r1
 80043a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043aa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80043ae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	015a      	lsls	r2, r3, #5
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	4413      	add	r3, r2
 80043b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043bc:	691a      	ldr	r2, [r3, #16]
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	695b      	ldr	r3, [r3, #20]
 80043c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043c6:	6939      	ldr	r1, [r7, #16]
 80043c8:	0148      	lsls	r0, r1, #5
 80043ca:	6979      	ldr	r1, [r7, #20]
 80043cc:	4401      	add	r1, r0
 80043ce:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80043d2:	4313      	orrs	r3, r2
 80043d4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80043d6:	79fb      	ldrb	r3, [r7, #7]
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d11e      	bne.n	800441a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	691b      	ldr	r3, [r3, #16]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d009      	beq.n	80043f8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	015a      	lsls	r2, r3, #5
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	4413      	add	r3, r2
 80043ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043f0:	461a      	mov	r2, r3
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	691b      	ldr	r3, [r3, #16]
 80043f6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	015a      	lsls	r2, r3, #5
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	4413      	add	r3, r2
 8004400:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	693a      	ldr	r2, [r7, #16]
 8004408:	0151      	lsls	r1, r2, #5
 800440a:	697a      	ldr	r2, [r7, #20]
 800440c:	440a      	add	r2, r1
 800440e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004412:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004416:	6013      	str	r3, [r2, #0]
 8004418:	e092      	b.n	8004540 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	015a      	lsls	r2, r3, #5
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	4413      	add	r3, r2
 8004422:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	693a      	ldr	r2, [r7, #16]
 800442a:	0151      	lsls	r1, r2, #5
 800442c:	697a      	ldr	r2, [r7, #20]
 800442e:	440a      	add	r2, r1
 8004430:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004434:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004438:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	695b      	ldr	r3, [r3, #20]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d07e      	beq.n	8004540 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004448:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	781b      	ldrb	r3, [r3, #0]
 800444e:	f003 030f 	and.w	r3, r3, #15
 8004452:	2101      	movs	r1, #1
 8004454:	fa01 f303 	lsl.w	r3, r1, r3
 8004458:	6979      	ldr	r1, [r7, #20]
 800445a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800445e:	4313      	orrs	r3, r2
 8004460:	634b      	str	r3, [r1, #52]	; 0x34
 8004462:	e06d      	b.n	8004540 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	015a      	lsls	r2, r3, #5
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	4413      	add	r3, r2
 800446c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004470:	691b      	ldr	r3, [r3, #16]
 8004472:	693a      	ldr	r2, [r7, #16]
 8004474:	0151      	lsls	r1, r2, #5
 8004476:	697a      	ldr	r2, [r7, #20]
 8004478:	440a      	add	r2, r1
 800447a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800447e:	0cdb      	lsrs	r3, r3, #19
 8004480:	04db      	lsls	r3, r3, #19
 8004482:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	015a      	lsls	r2, r3, #5
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	4413      	add	r3, r2
 800448c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004490:	691b      	ldr	r3, [r3, #16]
 8004492:	693a      	ldr	r2, [r7, #16]
 8004494:	0151      	lsls	r1, r2, #5
 8004496:	697a      	ldr	r2, [r7, #20]
 8004498:	440a      	add	r2, r1
 800449a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800449e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80044a2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80044a6:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	695b      	ldr	r3, [r3, #20]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d003      	beq.n	80044b8 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	689a      	ldr	r2, [r3, #8]
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	015a      	lsls	r2, r3, #5
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	4413      	add	r3, r2
 80044c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044c4:	691b      	ldr	r3, [r3, #16]
 80044c6:	693a      	ldr	r2, [r7, #16]
 80044c8:	0151      	lsls	r1, r2, #5
 80044ca:	697a      	ldr	r2, [r7, #20]
 80044cc:	440a      	add	r2, r1
 80044ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044d2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80044d6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	015a      	lsls	r2, r3, #5
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	4413      	add	r3, r2
 80044e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044e4:	691a      	ldr	r2, [r3, #16]
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044ee:	6939      	ldr	r1, [r7, #16]
 80044f0:	0148      	lsls	r0, r1, #5
 80044f2:	6979      	ldr	r1, [r7, #20]
 80044f4:	4401      	add	r1, r0
 80044f6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80044fa:	4313      	orrs	r3, r2
 80044fc:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80044fe:	79fb      	ldrb	r3, [r7, #7]
 8004500:	2b01      	cmp	r3, #1
 8004502:	d10d      	bne.n	8004520 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d009      	beq.n	8004520 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	68d9      	ldr	r1, [r3, #12]
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	015a      	lsls	r2, r3, #5
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	4413      	add	r3, r2
 8004518:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800451c:	460a      	mov	r2, r1
 800451e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	015a      	lsls	r2, r3, #5
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	4413      	add	r3, r2
 8004528:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	693a      	ldr	r2, [r7, #16]
 8004530:	0151      	lsls	r1, r2, #5
 8004532:	697a      	ldr	r2, [r7, #20]
 8004534:	440a      	add	r2, r1
 8004536:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800453a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800453e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004540:	2300      	movs	r3, #0
}
 8004542:	4618      	mov	r0, r3
 8004544:	371c      	adds	r7, #28
 8004546:	46bd      	mov	sp, r7
 8004548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454c:	4770      	bx	lr

0800454e <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800454e:	b480      	push	{r7}
 8004550:	b089      	sub	sp, #36	; 0x24
 8004552:	af00      	add	r7, sp, #0
 8004554:	60f8      	str	r0, [r7, #12]
 8004556:	60b9      	str	r1, [r7, #8]
 8004558:	4611      	mov	r1, r2
 800455a:	461a      	mov	r2, r3
 800455c:	460b      	mov	r3, r1
 800455e:	71fb      	strb	r3, [r7, #7]
 8004560:	4613      	mov	r3, r2
 8004562:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800456c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004570:	2b00      	cmp	r3, #0
 8004572:	d11a      	bne.n	80045aa <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004574:	88bb      	ldrh	r3, [r7, #4]
 8004576:	3303      	adds	r3, #3
 8004578:	089b      	lsrs	r3, r3, #2
 800457a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800457c:	2300      	movs	r3, #0
 800457e:	61bb      	str	r3, [r7, #24]
 8004580:	e00f      	b.n	80045a2 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004582:	79fb      	ldrb	r3, [r7, #7]
 8004584:	031a      	lsls	r2, r3, #12
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	4413      	add	r3, r2
 800458a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800458e:	461a      	mov	r2, r3
 8004590:	69fb      	ldr	r3, [r7, #28]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004596:	69fb      	ldr	r3, [r7, #28]
 8004598:	3304      	adds	r3, #4
 800459a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800459c:	69bb      	ldr	r3, [r7, #24]
 800459e:	3301      	adds	r3, #1
 80045a0:	61bb      	str	r3, [r7, #24]
 80045a2:	69ba      	ldr	r2, [r7, #24]
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	429a      	cmp	r2, r3
 80045a8:	d3eb      	bcc.n	8004582 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80045aa:	2300      	movs	r3, #0
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	3724      	adds	r7, #36	; 0x24
 80045b0:	46bd      	mov	sp, r7
 80045b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b6:	4770      	bx	lr

080045b8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b089      	sub	sp, #36	; 0x24
 80045bc:	af00      	add	r7, sp, #0
 80045be:	60f8      	str	r0, [r7, #12]
 80045c0:	60b9      	str	r1, [r7, #8]
 80045c2:	4613      	mov	r3, r2
 80045c4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80045ce:	88fb      	ldrh	r3, [r7, #6]
 80045d0:	3303      	adds	r3, #3
 80045d2:	089b      	lsrs	r3, r3, #2
 80045d4:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80045d6:	2300      	movs	r3, #0
 80045d8:	61bb      	str	r3, [r7, #24]
 80045da:	e00b      	b.n	80045f4 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	69fb      	ldr	r3, [r7, #28]
 80045e6:	601a      	str	r2, [r3, #0]
    pDest++;
 80045e8:	69fb      	ldr	r3, [r7, #28]
 80045ea:	3304      	adds	r3, #4
 80045ec:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80045ee:	69bb      	ldr	r3, [r7, #24]
 80045f0:	3301      	adds	r3, #1
 80045f2:	61bb      	str	r3, [r7, #24]
 80045f4:	69ba      	ldr	r2, [r7, #24]
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d3ef      	bcc.n	80045dc <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80045fc:	69fb      	ldr	r3, [r7, #28]
}
 80045fe:	4618      	mov	r0, r3
 8004600:	3724      	adds	r7, #36	; 0x24
 8004602:	46bd      	mov	sp, r7
 8004604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004608:	4770      	bx	lr

0800460a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800460a:	b480      	push	{r7}
 800460c:	b085      	sub	sp, #20
 800460e:	af00      	add	r7, sp, #0
 8004610:	6078      	str	r0, [r7, #4]
 8004612:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	781b      	ldrb	r3, [r3, #0]
 800461c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	785b      	ldrb	r3, [r3, #1]
 8004622:	2b01      	cmp	r3, #1
 8004624:	d12c      	bne.n	8004680 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	015a      	lsls	r2, r3, #5
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	4413      	add	r3, r2
 800462e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	2b00      	cmp	r3, #0
 8004636:	db12      	blt.n	800465e <USB_EPSetStall+0x54>
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d00f      	beq.n	800465e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	015a      	lsls	r2, r3, #5
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	4413      	add	r3, r2
 8004646:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	68ba      	ldr	r2, [r7, #8]
 800464e:	0151      	lsls	r1, r2, #5
 8004650:	68fa      	ldr	r2, [r7, #12]
 8004652:	440a      	add	r2, r1
 8004654:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004658:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800465c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	015a      	lsls	r2, r3, #5
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	4413      	add	r3, r2
 8004666:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	68ba      	ldr	r2, [r7, #8]
 800466e:	0151      	lsls	r1, r2, #5
 8004670:	68fa      	ldr	r2, [r7, #12]
 8004672:	440a      	add	r2, r1
 8004674:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004678:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800467c:	6013      	str	r3, [r2, #0]
 800467e:	e02b      	b.n	80046d8 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	015a      	lsls	r2, r3, #5
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	4413      	add	r3, r2
 8004688:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	2b00      	cmp	r3, #0
 8004690:	db12      	blt.n	80046b8 <USB_EPSetStall+0xae>
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d00f      	beq.n	80046b8 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	015a      	lsls	r2, r3, #5
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	4413      	add	r3, r2
 80046a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	68ba      	ldr	r2, [r7, #8]
 80046a8:	0151      	lsls	r1, r2, #5
 80046aa:	68fa      	ldr	r2, [r7, #12]
 80046ac:	440a      	add	r2, r1
 80046ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046b2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80046b6:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	015a      	lsls	r2, r3, #5
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	4413      	add	r3, r2
 80046c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	68ba      	ldr	r2, [r7, #8]
 80046c8:	0151      	lsls	r1, r2, #5
 80046ca:	68fa      	ldr	r2, [r7, #12]
 80046cc:	440a      	add	r2, r1
 80046ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046d2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80046d6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80046d8:	2300      	movs	r3, #0
}
 80046da:	4618      	mov	r0, r3
 80046dc:	3714      	adds	r7, #20
 80046de:	46bd      	mov	sp, r7
 80046e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e4:	4770      	bx	lr

080046e6 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80046e6:	b480      	push	{r7}
 80046e8:	b085      	sub	sp, #20
 80046ea:	af00      	add	r7, sp, #0
 80046ec:	6078      	str	r0, [r7, #4]
 80046ee:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	781b      	ldrb	r3, [r3, #0]
 80046f8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	785b      	ldrb	r3, [r3, #1]
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d128      	bne.n	8004754 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	015a      	lsls	r2, r3, #5
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	4413      	add	r3, r2
 800470a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	68ba      	ldr	r2, [r7, #8]
 8004712:	0151      	lsls	r1, r2, #5
 8004714:	68fa      	ldr	r2, [r7, #12]
 8004716:	440a      	add	r2, r1
 8004718:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800471c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004720:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	78db      	ldrb	r3, [r3, #3]
 8004726:	2b03      	cmp	r3, #3
 8004728:	d003      	beq.n	8004732 <USB_EPClearStall+0x4c>
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	78db      	ldrb	r3, [r3, #3]
 800472e:	2b02      	cmp	r3, #2
 8004730:	d138      	bne.n	80047a4 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	015a      	lsls	r2, r3, #5
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	4413      	add	r3, r2
 800473a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	68ba      	ldr	r2, [r7, #8]
 8004742:	0151      	lsls	r1, r2, #5
 8004744:	68fa      	ldr	r2, [r7, #12]
 8004746:	440a      	add	r2, r1
 8004748:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800474c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004750:	6013      	str	r3, [r2, #0]
 8004752:	e027      	b.n	80047a4 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	015a      	lsls	r2, r3, #5
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	4413      	add	r3, r2
 800475c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	68ba      	ldr	r2, [r7, #8]
 8004764:	0151      	lsls	r1, r2, #5
 8004766:	68fa      	ldr	r2, [r7, #12]
 8004768:	440a      	add	r2, r1
 800476a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800476e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004772:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	78db      	ldrb	r3, [r3, #3]
 8004778:	2b03      	cmp	r3, #3
 800477a:	d003      	beq.n	8004784 <USB_EPClearStall+0x9e>
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	78db      	ldrb	r3, [r3, #3]
 8004780:	2b02      	cmp	r3, #2
 8004782:	d10f      	bne.n	80047a4 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	015a      	lsls	r2, r3, #5
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	4413      	add	r3, r2
 800478c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	68ba      	ldr	r2, [r7, #8]
 8004794:	0151      	lsls	r1, r2, #5
 8004796:	68fa      	ldr	r2, [r7, #12]
 8004798:	440a      	add	r2, r1
 800479a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800479e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047a2:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80047a4:	2300      	movs	r3, #0
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3714      	adds	r7, #20
 80047aa:	46bd      	mov	sp, r7
 80047ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b0:	4770      	bx	lr

080047b2 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80047b2:	b480      	push	{r7}
 80047b4:	b085      	sub	sp, #20
 80047b6:	af00      	add	r7, sp, #0
 80047b8:	6078      	str	r0, [r7, #4]
 80047ba:	460b      	mov	r3, r1
 80047bc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	68fa      	ldr	r2, [r7, #12]
 80047cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80047d0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80047d4:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047dc:	681a      	ldr	r2, [r3, #0]
 80047de:	78fb      	ldrb	r3, [r7, #3]
 80047e0:	011b      	lsls	r3, r3, #4
 80047e2:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80047e6:	68f9      	ldr	r1, [r7, #12]
 80047e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80047ec:	4313      	orrs	r3, r2
 80047ee:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80047f0:	2300      	movs	r3, #0
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3714      	adds	r7, #20
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr

080047fe <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80047fe:	b580      	push	{r7, lr}
 8004800:	b084      	sub	sp, #16
 8004802:	af00      	add	r7, sp, #0
 8004804:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	68fa      	ldr	r2, [r7, #12]
 8004814:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004818:	f023 0302 	bic.w	r3, r3, #2
 800481c:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800481e:	2003      	movs	r0, #3
 8004820:	f7fc fdfa 	bl	8001418 <HAL_Delay>

  return HAL_OK;
 8004824:	2300      	movs	r3, #0
}
 8004826:	4618      	mov	r0, r3
 8004828:	3710      	adds	r7, #16
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}

0800482e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800482e:	b580      	push	{r7, lr}
 8004830:	b084      	sub	sp, #16
 8004832:	af00      	add	r7, sp, #0
 8004834:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	68fa      	ldr	r2, [r7, #12]
 8004844:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004848:	f043 0302 	orr.w	r3, r3, #2
 800484c:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800484e:	2003      	movs	r0, #3
 8004850:	f7fc fde2 	bl	8001418 <HAL_Delay>

  return HAL_OK;
 8004854:	2300      	movs	r3, #0
}
 8004856:	4618      	mov	r0, r3
 8004858:	3710      	adds	r7, #16
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}

0800485e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800485e:	b480      	push	{r7}
 8004860:	b085      	sub	sp, #20
 8004862:	af00      	add	r7, sp, #0
 8004864:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	695b      	ldr	r3, [r3, #20]
 800486a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	699b      	ldr	r3, [r3, #24]
 8004870:	68fa      	ldr	r2, [r7, #12]
 8004872:	4013      	ands	r3, r2
 8004874:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004876:	68fb      	ldr	r3, [r7, #12]
}
 8004878:	4618      	mov	r0, r3
 800487a:	3714      	adds	r7, #20
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr

08004884 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004884:	b480      	push	{r7}
 8004886:	b085      	sub	sp, #20
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004896:	699b      	ldr	r3, [r3, #24]
 8004898:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048a0:	69db      	ldr	r3, [r3, #28]
 80048a2:	68ba      	ldr	r2, [r7, #8]
 80048a4:	4013      	ands	r3, r2
 80048a6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	0c1b      	lsrs	r3, r3, #16
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	3714      	adds	r7, #20
 80048b0:	46bd      	mov	sp, r7
 80048b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b6:	4770      	bx	lr

080048b8 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b085      	sub	sp, #20
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048ca:	699b      	ldr	r3, [r3, #24]
 80048cc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048d4:	69db      	ldr	r3, [r3, #28]
 80048d6:	68ba      	ldr	r2, [r7, #8]
 80048d8:	4013      	ands	r3, r2
 80048da:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	b29b      	uxth	r3, r3
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	3714      	adds	r7, #20
 80048e4:	46bd      	mov	sp, r7
 80048e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ea:	4770      	bx	lr

080048ec <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b085      	sub	sp, #20
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
 80048f4:	460b      	mov	r3, r1
 80048f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80048fc:	78fb      	ldrb	r3, [r7, #3]
 80048fe:	015a      	lsls	r2, r3, #5
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	4413      	add	r3, r2
 8004904:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004912:	695b      	ldr	r3, [r3, #20]
 8004914:	68ba      	ldr	r2, [r7, #8]
 8004916:	4013      	ands	r3, r2
 8004918:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800491a:	68bb      	ldr	r3, [r7, #8]
}
 800491c:	4618      	mov	r0, r3
 800491e:	3714      	adds	r7, #20
 8004920:	46bd      	mov	sp, r7
 8004922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004926:	4770      	bx	lr

08004928 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004928:	b480      	push	{r7}
 800492a:	b087      	sub	sp, #28
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
 8004930:	460b      	mov	r3, r1
 8004932:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800493e:	691b      	ldr	r3, [r3, #16]
 8004940:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004948:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800494a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800494c:	78fb      	ldrb	r3, [r7, #3]
 800494e:	f003 030f 	and.w	r3, r3, #15
 8004952:	68fa      	ldr	r2, [r7, #12]
 8004954:	fa22 f303 	lsr.w	r3, r2, r3
 8004958:	01db      	lsls	r3, r3, #7
 800495a:	b2db      	uxtb	r3, r3
 800495c:	693a      	ldr	r2, [r7, #16]
 800495e:	4313      	orrs	r3, r2
 8004960:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004962:	78fb      	ldrb	r3, [r7, #3]
 8004964:	015a      	lsls	r2, r3, #5
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	4413      	add	r3, r2
 800496a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	693a      	ldr	r2, [r7, #16]
 8004972:	4013      	ands	r3, r2
 8004974:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004976:	68bb      	ldr	r3, [r7, #8]
}
 8004978:	4618      	mov	r0, r3
 800497a:	371c      	adds	r7, #28
 800497c:	46bd      	mov	sp, r7
 800497e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004982:	4770      	bx	lr

08004984 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004984:	b480      	push	{r7}
 8004986:	b083      	sub	sp, #12
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	695b      	ldr	r3, [r3, #20]
 8004990:	f003 0301 	and.w	r3, r3, #1
}
 8004994:	4618      	mov	r0, r3
 8004996:	370c      	adds	r7, #12
 8004998:	46bd      	mov	sp, r7
 800499a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499e:	4770      	bx	lr

080049a0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b085      	sub	sp, #20
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	68fa      	ldr	r2, [r7, #12]
 80049b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049ba:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80049be:	f023 0307 	bic.w	r3, r3, #7
 80049c2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	68fa      	ldr	r2, [r7, #12]
 80049ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80049d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049d6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80049d8:	2300      	movs	r3, #0
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3714      	adds	r7, #20
 80049de:	46bd      	mov	sp, r7
 80049e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e4:	4770      	bx	lr
	...

080049e8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b087      	sub	sp, #28
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	60f8      	str	r0, [r7, #12]
 80049f0:	460b      	mov	r3, r1
 80049f2:	607a      	str	r2, [r7, #4]
 80049f4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	333c      	adds	r3, #60	; 0x3c
 80049fe:	3304      	adds	r3, #4
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	4a26      	ldr	r2, [pc, #152]	; (8004aa0 <USB_EP0_OutStart+0xb8>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d90a      	bls.n	8004a22 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a18:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a1c:	d101      	bne.n	8004a22 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	e037      	b.n	8004a92 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a28:	461a      	mov	r2, r3
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a34:	691b      	ldr	r3, [r3, #16]
 8004a36:	697a      	ldr	r2, [r7, #20]
 8004a38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a3c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004a40:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a48:	691b      	ldr	r3, [r3, #16]
 8004a4a:	697a      	ldr	r2, [r7, #20]
 8004a4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a50:	f043 0318 	orr.w	r3, r3, #24
 8004a54:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a5c:	691b      	ldr	r3, [r3, #16]
 8004a5e:	697a      	ldr	r2, [r7, #20]
 8004a60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a64:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004a68:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004a6a:	7afb      	ldrb	r3, [r7, #11]
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d10f      	bne.n	8004a90 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a76:	461a      	mov	r2, r3
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	697a      	ldr	r2, [r7, #20]
 8004a86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a8a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004a8e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004a90:	2300      	movs	r3, #0
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	371c      	adds	r7, #28
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr
 8004a9e:	bf00      	nop
 8004aa0:	4f54300a 	.word	0x4f54300a

08004aa4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b085      	sub	sp, #20
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004aac:	2300      	movs	r3, #0
 8004aae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	3301      	adds	r3, #1
 8004ab4:	60fb      	str	r3, [r7, #12]
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	4a13      	ldr	r2, [pc, #76]	; (8004b08 <USB_CoreReset+0x64>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d901      	bls.n	8004ac2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004abe:	2303      	movs	r3, #3
 8004ac0:	e01b      	b.n	8004afa <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	691b      	ldr	r3, [r3, #16]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	daf2      	bge.n	8004ab0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004aca:	2300      	movs	r3, #0
 8004acc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	691b      	ldr	r3, [r3, #16]
 8004ad2:	f043 0201 	orr.w	r2, r3, #1
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	3301      	adds	r3, #1
 8004ade:	60fb      	str	r3, [r7, #12]
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	4a09      	ldr	r2, [pc, #36]	; (8004b08 <USB_CoreReset+0x64>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d901      	bls.n	8004aec <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004ae8:	2303      	movs	r3, #3
 8004aea:	e006      	b.n	8004afa <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	691b      	ldr	r3, [r3, #16]
 8004af0:	f003 0301 	and.w	r3, r3, #1
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	d0f0      	beq.n	8004ada <USB_CoreReset+0x36>

  return HAL_OK;
 8004af8:	2300      	movs	r3, #0
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	3714      	adds	r7, #20
 8004afe:	46bd      	mov	sp, r7
 8004b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b04:	4770      	bx	lr
 8004b06:	bf00      	nop
 8004b08:	00030d40 	.word	0x00030d40

08004b0c <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b084      	sub	sp, #16
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
 8004b14:	460b      	mov	r3, r1
 8004b16:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8004b18:	2010      	movs	r0, #16
 8004b1a:	f001 fee3 	bl	80068e4 <malloc>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d105      	bne.n	8004b34 <USBD_HID_Init+0x28>
  {
    pdev->pClassData = NULL;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8004b30:	2302      	movs	r3, #2
 8004b32:	e01b      	b.n	8004b6c <USBD_HID_Init+0x60>
  }

  pdev->pClassData = (void *)hhid;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	68fa      	ldr	r2, [r7, #12]
 8004b38:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	7c1b      	ldrb	r3, [r3, #16]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d103      	bne.n	8004b4c <USBD_HID_Init+0x40>
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2207      	movs	r2, #7
 8004b48:	875a      	strh	r2, [r3, #58]	; 0x3a
 8004b4a:	e002      	b.n	8004b52 <USBD_HID_Init+0x46>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	220a      	movs	r2, #10
 8004b50:	875a      	strh	r2, [r3, #58]	; 0x3a
  }

    /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8004b52:	2310      	movs	r3, #16
 8004b54:	2203      	movs	r2, #3
 8004b56:	2181      	movs	r1, #129	; 0x81
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	f001 fd5c 	bl	8006616 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2201      	movs	r2, #1
 8004b62:	871a      	strh	r2, [r3, #56]	; 0x38

  hhid->state = HID_IDLE;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	2200      	movs	r2, #0
 8004b68:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8004b6a:	2300      	movs	r3, #0
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3710      	adds	r7, #16
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}

08004b74 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b082      	sub	sp, #8
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
 8004b7c:	460b      	mov	r3, r1
 8004b7e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8004b80:	2181      	movs	r1, #129	; 0x81
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f001 fd6d 	bl	8006662 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2200      	movs	r2, #0
 8004b92:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d009      	beq.n	8004bb2 <USBD_HID_DeInit+0x3e>
  {
    (void)USBD_free(pdev->pClassData);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	f001 fea5 	bl	80068f4 <free>
    pdev->pClassData = NULL;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2200      	movs	r2, #0
 8004bae:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004bb2:	2300      	movs	r3, #0
}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	3708      	adds	r7, #8
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bd80      	pop	{r7, pc}

08004bbc <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b086      	sub	sp, #24
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
 8004bc4:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004bcc:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	817b      	strh	r3, [r7, #10]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	781b      	ldrb	r3, [r3, #0]
 8004bda:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d045      	beq.n	8004c6e <USBD_HID_Setup+0xb2>
 8004be2:	2b20      	cmp	r3, #32
 8004be4:	f040 80d4 	bne.w	8004d90 <USBD_HID_Setup+0x1d4>
  {
  case USB_REQ_TYPE_CLASS :
    switch (req->bRequest)
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	785b      	ldrb	r3, [r3, #1]
 8004bec:	3b02      	subs	r3, #2
 8004bee:	2b09      	cmp	r3, #9
 8004bf0:	d835      	bhi.n	8004c5e <USBD_HID_Setup+0xa2>
 8004bf2:	a201      	add	r2, pc, #4	; (adr r2, 8004bf8 <USBD_HID_Setup+0x3c>)
 8004bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bf8:	08004c4f 	.word	0x08004c4f
 8004bfc:	08004c2f 	.word	0x08004c2f
 8004c00:	08004c5f 	.word	0x08004c5f
 8004c04:	08004c5f 	.word	0x08004c5f
 8004c08:	08004c5f 	.word	0x08004c5f
 8004c0c:	08004c5f 	.word	0x08004c5f
 8004c10:	08004c5f 	.word	0x08004c5f
 8004c14:	08004c5f 	.word	0x08004c5f
 8004c18:	08004c3d 	.word	0x08004c3d
 8004c1c:	08004c21 	.word	0x08004c21
    {
    case HID_REQ_SET_PROTOCOL:
      hhid->Protocol = (uint8_t)(req->wValue);
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	885b      	ldrh	r3, [r3, #2]
 8004c24:	b2db      	uxtb	r3, r3
 8004c26:	461a      	mov	r2, r3
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	601a      	str	r2, [r3, #0]
      break;
 8004c2c:	e01e      	b.n	8004c6c <USBD_HID_Setup+0xb0>

    case HID_REQ_GET_PROTOCOL:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2201      	movs	r2, #1
 8004c32:	4619      	mov	r1, r3
 8004c34:	6878      	ldr	r0, [r7, #4]
 8004c36:	f001 f9b4 	bl	8005fa2 <USBD_CtlSendData>
      break;
 8004c3a:	e017      	b.n	8004c6c <USBD_HID_Setup+0xb0>

    case HID_REQ_SET_IDLE:
      hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	885b      	ldrh	r3, [r3, #2]
 8004c40:	0a1b      	lsrs	r3, r3, #8
 8004c42:	b29b      	uxth	r3, r3
 8004c44:	b2db      	uxtb	r3, r3
 8004c46:	461a      	mov	r2, r3
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	605a      	str	r2, [r3, #4]
      break;
 8004c4c:	e00e      	b.n	8004c6c <USBD_HID_Setup+0xb0>

    case HID_REQ_GET_IDLE:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	3304      	adds	r3, #4
 8004c52:	2201      	movs	r2, #1
 8004c54:	4619      	mov	r1, r3
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f001 f9a3 	bl	8005fa2 <USBD_CtlSendData>
      break;
 8004c5c:	e006      	b.n	8004c6c <USBD_HID_Setup+0xb0>

    default:
      USBD_CtlError(pdev, req);
 8004c5e:	6839      	ldr	r1, [r7, #0]
 8004c60:	6878      	ldr	r0, [r7, #4]
 8004c62:	f001 f92d 	bl	8005ec0 <USBD_CtlError>
      ret = USBD_FAIL;
 8004c66:	2303      	movs	r3, #3
 8004c68:	75fb      	strb	r3, [r7, #23]
      break;
 8004c6a:	bf00      	nop
    }
    break;
 8004c6c:	e097      	b.n	8004d9e <USBD_HID_Setup+0x1e2>
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	785b      	ldrb	r3, [r3, #1]
 8004c72:	2b0b      	cmp	r3, #11
 8004c74:	f200 8083 	bhi.w	8004d7e <USBD_HID_Setup+0x1c2>
 8004c78:	a201      	add	r2, pc, #4	; (adr r2, 8004c80 <USBD_HID_Setup+0xc4>)
 8004c7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c7e:	bf00      	nop
 8004c80:	08004cb1 	.word	0x08004cb1
 8004c84:	08004d8d 	.word	0x08004d8d
 8004c88:	08004d7f 	.word	0x08004d7f
 8004c8c:	08004d7f 	.word	0x08004d7f
 8004c90:	08004d7f 	.word	0x08004d7f
 8004c94:	08004d7f 	.word	0x08004d7f
 8004c98:	08004cd9 	.word	0x08004cd9
 8004c9c:	08004d7f 	.word	0x08004d7f
 8004ca0:	08004d7f 	.word	0x08004d7f
 8004ca4:	08004d7f 	.word	0x08004d7f
 8004ca8:	08004d31 	.word	0x08004d31
 8004cac:	08004d59 	.word	0x08004d59
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004cb6:	2b03      	cmp	r3, #3
 8004cb8:	d107      	bne.n	8004cca <USBD_HID_Setup+0x10e>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004cba:	f107 030a 	add.w	r3, r7, #10
 8004cbe:	2202      	movs	r2, #2
 8004cc0:	4619      	mov	r1, r3
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f001 f96d 	bl	8005fa2 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8004cc8:	e061      	b.n	8004d8e <USBD_HID_Setup+0x1d2>
        USBD_CtlError(pdev, req);
 8004cca:	6839      	ldr	r1, [r7, #0]
 8004ccc:	6878      	ldr	r0, [r7, #4]
 8004cce:	f001 f8f7 	bl	8005ec0 <USBD_CtlError>
        ret = USBD_FAIL;
 8004cd2:	2303      	movs	r3, #3
 8004cd4:	75fb      	strb	r3, [r7, #23]
      break;
 8004cd6:	e05a      	b.n	8004d8e <USBD_HID_Setup+0x1d2>

    case USB_REQ_GET_DESCRIPTOR:
      if ((req->wValue >> 8) == HID_REPORT_DESC)
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	885b      	ldrh	r3, [r3, #2]
 8004cdc:	0a1b      	lsrs	r3, r3, #8
 8004cde:	b29b      	uxth	r3, r3
 8004ce0:	2b22      	cmp	r3, #34	; 0x22
 8004ce2:	d108      	bne.n	8004cf6 <USBD_HID_Setup+0x13a>
      {
        len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	88db      	ldrh	r3, [r3, #6]
 8004ce8:	2b43      	cmp	r3, #67	; 0x43
 8004cea:	bf28      	it	cs
 8004cec:	2343      	movcs	r3, #67	; 0x43
 8004cee:	82bb      	strh	r3, [r7, #20]
        pbuf = HID_MOUSE_ReportDesc;
 8004cf0:	4b2d      	ldr	r3, [pc, #180]	; (8004da8 <USBD_HID_Setup+0x1ec>)
 8004cf2:	613b      	str	r3, [r7, #16]
 8004cf4:	e015      	b.n	8004d22 <USBD_HID_Setup+0x166>
      }
      else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	885b      	ldrh	r3, [r3, #2]
 8004cfa:	0a1b      	lsrs	r3, r3, #8
 8004cfc:	b29b      	uxth	r3, r3
 8004cfe:	2b21      	cmp	r3, #33	; 0x21
 8004d00:	d108      	bne.n	8004d14 <USBD_HID_Setup+0x158>
      {
        pbuf = USBD_HID_Desc;
 8004d02:	4b2a      	ldr	r3, [pc, #168]	; (8004dac <USBD_HID_Setup+0x1f0>)
 8004d04:	613b      	str	r3, [r7, #16]
        len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	88db      	ldrh	r3, [r3, #6]
 8004d0a:	2b09      	cmp	r3, #9
 8004d0c:	bf28      	it	cs
 8004d0e:	2309      	movcs	r3, #9
 8004d10:	82bb      	strh	r3, [r7, #20]
 8004d12:	e006      	b.n	8004d22 <USBD_HID_Setup+0x166>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8004d14:	6839      	ldr	r1, [r7, #0]
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f001 f8d2 	bl	8005ec0 <USBD_CtlError>
        ret = USBD_FAIL;
 8004d1c:	2303      	movs	r3, #3
 8004d1e:	75fb      	strb	r3, [r7, #23]
        break;
 8004d20:	e035      	b.n	8004d8e <USBD_HID_Setup+0x1d2>
      }
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8004d22:	8abb      	ldrh	r3, [r7, #20]
 8004d24:	461a      	mov	r2, r3
 8004d26:	6939      	ldr	r1, [r7, #16]
 8004d28:	6878      	ldr	r0, [r7, #4]
 8004d2a:	f001 f93a 	bl	8005fa2 <USBD_CtlSendData>
      break;
 8004d2e:	e02e      	b.n	8004d8e <USBD_HID_Setup+0x1d2>

    case USB_REQ_GET_INTERFACE :
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004d36:	2b03      	cmp	r3, #3
 8004d38:	d107      	bne.n	8004d4a <USBD_HID_Setup+0x18e>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	3308      	adds	r3, #8
 8004d3e:	2201      	movs	r2, #1
 8004d40:	4619      	mov	r1, r3
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f001 f92d 	bl	8005fa2 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8004d48:	e021      	b.n	8004d8e <USBD_HID_Setup+0x1d2>
        USBD_CtlError(pdev, req);
 8004d4a:	6839      	ldr	r1, [r7, #0]
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	f001 f8b7 	bl	8005ec0 <USBD_CtlError>
        ret = USBD_FAIL;
 8004d52:	2303      	movs	r3, #3
 8004d54:	75fb      	strb	r3, [r7, #23]
      break;
 8004d56:	e01a      	b.n	8004d8e <USBD_HID_Setup+0x1d2>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004d5e:	2b03      	cmp	r3, #3
 8004d60:	d106      	bne.n	8004d70 <USBD_HID_Setup+0x1b4>
      {
        hhid->AltSetting = (uint8_t)(req->wValue);
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	885b      	ldrh	r3, [r3, #2]
 8004d66:	b2db      	uxtb	r3, r3
 8004d68:	461a      	mov	r2, r3
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	609a      	str	r2, [r3, #8]
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8004d6e:	e00e      	b.n	8004d8e <USBD_HID_Setup+0x1d2>
        USBD_CtlError(pdev, req);
 8004d70:	6839      	ldr	r1, [r7, #0]
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f001 f8a4 	bl	8005ec0 <USBD_CtlError>
        ret = USBD_FAIL;
 8004d78:	2303      	movs	r3, #3
 8004d7a:	75fb      	strb	r3, [r7, #23]
      break;
 8004d7c:	e007      	b.n	8004d8e <USBD_HID_Setup+0x1d2>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8004d7e:	6839      	ldr	r1, [r7, #0]
 8004d80:	6878      	ldr	r0, [r7, #4]
 8004d82:	f001 f89d 	bl	8005ec0 <USBD_CtlError>
      ret = USBD_FAIL;
 8004d86:	2303      	movs	r3, #3
 8004d88:	75fb      	strb	r3, [r7, #23]
      break;
 8004d8a:	e000      	b.n	8004d8e <USBD_HID_Setup+0x1d2>
      break;
 8004d8c:	bf00      	nop
    }
    break;
 8004d8e:	e006      	b.n	8004d9e <USBD_HID_Setup+0x1e2>

  default:
    USBD_CtlError(pdev, req);
 8004d90:	6839      	ldr	r1, [r7, #0]
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f001 f894 	bl	8005ec0 <USBD_CtlError>
    ret = USBD_FAIL;
 8004d98:	2303      	movs	r3, #3
 8004d9a:	75fb      	strb	r3, [r7, #23]
    break;
 8004d9c:	bf00      	nop
  }

  return (uint8_t)ret;
 8004d9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	3718      	adds	r7, #24
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}
 8004da8:	20000118 	.word	0x20000118
 8004dac:	20000100 	.word	0x20000100

08004db0 <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b086      	sub	sp, #24
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	60f8      	str	r0, [r7, #12]
 8004db8:	60b9      	str	r1, [r7, #8]
 8004dba:	4613      	mov	r3, r2
 8004dbc:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004dc4:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004dcc:	2b03      	cmp	r3, #3
 8004dce:	d10c      	bne.n	8004dea <USBD_HID_SendReport+0x3a>
  {
    if (hhid->state == HID_IDLE)
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	7b1b      	ldrb	r3, [r3, #12]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d108      	bne.n	8004dea <USBD_HID_SendReport+0x3a>
    {
      hhid->state = HID_BUSY;
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	2201      	movs	r2, #1
 8004ddc:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HID_EPIN_ADDR, report, len);
 8004dde:	88fb      	ldrh	r3, [r7, #6]
 8004de0:	68ba      	ldr	r2, [r7, #8]
 8004de2:	2181      	movs	r1, #129	; 0x81
 8004de4:	68f8      	ldr	r0, [r7, #12]
 8004de6:	f001 fce4 	bl	80067b2 <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 8004dea:	2300      	movs	r3, #0
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	3718      	adds	r7, #24
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}

08004df4 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b083      	sub	sp, #12
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgFSDesc);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	223b      	movs	r2, #59	; 0x3b
 8004e00:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgFSDesc;
 8004e02:	4b03      	ldr	r3, [pc, #12]	; (8004e10 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	370c      	adds	r7, #12
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0e:	4770      	bx	lr
 8004e10:	2000004c 	.word	0x2000004c

08004e14 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b083      	sub	sp, #12
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgHSDesc);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	223b      	movs	r2, #59	; 0x3b
 8004e20:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgHSDesc;
 8004e22:	4b03      	ldr	r3, [pc, #12]	; (8004e30 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	370c      	adds	r7, #12
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2e:	4770      	bx	lr
 8004e30:	20000088 	.word	0x20000088

08004e34 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b083      	sub	sp, #12
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_OtherSpeedCfgDesc);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	223b      	movs	r2, #59	; 0x3b
 8004e40:	801a      	strh	r2, [r3, #0]

  return USBD_HID_OtherSpeedCfgDesc;
 8004e42:	4b03      	ldr	r3, [pc, #12]	; (8004e50 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	370c      	adds	r7, #12
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4e:	4770      	bx	lr
 8004e50:	200000c4 	.word	0x200000c4

08004e54 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b083      	sub	sp, #12
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
 8004e5c:	460b      	mov	r3, r1
 8004e5e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004e66:	2200      	movs	r2, #0
 8004e68:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8004e6a:	2300      	movs	r3, #0
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	370c      	adds	r7, #12
 8004e70:	46bd      	mov	sp, r7
 8004e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e76:	4770      	bx	lr

08004e78 <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b083      	sub	sp, #12
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	220a      	movs	r2, #10
 8004e84:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 8004e86:	4b03      	ldr	r3, [pc, #12]	; (8004e94 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	370c      	adds	r7, #12
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e92:	4770      	bx	lr
 8004e94:	2000010c 	.word	0x2000010c

08004e98 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b086      	sub	sp, #24
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	60f8      	str	r0, [r7, #12]
 8004ea0:	60b9      	str	r1, [r7, #8]
 8004ea2:	4613      	mov	r3, r2
 8004ea4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d101      	bne.n	8004eb0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8004eac:	2303      	movs	r3, #3
 8004eae:	e025      	b.n	8004efc <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d003      	beq.n	8004ec2 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d003      	beq.n	8004ed4 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d003      	beq.n	8004ee2 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	68ba      	ldr	r2, [r7, #8]
 8004ede:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2201      	movs	r2, #1
 8004ee6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	79fa      	ldrb	r2, [r7, #7]
 8004eee:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8004ef0:	68f8      	ldr	r0, [r7, #12]
 8004ef2:	f001 fb29 	bl	8006548 <USBD_LL_Init>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	75fb      	strb	r3, [r7, #23]

  return ret;
 8004efa:	7dfb      	ldrb	r3, [r7, #23]
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	3718      	adds	r7, #24
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bd80      	pop	{r7, pc}

08004f04 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b084      	sub	sp, #16
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
 8004f0c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d101      	bne.n	8004f1c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8004f18:	2303      	movs	r3, #3
 8004f1a:	e010      	b.n	8004f3e <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	683a      	ldr	r2, [r7, #0]
 8004f20:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f2c:	f107 020e 	add.w	r2, r7, #14
 8004f30:	4610      	mov	r0, r2
 8004f32:	4798      	blx	r3
 8004f34:	4602      	mov	r2, r0
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8004f3c:	2300      	movs	r3, #0
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3710      	adds	r7, #16
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}

08004f46 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004f46:	b580      	push	{r7, lr}
 8004f48:	b082      	sub	sp, #8
 8004f4a:	af00      	add	r7, sp, #0
 8004f4c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	f001 fb46 	bl	80065e0 <USBD_LL_Start>
 8004f54:	4603      	mov	r3, r0
}
 8004f56:	4618      	mov	r0, r3
 8004f58:	3708      	adds	r7, #8
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bd80      	pop	{r7, pc}

08004f5e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8004f5e:	b480      	push	{r7}
 8004f60:	b083      	sub	sp, #12
 8004f62:	af00      	add	r7, sp, #0
 8004f64:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004f66:	2300      	movs	r3, #0
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	370c      	adds	r7, #12
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f72:	4770      	bx	lr

08004f74 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b084      	sub	sp, #16
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
 8004f7c:	460b      	mov	r3, r1
 8004f7e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8004f80:	2303      	movs	r3, #3
 8004f82:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d009      	beq.n	8004fa2 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	78fa      	ldrb	r2, [r7, #3]
 8004f98:	4611      	mov	r1, r2
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	4798      	blx	r3
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8004fa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	3710      	adds	r7, #16
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd80      	pop	{r7, pc}

08004fac <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b082      	sub	sp, #8
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
 8004fb4:	460b      	mov	r3, r1
 8004fb6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d007      	beq.n	8004fd2 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	78fa      	ldrb	r2, [r7, #3]
 8004fcc:	4611      	mov	r1, r2
 8004fce:	6878      	ldr	r0, [r7, #4]
 8004fd0:	4798      	blx	r3
  }

  return USBD_OK;
 8004fd2:	2300      	movs	r3, #0
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	3708      	adds	r7, #8
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bd80      	pop	{r7, pc}

08004fdc <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b084      	sub	sp, #16
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
 8004fe4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004fec:	6839      	ldr	r1, [r7, #0]
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f000 ff2c 	bl	8005e4c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005002:	461a      	mov	r2, r3
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005010:	f003 031f 	and.w	r3, r3, #31
 8005014:	2b01      	cmp	r3, #1
 8005016:	d00e      	beq.n	8005036 <USBD_LL_SetupStage+0x5a>
 8005018:	2b01      	cmp	r3, #1
 800501a:	d302      	bcc.n	8005022 <USBD_LL_SetupStage+0x46>
 800501c:	2b02      	cmp	r3, #2
 800501e:	d014      	beq.n	800504a <USBD_LL_SetupStage+0x6e>
 8005020:	e01d      	b.n	800505e <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005028:	4619      	mov	r1, r3
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f000 fa18 	bl	8005460 <USBD_StdDevReq>
 8005030:	4603      	mov	r3, r0
 8005032:	73fb      	strb	r3, [r7, #15]
      break;
 8005034:	e020      	b.n	8005078 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800503c:	4619      	mov	r1, r3
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f000 fa7c 	bl	800553c <USBD_StdItfReq>
 8005044:	4603      	mov	r3, r0
 8005046:	73fb      	strb	r3, [r7, #15]
      break;
 8005048:	e016      	b.n	8005078 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005050:	4619      	mov	r1, r3
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	f000 fab8 	bl	80055c8 <USBD_StdEPReq>
 8005058:	4603      	mov	r3, r0
 800505a:	73fb      	strb	r3, [r7, #15]
      break;
 800505c:	e00c      	b.n	8005078 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005064:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005068:	b2db      	uxtb	r3, r3
 800506a:	4619      	mov	r1, r3
 800506c:	6878      	ldr	r0, [r7, #4]
 800506e:	f001 fb17 	bl	80066a0 <USBD_LL_StallEP>
 8005072:	4603      	mov	r3, r0
 8005074:	73fb      	strb	r3, [r7, #15]
      break;
 8005076:	bf00      	nop
  }

  return ret;
 8005078:	7bfb      	ldrb	r3, [r7, #15]
}
 800507a:	4618      	mov	r0, r3
 800507c:	3710      	adds	r7, #16
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}

08005082 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005082:	b580      	push	{r7, lr}
 8005084:	b086      	sub	sp, #24
 8005086:	af00      	add	r7, sp, #0
 8005088:	60f8      	str	r0, [r7, #12]
 800508a:	460b      	mov	r3, r1
 800508c:	607a      	str	r2, [r7, #4]
 800508e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005090:	7afb      	ldrb	r3, [r7, #11]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d137      	bne.n	8005106 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800509c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80050a4:	2b03      	cmp	r3, #3
 80050a6:	d14a      	bne.n	800513e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	689a      	ldr	r2, [r3, #8]
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	68db      	ldr	r3, [r3, #12]
 80050b0:	429a      	cmp	r2, r3
 80050b2:	d913      	bls.n	80050dc <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	689a      	ldr	r2, [r3, #8]
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	68db      	ldr	r3, [r3, #12]
 80050bc:	1ad2      	subs	r2, r2, r3
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	68da      	ldr	r2, [r3, #12]
 80050c6:	693b      	ldr	r3, [r7, #16]
 80050c8:	689b      	ldr	r3, [r3, #8]
 80050ca:	4293      	cmp	r3, r2
 80050cc:	bf28      	it	cs
 80050ce:	4613      	movcs	r3, r2
 80050d0:	461a      	mov	r2, r3
 80050d2:	6879      	ldr	r1, [r7, #4]
 80050d4:	68f8      	ldr	r0, [r7, #12]
 80050d6:	f000 ff90 	bl	8005ffa <USBD_CtlContinueRx>
 80050da:	e030      	b.n	800513e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80050e2:	691b      	ldr	r3, [r3, #16]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d00a      	beq.n	80050fe <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80050ee:	2b03      	cmp	r3, #3
 80050f0:	d105      	bne.n	80050fe <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80050f8:	691b      	ldr	r3, [r3, #16]
 80050fa:	68f8      	ldr	r0, [r7, #12]
 80050fc:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 80050fe:	68f8      	ldr	r0, [r7, #12]
 8005100:	f000 ff8c 	bl	800601c <USBD_CtlSendStatus>
 8005104:	e01b      	b.n	800513e <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800510c:	699b      	ldr	r3, [r3, #24]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d013      	beq.n	800513a <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8005118:	2b03      	cmp	r3, #3
 800511a:	d10e      	bne.n	800513a <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005122:	699b      	ldr	r3, [r3, #24]
 8005124:	7afa      	ldrb	r2, [r7, #11]
 8005126:	4611      	mov	r1, r2
 8005128:	68f8      	ldr	r0, [r7, #12]
 800512a:	4798      	blx	r3
 800512c:	4603      	mov	r3, r0
 800512e:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8005130:	7dfb      	ldrb	r3, [r7, #23]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d003      	beq.n	800513e <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8005136:	7dfb      	ldrb	r3, [r7, #23]
 8005138:	e002      	b.n	8005140 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800513a:	2303      	movs	r3, #3
 800513c:	e000      	b.n	8005140 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800513e:	2300      	movs	r3, #0
}
 8005140:	4618      	mov	r0, r3
 8005142:	3718      	adds	r7, #24
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}

08005148 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b086      	sub	sp, #24
 800514c:	af00      	add	r7, sp, #0
 800514e:	60f8      	str	r0, [r7, #12]
 8005150:	460b      	mov	r3, r1
 8005152:	607a      	str	r2, [r7, #4]
 8005154:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005156:	7afb      	ldrb	r3, [r7, #11]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d16a      	bne.n	8005232 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	3314      	adds	r3, #20
 8005160:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005168:	2b02      	cmp	r3, #2
 800516a:	d155      	bne.n	8005218 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	689a      	ldr	r2, [r3, #8]
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	68db      	ldr	r3, [r3, #12]
 8005174:	429a      	cmp	r2, r3
 8005176:	d914      	bls.n	80051a2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	689a      	ldr	r2, [r3, #8]
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	68db      	ldr	r3, [r3, #12]
 8005180:	1ad2      	subs	r2, r2, r3
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	461a      	mov	r2, r3
 800518c:	6879      	ldr	r1, [r7, #4]
 800518e:	68f8      	ldr	r0, [r7, #12]
 8005190:	f000 ff22 	bl	8005fd8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005194:	2300      	movs	r3, #0
 8005196:	2200      	movs	r2, #0
 8005198:	2100      	movs	r1, #0
 800519a:	68f8      	ldr	r0, [r7, #12]
 800519c:	f001 fb2a 	bl	80067f4 <USBD_LL_PrepareReceive>
 80051a0:	e03a      	b.n	8005218 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80051a2:	693b      	ldr	r3, [r7, #16]
 80051a4:	68da      	ldr	r2, [r3, #12]
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	689b      	ldr	r3, [r3, #8]
 80051aa:	429a      	cmp	r2, r3
 80051ac:	d11c      	bne.n	80051e8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	685a      	ldr	r2, [r3, #4]
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80051b6:	429a      	cmp	r2, r3
 80051b8:	d316      	bcc.n	80051e8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	685a      	ldr	r2, [r3, #4]
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80051c4:	429a      	cmp	r2, r3
 80051c6:	d20f      	bcs.n	80051e8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80051c8:	2200      	movs	r2, #0
 80051ca:	2100      	movs	r1, #0
 80051cc:	68f8      	ldr	r0, [r7, #12]
 80051ce:	f000 ff03 	bl	8005fd8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	2200      	movs	r2, #0
 80051d6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80051da:	2300      	movs	r3, #0
 80051dc:	2200      	movs	r2, #0
 80051de:	2100      	movs	r1, #0
 80051e0:	68f8      	ldr	r0, [r7, #12]
 80051e2:	f001 fb07 	bl	80067f4 <USBD_LL_PrepareReceive>
 80051e6:	e017      	b.n	8005218 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051ee:	68db      	ldr	r3, [r3, #12]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d00a      	beq.n	800520a <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80051fa:	2b03      	cmp	r3, #3
 80051fc:	d105      	bne.n	800520a <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005204:	68db      	ldr	r3, [r3, #12]
 8005206:	68f8      	ldr	r0, [r7, #12]
 8005208:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800520a:	2180      	movs	r1, #128	; 0x80
 800520c:	68f8      	ldr	r0, [r7, #12]
 800520e:	f001 fa47 	bl	80066a0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005212:	68f8      	ldr	r0, [r7, #12]
 8005214:	f000 ff15 	bl	8006042 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800521e:	2b01      	cmp	r3, #1
 8005220:	d123      	bne.n	800526a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8005222:	68f8      	ldr	r0, [r7, #12]
 8005224:	f7ff fe9b 	bl	8004f5e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	2200      	movs	r2, #0
 800522c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005230:	e01b      	b.n	800526a <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005238:	695b      	ldr	r3, [r3, #20]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d013      	beq.n	8005266 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8005244:	2b03      	cmp	r3, #3
 8005246:	d10e      	bne.n	8005266 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800524e:	695b      	ldr	r3, [r3, #20]
 8005250:	7afa      	ldrb	r2, [r7, #11]
 8005252:	4611      	mov	r1, r2
 8005254:	68f8      	ldr	r0, [r7, #12]
 8005256:	4798      	blx	r3
 8005258:	4603      	mov	r3, r0
 800525a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800525c:	7dfb      	ldrb	r3, [r7, #23]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d003      	beq.n	800526a <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8005262:	7dfb      	ldrb	r3, [r7, #23]
 8005264:	e002      	b.n	800526c <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005266:	2303      	movs	r3, #3
 8005268:	e000      	b.n	800526c <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800526a:	2300      	movs	r3, #0
}
 800526c:	4618      	mov	r0, r3
 800526e:	3718      	adds	r7, #24
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}

08005274 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b082      	sub	sp, #8
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2201      	movs	r2, #1
 8005280:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2200      	movs	r2, #0
 8005288:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2200      	movs	r2, #0
 8005290:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2200      	movs	r2, #0
 8005296:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d009      	beq.n	80052b8 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	687a      	ldr	r2, [r7, #4]
 80052ae:	6852      	ldr	r2, [r2, #4]
 80052b0:	b2d2      	uxtb	r2, r2
 80052b2:	4611      	mov	r1, r2
 80052b4:	6878      	ldr	r0, [r7, #4]
 80052b6:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80052b8:	2308      	movs	r3, #8
 80052ba:	2200      	movs	r2, #0
 80052bc:	2100      	movs	r1, #0
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f001 f9a9 	bl	8006616 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2201      	movs	r2, #1
 80052c8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2208      	movs	r2, #8
 80052d0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80052d4:	2308      	movs	r3, #8
 80052d6:	2200      	movs	r2, #0
 80052d8:	2180      	movs	r1, #128	; 0x80
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f001 f99b 	bl	8006616 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2201      	movs	r2, #1
 80052e4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2208      	movs	r2, #8
 80052ea:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80052ec:	2300      	movs	r3, #0
}
 80052ee:	4618      	mov	r0, r3
 80052f0:	3708      	adds	r7, #8
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}

080052f6 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80052f6:	b480      	push	{r7}
 80052f8:	b083      	sub	sp, #12
 80052fa:	af00      	add	r7, sp, #0
 80052fc:	6078      	str	r0, [r7, #4]
 80052fe:	460b      	mov	r3, r1
 8005300:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	78fa      	ldrb	r2, [r7, #3]
 8005306:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005308:	2300      	movs	r3, #0
}
 800530a:	4618      	mov	r0, r3
 800530c:	370c      	adds	r7, #12
 800530e:	46bd      	mov	sp, r7
 8005310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005314:	4770      	bx	lr

08005316 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005316:	b480      	push	{r7}
 8005318:	b083      	sub	sp, #12
 800531a:	af00      	add	r7, sp, #0
 800531c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2204      	movs	r2, #4
 800532e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005332:	2300      	movs	r3, #0
}
 8005334:	4618      	mov	r0, r3
 8005336:	370c      	adds	r7, #12
 8005338:	46bd      	mov	sp, r7
 800533a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533e:	4770      	bx	lr

08005340 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005340:	b480      	push	{r7}
 8005342:	b083      	sub	sp, #12
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800534e:	2b04      	cmp	r3, #4
 8005350:	d105      	bne.n	800535e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800535e:	2300      	movs	r3, #0
}
 8005360:	4618      	mov	r0, r3
 8005362:	370c      	adds	r7, #12
 8005364:	46bd      	mov	sp, r7
 8005366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536a:	4770      	bx	lr

0800536c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b082      	sub	sp, #8
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800537a:	2b03      	cmp	r3, #3
 800537c:	d10b      	bne.n	8005396 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005384:	69db      	ldr	r3, [r3, #28]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d005      	beq.n	8005396 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005390:	69db      	ldr	r3, [r3, #28]
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005396:	2300      	movs	r3, #0
}
 8005398:	4618      	mov	r0, r3
 800539a:	3708      	adds	r7, #8
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}

080053a0 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b083      	sub	sp, #12
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
 80053a8:	460b      	mov	r3, r1
 80053aa:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80053ac:	2300      	movs	r3, #0
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	370c      	adds	r7, #12
 80053b2:	46bd      	mov	sp, r7
 80053b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b8:	4770      	bx	lr

080053ba <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80053ba:	b480      	push	{r7}
 80053bc:	b083      	sub	sp, #12
 80053be:	af00      	add	r7, sp, #0
 80053c0:	6078      	str	r0, [r7, #4]
 80053c2:	460b      	mov	r3, r1
 80053c4:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80053c6:	2300      	movs	r3, #0
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	370c      	adds	r7, #12
 80053cc:	46bd      	mov	sp, r7
 80053ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d2:	4770      	bx	lr

080053d4 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b083      	sub	sp, #12
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80053dc:	2300      	movs	r3, #0
}
 80053de:	4618      	mov	r0, r3
 80053e0:	370c      	adds	r7, #12
 80053e2:	46bd      	mov	sp, r7
 80053e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e8:	4770      	bx	lr

080053ea <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80053ea:	b580      	push	{r7, lr}
 80053ec:	b082      	sub	sp, #8
 80053ee:	af00      	add	r7, sp, #0
 80053f0:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2201      	movs	r2, #1
 80053f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005400:	2b00      	cmp	r3, #0
 8005402:	d009      	beq.n	8005418 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	687a      	ldr	r2, [r7, #4]
 800540e:	6852      	ldr	r2, [r2, #4]
 8005410:	b2d2      	uxtb	r2, r2
 8005412:	4611      	mov	r1, r2
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	4798      	blx	r3
  }

  return USBD_OK;
 8005418:	2300      	movs	r3, #0
}
 800541a:	4618      	mov	r0, r3
 800541c:	3708      	adds	r7, #8
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}

08005422 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005422:	b480      	push	{r7}
 8005424:	b087      	sub	sp, #28
 8005426:	af00      	add	r7, sp, #0
 8005428:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	781b      	ldrb	r3, [r3, #0]
 8005432:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	3301      	adds	r3, #1
 8005438:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	781b      	ldrb	r3, [r3, #0]
 800543e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005440:	8a3b      	ldrh	r3, [r7, #16]
 8005442:	021b      	lsls	r3, r3, #8
 8005444:	b21a      	sxth	r2, r3
 8005446:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800544a:	4313      	orrs	r3, r2
 800544c:	b21b      	sxth	r3, r3
 800544e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005450:	89fb      	ldrh	r3, [r7, #14]
}
 8005452:	4618      	mov	r0, r3
 8005454:	371c      	adds	r7, #28
 8005456:	46bd      	mov	sp, r7
 8005458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545c:	4770      	bx	lr
	...

08005460 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b084      	sub	sp, #16
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
 8005468:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800546a:	2300      	movs	r3, #0
 800546c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	781b      	ldrb	r3, [r3, #0]
 8005472:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005476:	2b20      	cmp	r3, #32
 8005478:	d004      	beq.n	8005484 <USBD_StdDevReq+0x24>
 800547a:	2b40      	cmp	r3, #64	; 0x40
 800547c:	d002      	beq.n	8005484 <USBD_StdDevReq+0x24>
 800547e:	2b00      	cmp	r3, #0
 8005480:	d00a      	beq.n	8005498 <USBD_StdDevReq+0x38>
 8005482:	e050      	b.n	8005526 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	6839      	ldr	r1, [r7, #0]
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	4798      	blx	r3
 8005492:	4603      	mov	r3, r0
 8005494:	73fb      	strb	r3, [r7, #15]
    break;
 8005496:	e04b      	b.n	8005530 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	785b      	ldrb	r3, [r3, #1]
 800549c:	2b09      	cmp	r3, #9
 800549e:	d83c      	bhi.n	800551a <USBD_StdDevReq+0xba>
 80054a0:	a201      	add	r2, pc, #4	; (adr r2, 80054a8 <USBD_StdDevReq+0x48>)
 80054a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054a6:	bf00      	nop
 80054a8:	080054fd 	.word	0x080054fd
 80054ac:	08005511 	.word	0x08005511
 80054b0:	0800551b 	.word	0x0800551b
 80054b4:	08005507 	.word	0x08005507
 80054b8:	0800551b 	.word	0x0800551b
 80054bc:	080054db 	.word	0x080054db
 80054c0:	080054d1 	.word	0x080054d1
 80054c4:	0800551b 	.word	0x0800551b
 80054c8:	080054f3 	.word	0x080054f3
 80054cc:	080054e5 	.word	0x080054e5
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 80054d0:	6839      	ldr	r1, [r7, #0]
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f000 f9ce 	bl	8005874 <USBD_GetDescriptor>
      break;
 80054d8:	e024      	b.n	8005524 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 80054da:	6839      	ldr	r1, [r7, #0]
 80054dc:	6878      	ldr	r0, [r7, #4]
 80054de:	f000 fb33 	bl	8005b48 <USBD_SetAddress>
      break;
 80054e2:	e01f      	b.n	8005524 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 80054e4:	6839      	ldr	r1, [r7, #0]
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f000 fb70 	bl	8005bcc <USBD_SetConfig>
 80054ec:	4603      	mov	r3, r0
 80054ee:	73fb      	strb	r3, [r7, #15]
      break;
 80054f0:	e018      	b.n	8005524 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 80054f2:	6839      	ldr	r1, [r7, #0]
 80054f4:	6878      	ldr	r0, [r7, #4]
 80054f6:	f000 fc0d 	bl	8005d14 <USBD_GetConfig>
      break;
 80054fa:	e013      	b.n	8005524 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 80054fc:	6839      	ldr	r1, [r7, #0]
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	f000 fc3c 	bl	8005d7c <USBD_GetStatus>
      break;
 8005504:	e00e      	b.n	8005524 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8005506:	6839      	ldr	r1, [r7, #0]
 8005508:	6878      	ldr	r0, [r7, #4]
 800550a:	f000 fc6a 	bl	8005de2 <USBD_SetFeature>
      break;
 800550e:	e009      	b.n	8005524 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8005510:	6839      	ldr	r1, [r7, #0]
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f000 fc79 	bl	8005e0a <USBD_ClrFeature>
      break;
 8005518:	e004      	b.n	8005524 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800551a:	6839      	ldr	r1, [r7, #0]
 800551c:	6878      	ldr	r0, [r7, #4]
 800551e:	f000 fccf 	bl	8005ec0 <USBD_CtlError>
      break;
 8005522:	bf00      	nop
    }
    break;
 8005524:	e004      	b.n	8005530 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8005526:	6839      	ldr	r1, [r7, #0]
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	f000 fcc9 	bl	8005ec0 <USBD_CtlError>
    break;
 800552e:	bf00      	nop
  }

  return ret;
 8005530:	7bfb      	ldrb	r3, [r7, #15]
}
 8005532:	4618      	mov	r0, r3
 8005534:	3710      	adds	r7, #16
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}
 800553a:	bf00      	nop

0800553c <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b084      	sub	sp, #16
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
 8005544:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005546:	2300      	movs	r3, #0
 8005548:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	781b      	ldrb	r3, [r3, #0]
 800554e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005552:	2b20      	cmp	r3, #32
 8005554:	d003      	beq.n	800555e <USBD_StdItfReq+0x22>
 8005556:	2b40      	cmp	r3, #64	; 0x40
 8005558:	d001      	beq.n	800555e <USBD_StdItfReq+0x22>
 800555a:	2b00      	cmp	r3, #0
 800555c:	d12a      	bne.n	80055b4 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005564:	3b01      	subs	r3, #1
 8005566:	2b02      	cmp	r3, #2
 8005568:	d81d      	bhi.n	80055a6 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	889b      	ldrh	r3, [r3, #4]
 800556e:	b2db      	uxtb	r3, r3
 8005570:	2b01      	cmp	r3, #1
 8005572:	d813      	bhi.n	800559c <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800557a:	689b      	ldr	r3, [r3, #8]
 800557c:	6839      	ldr	r1, [r7, #0]
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	4798      	blx	r3
 8005582:	4603      	mov	r3, r0
 8005584:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	88db      	ldrh	r3, [r3, #6]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d110      	bne.n	80055b0 <USBD_StdItfReq+0x74>
 800558e:	7bfb      	ldrb	r3, [r7, #15]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d10d      	bne.n	80055b0 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8005594:	6878      	ldr	r0, [r7, #4]
 8005596:	f000 fd41 	bl	800601c <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800559a:	e009      	b.n	80055b0 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800559c:	6839      	ldr	r1, [r7, #0]
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f000 fc8e 	bl	8005ec0 <USBD_CtlError>
      break;
 80055a4:	e004      	b.n	80055b0 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 80055a6:	6839      	ldr	r1, [r7, #0]
 80055a8:	6878      	ldr	r0, [r7, #4]
 80055aa:	f000 fc89 	bl	8005ec0 <USBD_CtlError>
      break;
 80055ae:	e000      	b.n	80055b2 <USBD_StdItfReq+0x76>
      break;
 80055b0:	bf00      	nop
    }
    break;
 80055b2:	e004      	b.n	80055be <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 80055b4:	6839      	ldr	r1, [r7, #0]
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f000 fc82 	bl	8005ec0 <USBD_CtlError>
    break;
 80055bc:	bf00      	nop
  }

  return ret;
 80055be:	7bfb      	ldrb	r3, [r7, #15]
}
 80055c0:	4618      	mov	r0, r3
 80055c2:	3710      	adds	r7, #16
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd80      	pop	{r7, pc}

080055c8 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b084      	sub	sp, #16
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
 80055d0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80055d2:	2300      	movs	r3, #0
 80055d4:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	889b      	ldrh	r3, [r3, #4]
 80055da:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	781b      	ldrb	r3, [r3, #0]
 80055e0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80055e4:	2b20      	cmp	r3, #32
 80055e6:	d004      	beq.n	80055f2 <USBD_StdEPReq+0x2a>
 80055e8:	2b40      	cmp	r3, #64	; 0x40
 80055ea:	d002      	beq.n	80055f2 <USBD_StdEPReq+0x2a>
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d00a      	beq.n	8005606 <USBD_StdEPReq+0x3e>
 80055f0:	e135      	b.n	800585e <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055f8:	689b      	ldr	r3, [r3, #8]
 80055fa:	6839      	ldr	r1, [r7, #0]
 80055fc:	6878      	ldr	r0, [r7, #4]
 80055fe:	4798      	blx	r3
 8005600:	4603      	mov	r3, r0
 8005602:	73fb      	strb	r3, [r7, #15]
    break;
 8005604:	e130      	b.n	8005868 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	785b      	ldrb	r3, [r3, #1]
 800560a:	2b01      	cmp	r3, #1
 800560c:	d03e      	beq.n	800568c <USBD_StdEPReq+0xc4>
 800560e:	2b03      	cmp	r3, #3
 8005610:	d002      	beq.n	8005618 <USBD_StdEPReq+0x50>
 8005612:	2b00      	cmp	r3, #0
 8005614:	d077      	beq.n	8005706 <USBD_StdEPReq+0x13e>
 8005616:	e11c      	b.n	8005852 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800561e:	2b02      	cmp	r3, #2
 8005620:	d002      	beq.n	8005628 <USBD_StdEPReq+0x60>
 8005622:	2b03      	cmp	r3, #3
 8005624:	d015      	beq.n	8005652 <USBD_StdEPReq+0x8a>
 8005626:	e02b      	b.n	8005680 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005628:	7bbb      	ldrb	r3, [r7, #14]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d00c      	beq.n	8005648 <USBD_StdEPReq+0x80>
 800562e:	7bbb      	ldrb	r3, [r7, #14]
 8005630:	2b80      	cmp	r3, #128	; 0x80
 8005632:	d009      	beq.n	8005648 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8005634:	7bbb      	ldrb	r3, [r7, #14]
 8005636:	4619      	mov	r1, r3
 8005638:	6878      	ldr	r0, [r7, #4]
 800563a:	f001 f831 	bl	80066a0 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800563e:	2180      	movs	r1, #128	; 0x80
 8005640:	6878      	ldr	r0, [r7, #4]
 8005642:	f001 f82d 	bl	80066a0 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8005646:	e020      	b.n	800568a <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8005648:	6839      	ldr	r1, [r7, #0]
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f000 fc38 	bl	8005ec0 <USBD_CtlError>
        break;
 8005650:	e01b      	b.n	800568a <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	885b      	ldrh	r3, [r3, #2]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d10e      	bne.n	8005678 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800565a:	7bbb      	ldrb	r3, [r7, #14]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d00b      	beq.n	8005678 <USBD_StdEPReq+0xb0>
 8005660:	7bbb      	ldrb	r3, [r7, #14]
 8005662:	2b80      	cmp	r3, #128	; 0x80
 8005664:	d008      	beq.n	8005678 <USBD_StdEPReq+0xb0>
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	88db      	ldrh	r3, [r3, #6]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d104      	bne.n	8005678 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800566e:	7bbb      	ldrb	r3, [r7, #14]
 8005670:	4619      	mov	r1, r3
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f001 f814 	bl	80066a0 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	f000 fccf 	bl	800601c <USBD_CtlSendStatus>

        break;
 800567e:	e004      	b.n	800568a <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8005680:	6839      	ldr	r1, [r7, #0]
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f000 fc1c 	bl	8005ec0 <USBD_CtlError>
        break;
 8005688:	bf00      	nop
      }
      break;
 800568a:	e0e7      	b.n	800585c <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005692:	2b02      	cmp	r3, #2
 8005694:	d002      	beq.n	800569c <USBD_StdEPReq+0xd4>
 8005696:	2b03      	cmp	r3, #3
 8005698:	d015      	beq.n	80056c6 <USBD_StdEPReq+0xfe>
 800569a:	e02d      	b.n	80056f8 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800569c:	7bbb      	ldrb	r3, [r7, #14]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d00c      	beq.n	80056bc <USBD_StdEPReq+0xf4>
 80056a2:	7bbb      	ldrb	r3, [r7, #14]
 80056a4:	2b80      	cmp	r3, #128	; 0x80
 80056a6:	d009      	beq.n	80056bc <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80056a8:	7bbb      	ldrb	r3, [r7, #14]
 80056aa:	4619      	mov	r1, r3
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	f000 fff7 	bl	80066a0 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80056b2:	2180      	movs	r1, #128	; 0x80
 80056b4:	6878      	ldr	r0, [r7, #4]
 80056b6:	f000 fff3 	bl	80066a0 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80056ba:	e023      	b.n	8005704 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 80056bc:	6839      	ldr	r1, [r7, #0]
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f000 fbfe 	bl	8005ec0 <USBD_CtlError>
        break;
 80056c4:	e01e      	b.n	8005704 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	885b      	ldrh	r3, [r3, #2]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d119      	bne.n	8005702 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 80056ce:	7bbb      	ldrb	r3, [r7, #14]
 80056d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d004      	beq.n	80056e2 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80056d8:	7bbb      	ldrb	r3, [r7, #14]
 80056da:	4619      	mov	r1, r3
 80056dc:	6878      	ldr	r0, [r7, #4]
 80056de:	f000 fffe 	bl	80066de <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f000 fc9a 	bl	800601c <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056ee:	689b      	ldr	r3, [r3, #8]
 80056f0:	6839      	ldr	r1, [r7, #0]
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	4798      	blx	r3
        }
        break;
 80056f6:	e004      	b.n	8005702 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 80056f8:	6839      	ldr	r1, [r7, #0]
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f000 fbe0 	bl	8005ec0 <USBD_CtlError>
        break;
 8005700:	e000      	b.n	8005704 <USBD_StdEPReq+0x13c>
        break;
 8005702:	bf00      	nop
      }
      break;
 8005704:	e0aa      	b.n	800585c <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800570c:	2b02      	cmp	r3, #2
 800570e:	d002      	beq.n	8005716 <USBD_StdEPReq+0x14e>
 8005710:	2b03      	cmp	r3, #3
 8005712:	d032      	beq.n	800577a <USBD_StdEPReq+0x1b2>
 8005714:	e097      	b.n	8005846 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005716:	7bbb      	ldrb	r3, [r7, #14]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d007      	beq.n	800572c <USBD_StdEPReq+0x164>
 800571c:	7bbb      	ldrb	r3, [r7, #14]
 800571e:	2b80      	cmp	r3, #128	; 0x80
 8005720:	d004      	beq.n	800572c <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8005722:	6839      	ldr	r1, [r7, #0]
 8005724:	6878      	ldr	r0, [r7, #4]
 8005726:	f000 fbcb 	bl	8005ec0 <USBD_CtlError>
          break;
 800572a:	e091      	b.n	8005850 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800572c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005730:	2b00      	cmp	r3, #0
 8005732:	da0b      	bge.n	800574c <USBD_StdEPReq+0x184>
 8005734:	7bbb      	ldrb	r3, [r7, #14]
 8005736:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800573a:	4613      	mov	r3, r2
 800573c:	009b      	lsls	r3, r3, #2
 800573e:	4413      	add	r3, r2
 8005740:	009b      	lsls	r3, r3, #2
 8005742:	3310      	adds	r3, #16
 8005744:	687a      	ldr	r2, [r7, #4]
 8005746:	4413      	add	r3, r2
 8005748:	3304      	adds	r3, #4
 800574a:	e00b      	b.n	8005764 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800574c:	7bbb      	ldrb	r3, [r7, #14]
 800574e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005752:	4613      	mov	r3, r2
 8005754:	009b      	lsls	r3, r3, #2
 8005756:	4413      	add	r3, r2
 8005758:	009b      	lsls	r3, r3, #2
 800575a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800575e:	687a      	ldr	r2, [r7, #4]
 8005760:	4413      	add	r3, r2
 8005762:	3304      	adds	r3, #4
 8005764:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	2200      	movs	r2, #0
 800576a:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	2202      	movs	r2, #2
 8005770:	4619      	mov	r1, r3
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	f000 fc15 	bl	8005fa2 <USBD_CtlSendData>
        break;
 8005778:	e06a      	b.n	8005850 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800577a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800577e:	2b00      	cmp	r3, #0
 8005780:	da11      	bge.n	80057a6 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005782:	7bbb      	ldrb	r3, [r7, #14]
 8005784:	f003 020f 	and.w	r2, r3, #15
 8005788:	6879      	ldr	r1, [r7, #4]
 800578a:	4613      	mov	r3, r2
 800578c:	009b      	lsls	r3, r3, #2
 800578e:	4413      	add	r3, r2
 8005790:	009b      	lsls	r3, r3, #2
 8005792:	440b      	add	r3, r1
 8005794:	3324      	adds	r3, #36	; 0x24
 8005796:	881b      	ldrh	r3, [r3, #0]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d117      	bne.n	80057cc <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800579c:	6839      	ldr	r1, [r7, #0]
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f000 fb8e 	bl	8005ec0 <USBD_CtlError>
            break;
 80057a4:	e054      	b.n	8005850 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80057a6:	7bbb      	ldrb	r3, [r7, #14]
 80057a8:	f003 020f 	and.w	r2, r3, #15
 80057ac:	6879      	ldr	r1, [r7, #4]
 80057ae:	4613      	mov	r3, r2
 80057b0:	009b      	lsls	r3, r3, #2
 80057b2:	4413      	add	r3, r2
 80057b4:	009b      	lsls	r3, r3, #2
 80057b6:	440b      	add	r3, r1
 80057b8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80057bc:	881b      	ldrh	r3, [r3, #0]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d104      	bne.n	80057cc <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 80057c2:	6839      	ldr	r1, [r7, #0]
 80057c4:	6878      	ldr	r0, [r7, #4]
 80057c6:	f000 fb7b 	bl	8005ec0 <USBD_CtlError>
            break;
 80057ca:	e041      	b.n	8005850 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80057cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	da0b      	bge.n	80057ec <USBD_StdEPReq+0x224>
 80057d4:	7bbb      	ldrb	r3, [r7, #14]
 80057d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80057da:	4613      	mov	r3, r2
 80057dc:	009b      	lsls	r3, r3, #2
 80057de:	4413      	add	r3, r2
 80057e0:	009b      	lsls	r3, r3, #2
 80057e2:	3310      	adds	r3, #16
 80057e4:	687a      	ldr	r2, [r7, #4]
 80057e6:	4413      	add	r3, r2
 80057e8:	3304      	adds	r3, #4
 80057ea:	e00b      	b.n	8005804 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 80057ec:	7bbb      	ldrb	r3, [r7, #14]
 80057ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80057f2:	4613      	mov	r3, r2
 80057f4:	009b      	lsls	r3, r3, #2
 80057f6:	4413      	add	r3, r2
 80057f8:	009b      	lsls	r3, r3, #2
 80057fa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80057fe:	687a      	ldr	r2, [r7, #4]
 8005800:	4413      	add	r3, r2
 8005802:	3304      	adds	r3, #4
 8005804:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005806:	7bbb      	ldrb	r3, [r7, #14]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d002      	beq.n	8005812 <USBD_StdEPReq+0x24a>
 800580c:	7bbb      	ldrb	r3, [r7, #14]
 800580e:	2b80      	cmp	r3, #128	; 0x80
 8005810:	d103      	bne.n	800581a <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	2200      	movs	r2, #0
 8005816:	601a      	str	r2, [r3, #0]
 8005818:	e00e      	b.n	8005838 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800581a:	7bbb      	ldrb	r3, [r7, #14]
 800581c:	4619      	mov	r1, r3
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f000 ff7c 	bl	800671c <USBD_LL_IsStallEP>
 8005824:	4603      	mov	r3, r0
 8005826:	2b00      	cmp	r3, #0
 8005828:	d003      	beq.n	8005832 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	2201      	movs	r2, #1
 800582e:	601a      	str	r2, [r3, #0]
 8005830:	e002      	b.n	8005838 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	2200      	movs	r2, #0
 8005836:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	2202      	movs	r2, #2
 800583c:	4619      	mov	r1, r3
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f000 fbaf 	bl	8005fa2 <USBD_CtlSendData>
          break;
 8005844:	e004      	b.n	8005850 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8005846:	6839      	ldr	r1, [r7, #0]
 8005848:	6878      	ldr	r0, [r7, #4]
 800584a:	f000 fb39 	bl	8005ec0 <USBD_CtlError>
        break;
 800584e:	bf00      	nop
      }
      break;
 8005850:	e004      	b.n	800585c <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8005852:	6839      	ldr	r1, [r7, #0]
 8005854:	6878      	ldr	r0, [r7, #4]
 8005856:	f000 fb33 	bl	8005ec0 <USBD_CtlError>
      break;
 800585a:	bf00      	nop
    }
    break;
 800585c:	e004      	b.n	8005868 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 800585e:	6839      	ldr	r1, [r7, #0]
 8005860:	6878      	ldr	r0, [r7, #4]
 8005862:	f000 fb2d 	bl	8005ec0 <USBD_CtlError>
    break;
 8005866:	bf00      	nop
  }

  return ret;
 8005868:	7bfb      	ldrb	r3, [r7, #15]
}
 800586a:	4618      	mov	r0, r3
 800586c:	3710      	adds	r7, #16
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}
	...

08005874 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b084      	sub	sp, #16
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
 800587c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800587e:	2300      	movs	r3, #0
 8005880:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005882:	2300      	movs	r3, #0
 8005884:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005886:	2300      	movs	r3, #0
 8005888:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	885b      	ldrh	r3, [r3, #2]
 800588e:	0a1b      	lsrs	r3, r3, #8
 8005890:	b29b      	uxth	r3, r3
 8005892:	3b01      	subs	r3, #1
 8005894:	2b06      	cmp	r3, #6
 8005896:	f200 8128 	bhi.w	8005aea <USBD_GetDescriptor+0x276>
 800589a:	a201      	add	r2, pc, #4	; (adr r2, 80058a0 <USBD_GetDescriptor+0x2c>)
 800589c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058a0:	080058bd 	.word	0x080058bd
 80058a4:	080058d5 	.word	0x080058d5
 80058a8:	08005915 	.word	0x08005915
 80058ac:	08005aeb 	.word	0x08005aeb
 80058b0:	08005aeb 	.word	0x08005aeb
 80058b4:	08005a8b 	.word	0x08005a8b
 80058b8:	08005ab7 	.word	0x08005ab7
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	687a      	ldr	r2, [r7, #4]
 80058c6:	7c12      	ldrb	r2, [r2, #16]
 80058c8:	f107 0108 	add.w	r1, r7, #8
 80058cc:	4610      	mov	r0, r2
 80058ce:	4798      	blx	r3
 80058d0:	60f8      	str	r0, [r7, #12]
    break;
 80058d2:	e112      	b.n	8005afa <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	7c1b      	ldrb	r3, [r3, #16]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d10d      	bne.n	80058f8 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058e4:	f107 0208 	add.w	r2, r7, #8
 80058e8:	4610      	mov	r0, r2
 80058ea:	4798      	blx	r3
 80058ec:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	3301      	adds	r3, #1
 80058f2:	2202      	movs	r2, #2
 80058f4:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 80058f6:	e100      	b.n	8005afa <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005900:	f107 0208 	add.w	r2, r7, #8
 8005904:	4610      	mov	r0, r2
 8005906:	4798      	blx	r3
 8005908:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	3301      	adds	r3, #1
 800590e:	2202      	movs	r2, #2
 8005910:	701a      	strb	r2, [r3, #0]
    break;
 8005912:	e0f2      	b.n	8005afa <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	885b      	ldrh	r3, [r3, #2]
 8005918:	b2db      	uxtb	r3, r3
 800591a:	2b05      	cmp	r3, #5
 800591c:	f200 80ac 	bhi.w	8005a78 <USBD_GetDescriptor+0x204>
 8005920:	a201      	add	r2, pc, #4	; (adr r2, 8005928 <USBD_GetDescriptor+0xb4>)
 8005922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005926:	bf00      	nop
 8005928:	08005941 	.word	0x08005941
 800592c:	08005975 	.word	0x08005975
 8005930:	080059a9 	.word	0x080059a9
 8005934:	080059dd 	.word	0x080059dd
 8005938:	08005a11 	.word	0x08005a11
 800593c:	08005a45 	.word	0x08005a45
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d00b      	beq.n	8005964 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	687a      	ldr	r2, [r7, #4]
 8005956:	7c12      	ldrb	r2, [r2, #16]
 8005958:	f107 0108 	add.w	r1, r7, #8
 800595c:	4610      	mov	r0, r2
 800595e:	4798      	blx	r3
 8005960:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005962:	e091      	b.n	8005a88 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005964:	6839      	ldr	r1, [r7, #0]
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f000 faaa 	bl	8005ec0 <USBD_CtlError>
        err++;
 800596c:	7afb      	ldrb	r3, [r7, #11]
 800596e:	3301      	adds	r3, #1
 8005970:	72fb      	strb	r3, [r7, #11]
      break;
 8005972:	e089      	b.n	8005a88 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800597a:	689b      	ldr	r3, [r3, #8]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d00b      	beq.n	8005998 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005986:	689b      	ldr	r3, [r3, #8]
 8005988:	687a      	ldr	r2, [r7, #4]
 800598a:	7c12      	ldrb	r2, [r2, #16]
 800598c:	f107 0108 	add.w	r1, r7, #8
 8005990:	4610      	mov	r0, r2
 8005992:	4798      	blx	r3
 8005994:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005996:	e077      	b.n	8005a88 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005998:	6839      	ldr	r1, [r7, #0]
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f000 fa90 	bl	8005ec0 <USBD_CtlError>
        err++;
 80059a0:	7afb      	ldrb	r3, [r7, #11]
 80059a2:	3301      	adds	r3, #1
 80059a4:	72fb      	strb	r3, [r7, #11]
      break;
 80059a6:	e06f      	b.n	8005a88 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80059ae:	68db      	ldr	r3, [r3, #12]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d00b      	beq.n	80059cc <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80059ba:	68db      	ldr	r3, [r3, #12]
 80059bc:	687a      	ldr	r2, [r7, #4]
 80059be:	7c12      	ldrb	r2, [r2, #16]
 80059c0:	f107 0108 	add.w	r1, r7, #8
 80059c4:	4610      	mov	r0, r2
 80059c6:	4798      	blx	r3
 80059c8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80059ca:	e05d      	b.n	8005a88 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80059cc:	6839      	ldr	r1, [r7, #0]
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f000 fa76 	bl	8005ec0 <USBD_CtlError>
        err++;
 80059d4:	7afb      	ldrb	r3, [r7, #11]
 80059d6:	3301      	adds	r3, #1
 80059d8:	72fb      	strb	r3, [r7, #11]
      break;
 80059da:	e055      	b.n	8005a88 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80059e2:	691b      	ldr	r3, [r3, #16]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d00b      	beq.n	8005a00 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80059ee:	691b      	ldr	r3, [r3, #16]
 80059f0:	687a      	ldr	r2, [r7, #4]
 80059f2:	7c12      	ldrb	r2, [r2, #16]
 80059f4:	f107 0108 	add.w	r1, r7, #8
 80059f8:	4610      	mov	r0, r2
 80059fa:	4798      	blx	r3
 80059fc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80059fe:	e043      	b.n	8005a88 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005a00:	6839      	ldr	r1, [r7, #0]
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	f000 fa5c 	bl	8005ec0 <USBD_CtlError>
        err++;
 8005a08:	7afb      	ldrb	r3, [r7, #11]
 8005a0a:	3301      	adds	r3, #1
 8005a0c:	72fb      	strb	r3, [r7, #11]
      break;
 8005a0e:	e03b      	b.n	8005a88 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a16:	695b      	ldr	r3, [r3, #20]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d00b      	beq.n	8005a34 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a22:	695b      	ldr	r3, [r3, #20]
 8005a24:	687a      	ldr	r2, [r7, #4]
 8005a26:	7c12      	ldrb	r2, [r2, #16]
 8005a28:	f107 0108 	add.w	r1, r7, #8
 8005a2c:	4610      	mov	r0, r2
 8005a2e:	4798      	blx	r3
 8005a30:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005a32:	e029      	b.n	8005a88 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005a34:	6839      	ldr	r1, [r7, #0]
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f000 fa42 	bl	8005ec0 <USBD_CtlError>
        err++;
 8005a3c:	7afb      	ldrb	r3, [r7, #11]
 8005a3e:	3301      	adds	r3, #1
 8005a40:	72fb      	strb	r3, [r7, #11]
      break;
 8005a42:	e021      	b.n	8005a88 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a4a:	699b      	ldr	r3, [r3, #24]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d00b      	beq.n	8005a68 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a56:	699b      	ldr	r3, [r3, #24]
 8005a58:	687a      	ldr	r2, [r7, #4]
 8005a5a:	7c12      	ldrb	r2, [r2, #16]
 8005a5c:	f107 0108 	add.w	r1, r7, #8
 8005a60:	4610      	mov	r0, r2
 8005a62:	4798      	blx	r3
 8005a64:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005a66:	e00f      	b.n	8005a88 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005a68:	6839      	ldr	r1, [r7, #0]
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	f000 fa28 	bl	8005ec0 <USBD_CtlError>
        err++;
 8005a70:	7afb      	ldrb	r3, [r7, #11]
 8005a72:	3301      	adds	r3, #1
 8005a74:	72fb      	strb	r3, [r7, #11]
      break;
 8005a76:	e007      	b.n	8005a88 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8005a78:	6839      	ldr	r1, [r7, #0]
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f000 fa20 	bl	8005ec0 <USBD_CtlError>
      err++;
 8005a80:	7afb      	ldrb	r3, [r7, #11]
 8005a82:	3301      	adds	r3, #1
 8005a84:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8005a86:	bf00      	nop
    }
    break;
 8005a88:	e037      	b.n	8005afa <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	7c1b      	ldrb	r3, [r3, #16]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d109      	bne.n	8005aa6 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a9a:	f107 0208 	add.w	r2, r7, #8
 8005a9e:	4610      	mov	r0, r2
 8005aa0:	4798      	blx	r3
 8005aa2:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8005aa4:	e029      	b.n	8005afa <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8005aa6:	6839      	ldr	r1, [r7, #0]
 8005aa8:	6878      	ldr	r0, [r7, #4]
 8005aaa:	f000 fa09 	bl	8005ec0 <USBD_CtlError>
      err++;
 8005aae:	7afb      	ldrb	r3, [r7, #11]
 8005ab0:	3301      	adds	r3, #1
 8005ab2:	72fb      	strb	r3, [r7, #11]
    break;
 8005ab4:	e021      	b.n	8005afa <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	7c1b      	ldrb	r3, [r3, #16]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d10d      	bne.n	8005ada <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ac6:	f107 0208 	add.w	r2, r7, #8
 8005aca:	4610      	mov	r0, r2
 8005acc:	4798      	blx	r3
 8005ace:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	3301      	adds	r3, #1
 8005ad4:	2207      	movs	r2, #7
 8005ad6:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8005ad8:	e00f      	b.n	8005afa <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8005ada:	6839      	ldr	r1, [r7, #0]
 8005adc:	6878      	ldr	r0, [r7, #4]
 8005ade:	f000 f9ef 	bl	8005ec0 <USBD_CtlError>
      err++;
 8005ae2:	7afb      	ldrb	r3, [r7, #11]
 8005ae4:	3301      	adds	r3, #1
 8005ae6:	72fb      	strb	r3, [r7, #11]
    break;
 8005ae8:	e007      	b.n	8005afa <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8005aea:	6839      	ldr	r1, [r7, #0]
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	f000 f9e7 	bl	8005ec0 <USBD_CtlError>
    err++;
 8005af2:	7afb      	ldrb	r3, [r7, #11]
 8005af4:	3301      	adds	r3, #1
 8005af6:	72fb      	strb	r3, [r7, #11]
    break;
 8005af8:	bf00      	nop
  }

  if (err != 0U)
 8005afa:	7afb      	ldrb	r3, [r7, #11]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d11e      	bne.n	8005b3e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	88db      	ldrh	r3, [r3, #6]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d016      	beq.n	8005b36 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8005b08:	893b      	ldrh	r3, [r7, #8]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d00e      	beq.n	8005b2c <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	88da      	ldrh	r2, [r3, #6]
 8005b12:	893b      	ldrh	r3, [r7, #8]
 8005b14:	4293      	cmp	r3, r2
 8005b16:	bf28      	it	cs
 8005b18:	4613      	movcs	r3, r2
 8005b1a:	b29b      	uxth	r3, r3
 8005b1c:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8005b1e:	893b      	ldrh	r3, [r7, #8]
 8005b20:	461a      	mov	r2, r3
 8005b22:	68f9      	ldr	r1, [r7, #12]
 8005b24:	6878      	ldr	r0, [r7, #4]
 8005b26:	f000 fa3c 	bl	8005fa2 <USBD_CtlSendData>
 8005b2a:	e009      	b.n	8005b40 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8005b2c:	6839      	ldr	r1, [r7, #0]
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f000 f9c6 	bl	8005ec0 <USBD_CtlError>
 8005b34:	e004      	b.n	8005b40 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f000 fa70 	bl	800601c <USBD_CtlSendStatus>
 8005b3c:	e000      	b.n	8005b40 <USBD_GetDescriptor+0x2cc>
    return;
 8005b3e:	bf00      	nop
    }
  }
}
 8005b40:	3710      	adds	r7, #16
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}
 8005b46:	bf00      	nop

08005b48 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b084      	sub	sp, #16
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
 8005b50:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	889b      	ldrh	r3, [r3, #4]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d130      	bne.n	8005bbc <USBD_SetAddress+0x74>
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	88db      	ldrh	r3, [r3, #6]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d12c      	bne.n	8005bbc <USBD_SetAddress+0x74>
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	885b      	ldrh	r3, [r3, #2]
 8005b66:	2b7f      	cmp	r3, #127	; 0x7f
 8005b68:	d828      	bhi.n	8005bbc <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	885b      	ldrh	r3, [r3, #2]
 8005b6e:	b2db      	uxtb	r3, r3
 8005b70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b74:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b7c:	2b03      	cmp	r3, #3
 8005b7e:	d104      	bne.n	8005b8a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8005b80:	6839      	ldr	r1, [r7, #0]
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f000 f99c 	bl	8005ec0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b88:	e01c      	b.n	8005bc4 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	7bfa      	ldrb	r2, [r7, #15]
 8005b8e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005b92:	7bfb      	ldrb	r3, [r7, #15]
 8005b94:	4619      	mov	r1, r3
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	f000 fdec 	bl	8006774 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8005b9c:	6878      	ldr	r0, [r7, #4]
 8005b9e:	f000 fa3d 	bl	800601c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005ba2:	7bfb      	ldrb	r3, [r7, #15]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d004      	beq.n	8005bb2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2202      	movs	r2, #2
 8005bac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005bb0:	e008      	b.n	8005bc4 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2201      	movs	r2, #1
 8005bb6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005bba:	e003      	b.n	8005bc4 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005bbc:	6839      	ldr	r1, [r7, #0]
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f000 f97e 	bl	8005ec0 <USBD_CtlError>
  }
}
 8005bc4:	bf00      	nop
 8005bc6:	3710      	adds	r7, #16
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bd80      	pop	{r7, pc}

08005bcc <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b084      	sub	sp, #16
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
 8005bd4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	885b      	ldrh	r3, [r3, #2]
 8005bde:	b2da      	uxtb	r2, r3
 8005be0:	4b4b      	ldr	r3, [pc, #300]	; (8005d10 <USBD_SetConfig+0x144>)
 8005be2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005be4:	4b4a      	ldr	r3, [pc, #296]	; (8005d10 <USBD_SetConfig+0x144>)
 8005be6:	781b      	ldrb	r3, [r3, #0]
 8005be8:	2b01      	cmp	r3, #1
 8005bea:	d905      	bls.n	8005bf8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8005bec:	6839      	ldr	r1, [r7, #0]
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	f000 f966 	bl	8005ec0 <USBD_CtlError>
    return USBD_FAIL;
 8005bf4:	2303      	movs	r3, #3
 8005bf6:	e087      	b.n	8005d08 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005bfe:	2b02      	cmp	r3, #2
 8005c00:	d002      	beq.n	8005c08 <USBD_SetConfig+0x3c>
 8005c02:	2b03      	cmp	r3, #3
 8005c04:	d025      	beq.n	8005c52 <USBD_SetConfig+0x86>
 8005c06:	e071      	b.n	8005cec <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8005c08:	4b41      	ldr	r3, [pc, #260]	; (8005d10 <USBD_SetConfig+0x144>)
 8005c0a:	781b      	ldrb	r3, [r3, #0]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d01c      	beq.n	8005c4a <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8005c10:	4b3f      	ldr	r3, [pc, #252]	; (8005d10 <USBD_SetConfig+0x144>)
 8005c12:	781b      	ldrb	r3, [r3, #0]
 8005c14:	461a      	mov	r2, r3
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8005c1a:	4b3d      	ldr	r3, [pc, #244]	; (8005d10 <USBD_SetConfig+0x144>)
 8005c1c:	781b      	ldrb	r3, [r3, #0]
 8005c1e:	4619      	mov	r1, r3
 8005c20:	6878      	ldr	r0, [r7, #4]
 8005c22:	f7ff f9a7 	bl	8004f74 <USBD_SetClassConfig>
 8005c26:	4603      	mov	r3, r0
 8005c28:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8005c2a:	7bfb      	ldrb	r3, [r7, #15]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d004      	beq.n	8005c3a <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8005c30:	6839      	ldr	r1, [r7, #0]
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	f000 f944 	bl	8005ec0 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8005c38:	e065      	b.n	8005d06 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f000 f9ee 	bl	800601c <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2203      	movs	r2, #3
 8005c44:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8005c48:	e05d      	b.n	8005d06 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f000 f9e6 	bl	800601c <USBD_CtlSendStatus>
    break;
 8005c50:	e059      	b.n	8005d06 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8005c52:	4b2f      	ldr	r3, [pc, #188]	; (8005d10 <USBD_SetConfig+0x144>)
 8005c54:	781b      	ldrb	r3, [r3, #0]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d112      	bne.n	8005c80 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2202      	movs	r2, #2
 8005c5e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8005c62:	4b2b      	ldr	r3, [pc, #172]	; (8005d10 <USBD_SetConfig+0x144>)
 8005c64:	781b      	ldrb	r3, [r3, #0]
 8005c66:	461a      	mov	r2, r3
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005c6c:	4b28      	ldr	r3, [pc, #160]	; (8005d10 <USBD_SetConfig+0x144>)
 8005c6e:	781b      	ldrb	r3, [r3, #0]
 8005c70:	4619      	mov	r1, r3
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	f7ff f99a 	bl	8004fac <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8005c78:	6878      	ldr	r0, [r7, #4]
 8005c7a:	f000 f9cf 	bl	800601c <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8005c7e:	e042      	b.n	8005d06 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8005c80:	4b23      	ldr	r3, [pc, #140]	; (8005d10 <USBD_SetConfig+0x144>)
 8005c82:	781b      	ldrb	r3, [r3, #0]
 8005c84:	461a      	mov	r2, r3
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	429a      	cmp	r2, r3
 8005c8c:	d02a      	beq.n	8005ce4 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	b2db      	uxtb	r3, r3
 8005c94:	4619      	mov	r1, r3
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f7ff f988 	bl	8004fac <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8005c9c:	4b1c      	ldr	r3, [pc, #112]	; (8005d10 <USBD_SetConfig+0x144>)
 8005c9e:	781b      	ldrb	r3, [r3, #0]
 8005ca0:	461a      	mov	r2, r3
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8005ca6:	4b1a      	ldr	r3, [pc, #104]	; (8005d10 <USBD_SetConfig+0x144>)
 8005ca8:	781b      	ldrb	r3, [r3, #0]
 8005caa:	4619      	mov	r1, r3
 8005cac:	6878      	ldr	r0, [r7, #4]
 8005cae:	f7ff f961 	bl	8004f74 <USBD_SetClassConfig>
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8005cb6:	7bfb      	ldrb	r3, [r7, #15]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d00f      	beq.n	8005cdc <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8005cbc:	6839      	ldr	r1, [r7, #0]
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f000 f8fe 	bl	8005ec0 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	685b      	ldr	r3, [r3, #4]
 8005cc8:	b2db      	uxtb	r3, r3
 8005cca:	4619      	mov	r1, r3
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	f7ff f96d 	bl	8004fac <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2202      	movs	r2, #2
 8005cd6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8005cda:	e014      	b.n	8005d06 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8005cdc:	6878      	ldr	r0, [r7, #4]
 8005cde:	f000 f99d 	bl	800601c <USBD_CtlSendStatus>
    break;
 8005ce2:	e010      	b.n	8005d06 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f000 f999 	bl	800601c <USBD_CtlSendStatus>
    break;
 8005cea:	e00c      	b.n	8005d06 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8005cec:	6839      	ldr	r1, [r7, #0]
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	f000 f8e6 	bl	8005ec0 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005cf4:	4b06      	ldr	r3, [pc, #24]	; (8005d10 <USBD_SetConfig+0x144>)
 8005cf6:	781b      	ldrb	r3, [r3, #0]
 8005cf8:	4619      	mov	r1, r3
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	f7ff f956 	bl	8004fac <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8005d00:	2303      	movs	r3, #3
 8005d02:	73fb      	strb	r3, [r7, #15]
    break;
 8005d04:	bf00      	nop
  }

  return ret;
 8005d06:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	3710      	adds	r7, #16
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bd80      	pop	{r7, pc}
 8005d10:	20000264 	.word	0x20000264

08005d14 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b082      	sub	sp, #8
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
 8005d1c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	88db      	ldrh	r3, [r3, #6]
 8005d22:	2b01      	cmp	r3, #1
 8005d24:	d004      	beq.n	8005d30 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8005d26:	6839      	ldr	r1, [r7, #0]
 8005d28:	6878      	ldr	r0, [r7, #4]
 8005d2a:	f000 f8c9 	bl	8005ec0 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8005d2e:	e021      	b.n	8005d74 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d36:	2b01      	cmp	r3, #1
 8005d38:	db17      	blt.n	8005d6a <USBD_GetConfig+0x56>
 8005d3a:	2b02      	cmp	r3, #2
 8005d3c:	dd02      	ble.n	8005d44 <USBD_GetConfig+0x30>
 8005d3e:	2b03      	cmp	r3, #3
 8005d40:	d00b      	beq.n	8005d5a <USBD_GetConfig+0x46>
 8005d42:	e012      	b.n	8005d6a <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2200      	movs	r2, #0
 8005d48:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	3308      	adds	r3, #8
 8005d4e:	2201      	movs	r2, #1
 8005d50:	4619      	mov	r1, r3
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f000 f925 	bl	8005fa2 <USBD_CtlSendData>
      break;
 8005d58:	e00c      	b.n	8005d74 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	3304      	adds	r3, #4
 8005d5e:	2201      	movs	r2, #1
 8005d60:	4619      	mov	r1, r3
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	f000 f91d 	bl	8005fa2 <USBD_CtlSendData>
      break;
 8005d68:	e004      	b.n	8005d74 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8005d6a:	6839      	ldr	r1, [r7, #0]
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	f000 f8a7 	bl	8005ec0 <USBD_CtlError>
      break;
 8005d72:	bf00      	nop
}
 8005d74:	bf00      	nop
 8005d76:	3708      	adds	r7, #8
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}

08005d7c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b082      	sub	sp, #8
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
 8005d84:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d8c:	3b01      	subs	r3, #1
 8005d8e:	2b02      	cmp	r3, #2
 8005d90:	d81e      	bhi.n	8005dd0 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	88db      	ldrh	r3, [r3, #6]
 8005d96:	2b02      	cmp	r3, #2
 8005d98:	d004      	beq.n	8005da4 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8005d9a:	6839      	ldr	r1, [r7, #0]
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	f000 f88f 	bl	8005ec0 <USBD_CtlError>
      break;
 8005da2:	e01a      	b.n	8005dda <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2201      	movs	r2, #1
 8005da8:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d005      	beq.n	8005dc0 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	68db      	ldr	r3, [r3, #12]
 8005db8:	f043 0202 	orr.w	r2, r3, #2
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	330c      	adds	r3, #12
 8005dc4:	2202      	movs	r2, #2
 8005dc6:	4619      	mov	r1, r3
 8005dc8:	6878      	ldr	r0, [r7, #4]
 8005dca:	f000 f8ea 	bl	8005fa2 <USBD_CtlSendData>
    break;
 8005dce:	e004      	b.n	8005dda <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8005dd0:	6839      	ldr	r1, [r7, #0]
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f000 f874 	bl	8005ec0 <USBD_CtlError>
    break;
 8005dd8:	bf00      	nop
  }
}
 8005dda:	bf00      	nop
 8005ddc:	3708      	adds	r7, #8
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}

08005de2 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005de2:	b580      	push	{r7, lr}
 8005de4:	b082      	sub	sp, #8
 8005de6:	af00      	add	r7, sp, #0
 8005de8:	6078      	str	r0, [r7, #4]
 8005dea:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	885b      	ldrh	r3, [r3, #2]
 8005df0:	2b01      	cmp	r3, #1
 8005df2:	d106      	bne.n	8005e02 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2201      	movs	r2, #1
 8005df8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8005dfc:	6878      	ldr	r0, [r7, #4]
 8005dfe:	f000 f90d 	bl	800601c <USBD_CtlSendStatus>
  }
}
 8005e02:	bf00      	nop
 8005e04:	3708      	adds	r7, #8
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}

08005e0a <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005e0a:	b580      	push	{r7, lr}
 8005e0c:	b082      	sub	sp, #8
 8005e0e:	af00      	add	r7, sp, #0
 8005e10:	6078      	str	r0, [r7, #4]
 8005e12:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e1a:	3b01      	subs	r3, #1
 8005e1c:	2b02      	cmp	r3, #2
 8005e1e:	d80b      	bhi.n	8005e38 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	885b      	ldrh	r3, [r3, #2]
 8005e24:	2b01      	cmp	r3, #1
 8005e26:	d10c      	bne.n	8005e42 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8005e30:	6878      	ldr	r0, [r7, #4]
 8005e32:	f000 f8f3 	bl	800601c <USBD_CtlSendStatus>
      }
      break;
 8005e36:	e004      	b.n	8005e42 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8005e38:	6839      	ldr	r1, [r7, #0]
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f000 f840 	bl	8005ec0 <USBD_CtlError>
      break;
 8005e40:	e000      	b.n	8005e44 <USBD_ClrFeature+0x3a>
      break;
 8005e42:	bf00      	nop
  }
}
 8005e44:	bf00      	nop
 8005e46:	3708      	adds	r7, #8
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bd80      	pop	{r7, pc}

08005e4c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b084      	sub	sp, #16
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
 8005e54:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	781a      	ldrb	r2, [r3, #0]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	3301      	adds	r3, #1
 8005e66:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	781a      	ldrb	r2, [r3, #0]
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	3301      	adds	r3, #1
 8005e74:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8005e76:	68f8      	ldr	r0, [r7, #12]
 8005e78:	f7ff fad3 	bl	8005422 <SWAPBYTE>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	461a      	mov	r2, r3
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	3301      	adds	r3, #1
 8005e88:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	3301      	adds	r3, #1
 8005e8e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8005e90:	68f8      	ldr	r0, [r7, #12]
 8005e92:	f7ff fac6 	bl	8005422 <SWAPBYTE>
 8005e96:	4603      	mov	r3, r0
 8005e98:	461a      	mov	r2, r3
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	3301      	adds	r3, #1
 8005ea2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	3301      	adds	r3, #1
 8005ea8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8005eaa:	68f8      	ldr	r0, [r7, #12]
 8005eac:	f7ff fab9 	bl	8005422 <SWAPBYTE>
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	461a      	mov	r2, r3
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	80da      	strh	r2, [r3, #6]
}
 8005eb8:	bf00      	nop
 8005eba:	3710      	adds	r7, #16
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	bd80      	pop	{r7, pc}

08005ec0 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b082      	sub	sp, #8
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
 8005ec8:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8005eca:	2180      	movs	r1, #128	; 0x80
 8005ecc:	6878      	ldr	r0, [r7, #4]
 8005ece:	f000 fbe7 	bl	80066a0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8005ed2:	2100      	movs	r1, #0
 8005ed4:	6878      	ldr	r0, [r7, #4]
 8005ed6:	f000 fbe3 	bl	80066a0 <USBD_LL_StallEP>
}
 8005eda:	bf00      	nop
 8005edc:	3708      	adds	r7, #8
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}

08005ee2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8005ee2:	b580      	push	{r7, lr}
 8005ee4:	b086      	sub	sp, #24
 8005ee6:	af00      	add	r7, sp, #0
 8005ee8:	60f8      	str	r0, [r7, #12]
 8005eea:	60b9      	str	r1, [r7, #8]
 8005eec:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d036      	beq.n	8005f66 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8005efc:	6938      	ldr	r0, [r7, #16]
 8005efe:	f000 f836 	bl	8005f6e <USBD_GetLen>
 8005f02:	4603      	mov	r3, r0
 8005f04:	3301      	adds	r3, #1
 8005f06:	b29b      	uxth	r3, r3
 8005f08:	005b      	lsls	r3, r3, #1
 8005f0a:	b29a      	uxth	r2, r3
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8005f10:	7dfb      	ldrb	r3, [r7, #23]
 8005f12:	68ba      	ldr	r2, [r7, #8]
 8005f14:	4413      	add	r3, r2
 8005f16:	687a      	ldr	r2, [r7, #4]
 8005f18:	7812      	ldrb	r2, [r2, #0]
 8005f1a:	701a      	strb	r2, [r3, #0]
  idx++;
 8005f1c:	7dfb      	ldrb	r3, [r7, #23]
 8005f1e:	3301      	adds	r3, #1
 8005f20:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8005f22:	7dfb      	ldrb	r3, [r7, #23]
 8005f24:	68ba      	ldr	r2, [r7, #8]
 8005f26:	4413      	add	r3, r2
 8005f28:	2203      	movs	r2, #3
 8005f2a:	701a      	strb	r2, [r3, #0]
  idx++;
 8005f2c:	7dfb      	ldrb	r3, [r7, #23]
 8005f2e:	3301      	adds	r3, #1
 8005f30:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8005f32:	e013      	b.n	8005f5c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8005f34:	7dfb      	ldrb	r3, [r7, #23]
 8005f36:	68ba      	ldr	r2, [r7, #8]
 8005f38:	4413      	add	r3, r2
 8005f3a:	693a      	ldr	r2, [r7, #16]
 8005f3c:	7812      	ldrb	r2, [r2, #0]
 8005f3e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	3301      	adds	r3, #1
 8005f44:	613b      	str	r3, [r7, #16]
    idx++;
 8005f46:	7dfb      	ldrb	r3, [r7, #23]
 8005f48:	3301      	adds	r3, #1
 8005f4a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8005f4c:	7dfb      	ldrb	r3, [r7, #23]
 8005f4e:	68ba      	ldr	r2, [r7, #8]
 8005f50:	4413      	add	r3, r2
 8005f52:	2200      	movs	r2, #0
 8005f54:	701a      	strb	r2, [r3, #0]
    idx++;
 8005f56:	7dfb      	ldrb	r3, [r7, #23]
 8005f58:	3301      	adds	r3, #1
 8005f5a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8005f5c:	693b      	ldr	r3, [r7, #16]
 8005f5e:	781b      	ldrb	r3, [r3, #0]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d1e7      	bne.n	8005f34 <USBD_GetString+0x52>
 8005f64:	e000      	b.n	8005f68 <USBD_GetString+0x86>
    return;
 8005f66:	bf00      	nop
  }
}
 8005f68:	3718      	adds	r7, #24
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}

08005f6e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8005f6e:	b480      	push	{r7}
 8005f70:	b085      	sub	sp, #20
 8005f72:	af00      	add	r7, sp, #0
 8005f74:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8005f76:	2300      	movs	r3, #0
 8005f78:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8005f7e:	e005      	b.n	8005f8c <USBD_GetLen+0x1e>
  {
    len++;
 8005f80:	7bfb      	ldrb	r3, [r7, #15]
 8005f82:	3301      	adds	r3, #1
 8005f84:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	3301      	adds	r3, #1
 8005f8a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	781b      	ldrb	r3, [r3, #0]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d1f5      	bne.n	8005f80 <USBD_GetLen+0x12>
  }

  return len;
 8005f94:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	3714      	adds	r7, #20
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa0:	4770      	bx	lr

08005fa2 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8005fa2:	b580      	push	{r7, lr}
 8005fa4:	b084      	sub	sp, #16
 8005fa6:	af00      	add	r7, sp, #0
 8005fa8:	60f8      	str	r0, [r7, #12]
 8005faa:	60b9      	str	r1, [r7, #8]
 8005fac:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	2202      	movs	r2, #2
 8005fb2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	687a      	ldr	r2, [r7, #4]
 8005fba:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	687a      	ldr	r2, [r7, #4]
 8005fc0:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	68ba      	ldr	r2, [r7, #8]
 8005fc6:	2100      	movs	r1, #0
 8005fc8:	68f8      	ldr	r0, [r7, #12]
 8005fca:	f000 fbf2 	bl	80067b2 <USBD_LL_Transmit>

  return USBD_OK;
 8005fce:	2300      	movs	r3, #0
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	3710      	adds	r7, #16
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bd80      	pop	{r7, pc}

08005fd8 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b084      	sub	sp, #16
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	60f8      	str	r0, [r7, #12]
 8005fe0:	60b9      	str	r1, [r7, #8]
 8005fe2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	68ba      	ldr	r2, [r7, #8]
 8005fe8:	2100      	movs	r1, #0
 8005fea:	68f8      	ldr	r0, [r7, #12]
 8005fec:	f000 fbe1 	bl	80067b2 <USBD_LL_Transmit>

  return USBD_OK;
 8005ff0:	2300      	movs	r3, #0
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	3710      	adds	r7, #16
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}

08005ffa <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8005ffa:	b580      	push	{r7, lr}
 8005ffc:	b084      	sub	sp, #16
 8005ffe:	af00      	add	r7, sp, #0
 8006000:	60f8      	str	r0, [r7, #12]
 8006002:	60b9      	str	r1, [r7, #8]
 8006004:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	68ba      	ldr	r2, [r7, #8]
 800600a:	2100      	movs	r1, #0
 800600c:	68f8      	ldr	r0, [r7, #12]
 800600e:	f000 fbf1 	bl	80067f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006012:	2300      	movs	r3, #0
}
 8006014:	4618      	mov	r0, r3
 8006016:	3710      	adds	r7, #16
 8006018:	46bd      	mov	sp, r7
 800601a:	bd80      	pop	{r7, pc}

0800601c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b082      	sub	sp, #8
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2204      	movs	r2, #4
 8006028:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800602c:	2300      	movs	r3, #0
 800602e:	2200      	movs	r2, #0
 8006030:	2100      	movs	r1, #0
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	f000 fbbd 	bl	80067b2 <USBD_LL_Transmit>

  return USBD_OK;
 8006038:	2300      	movs	r3, #0
}
 800603a:	4618      	mov	r0, r3
 800603c:	3708      	adds	r7, #8
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}

08006042 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006042:	b580      	push	{r7, lr}
 8006044:	b082      	sub	sp, #8
 8006046:	af00      	add	r7, sp, #0
 8006048:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2205      	movs	r2, #5
 800604e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006052:	2300      	movs	r3, #0
 8006054:	2200      	movs	r2, #0
 8006056:	2100      	movs	r1, #0
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	f000 fbcb 	bl	80067f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800605e:	2300      	movs	r3, #0
}
 8006060:	4618      	mov	r0, r3
 8006062:	3708      	adds	r7, #8
 8006064:	46bd      	mov	sp, r7
 8006066:	bd80      	pop	{r7, pc}

08006068 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800606c:	2200      	movs	r2, #0
 800606e:	490e      	ldr	r1, [pc, #56]	; (80060a8 <MX_USB_DEVICE_Init+0x40>)
 8006070:	480e      	ldr	r0, [pc, #56]	; (80060ac <MX_USB_DEVICE_Init+0x44>)
 8006072:	f7fe ff11 	bl	8004e98 <USBD_Init>
 8006076:	4603      	mov	r3, r0
 8006078:	2b00      	cmp	r3, #0
 800607a:	d001      	beq.n	8006080 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800607c:	f7fa fe7c 	bl	8000d78 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8006080:	490b      	ldr	r1, [pc, #44]	; (80060b0 <MX_USB_DEVICE_Init+0x48>)
 8006082:	480a      	ldr	r0, [pc, #40]	; (80060ac <MX_USB_DEVICE_Init+0x44>)
 8006084:	f7fe ff3e 	bl	8004f04 <USBD_RegisterClass>
 8006088:	4603      	mov	r3, r0
 800608a:	2b00      	cmp	r3, #0
 800608c:	d001      	beq.n	8006092 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800608e:	f7fa fe73 	bl	8000d78 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006092:	4806      	ldr	r0, [pc, #24]	; (80060ac <MX_USB_DEVICE_Init+0x44>)
 8006094:	f7fe ff57 	bl	8004f46 <USBD_Start>
 8006098:	4603      	mov	r3, r0
 800609a:	2b00      	cmp	r3, #0
 800609c:	d001      	beq.n	80060a2 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 800609e:	f7fa fe6b 	bl	8000d78 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80060a2:	bf00      	nop
 80060a4:	bd80      	pop	{r7, pc}
 80060a6:	bf00      	nop
 80060a8:	2000015c 	.word	0x2000015c
 80060ac:	20000274 	.word	0x20000274
 80060b0:	20000014 	.word	0x20000014

080060b4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b083      	sub	sp, #12
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	4603      	mov	r3, r0
 80060bc:	6039      	str	r1, [r7, #0]
 80060be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	2212      	movs	r2, #18
 80060c4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80060c6:	4b03      	ldr	r3, [pc, #12]	; (80060d4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	370c      	adds	r7, #12
 80060cc:	46bd      	mov	sp, r7
 80060ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d2:	4770      	bx	lr
 80060d4:	20000178 	.word	0x20000178

080060d8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80060d8:	b480      	push	{r7}
 80060da:	b083      	sub	sp, #12
 80060dc:	af00      	add	r7, sp, #0
 80060de:	4603      	mov	r3, r0
 80060e0:	6039      	str	r1, [r7, #0]
 80060e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	2204      	movs	r2, #4
 80060e8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80060ea:	4b03      	ldr	r3, [pc, #12]	; (80060f8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80060ec:	4618      	mov	r0, r3
 80060ee:	370c      	adds	r7, #12
 80060f0:	46bd      	mov	sp, r7
 80060f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f6:	4770      	bx	lr
 80060f8:	2000018c 	.word	0x2000018c

080060fc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b082      	sub	sp, #8
 8006100:	af00      	add	r7, sp, #0
 8006102:	4603      	mov	r3, r0
 8006104:	6039      	str	r1, [r7, #0]
 8006106:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006108:	79fb      	ldrb	r3, [r7, #7]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d105      	bne.n	800611a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800610e:	683a      	ldr	r2, [r7, #0]
 8006110:	4907      	ldr	r1, [pc, #28]	; (8006130 <USBD_FS_ProductStrDescriptor+0x34>)
 8006112:	4808      	ldr	r0, [pc, #32]	; (8006134 <USBD_FS_ProductStrDescriptor+0x38>)
 8006114:	f7ff fee5 	bl	8005ee2 <USBD_GetString>
 8006118:	e004      	b.n	8006124 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800611a:	683a      	ldr	r2, [r7, #0]
 800611c:	4904      	ldr	r1, [pc, #16]	; (8006130 <USBD_FS_ProductStrDescriptor+0x34>)
 800611e:	4805      	ldr	r0, [pc, #20]	; (8006134 <USBD_FS_ProductStrDescriptor+0x38>)
 8006120:	f7ff fedf 	bl	8005ee2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006124:	4b02      	ldr	r3, [pc, #8]	; (8006130 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006126:	4618      	mov	r0, r3
 8006128:	3708      	adds	r7, #8
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}
 800612e:	bf00      	nop
 8006130:	20000544 	.word	0x20000544
 8006134:	08006aa0 	.word	0x08006aa0

08006138 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b082      	sub	sp, #8
 800613c:	af00      	add	r7, sp, #0
 800613e:	4603      	mov	r3, r0
 8006140:	6039      	str	r1, [r7, #0]
 8006142:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006144:	683a      	ldr	r2, [r7, #0]
 8006146:	4904      	ldr	r1, [pc, #16]	; (8006158 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006148:	4804      	ldr	r0, [pc, #16]	; (800615c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800614a:	f7ff feca 	bl	8005ee2 <USBD_GetString>
  return USBD_StrDesc;
 800614e:	4b02      	ldr	r3, [pc, #8]	; (8006158 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006150:	4618      	mov	r0, r3
 8006152:	3708      	adds	r7, #8
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}
 8006158:	20000544 	.word	0x20000544
 800615c:	08006ab8 	.word	0x08006ab8

08006160 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b082      	sub	sp, #8
 8006164:	af00      	add	r7, sp, #0
 8006166:	4603      	mov	r3, r0
 8006168:	6039      	str	r1, [r7, #0]
 800616a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	221a      	movs	r2, #26
 8006170:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006172:	f000 f843 	bl	80061fc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006176:	4b02      	ldr	r3, [pc, #8]	; (8006180 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006178:	4618      	mov	r0, r3
 800617a:	3708      	adds	r7, #8
 800617c:	46bd      	mov	sp, r7
 800617e:	bd80      	pop	{r7, pc}
 8006180:	20000190 	.word	0x20000190

08006184 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b082      	sub	sp, #8
 8006188:	af00      	add	r7, sp, #0
 800618a:	4603      	mov	r3, r0
 800618c:	6039      	str	r1, [r7, #0]
 800618e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006190:	79fb      	ldrb	r3, [r7, #7]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d105      	bne.n	80061a2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006196:	683a      	ldr	r2, [r7, #0]
 8006198:	4907      	ldr	r1, [pc, #28]	; (80061b8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800619a:	4808      	ldr	r0, [pc, #32]	; (80061bc <USBD_FS_ConfigStrDescriptor+0x38>)
 800619c:	f7ff fea1 	bl	8005ee2 <USBD_GetString>
 80061a0:	e004      	b.n	80061ac <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80061a2:	683a      	ldr	r2, [r7, #0]
 80061a4:	4904      	ldr	r1, [pc, #16]	; (80061b8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80061a6:	4805      	ldr	r0, [pc, #20]	; (80061bc <USBD_FS_ConfigStrDescriptor+0x38>)
 80061a8:	f7ff fe9b 	bl	8005ee2 <USBD_GetString>
  }
  return USBD_StrDesc;
 80061ac:	4b02      	ldr	r3, [pc, #8]	; (80061b8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80061ae:	4618      	mov	r0, r3
 80061b0:	3708      	adds	r7, #8
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}
 80061b6:	bf00      	nop
 80061b8:	20000544 	.word	0x20000544
 80061bc:	08006acc 	.word	0x08006acc

080061c0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b082      	sub	sp, #8
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	4603      	mov	r3, r0
 80061c8:	6039      	str	r1, [r7, #0]
 80061ca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80061cc:	79fb      	ldrb	r3, [r7, #7]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d105      	bne.n	80061de <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80061d2:	683a      	ldr	r2, [r7, #0]
 80061d4:	4907      	ldr	r1, [pc, #28]	; (80061f4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80061d6:	4808      	ldr	r0, [pc, #32]	; (80061f8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80061d8:	f7ff fe83 	bl	8005ee2 <USBD_GetString>
 80061dc:	e004      	b.n	80061e8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80061de:	683a      	ldr	r2, [r7, #0]
 80061e0:	4904      	ldr	r1, [pc, #16]	; (80061f4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80061e2:	4805      	ldr	r0, [pc, #20]	; (80061f8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80061e4:	f7ff fe7d 	bl	8005ee2 <USBD_GetString>
  }
  return USBD_StrDesc;
 80061e8:	4b02      	ldr	r3, [pc, #8]	; (80061f4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	3708      	adds	r7, #8
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}
 80061f2:	bf00      	nop
 80061f4:	20000544 	.word	0x20000544
 80061f8:	08006ad8 	.word	0x08006ad8

080061fc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b084      	sub	sp, #16
 8006200:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006202:	4b0f      	ldr	r3, [pc, #60]	; (8006240 <Get_SerialNum+0x44>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006208:	4b0e      	ldr	r3, [pc, #56]	; (8006244 <Get_SerialNum+0x48>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800620e:	4b0e      	ldr	r3, [pc, #56]	; (8006248 <Get_SerialNum+0x4c>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006214:	68fa      	ldr	r2, [r7, #12]
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	4413      	add	r3, r2
 800621a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d009      	beq.n	8006236 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006222:	2208      	movs	r2, #8
 8006224:	4909      	ldr	r1, [pc, #36]	; (800624c <Get_SerialNum+0x50>)
 8006226:	68f8      	ldr	r0, [r7, #12]
 8006228:	f000 f814 	bl	8006254 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800622c:	2204      	movs	r2, #4
 800622e:	4908      	ldr	r1, [pc, #32]	; (8006250 <Get_SerialNum+0x54>)
 8006230:	68b8      	ldr	r0, [r7, #8]
 8006232:	f000 f80f 	bl	8006254 <IntToUnicode>
  }
}
 8006236:	bf00      	nop
 8006238:	3710      	adds	r7, #16
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}
 800623e:	bf00      	nop
 8006240:	1fff7a10 	.word	0x1fff7a10
 8006244:	1fff7a14 	.word	0x1fff7a14
 8006248:	1fff7a18 	.word	0x1fff7a18
 800624c:	20000192 	.word	0x20000192
 8006250:	200001a2 	.word	0x200001a2

08006254 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006254:	b480      	push	{r7}
 8006256:	b087      	sub	sp, #28
 8006258:	af00      	add	r7, sp, #0
 800625a:	60f8      	str	r0, [r7, #12]
 800625c:	60b9      	str	r1, [r7, #8]
 800625e:	4613      	mov	r3, r2
 8006260:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006262:	2300      	movs	r3, #0
 8006264:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006266:	2300      	movs	r3, #0
 8006268:	75fb      	strb	r3, [r7, #23]
 800626a:	e027      	b.n	80062bc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	0f1b      	lsrs	r3, r3, #28
 8006270:	2b09      	cmp	r3, #9
 8006272:	d80b      	bhi.n	800628c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	0f1b      	lsrs	r3, r3, #28
 8006278:	b2da      	uxtb	r2, r3
 800627a:	7dfb      	ldrb	r3, [r7, #23]
 800627c:	005b      	lsls	r3, r3, #1
 800627e:	4619      	mov	r1, r3
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	440b      	add	r3, r1
 8006284:	3230      	adds	r2, #48	; 0x30
 8006286:	b2d2      	uxtb	r2, r2
 8006288:	701a      	strb	r2, [r3, #0]
 800628a:	e00a      	b.n	80062a2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	0f1b      	lsrs	r3, r3, #28
 8006290:	b2da      	uxtb	r2, r3
 8006292:	7dfb      	ldrb	r3, [r7, #23]
 8006294:	005b      	lsls	r3, r3, #1
 8006296:	4619      	mov	r1, r3
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	440b      	add	r3, r1
 800629c:	3237      	adds	r2, #55	; 0x37
 800629e:	b2d2      	uxtb	r2, r2
 80062a0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	011b      	lsls	r3, r3, #4
 80062a6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80062a8:	7dfb      	ldrb	r3, [r7, #23]
 80062aa:	005b      	lsls	r3, r3, #1
 80062ac:	3301      	adds	r3, #1
 80062ae:	68ba      	ldr	r2, [r7, #8]
 80062b0:	4413      	add	r3, r2
 80062b2:	2200      	movs	r2, #0
 80062b4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80062b6:	7dfb      	ldrb	r3, [r7, #23]
 80062b8:	3301      	adds	r3, #1
 80062ba:	75fb      	strb	r3, [r7, #23]
 80062bc:	7dfa      	ldrb	r2, [r7, #23]
 80062be:	79fb      	ldrb	r3, [r7, #7]
 80062c0:	429a      	cmp	r2, r3
 80062c2:	d3d3      	bcc.n	800626c <IntToUnicode+0x18>
  }
}
 80062c4:	bf00      	nop
 80062c6:	371c      	adds	r7, #28
 80062c8:	46bd      	mov	sp, r7
 80062ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ce:	4770      	bx	lr

080062d0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b08a      	sub	sp, #40	; 0x28
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80062d8:	f107 0314 	add.w	r3, r7, #20
 80062dc:	2200      	movs	r2, #0
 80062de:	601a      	str	r2, [r3, #0]
 80062e0:	605a      	str	r2, [r3, #4]
 80062e2:	609a      	str	r2, [r3, #8]
 80062e4:	60da      	str	r2, [r3, #12]
 80062e6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80062f0:	d13a      	bne.n	8006368 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80062f2:	2300      	movs	r3, #0
 80062f4:	613b      	str	r3, [r7, #16]
 80062f6:	4b1e      	ldr	r3, [pc, #120]	; (8006370 <HAL_PCD_MspInit+0xa0>)
 80062f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062fa:	4a1d      	ldr	r2, [pc, #116]	; (8006370 <HAL_PCD_MspInit+0xa0>)
 80062fc:	f043 0301 	orr.w	r3, r3, #1
 8006300:	6313      	str	r3, [r2, #48]	; 0x30
 8006302:	4b1b      	ldr	r3, [pc, #108]	; (8006370 <HAL_PCD_MspInit+0xa0>)
 8006304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006306:	f003 0301 	and.w	r3, r3, #1
 800630a:	613b      	str	r3, [r7, #16]
 800630c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800630e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006312:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006314:	2302      	movs	r3, #2
 8006316:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006318:	2300      	movs	r3, #0
 800631a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800631c:	2303      	movs	r3, #3
 800631e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006320:	230a      	movs	r3, #10
 8006322:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006324:	f107 0314 	add.w	r3, r7, #20
 8006328:	4619      	mov	r1, r3
 800632a:	4812      	ldr	r0, [pc, #72]	; (8006374 <HAL_PCD_MspInit+0xa4>)
 800632c:	f7fb f9a8 	bl	8001680 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006330:	4b0f      	ldr	r3, [pc, #60]	; (8006370 <HAL_PCD_MspInit+0xa0>)
 8006332:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006334:	4a0e      	ldr	r2, [pc, #56]	; (8006370 <HAL_PCD_MspInit+0xa0>)
 8006336:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800633a:	6353      	str	r3, [r2, #52]	; 0x34
 800633c:	2300      	movs	r3, #0
 800633e:	60fb      	str	r3, [r7, #12]
 8006340:	4b0b      	ldr	r3, [pc, #44]	; (8006370 <HAL_PCD_MspInit+0xa0>)
 8006342:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006344:	4a0a      	ldr	r2, [pc, #40]	; (8006370 <HAL_PCD_MspInit+0xa0>)
 8006346:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800634a:	6453      	str	r3, [r2, #68]	; 0x44
 800634c:	4b08      	ldr	r3, [pc, #32]	; (8006370 <HAL_PCD_MspInit+0xa0>)
 800634e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006350:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006354:	60fb      	str	r3, [r7, #12]
 8006356:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006358:	2200      	movs	r2, #0
 800635a:	2100      	movs	r1, #0
 800635c:	2043      	movs	r0, #67	; 0x43
 800635e:	f7fb f958 	bl	8001612 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006362:	2043      	movs	r0, #67	; 0x43
 8006364:	f7fb f971 	bl	800164a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006368:	bf00      	nop
 800636a:	3728      	adds	r7, #40	; 0x28
 800636c:	46bd      	mov	sp, r7
 800636e:	bd80      	pop	{r7, pc}
 8006370:	40023800 	.word	0x40023800
 8006374:	40020000 	.word	0x40020000

08006378 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b082      	sub	sp, #8
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800638c:	4619      	mov	r1, r3
 800638e:	4610      	mov	r0, r2
 8006390:	f7fe fe24 	bl	8004fdc <USBD_LL_SetupStage>
}
 8006394:	bf00      	nop
 8006396:	3708      	adds	r7, #8
 8006398:	46bd      	mov	sp, r7
 800639a:	bd80      	pop	{r7, pc}

0800639c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b082      	sub	sp, #8
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
 80063a4:	460b      	mov	r3, r1
 80063a6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80063ae:	78fa      	ldrb	r2, [r7, #3]
 80063b0:	6879      	ldr	r1, [r7, #4]
 80063b2:	4613      	mov	r3, r2
 80063b4:	00db      	lsls	r3, r3, #3
 80063b6:	1a9b      	subs	r3, r3, r2
 80063b8:	009b      	lsls	r3, r3, #2
 80063ba:	440b      	add	r3, r1
 80063bc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80063c0:	681a      	ldr	r2, [r3, #0]
 80063c2:	78fb      	ldrb	r3, [r7, #3]
 80063c4:	4619      	mov	r1, r3
 80063c6:	f7fe fe5c 	bl	8005082 <USBD_LL_DataOutStage>
}
 80063ca:	bf00      	nop
 80063cc:	3708      	adds	r7, #8
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bd80      	pop	{r7, pc}

080063d2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80063d2:	b580      	push	{r7, lr}
 80063d4:	b082      	sub	sp, #8
 80063d6:	af00      	add	r7, sp, #0
 80063d8:	6078      	str	r0, [r7, #4]
 80063da:	460b      	mov	r3, r1
 80063dc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80063e4:	78fa      	ldrb	r2, [r7, #3]
 80063e6:	6879      	ldr	r1, [r7, #4]
 80063e8:	4613      	mov	r3, r2
 80063ea:	00db      	lsls	r3, r3, #3
 80063ec:	1a9b      	subs	r3, r3, r2
 80063ee:	009b      	lsls	r3, r3, #2
 80063f0:	440b      	add	r3, r1
 80063f2:	3348      	adds	r3, #72	; 0x48
 80063f4:	681a      	ldr	r2, [r3, #0]
 80063f6:	78fb      	ldrb	r3, [r7, #3]
 80063f8:	4619      	mov	r1, r3
 80063fa:	f7fe fea5 	bl	8005148 <USBD_LL_DataInStage>
}
 80063fe:	bf00      	nop
 8006400:	3708      	adds	r7, #8
 8006402:	46bd      	mov	sp, r7
 8006404:	bd80      	pop	{r7, pc}

08006406 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006406:	b580      	push	{r7, lr}
 8006408:	b082      	sub	sp, #8
 800640a:	af00      	add	r7, sp, #0
 800640c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006414:	4618      	mov	r0, r3
 8006416:	f7fe ffa9 	bl	800536c <USBD_LL_SOF>
}
 800641a:	bf00      	nop
 800641c:	3708      	adds	r7, #8
 800641e:	46bd      	mov	sp, r7
 8006420:	bd80      	pop	{r7, pc}

08006422 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8006422:	b580      	push	{r7, lr}
 8006424:	b084      	sub	sp, #16
 8006426:	af00      	add	r7, sp, #0
 8006428:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800642a:	2301      	movs	r3, #1
 800642c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	68db      	ldr	r3, [r3, #12]
 8006432:	2b02      	cmp	r3, #2
 8006434:	d001      	beq.n	800643a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8006436:	f7fa fc9f 	bl	8000d78 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006440:	7bfa      	ldrb	r2, [r7, #15]
 8006442:	4611      	mov	r1, r2
 8006444:	4618      	mov	r0, r3
 8006446:	f7fe ff56 	bl	80052f6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006450:	4618      	mov	r0, r3
 8006452:	f7fe ff0f 	bl	8005274 <USBD_LL_Reset>
}
 8006456:	bf00      	nop
 8006458:	3710      	adds	r7, #16
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}
	...

08006460 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b082      	sub	sp, #8
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800646e:	4618      	mov	r0, r3
 8006470:	f7fe ff51 	bl	8005316 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	687a      	ldr	r2, [r7, #4]
 8006480:	6812      	ldr	r2, [r2, #0]
 8006482:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006486:	f043 0301 	orr.w	r3, r3, #1
 800648a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6a1b      	ldr	r3, [r3, #32]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d005      	beq.n	80064a0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006494:	4b04      	ldr	r3, [pc, #16]	; (80064a8 <HAL_PCD_SuspendCallback+0x48>)
 8006496:	691b      	ldr	r3, [r3, #16]
 8006498:	4a03      	ldr	r2, [pc, #12]	; (80064a8 <HAL_PCD_SuspendCallback+0x48>)
 800649a:	f043 0306 	orr.w	r3, r3, #6
 800649e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80064a0:	bf00      	nop
 80064a2:	3708      	adds	r7, #8
 80064a4:	46bd      	mov	sp, r7
 80064a6:	bd80      	pop	{r7, pc}
 80064a8:	e000ed00 	.word	0xe000ed00

080064ac <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b082      	sub	sp, #8
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80064ba:	4618      	mov	r0, r3
 80064bc:	f7fe ff40 	bl	8005340 <USBD_LL_Resume>
}
 80064c0:	bf00      	nop
 80064c2:	3708      	adds	r7, #8
 80064c4:	46bd      	mov	sp, r7
 80064c6:	bd80      	pop	{r7, pc}

080064c8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b082      	sub	sp, #8
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
 80064d0:	460b      	mov	r3, r1
 80064d2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80064da:	78fa      	ldrb	r2, [r7, #3]
 80064dc:	4611      	mov	r1, r2
 80064de:	4618      	mov	r0, r3
 80064e0:	f7fe ff6b 	bl	80053ba <USBD_LL_IsoOUTIncomplete>
}
 80064e4:	bf00      	nop
 80064e6:	3708      	adds	r7, #8
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bd80      	pop	{r7, pc}

080064ec <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b082      	sub	sp, #8
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
 80064f4:	460b      	mov	r3, r1
 80064f6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80064fe:	78fa      	ldrb	r2, [r7, #3]
 8006500:	4611      	mov	r1, r2
 8006502:	4618      	mov	r0, r3
 8006504:	f7fe ff4c 	bl	80053a0 <USBD_LL_IsoINIncomplete>
}
 8006508:	bf00      	nop
 800650a:	3708      	adds	r7, #8
 800650c:	46bd      	mov	sp, r7
 800650e:	bd80      	pop	{r7, pc}

08006510 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b082      	sub	sp, #8
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800651e:	4618      	mov	r0, r3
 8006520:	f7fe ff58 	bl	80053d4 <USBD_LL_DevConnected>
}
 8006524:	bf00      	nop
 8006526:	3708      	adds	r7, #8
 8006528:	46bd      	mov	sp, r7
 800652a:	bd80      	pop	{r7, pc}

0800652c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b082      	sub	sp, #8
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800653a:	4618      	mov	r0, r3
 800653c:	f7fe ff55 	bl	80053ea <USBD_LL_DevDisconnected>
}
 8006540:	bf00      	nop
 8006542:	3708      	adds	r7, #8
 8006544:	46bd      	mov	sp, r7
 8006546:	bd80      	pop	{r7, pc}

08006548 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b082      	sub	sp, #8
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	781b      	ldrb	r3, [r3, #0]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d13c      	bne.n	80065d2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8006558:	4a20      	ldr	r2, [pc, #128]	; (80065dc <USBD_LL_Init+0x94>)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	4a1e      	ldr	r2, [pc, #120]	; (80065dc <USBD_LL_Init+0x94>)
 8006564:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006568:	4b1c      	ldr	r3, [pc, #112]	; (80065dc <USBD_LL_Init+0x94>)
 800656a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800656e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8006570:	4b1a      	ldr	r3, [pc, #104]	; (80065dc <USBD_LL_Init+0x94>)
 8006572:	2204      	movs	r2, #4
 8006574:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006576:	4b19      	ldr	r3, [pc, #100]	; (80065dc <USBD_LL_Init+0x94>)
 8006578:	2202      	movs	r2, #2
 800657a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800657c:	4b17      	ldr	r3, [pc, #92]	; (80065dc <USBD_LL_Init+0x94>)
 800657e:	2200      	movs	r2, #0
 8006580:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006582:	4b16      	ldr	r3, [pc, #88]	; (80065dc <USBD_LL_Init+0x94>)
 8006584:	2202      	movs	r2, #2
 8006586:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006588:	4b14      	ldr	r3, [pc, #80]	; (80065dc <USBD_LL_Init+0x94>)
 800658a:	2200      	movs	r2, #0
 800658c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800658e:	4b13      	ldr	r3, [pc, #76]	; (80065dc <USBD_LL_Init+0x94>)
 8006590:	2200      	movs	r2, #0
 8006592:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006594:	4b11      	ldr	r3, [pc, #68]	; (80065dc <USBD_LL_Init+0x94>)
 8006596:	2200      	movs	r2, #0
 8006598:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800659a:	4b10      	ldr	r3, [pc, #64]	; (80065dc <USBD_LL_Init+0x94>)
 800659c:	2200      	movs	r2, #0
 800659e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80065a0:	4b0e      	ldr	r3, [pc, #56]	; (80065dc <USBD_LL_Init+0x94>)
 80065a2:	2200      	movs	r2, #0
 80065a4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80065a6:	480d      	ldr	r0, [pc, #52]	; (80065dc <USBD_LL_Init+0x94>)
 80065a8:	f7fb fa1d 	bl	80019e6 <HAL_PCD_Init>
 80065ac:	4603      	mov	r3, r0
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d001      	beq.n	80065b6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80065b2:	f7fa fbe1 	bl	8000d78 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80065b6:	2180      	movs	r1, #128	; 0x80
 80065b8:	4808      	ldr	r0, [pc, #32]	; (80065dc <USBD_LL_Init+0x94>)
 80065ba:	f7fc fb62 	bl	8002c82 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80065be:	2240      	movs	r2, #64	; 0x40
 80065c0:	2100      	movs	r1, #0
 80065c2:	4806      	ldr	r0, [pc, #24]	; (80065dc <USBD_LL_Init+0x94>)
 80065c4:	f7fc fb16 	bl	8002bf4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80065c8:	2280      	movs	r2, #128	; 0x80
 80065ca:	2101      	movs	r1, #1
 80065cc:	4803      	ldr	r0, [pc, #12]	; (80065dc <USBD_LL_Init+0x94>)
 80065ce:	f7fc fb11 	bl	8002bf4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80065d2:	2300      	movs	r3, #0
}
 80065d4:	4618      	mov	r0, r3
 80065d6:	3708      	adds	r7, #8
 80065d8:	46bd      	mov	sp, r7
 80065da:	bd80      	pop	{r7, pc}
 80065dc:	20000744 	.word	0x20000744

080065e0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b084      	sub	sp, #16
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80065e8:	2300      	movs	r3, #0
 80065ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80065ec:	2300      	movs	r3, #0
 80065ee:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80065f6:	4618      	mov	r0, r3
 80065f8:	f7fb fb12 	bl	8001c20 <HAL_PCD_Start>
 80065fc:	4603      	mov	r3, r0
 80065fe:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 8006600:	7bfb      	ldrb	r3, [r7, #15]
 8006602:	4618      	mov	r0, r3
 8006604:	f000 f918 	bl	8006838 <USBD_Get_USB_Status>
 8006608:	4603      	mov	r3, r0
 800660a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800660c:	7bbb      	ldrb	r3, [r7, #14]
}
 800660e:	4618      	mov	r0, r3
 8006610:	3710      	adds	r7, #16
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}

08006616 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006616:	b580      	push	{r7, lr}
 8006618:	b084      	sub	sp, #16
 800661a:	af00      	add	r7, sp, #0
 800661c:	6078      	str	r0, [r7, #4]
 800661e:	4608      	mov	r0, r1
 8006620:	4611      	mov	r1, r2
 8006622:	461a      	mov	r2, r3
 8006624:	4603      	mov	r3, r0
 8006626:	70fb      	strb	r3, [r7, #3]
 8006628:	460b      	mov	r3, r1
 800662a:	70bb      	strb	r3, [r7, #2]
 800662c:	4613      	mov	r3, r2
 800662e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006630:	2300      	movs	r3, #0
 8006632:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006634:	2300      	movs	r3, #0
 8006636:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800663e:	78bb      	ldrb	r3, [r7, #2]
 8006640:	883a      	ldrh	r2, [r7, #0]
 8006642:	78f9      	ldrb	r1, [r7, #3]
 8006644:	f7fb fef6 	bl	8002434 <HAL_PCD_EP_Open>
 8006648:	4603      	mov	r3, r0
 800664a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800664c:	7bfb      	ldrb	r3, [r7, #15]
 800664e:	4618      	mov	r0, r3
 8006650:	f000 f8f2 	bl	8006838 <USBD_Get_USB_Status>
 8006654:	4603      	mov	r3, r0
 8006656:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8006658:	7bbb      	ldrb	r3, [r7, #14]
}
 800665a:	4618      	mov	r0, r3
 800665c:	3710      	adds	r7, #16
 800665e:	46bd      	mov	sp, r7
 8006660:	bd80      	pop	{r7, pc}

08006662 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006662:	b580      	push	{r7, lr}
 8006664:	b084      	sub	sp, #16
 8006666:	af00      	add	r7, sp, #0
 8006668:	6078      	str	r0, [r7, #4]
 800666a:	460b      	mov	r3, r1
 800666c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800666e:	2300      	movs	r3, #0
 8006670:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006672:	2300      	movs	r3, #0
 8006674:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800667c:	78fa      	ldrb	r2, [r7, #3]
 800667e:	4611      	mov	r1, r2
 8006680:	4618      	mov	r0, r3
 8006682:	f7fb ff3f 	bl	8002504 <HAL_PCD_EP_Close>
 8006686:	4603      	mov	r3, r0
 8006688:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 800668a:	7bfb      	ldrb	r3, [r7, #15]
 800668c:	4618      	mov	r0, r3
 800668e:	f000 f8d3 	bl	8006838 <USBD_Get_USB_Status>
 8006692:	4603      	mov	r3, r0
 8006694:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8006696:	7bbb      	ldrb	r3, [r7, #14]
}
 8006698:	4618      	mov	r0, r3
 800669a:	3710      	adds	r7, #16
 800669c:	46bd      	mov	sp, r7
 800669e:	bd80      	pop	{r7, pc}

080066a0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b084      	sub	sp, #16
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
 80066a8:	460b      	mov	r3, r1
 80066aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80066ac:	2300      	movs	r3, #0
 80066ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80066b0:	2300      	movs	r3, #0
 80066b2:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80066ba:	78fa      	ldrb	r2, [r7, #3]
 80066bc:	4611      	mov	r1, r2
 80066be:	4618      	mov	r0, r3
 80066c0:	f7fb ffff 	bl	80026c2 <HAL_PCD_EP_SetStall>
 80066c4:	4603      	mov	r3, r0
 80066c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80066c8:	7bfb      	ldrb	r3, [r7, #15]
 80066ca:	4618      	mov	r0, r3
 80066cc:	f000 f8b4 	bl	8006838 <USBD_Get_USB_Status>
 80066d0:	4603      	mov	r3, r0
 80066d2:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 80066d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80066d6:	4618      	mov	r0, r3
 80066d8:	3710      	adds	r7, #16
 80066da:	46bd      	mov	sp, r7
 80066dc:	bd80      	pop	{r7, pc}

080066de <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80066de:	b580      	push	{r7, lr}
 80066e0:	b084      	sub	sp, #16
 80066e2:	af00      	add	r7, sp, #0
 80066e4:	6078      	str	r0, [r7, #4]
 80066e6:	460b      	mov	r3, r1
 80066e8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80066ea:	2300      	movs	r3, #0
 80066ec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80066ee:	2300      	movs	r3, #0
 80066f0:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80066f8:	78fa      	ldrb	r2, [r7, #3]
 80066fa:	4611      	mov	r1, r2
 80066fc:	4618      	mov	r0, r3
 80066fe:	f7fc f844 	bl	800278a <HAL_PCD_EP_ClrStall>
 8006702:	4603      	mov	r3, r0
 8006704:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 8006706:	7bfb      	ldrb	r3, [r7, #15]
 8006708:	4618      	mov	r0, r3
 800670a:	f000 f895 	bl	8006838 <USBD_Get_USB_Status>
 800670e:	4603      	mov	r3, r0
 8006710:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 8006712:	7bbb      	ldrb	r3, [r7, #14]
}
 8006714:	4618      	mov	r0, r3
 8006716:	3710      	adds	r7, #16
 8006718:	46bd      	mov	sp, r7
 800671a:	bd80      	pop	{r7, pc}

0800671c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800671c:	b480      	push	{r7}
 800671e:	b085      	sub	sp, #20
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
 8006724:	460b      	mov	r3, r1
 8006726:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800672e:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8006730:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006734:	2b00      	cmp	r3, #0
 8006736:	da0b      	bge.n	8006750 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8006738:	78fb      	ldrb	r3, [r7, #3]
 800673a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800673e:	68f9      	ldr	r1, [r7, #12]
 8006740:	4613      	mov	r3, r2
 8006742:	00db      	lsls	r3, r3, #3
 8006744:	1a9b      	subs	r3, r3, r2
 8006746:	009b      	lsls	r3, r3, #2
 8006748:	440b      	add	r3, r1
 800674a:	333e      	adds	r3, #62	; 0x3e
 800674c:	781b      	ldrb	r3, [r3, #0]
 800674e:	e00b      	b.n	8006768 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8006750:	78fb      	ldrb	r3, [r7, #3]
 8006752:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006756:	68f9      	ldr	r1, [r7, #12]
 8006758:	4613      	mov	r3, r2
 800675a:	00db      	lsls	r3, r3, #3
 800675c:	1a9b      	subs	r3, r3, r2
 800675e:	009b      	lsls	r3, r3, #2
 8006760:	440b      	add	r3, r1
 8006762:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006766:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006768:	4618      	mov	r0, r3
 800676a:	3714      	adds	r7, #20
 800676c:	46bd      	mov	sp, r7
 800676e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006772:	4770      	bx	lr

08006774 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b084      	sub	sp, #16
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
 800677c:	460b      	mov	r3, r1
 800677e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006780:	2300      	movs	r3, #0
 8006782:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006784:	2300      	movs	r3, #0
 8006786:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800678e:	78fa      	ldrb	r2, [r7, #3]
 8006790:	4611      	mov	r1, r2
 8006792:	4618      	mov	r0, r3
 8006794:	f7fb fe29 	bl	80023ea <HAL_PCD_SetAddress>
 8006798:	4603      	mov	r3, r0
 800679a:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 800679c:	7bfb      	ldrb	r3, [r7, #15]
 800679e:	4618      	mov	r0, r3
 80067a0:	f000 f84a 	bl	8006838 <USBD_Get_USB_Status>
 80067a4:	4603      	mov	r3, r0
 80067a6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 80067a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	3710      	adds	r7, #16
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bd80      	pop	{r7, pc}

080067b2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80067b2:	b580      	push	{r7, lr}
 80067b4:	b086      	sub	sp, #24
 80067b6:	af00      	add	r7, sp, #0
 80067b8:	60f8      	str	r0, [r7, #12]
 80067ba:	607a      	str	r2, [r7, #4]
 80067bc:	603b      	str	r3, [r7, #0]
 80067be:	460b      	mov	r3, r1
 80067c0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80067c2:	2300      	movs	r3, #0
 80067c4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80067c6:	2300      	movs	r3, #0
 80067c8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80067d0:	7af9      	ldrb	r1, [r7, #11]
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	687a      	ldr	r2, [r7, #4]
 80067d6:	f7fb ff2a 	bl	800262e <HAL_PCD_EP_Transmit>
 80067da:	4603      	mov	r3, r0
 80067dc:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 80067de:	7dfb      	ldrb	r3, [r7, #23]
 80067e0:	4618      	mov	r0, r3
 80067e2:	f000 f829 	bl	8006838 <USBD_Get_USB_Status>
 80067e6:	4603      	mov	r3, r0
 80067e8:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 80067ea:	7dbb      	ldrb	r3, [r7, #22]
}
 80067ec:	4618      	mov	r0, r3
 80067ee:	3718      	adds	r7, #24
 80067f0:	46bd      	mov	sp, r7
 80067f2:	bd80      	pop	{r7, pc}

080067f4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b086      	sub	sp, #24
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	60f8      	str	r0, [r7, #12]
 80067fc:	607a      	str	r2, [r7, #4]
 80067fe:	603b      	str	r3, [r7, #0]
 8006800:	460b      	mov	r3, r1
 8006802:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006804:	2300      	movs	r3, #0
 8006806:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006808:	2300      	movs	r3, #0
 800680a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006812:	7af9      	ldrb	r1, [r7, #11]
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	687a      	ldr	r2, [r7, #4]
 8006818:	f7fb febe 	bl	8002598 <HAL_PCD_EP_Receive>
 800681c:	4603      	mov	r3, r0
 800681e:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 8006820:	7dfb      	ldrb	r3, [r7, #23]
 8006822:	4618      	mov	r0, r3
 8006824:	f000 f808 	bl	8006838 <USBD_Get_USB_Status>
 8006828:	4603      	mov	r3, r0
 800682a:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 800682c:	7dbb      	ldrb	r3, [r7, #22]
}
 800682e:	4618      	mov	r0, r3
 8006830:	3718      	adds	r7, #24
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}
	...

08006838 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006838:	b480      	push	{r7}
 800683a:	b085      	sub	sp, #20
 800683c:	af00      	add	r7, sp, #0
 800683e:	4603      	mov	r3, r0
 8006840:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006842:	2300      	movs	r3, #0
 8006844:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006846:	79fb      	ldrb	r3, [r7, #7]
 8006848:	2b03      	cmp	r3, #3
 800684a:	d817      	bhi.n	800687c <USBD_Get_USB_Status+0x44>
 800684c:	a201      	add	r2, pc, #4	; (adr r2, 8006854 <USBD_Get_USB_Status+0x1c>)
 800684e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006852:	bf00      	nop
 8006854:	08006865 	.word	0x08006865
 8006858:	0800686b 	.word	0x0800686b
 800685c:	08006871 	.word	0x08006871
 8006860:	08006877 	.word	0x08006877
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8006864:	2300      	movs	r3, #0
 8006866:	73fb      	strb	r3, [r7, #15]
    break;
 8006868:	e00b      	b.n	8006882 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800686a:	2303      	movs	r3, #3
 800686c:	73fb      	strb	r3, [r7, #15]
    break;
 800686e:	e008      	b.n	8006882 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006870:	2301      	movs	r3, #1
 8006872:	73fb      	strb	r3, [r7, #15]
    break;
 8006874:	e005      	b.n	8006882 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006876:	2303      	movs	r3, #3
 8006878:	73fb      	strb	r3, [r7, #15]
    break;
 800687a:	e002      	b.n	8006882 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800687c:	2303      	movs	r3, #3
 800687e:	73fb      	strb	r3, [r7, #15]
    break;
 8006880:	bf00      	nop
  }
  return usb_status;
 8006882:	7bfb      	ldrb	r3, [r7, #15]
}
 8006884:	4618      	mov	r0, r3
 8006886:	3714      	adds	r7, #20
 8006888:	46bd      	mov	sp, r7
 800688a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688e:	4770      	bx	lr

08006890 <__errno>:
 8006890:	4b01      	ldr	r3, [pc, #4]	; (8006898 <__errno+0x8>)
 8006892:	6818      	ldr	r0, [r3, #0]
 8006894:	4770      	bx	lr
 8006896:	bf00      	nop
 8006898:	200001ac 	.word	0x200001ac

0800689c <__libc_init_array>:
 800689c:	b570      	push	{r4, r5, r6, lr}
 800689e:	4e0d      	ldr	r6, [pc, #52]	; (80068d4 <__libc_init_array+0x38>)
 80068a0:	4c0d      	ldr	r4, [pc, #52]	; (80068d8 <__libc_init_array+0x3c>)
 80068a2:	1ba4      	subs	r4, r4, r6
 80068a4:	10a4      	asrs	r4, r4, #2
 80068a6:	2500      	movs	r5, #0
 80068a8:	42a5      	cmp	r5, r4
 80068aa:	d109      	bne.n	80068c0 <__libc_init_array+0x24>
 80068ac:	4e0b      	ldr	r6, [pc, #44]	; (80068dc <__libc_init_array+0x40>)
 80068ae:	4c0c      	ldr	r4, [pc, #48]	; (80068e0 <__libc_init_array+0x44>)
 80068b0:	f000 f8ea 	bl	8006a88 <_init>
 80068b4:	1ba4      	subs	r4, r4, r6
 80068b6:	10a4      	asrs	r4, r4, #2
 80068b8:	2500      	movs	r5, #0
 80068ba:	42a5      	cmp	r5, r4
 80068bc:	d105      	bne.n	80068ca <__libc_init_array+0x2e>
 80068be:	bd70      	pop	{r4, r5, r6, pc}
 80068c0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80068c4:	4798      	blx	r3
 80068c6:	3501      	adds	r5, #1
 80068c8:	e7ee      	b.n	80068a8 <__libc_init_array+0xc>
 80068ca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80068ce:	4798      	blx	r3
 80068d0:	3501      	adds	r5, #1
 80068d2:	e7f2      	b.n	80068ba <__libc_init_array+0x1e>
 80068d4:	08006b8c 	.word	0x08006b8c
 80068d8:	08006b8c 	.word	0x08006b8c
 80068dc:	08006b8c 	.word	0x08006b8c
 80068e0:	08006b90 	.word	0x08006b90

080068e4 <malloc>:
 80068e4:	4b02      	ldr	r3, [pc, #8]	; (80068f0 <malloc+0xc>)
 80068e6:	4601      	mov	r1, r0
 80068e8:	6818      	ldr	r0, [r3, #0]
 80068ea:	f000 b861 	b.w	80069b0 <_malloc_r>
 80068ee:	bf00      	nop
 80068f0:	200001ac 	.word	0x200001ac

080068f4 <free>:
 80068f4:	4b02      	ldr	r3, [pc, #8]	; (8006900 <free+0xc>)
 80068f6:	4601      	mov	r1, r0
 80068f8:	6818      	ldr	r0, [r3, #0]
 80068fa:	f000 b80b 	b.w	8006914 <_free_r>
 80068fe:	bf00      	nop
 8006900:	200001ac 	.word	0x200001ac

08006904 <memset>:
 8006904:	4402      	add	r2, r0
 8006906:	4603      	mov	r3, r0
 8006908:	4293      	cmp	r3, r2
 800690a:	d100      	bne.n	800690e <memset+0xa>
 800690c:	4770      	bx	lr
 800690e:	f803 1b01 	strb.w	r1, [r3], #1
 8006912:	e7f9      	b.n	8006908 <memset+0x4>

08006914 <_free_r>:
 8006914:	b538      	push	{r3, r4, r5, lr}
 8006916:	4605      	mov	r5, r0
 8006918:	2900      	cmp	r1, #0
 800691a:	d045      	beq.n	80069a8 <_free_r+0x94>
 800691c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006920:	1f0c      	subs	r4, r1, #4
 8006922:	2b00      	cmp	r3, #0
 8006924:	bfb8      	it	lt
 8006926:	18e4      	addlt	r4, r4, r3
 8006928:	f000 f8ac 	bl	8006a84 <__malloc_lock>
 800692c:	4a1f      	ldr	r2, [pc, #124]	; (80069ac <_free_r+0x98>)
 800692e:	6813      	ldr	r3, [r2, #0]
 8006930:	4610      	mov	r0, r2
 8006932:	b933      	cbnz	r3, 8006942 <_free_r+0x2e>
 8006934:	6063      	str	r3, [r4, #4]
 8006936:	6014      	str	r4, [r2, #0]
 8006938:	4628      	mov	r0, r5
 800693a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800693e:	f000 b8a2 	b.w	8006a86 <__malloc_unlock>
 8006942:	42a3      	cmp	r3, r4
 8006944:	d90c      	bls.n	8006960 <_free_r+0x4c>
 8006946:	6821      	ldr	r1, [r4, #0]
 8006948:	1862      	adds	r2, r4, r1
 800694a:	4293      	cmp	r3, r2
 800694c:	bf04      	itt	eq
 800694e:	681a      	ldreq	r2, [r3, #0]
 8006950:	685b      	ldreq	r3, [r3, #4]
 8006952:	6063      	str	r3, [r4, #4]
 8006954:	bf04      	itt	eq
 8006956:	1852      	addeq	r2, r2, r1
 8006958:	6022      	streq	r2, [r4, #0]
 800695a:	6004      	str	r4, [r0, #0]
 800695c:	e7ec      	b.n	8006938 <_free_r+0x24>
 800695e:	4613      	mov	r3, r2
 8006960:	685a      	ldr	r2, [r3, #4]
 8006962:	b10a      	cbz	r2, 8006968 <_free_r+0x54>
 8006964:	42a2      	cmp	r2, r4
 8006966:	d9fa      	bls.n	800695e <_free_r+0x4a>
 8006968:	6819      	ldr	r1, [r3, #0]
 800696a:	1858      	adds	r0, r3, r1
 800696c:	42a0      	cmp	r0, r4
 800696e:	d10b      	bne.n	8006988 <_free_r+0x74>
 8006970:	6820      	ldr	r0, [r4, #0]
 8006972:	4401      	add	r1, r0
 8006974:	1858      	adds	r0, r3, r1
 8006976:	4282      	cmp	r2, r0
 8006978:	6019      	str	r1, [r3, #0]
 800697a:	d1dd      	bne.n	8006938 <_free_r+0x24>
 800697c:	6810      	ldr	r0, [r2, #0]
 800697e:	6852      	ldr	r2, [r2, #4]
 8006980:	605a      	str	r2, [r3, #4]
 8006982:	4401      	add	r1, r0
 8006984:	6019      	str	r1, [r3, #0]
 8006986:	e7d7      	b.n	8006938 <_free_r+0x24>
 8006988:	d902      	bls.n	8006990 <_free_r+0x7c>
 800698a:	230c      	movs	r3, #12
 800698c:	602b      	str	r3, [r5, #0]
 800698e:	e7d3      	b.n	8006938 <_free_r+0x24>
 8006990:	6820      	ldr	r0, [r4, #0]
 8006992:	1821      	adds	r1, r4, r0
 8006994:	428a      	cmp	r2, r1
 8006996:	bf04      	itt	eq
 8006998:	6811      	ldreq	r1, [r2, #0]
 800699a:	6852      	ldreq	r2, [r2, #4]
 800699c:	6062      	str	r2, [r4, #4]
 800699e:	bf04      	itt	eq
 80069a0:	1809      	addeq	r1, r1, r0
 80069a2:	6021      	streq	r1, [r4, #0]
 80069a4:	605c      	str	r4, [r3, #4]
 80069a6:	e7c7      	b.n	8006938 <_free_r+0x24>
 80069a8:	bd38      	pop	{r3, r4, r5, pc}
 80069aa:	bf00      	nop
 80069ac:	20000268 	.word	0x20000268

080069b0 <_malloc_r>:
 80069b0:	b570      	push	{r4, r5, r6, lr}
 80069b2:	1ccd      	adds	r5, r1, #3
 80069b4:	f025 0503 	bic.w	r5, r5, #3
 80069b8:	3508      	adds	r5, #8
 80069ba:	2d0c      	cmp	r5, #12
 80069bc:	bf38      	it	cc
 80069be:	250c      	movcc	r5, #12
 80069c0:	2d00      	cmp	r5, #0
 80069c2:	4606      	mov	r6, r0
 80069c4:	db01      	blt.n	80069ca <_malloc_r+0x1a>
 80069c6:	42a9      	cmp	r1, r5
 80069c8:	d903      	bls.n	80069d2 <_malloc_r+0x22>
 80069ca:	230c      	movs	r3, #12
 80069cc:	6033      	str	r3, [r6, #0]
 80069ce:	2000      	movs	r0, #0
 80069d0:	bd70      	pop	{r4, r5, r6, pc}
 80069d2:	f000 f857 	bl	8006a84 <__malloc_lock>
 80069d6:	4a21      	ldr	r2, [pc, #132]	; (8006a5c <_malloc_r+0xac>)
 80069d8:	6814      	ldr	r4, [r2, #0]
 80069da:	4621      	mov	r1, r4
 80069dc:	b991      	cbnz	r1, 8006a04 <_malloc_r+0x54>
 80069de:	4c20      	ldr	r4, [pc, #128]	; (8006a60 <_malloc_r+0xb0>)
 80069e0:	6823      	ldr	r3, [r4, #0]
 80069e2:	b91b      	cbnz	r3, 80069ec <_malloc_r+0x3c>
 80069e4:	4630      	mov	r0, r6
 80069e6:	f000 f83d 	bl	8006a64 <_sbrk_r>
 80069ea:	6020      	str	r0, [r4, #0]
 80069ec:	4629      	mov	r1, r5
 80069ee:	4630      	mov	r0, r6
 80069f0:	f000 f838 	bl	8006a64 <_sbrk_r>
 80069f4:	1c43      	adds	r3, r0, #1
 80069f6:	d124      	bne.n	8006a42 <_malloc_r+0x92>
 80069f8:	230c      	movs	r3, #12
 80069fa:	6033      	str	r3, [r6, #0]
 80069fc:	4630      	mov	r0, r6
 80069fe:	f000 f842 	bl	8006a86 <__malloc_unlock>
 8006a02:	e7e4      	b.n	80069ce <_malloc_r+0x1e>
 8006a04:	680b      	ldr	r3, [r1, #0]
 8006a06:	1b5b      	subs	r3, r3, r5
 8006a08:	d418      	bmi.n	8006a3c <_malloc_r+0x8c>
 8006a0a:	2b0b      	cmp	r3, #11
 8006a0c:	d90f      	bls.n	8006a2e <_malloc_r+0x7e>
 8006a0e:	600b      	str	r3, [r1, #0]
 8006a10:	50cd      	str	r5, [r1, r3]
 8006a12:	18cc      	adds	r4, r1, r3
 8006a14:	4630      	mov	r0, r6
 8006a16:	f000 f836 	bl	8006a86 <__malloc_unlock>
 8006a1a:	f104 000b 	add.w	r0, r4, #11
 8006a1e:	1d23      	adds	r3, r4, #4
 8006a20:	f020 0007 	bic.w	r0, r0, #7
 8006a24:	1ac3      	subs	r3, r0, r3
 8006a26:	d0d3      	beq.n	80069d0 <_malloc_r+0x20>
 8006a28:	425a      	negs	r2, r3
 8006a2a:	50e2      	str	r2, [r4, r3]
 8006a2c:	e7d0      	b.n	80069d0 <_malloc_r+0x20>
 8006a2e:	428c      	cmp	r4, r1
 8006a30:	684b      	ldr	r3, [r1, #4]
 8006a32:	bf16      	itet	ne
 8006a34:	6063      	strne	r3, [r4, #4]
 8006a36:	6013      	streq	r3, [r2, #0]
 8006a38:	460c      	movne	r4, r1
 8006a3a:	e7eb      	b.n	8006a14 <_malloc_r+0x64>
 8006a3c:	460c      	mov	r4, r1
 8006a3e:	6849      	ldr	r1, [r1, #4]
 8006a40:	e7cc      	b.n	80069dc <_malloc_r+0x2c>
 8006a42:	1cc4      	adds	r4, r0, #3
 8006a44:	f024 0403 	bic.w	r4, r4, #3
 8006a48:	42a0      	cmp	r0, r4
 8006a4a:	d005      	beq.n	8006a58 <_malloc_r+0xa8>
 8006a4c:	1a21      	subs	r1, r4, r0
 8006a4e:	4630      	mov	r0, r6
 8006a50:	f000 f808 	bl	8006a64 <_sbrk_r>
 8006a54:	3001      	adds	r0, #1
 8006a56:	d0cf      	beq.n	80069f8 <_malloc_r+0x48>
 8006a58:	6025      	str	r5, [r4, #0]
 8006a5a:	e7db      	b.n	8006a14 <_malloc_r+0x64>
 8006a5c:	20000268 	.word	0x20000268
 8006a60:	2000026c 	.word	0x2000026c

08006a64 <_sbrk_r>:
 8006a64:	b538      	push	{r3, r4, r5, lr}
 8006a66:	4c06      	ldr	r4, [pc, #24]	; (8006a80 <_sbrk_r+0x1c>)
 8006a68:	2300      	movs	r3, #0
 8006a6a:	4605      	mov	r5, r0
 8006a6c:	4608      	mov	r0, r1
 8006a6e:	6023      	str	r3, [r4, #0]
 8006a70:	f7fa fbf4 	bl	800125c <_sbrk>
 8006a74:	1c43      	adds	r3, r0, #1
 8006a76:	d102      	bne.n	8006a7e <_sbrk_r+0x1a>
 8006a78:	6823      	ldr	r3, [r4, #0]
 8006a7a:	b103      	cbz	r3, 8006a7e <_sbrk_r+0x1a>
 8006a7c:	602b      	str	r3, [r5, #0]
 8006a7e:	bd38      	pop	{r3, r4, r5, pc}
 8006a80:	20000b4c 	.word	0x20000b4c

08006a84 <__malloc_lock>:
 8006a84:	4770      	bx	lr

08006a86 <__malloc_unlock>:
 8006a86:	4770      	bx	lr

08006a88 <_init>:
 8006a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a8a:	bf00      	nop
 8006a8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a8e:	bc08      	pop	{r3}
 8006a90:	469e      	mov	lr, r3
 8006a92:	4770      	bx	lr

08006a94 <_fini>:
 8006a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a96:	bf00      	nop
 8006a98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a9a:	bc08      	pop	{r3}
 8006a9c:	469e      	mov	lr, r3
 8006a9e:	4770      	bx	lr
